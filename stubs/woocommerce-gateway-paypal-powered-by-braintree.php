<?php

namespace {
    /**
     * The plugin loader class.
     *
     * @since 2.3.0
     */
    class WC_PayPal_Braintree_Loader
    {
        /** minimum PHP version required by this plugin */
        const MINIMUM_PHP_VERSION = '7.3';
        /** minimum WordPress version required by this plugin */
        const MINIMUM_WP_VERSION = '5.6';
        /** minimum WooCommerce version required by this plugin */
        const MINIMUM_WC_VERSION = '6.0';
        /** SkyVerge plugin framework version used by this plugin */
        const FRAMEWORK_VERSION = '5.10.7';
        /** the plugin name, for displaying notices */
        const PLUGIN_NAME = 'Braintree for WooCommerce';
        /** @var \WC_PayPal_Braintree_Loader the singleton instance of the class */
        private static $instance;
        /** @var array the admin notices to add */
        public $notices = array();
        /**
         * Constructs the loader.
         *
         * @since 2.3.0
         */
        protected function __construct()
        {
        }
        /**
         * Cloning instances is forbidden due to singleton pattern.
         *
         * @since 2.3.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances is forbidden due to singleton pattern.
         *
         * @since 2.3.0
         */
        public function __wakeup()
        {
        }
        /**
         * Initializes the plugin.
         *
         * @since 2.0.0
         */
        public function init_plugin()
        {
        }
        /**
         * Loads the base framework classes.
         *
         * @since 2.3.0
         */
        protected function load_framework()
        {
        }
        /**
         * Gets the framework version in namespace form.
         *
         * @since 2.3.0
         *
         * @return string
         */
        protected function get_framework_version_namespace()
        {
        }
        /**
         * Gets the framework version used by this plugin.
         *
         * @since 2.3.0
         *
         * @return string
         */
        protected function get_framework_version()
        {
        }
        /**
         * Checks the server environment and other factors and deactivates plugins as necessary.
         *
         * Based on {@link http://wptavern.com/how-to-prevent-wordpress-plugins-from-activating-on-sites-with-incompatible-hosting-environments}
         *
         * @since 2.3.0
         */
        public function activation_check()
        {
        }
        /**
         * Checks the environment when loading WordPress, just in case the environment changes after activation.
         *
         * @internal
         *
         * @since 2.3.0
         */
        public function check_environment()
        {
        }
        /**
         * Checks the environment for compatibility problems.
         *
         * @since 2.3.0
         *
         * @param bool $during_activation whether this check is during plugin activation
         * @return string|bool the error message if one exists, or false if everything's okay
         */
        public static function get_environment_warning($during_activation = \false)
        {
        }
        /**
         * Adds notices for out-of-date WordPress and/or WooCommerce versions.
         *
         * @internal
         *
         * @since 2.3.0
         */
        public function add_plugin_notices()
        {
        }
        /**
         * Determines if the required plugins are compatible.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function plugins_compatible()
        {
        }
        /**
         * Determines if the WordPress compatible.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_wp_compatible()
        {
        }
        /**
         * Determines if the WooCommerce compatible.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_wc_compatible()
        {
        }
        /**
         * Deactivates the plugin.
         *
         * @since 2.3.0
         */
        protected function deactivate_plugin()
        {
        }
        /**
         * Determines if the server environment is compatible with this plugin.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_environment_compatible()
        {
        }
        /**
         * Gets the message for display when the environment is incompatible with this plugin.
         *
         * @since 2.3.0
         *
         * @return string
         */
        protected function get_environment_message()
        {
        }
        /**
         * Adds an admin notice to be displayed.
         *
         * @since 2.3.0
         *
         * @param string $slug notice slug/ID
         * @param string $class notice HTML class
         * @param string $message notice message
         */
        public function add_admin_notice($slug, $class, $message)
        {
        }
        /**
         * Displays any admin notices added by the plugin loader
         *
         * @internal
         *
         * @since 2.3.0
         */
        public function admin_notices()
        {
        }
        /**
         * Adds the Documentation URI header.
         *
         * @internal
         *
         * @since 2.5.0
         *
         * @param array $headers original plugin headers
         * @return array
         */
        public function add_documentation_header($headers)
        {
        }
        /**
         * Gets the main loader instance.
         *
         * Ensures only one instance can be loaded.
         *
         * @since 2.3.0
         *
         * @return \WC_PayPal_Braintree_Loader
         */
        public static function instance()
        {
        }
        /**
         * Display Warning about Braintree payment method at User delete confirmation screen.
         *
         * @return void
         */
        public function delete_user_warning()
        {
        }
        /**
         * Declare compatibility with High-Performance Order Storage.
         *
         * @since x.x.x
         */
        public function declare_hpos_compatibility()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Handle the payment tokenization related functionality.
     *
     * @since 4.3.0
     */
    class SV_WC_Payment_Gateway_Payment_Tokens_Handler
    {
        /** @var string the gateway environment ID */
        protected $environment_id;
        /** @var array|SV_WC_Payment_Gateway_Payment_Token[] array of cached user id to array of SV_WC_Payment_Gateway_Payment_Token token objects */
        protected $tokens;
        /** @var array cached legacy tokens, by user ID and environment */
        protected $legacy_tokens;
        /** @var SV_WC_Payment_Gateway gateway instance */
        protected $gateway;
        /**
         * Build the class.
         *
         * @since 4.3.0
         *
         * @param SV_WC_Payment_Gateway $gateway payment gateway instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Builds the token object.
         *
         * A factory method to build and return a payment token object for the gateway.
         * Child implementations can override this method to return a custom payment token.
         *
         * From version 5.8.0, this method can accept a core \WC_Payment_Token type as the second argument to read data from.
         *
         * @since 4.3.0
         *
         * @param string $token payment token
         * @param \WC_Payment_Token|array $data {
         *     Payment token data.
         *
         *     @type bool   $default   Optional. Indicates this is the default payment token
         *     @type string $type      Payment type. Either 'credit_card' or 'check'
         *     @type string $last_four Last four digits of account number
         *     @type string $card_type Credit card type (`visa`, `mc`, `amex`, `disc`, `diners`, `jcb`) or `echeck`
         *     @type string $exp_month Optional. Expiration month (credit card only)
         *     @type string $exp_year  Optional. Expiration year (credit card only)
         * }
         * @return SV_WC_Payment_Gateway_Payment_Token payment token
         */
        public function build_token($token, $data)
        {
        }
        /** Handle single tokens **********************************************************************/
        /**
         * Tokenizes the current payment method and adds the standard transaction
         * data to the order post record.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Create_Payment_Token_Response|null $response payment token API response, or null if the request should be made
         * @param string $environment_id optional environment ID, defaults to the current environment
         * @return \WC_Order order object
         * @throws SV_WC_Plugin_Exception on transaction failure
         */
        public function create_token(\WC_Order $order, $response = null, $environment_id = null)
        {
        }
        /**
         * Adds a payment method and token as user meta.
         *
         * @since 1.0.0
         *
         * @param int $user_id user identifier
         * @param SV_WC_Payment_Gateway_Payment_Token $token the token
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return int
         */
        public function add_token($user_id, $token, $environment_id = null)
        {
        }
        /**
         * Returns the payment token object identified by $token from the user
         * identified by $user_id
         *
         * @since 1.0.0
         *
         * @param int $user_id WordPress user identifier, or 0 for guest
         * @param string $token payment token
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return SV_WC_Payment_Gateway_Payment_Token payment token object or null
         */
        public function get_token($user_id, $token, $environment_id = null)
        {
        }
        /**
         * Updates a single token by persisting its data as a core token.
         *
         * @since since 4.0.0
         *
         * @param int $user_id WP user ID
         * @param SV_WC_Payment_Gateway_Payment_Token $token token to update
         * @param string|null $environment_id optional environment ID, defaults to plugin current environment
         * @return string|int updated user meta ID
         */
        public function update_token($user_id, $token, $environment_id = null)
        {
        }
        /**
         * Deletes a credit card token from user meta
         *
         * @since 1.0.0
         *
         * @param int $user_id user identifier
         * @param SV_WC_Payment_Gateway_Payment_Token|string $token the payment token to delete
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return bool|int false if not deleted, updated user meta ID if deleted
         */
        public function remove_token($user_id, $token, $environment_id = null)
        {
        }
        /**
         * Removes a tokenized payment method using the gateway's API.
         *
         * Returns true if the token's local data should be removed.
         *
         * @since 5.8.0
         *
         * @param int $user_id user identifier
         * @param string $environment_id environment id
         * @param SV_WC_Payment_Gateway_Payment_Token $token the payment token to remove
         * @return bool
         */
        private function remove_token_from_gateway($user_id, $environment_id, $token)
        {
        }
        /**
         * Determines if a token's local meta should be deleted based on an API response.
         *
         * @since 5.1.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token payment token object
         * @param SV_WC_Payment_Gateway_API_Response $response API response object
         * @return bool
         */
        public function should_delete_token(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Deletes a payment token from user meta.
         *
         * @since 5.1.0
         *
         * @param int $user_id WordPress user ID
         * @param SV_WC_Payment_Gateway_Payment_Token $token payment token object
         * @param string|null $environment_id gateway environment ID
         * @return bool
         */
        public function delete_token($user_id, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token, $environment_id = null)
        {
        }
        /**
         * Deletes a legacy payment token from user meta.
         *
         * @see SV_WC_Payment_Gateway_Payment_Token::delete()
         *
         * @since 5.8.0
         *
         * @param int $user_id WordPress user ID
         * @param SV_WC_Payment_Gateway_Payment_Token $token payment token object
         * @param string|null $environment_id gateway environment ID
         * @return bool whether the token was deleted from the user meta
         */
        public function delete_legacy_token($user_id, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token, $environment_id = null)
        {
        }
        /**
         * Sets the default token for a user.
         *
         * This is shown as "Default Card" in the frontend and will be auto-selected during checkout.
         *
         * @since 1.0.0
         *
         * @param int $user_id user identifier
         * @param SV_WC_Payment_Gateway_Payment_Token|string $token the token to make default
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return string|bool false if not set, updated user meta ID if set
         */
        public function set_default_token($user_id, $token, $environment_id = null)
        {
        }
        /** Handle all tokens *************************************************************************/
        /**
         * Gets the available payment tokens for a user as an associative array of
         * payment token to SV_WC_Payment_Gateway_Payment_Token
         *
         * @since 1.0.0
         *
         * @param int $user_id WordPress user identifier, or 0 for guest
         * @param array $args optional arguments, can include
         *  	`customer_id` - if not provided, this will be looked up based on $user_id
         *  	`environment_id` - defaults to plugin current environment
         * @return array|SV_WC_Payment_Gateway_Payment_Token[] associative array of string token to SV_WC_Payment_Gateway_Payment_Token object
         */
        public function get_tokens($user_id, $args = array())
        {
        }
        /**
         * Gets token objects from the legacy user meta data store.
         *
         * @since 5.8.0
         *
         * @param int $user_id WordPress user ID
         * @param null|string $environment_id desired environment ID
         * @return SV_WC_Payment_Gateway_Payment_Token[]
         */
        public function get_legacy_tokens($user_id, $environment_id = null)
        {
        }
        /**
         * Updates the given payment tokens for the identified user, in the database.
         *
         * @since 1.0.0
         *
         * @param int $user_id WP user ID
         * @param SV_WC_Payment_Gateway_Payment_Token[] $tokens array of tokens
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return bool
         */
        public function update_tokens($user_id, $tokens, $environment_id = null)
        {
        }
        /**
         * Updates a single legacy token in user meta.
         *
         * @see SV_WC_Payment_Gateway_Payment_Token::save()
         *
         * @since 5.8.0
         *
         * @param int $user_id WP user ID
         * @param SV_WC_Payment_Gateway_Payment_Token $token token to update
         * @param string|null $environment_id optional environment ID, defaults to plugin current environment
         * @param bool $migrated whether the token was migrated to the new datastore
         * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure
         */
        public function update_legacy_token($user_id, $token, $environment_id = null, $migrated = false)
        {
        }
        /** Admin methods *****************************************************************************/
        /**
         * Get the admin token editor instance.
         *
         * @since 4.3.0
         *
         * @return SV_WC_Payment_Gateway_Admin_Payment_Token_Editor
         */
        public function get_token_editor()
        {
        }
        /** Conditional methods ***********************************************************************/
        /**
         * Determines if the identified user has the given payment token
         *
         * @since 1.0.0
         *
         * @param int $user_id WordPress user identifier, or 0 for guest
         * @param string|SV_WC_Payment_Gateway_Payment_Token $token payment token
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return bool
         */
        public function user_has_token($user_id, $token, $environment_id = null)
        {
        }
        /**
         * Determines if the current payment method should be tokenized.
         *
         * Whether requested by customer or otherwise forced. This parameter is passed from
         * the checkout page/payment form.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function should_tokenize()
        {
        }
        /**
         * Determines if tokenization should be forced on the checkout page.
         *
         * This is most useful to force tokenization for a subscription or pre-orders initial transaction.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function tokenization_forced()
        {
        }
        /** Utility methods ***************************************************************************/
        /**
         * Merges remote token data with local tokens.
         *
         * Sometimes local tokens can provide additional detail that's not provided remotely.
         *
         * @since 4.0.0
         *
         * @param array $local_tokens local tokens
         * @param array $remote_tokens remote tokens
         * @return array associative array of string token to SV_WC_Payment_Gateway_Payment_Token objects
         */
        protected function merge_token_data($local_tokens, $remote_tokens)
        {
        }
        /**
         * Returns the attributes that should be used to merge local token data into
         * a remote token.
         *
         * Gateways can override this method to add their own attributes, but must
         * also include the associated get_*() & set_*() methods in the token class.
         *
         * See Authorize.net CIM for an example implementation.
         *
         * @since 4.0.0
         *
         * @return array associative array of string token to SV_WC_Payment_Gateway_Payment_Token objects
         */
        protected function get_merge_attributes()
        {
        }
        /**
         * Gets the payment token transient key for the given user, gateway and environment.
         *
         * Payment token transients can be disabled by using the filter below.
         *
         * @since 4.0.0
         *
         * @param string|int $user_id
         * @return string transient key
         */
        protected function get_transient_key($user_id = null)
        {
        }
        /**
         * Helper method to clear the tokens transient
         *
         * TODO: ideally the transient would make use of actions to clear itself
         * as needed (e.g. when customer IDs are updated/removed), but for now it's
         * only cleared when the tokens are updated. @MR July 2015
         *
         * @since 4.0.0
         *
         * @param int|string $user_id
         */
        public function clear_transient($user_id)
        {
        }
        /**
         * Returns the payment token user meta name for persisting the payment tokens.
         *
         * Defaults to _wc_{gateway id}_payment_tokens for the production environment,
         * and _wc_{gateway id}_payment_tokens_{environment} for any other environment.
         *
         * NOTE: the gateway id, rather than plugin id, is used by default to create
         * the meta key for this setting, because it's assumed that in the case of a
         * plugin having multiple gateways (ie credit card and eCheck) the payment
         * tokens will be distinct between them
         *
         * @since 1.0.0
         *
         * @param string|null $environment_id optional environment id, defaults to plugin current environment
         * @return string payment token user meta name
         */
        public function get_user_meta_name($environment_id = null)
        {
        }
        /**
         * Gets the order note message when a customer saves their payment method
         * to their account
         *
         * @since 4.1.2
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token the payment token being saved
         * @return string
         */
        protected function get_order_note($token)
        {
        }
        /**
         * Returns $tokens in a format suitable for data storage
         *
         * @since 1.0.0
         *
         * @param array $tokens array of SV_WC_Payment_Gateway_Payment_Token tokens
         * @return array data storage version of $tokens
         */
        protected function format_for_db($tokens)
        {
        }
        /**
         * Get the gateway environment ID.
         *
         * @since 4.3.0
         *
         * @return string
         */
        protected function get_environment_id()
        {
        }
        /**
         * Gets the gateway instance.
         *
         * @since 4.3.0
         *
         * @return SV_WC_Payment_Gateway gateway instance
         */
        protected function get_gateway()
        {
        }
        /**
         * Determines whether a user's tokens have been migrated.
         *
         * @since 5.8.0
         *
         * @param int $user_id WordPress user ID
         * @param string|null $environment_id environment ID
         * @return bool
         */
        public function user_legacy_tokens_migrated($user_id, $environment_id = null)
        {
        }
        /**
         * Marks a user as having their tokens migrated.
         *
         * @since 5.8.0
         *
         * @param int $user_id WordPress user ID
         * @param string|null $environment_id environment ID
         */
        public function set_user_legacy_tokens_migrated($user_id, $environment_id = null)
        {
        }
        /**
         * Adds the callback action for woocommerce_payment_token_deleted.
         *
         * @since 5.8.0
         */
        private function add_payment_token_deleted_action()
        {
        }
        /**
         * Removes the callback action for woocommerce_payment_token_deleted.
         *
         * @since 5.8.0
         */
        private function remove_payment_token_deleted_action()
        {
        }
        /**
         * Deletes remote token data and legacy token data when the corresponding core token is deleted.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param int $token_id the ID of a core token
         * @param \WC_Payment_Token $core_token the core token object
         */
        public function payment_token_deleted($token_id, $core_token)
        {
        }
    }
}
namespace {
    /**
     * Braintree payment method handler.
     *
     * Extends the framework payment tokens handler class to provide Braintree-specific functionality.
     *
     * @since 3.2.0
     */
    class WC_Braintree_Payment_Method_Handler extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Tokens_Handler
    {
        /**
         * Gets a payment token instance.
         *
         * @see Framework\SV_WC_Payment_Gateway_Payment_Tokens_Handler::build_token()
         *
         * @since 3.0.0
         *
         * @param string $token token ID
         * @param array|\WC_Payment_Token $data token data or object
         * @return \WC_Braintree_Payment_Method
         */
        public function build_token($token, $data)
        {
        }
        /**
         * Update payment tokens.
         *
         * When retrieving payment methods via the Braintree API, it returns both credit/debit card *and* PayPal methods from a single call.
         * Overriding the core framework update method ensures that PayPal accounts are not saved to the credit card token meta entry, and vice versa.
         *
         * @since 3.0.0
         *
         * @param int $user_id WP user ID
         * @param array $tokens array of tokens
         * @param string $environment_id optional environment id, defaults to plugin current environment
         * @return string updated user meta id
         */
        public function update_tokens($user_id, $tokens, $environment_id = \null)
        {
        }
        /**
         * Gets the order note message when a customer saves their payment method to their account.
         *
         * @since 2.0.1
         *
         * @param Framework\SV_WC_Payment_Gateway_Payment_Token $token the payment token being saved
         * @return string
         */
        protected function get_order_note($token)
        {
        }
        /**
         * Deletes remote token data and legacy token data when the corresponding core token is deleted.
         *
         * This function skip delete the remote token if website is staging.
         *
         * @see https://github.com/woocommerce/woocommerce-gateway-paypal-powered-by-braintree/issues/388
         * @param int               $token_id   the ID of a core token.
         * @param \WC_Payment_Token $core_token the core token object.
         */
        public function payment_token_deleted($token_id, $core_token)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Payment Gateway Framework
     *
     * @since 1.0.0
     */
    abstract class SV_WC_Payment_Gateway extends \WC_Payment_Gateway
    {
        /** Sends through sale and request for funds to be charged to cardholder's credit card. */
        const TRANSACTION_TYPE_CHARGE = 'charge';
        /** Sends through a request for funds to be "reserved" on the cardholder's credit card. A standard authorization is reserved for 2-5 days. Reservation times are determined by cardholder's bank. */
        const TRANSACTION_TYPE_AUTHORIZATION = 'authorization';
        /** The production environment identifier */
        const ENVIRONMENT_PRODUCTION = 'production';
        /** The test environment identifier */
        const ENVIRONMENT_TEST = 'test';
        /** Debug mode log to file */
        const DEBUG_MODE_LOG = 'log';
        /** Debug mode display on checkout */
        const DEBUG_MODE_CHECKOUT = 'checkout';
        /** Debug mode log to file and display on checkout */
        const DEBUG_MODE_BOTH = 'both';
        /** Debug mode disabled */
        const DEBUG_MODE_OFF = 'off';
        /** Gateway which supports direct (XML, REST, SOAP, custom, etc) communication */
        const GATEWAY_TYPE_DIRECT = 'direct';
        /** Gateway which supports redirecting to a gateway server for payment collection, or embedding an iframe on checkout */
        const GATEWAY_TYPE_HOSTED = 'hosted';
        /** Credit card payment type */
        const PAYMENT_TYPE_CREDIT_CARD = 'credit-card';
        /** eCheck payment type */
        const PAYMENT_TYPE_ECHECK = 'echeck';
        /** Gateway with multiple payment options */
        const PAYMENT_TYPE_MULTIPLE = 'multiple';
        /** Bank transfer gateway */
        const PAYMENT_TYPE_BANK_TRANSFER = 'bank_transfer';
        /** Products feature */
        const FEATURE_PRODUCTS = 'products';
        /** Credit card types feature */
        const FEATURE_CARD_TYPES = 'card_types';
        /** Tokenization feature */
        const FEATURE_TOKENIZATION = 'tokenization';
        /** Credit Card charge transaction feature */
        const FEATURE_CREDIT_CARD_CHARGE = 'charge';
        /** Credit Card authorization transaction feature */
        const FEATURE_CREDIT_CARD_AUTHORIZATION = 'authorization';
        /** Credit Card charge virtual-only orders feature */
        const FEATURE_CREDIT_CARD_CHARGE_VIRTUAL = 'charge-virtual';
        /** Credit Card capture charge transaction feature */
        const FEATURE_CREDIT_CARD_CAPTURE = 'capture_charge';
        /** Credit Card partial capture transaction feature */
        const FEATURE_CREDIT_CARD_PARTIAL_CAPTURE = 'partial_capture';
        /** Display detailed customer decline messages on checkout */
        const FEATURE_DETAILED_CUSTOMER_DECLINE_MESSAGES = 'customer_decline_messages';
        /** Refunds feature */
        const FEATURE_REFUNDS = 'refunds';
        /** Voids feature */
        const FEATURE_VOIDS = 'voids';
        /** Payment Form feature */
        const FEATURE_PAYMENT_FORM = 'payment_form';
        /** Customer ID feature */
        const FEATURE_CUSTOMER_ID = 'customer_id';
        /** Add new payment method feature */
        const FEATURE_ADD_PAYMENT_METHOD = 'add_payment_method';
        /** Apple Pay feature */
        const FEATURE_APPLE_PAY = 'apple_pay';
        /** Google Pay feature */
        const FEATURE_GOOGLE_PAY = 'google_pay';
        /** Admin token editor feature */
        const FEATURE_TOKEN_EDITOR = 'token_editor';
        /** Subscriptions integration ID */
        const INTEGRATION_SUBSCRIPTIONS = 'subscriptions';
        /** Pre-orders integration ID */
        const INTEGRATION_PRE_ORDERS = 'pre_orders';
        /** @var SV_WC_Payment_Gateway_Plugin the parent plugin class */
        private $plugin;
        /** @var string payment type, one of 'credit-card' or 'echeck' */
        private $payment_type;
        /** @var array associative array of environment id to display name, defaults to 'production' => 'Production' */
        private $environments;
        /** @var array associative array of card type to display name */
        private $available_card_types;
        /** @var array optional array of currency codes this gateway is allowed for */
        protected $currencies;
        /** @var string configuration option: the transaction environment, one of $this->environments keys */
        private $environment;
        /** @var string configuration option: the type of transaction, whether purchase or authorization, defaults to 'charge' */
        private $transaction_type;
        /** @var string configuration option: whether transactions should always be charged if the order is virtual-only, defaults to 'no' */
        private $charge_virtual_orders;
        /** @var string configuration option: whether orders can be partially captured multiple times */
        private $enable_partial_capture;
        /** @var string configuration option: whether orders are captured when switched to a "paid" status */
        private $enable_paid_capture;
        /** @var array configuration option: card types to show images for */
        private $card_types;
        /** @var string configuration option: indicates whether a Card Security Code field will be presented on checkout, either 'yes' or 'no' */
        private $enable_csc;
        /** @var string configuration option: indicates whether a Card Security Code field will be presented for saved cards at checkout, either 'yes' or 'no' */
        private $enable_token_csc;
        /** @var array configuration option: supported echeck fields, one of 'check_number', 'account_type' */
        private $supported_check_fields;
        /** @var string configuration option: indicates whether tokenization is enabled, either 'yes' or 'no' */
        private $tokenization;
        /** @var string configuration option: indicates whether detailed customer decline messages should be displayed at checkout, either 'yes' or 'no' */
        private $enable_customer_decline_messages;
        /** @var string configuration option: 4 options for debug mode - off, checkout, log, both */
        private $debug_mode;
        /** @var string configuration option: whether to use a sibling gateway's connection/authentication settings */
        private $inherit_settings;
        /** @var array of shared setting names, if any.  This can be used for instance when a single plugin supports both credit card and echeck payments, and the same credentials can be used for both gateways */
        private $shared_settings = array();
        /** @var SV_WC_Payment_Gateway_Payment_Tokens_Handler payment tokens handler instance */
        protected $payment_tokens_handler;
        /** @var Payment_Gateway\Handlers\Capture capture handler instance */
        protected $capture_handler;
        /** @var array of SV_WC_Payment_Gateway_Integration objects for Subscriptions, Pre-Orders, etc. */
        protected $integrations;
        /** @var SV_WC_Payment_Gateway_Payment_Form|null payment form instance */
        protected $payment_form;
        /**
         * Initialize the gateway
         *
         * Args:
         *
         * + `method_title` - string admin method title, ie 'Intuit QBMS', defaults to 'Settings'
         * + `method_description` - string admin method description, defaults to ''
         * + `supports` - array  list of supported gateway features, possible values include:
         *   'products', 'card_types', 'tokenziation', 'charge', 'authorization', 'subscriptions',
         *   'subscription_suspension', 'subscription_cancellation', 'subscription_reactivation',
         *   'subscription_amount_changes', 'subscription_date_changes', 'subscription_payment_method_change',
         *   'customer_decline_messages'
         *   Defaults to 'products', 'charge' (credit-card gateways only)
         * + `payment_type` - string one of 'credit-card' or 'echeck', defaults to 'credit-card'
         * + `card_types` - array  associative array of card type to display name, used if the payment_type is 'credit-card' and the 'card_types' feature is supported.  Defaults to:
         *   'VISA' => 'Visa', 'MC' => 'MasterCard', 'AMEX' => 'American Express', 'DISC' => 'Discover', 'DINERS' => 'Diners', 'JCB' => 'JCB'
         * + `echeck_fields` - array of supported echeck fields, including 'check_number', 'account_type'
         * + `environments` - associative array of environment id to display name, merged with default of 'production' => 'Production'
         * + `currencies` -  array of currency codes this gateway is allowed for, defaults to plugin accepted currencies
         * + `countries` -  array of two-letter country codes this gateway is allowed for, defaults to all
         * + `shared_settings` - array of shared setting names, if any.  This can be used for instance when a single plugin supports both credit card and echeck payments, and the same credentials can be used for both gateways
         *
         * @since 1.0.0
         * @param string $id the gateway id
         * @param SV_WC_Payment_Gateway_Plugin $plugin the parent plugin class
         * @param array $args gateway arguments
         */
        public function __construct($id, $plugin, $args)
        {
        }
        /**
         * Adds the various milestone hooks like "payment processed".
         *
         * @since 5.1.0
         */
        protected function add_milestone_hooks()
        {
        }
        /**
         * Loads the plugin configuration settings
         *
         * @since 1.0.0
         */
        public function load_settings()
        {
        }
        /**
         * Loads any shared settings from sibling gateways.
         *
         * @since 4.5.0
         */
        protected function load_shared_settings()
        {
        }
        /**
         * Gets the IDs of sibling gateways that this gateway can inherit settings from.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_ids_of_gateways_to_inherit_settings_from()
        {
        }
        /**
         * Enqueue the necessary scripts & styles for the gateway, including the
         * payment form assets (if supported) and any gateway-specific assets.
         *
         * @since 1.0.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Enqueue the payment form JS, CSS, and localized
         * JS params
         *
         * @since 4.3.0
         */
        protected function enqueue_payment_form_assets()
        {
        }
        /**
         * Returns an array of JS script params to localize for the
         * payment form JS. Generally used for i18n purposes.
         *
         * @since 4.3.0
         * @return array associative array of param name to value
         */
        protected function get_payment_form_js_localized_script_params()
        {
        }
        /**
         * Enqueue the gateway-specific assets if present, including JS, CSS, and
         * localized script params
         *
         * @since 4.3.0
         */
        protected function enqueue_gateway_assets()
        {
        }
        /**
         * Return the gateway-specifics JS script handle. This is used for:
         *
         * + enqueuing the script
         * + the localized JS script param object name
         *
         * Defaults to 'wc-<plugin ID dasherized>'.
         *
         * @since 4.3.0
         * @return string
         */
        protected function get_gateway_js_handle()
        {
        }
        /**
         * Returns an array of JS script params to localize for the gateway-specific
         * JS. Concrete classes must override this as needed.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_gateway_js_localized_script_params()
        {
        }
        /**
         * Localize a script once. Gateway plugins that have multiple gateways should
         * only have their params localized once.
         *
         * @since 4.3.0
         * @param string $handle script handle to localize
         * @param array $params script params to localize
         * @param string $object_name the localized object name. Defaults to a snake-cased version of $handle
         */
        protected function localize_script($handle, $params, $object_name = '')
        {
        }
        /**
         * Initializes the payment form handler.
         *
         * @since 5.7.0
         */
        protected function maybe_init_payment_form()
        {
        }
        /**
         * Initializes the payment form instance.
         *
         * @since 5.7.0
         *
         * @return SV_WC_Payment_Gateway_Payment_Form
         */
        protected function init_payment_form_instance()
        {
        }
        /**
         * Returns true if on the pay page and this is the currently selected gateway
         *
         * @since 1.0.0
         *
         * @return null|bool true if on pay page and is currently selected gateways, false if on pay page and not the selected gateway, null otherwise
         */
        public function is_pay_page_gateway()
        {
        }
        /**
         * Gets the order button text:
         *
         * Direct gateway: "Place order"
         * Redirect/Hosted gateway: "Continue to Payment"
         *
         * @since 4.0.0
         */
        protected function get_order_button_text()
        {
        }
        /**
         * Adds a default simple pay page handler
         *
         * @since 1.0.0
         */
        protected function add_pay_page_handler()
        {
        }
        /**
         * Render a simple payment page
         *
         * @since 2.1.0
         * @param int $order_id identifies the order
         */
        public function payment_page($order_id)
        {
        }
        /** Payment Form Feature **************************************************/
        /**
         * Returns true if the gateway supports the payment form feature
         *
         * @since 4.0.0
         * @return bool
         */
        public function supports_payment_form()
        {
        }
        /**
         * Render the payment fields
         *
         * @since 4.0.0
         * @see WC_Payment_Gateway::payment_fields()
         * @see SV_WC_Payment_Gateway_Payment_Form class
         */
        public function payment_fields()
        {
        }
        /**
         * Gets the payment form class instance.
         *
         * @since 4.1.2
         *
         * @return SV_WC_Payment_Gateway_Payment_Form|null
         */
        public function get_payment_form_instance()
        {
        }
        /**
         * Get the payment form field defaults, primarily for gateways to override
         * and set dummy credit card/eCheck info when in the test environment
         *
         * @since 4.0.0
         * @return array
         */
        public function get_payment_method_defaults()
        {
        }
        /** Tokenization **************************************************/
        /**
         * Initialize payment tokens handler.
         *
         * @since 5.0.0
         */
        protected function init_payment_tokens_handler()
        {
        }
        /**
         * Gets the payment tokens handler instance.
         *
         * Concrete classes can override this method to return a custom implementation.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Payment_Tokens_Handler
         */
        protected function build_payment_tokens_handler()
        {
        }
        /**
         * Gets the payment tokens handler instance.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Payment_Tokens_Handler
         */
        public function get_payment_tokens_handler()
        {
        }
        /**
         * Determines if tokenization takes place prior to transaction processing.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function tokenize_before_sale()
        {
        }
        /**
         * Determines tokenization takes place during a transaction request.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function tokenize_with_sale()
        {
        }
        /**
         * Determines tokenization takes place after a transaction request.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function tokenize_after_sale()
        {
        }
        /**
         * Determines if the gateway supports the admin token editor feature.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function supports_token_editor()
        {
        }
        /** Integrations Feature **************************************************/
        /**
         * Initializes supported integrations.
         *
         * @since 5.0.0
         */
        public function init_integrations()
        {
        }
        /**
         * Gets an array of available integration objects
         *
         * @since 5.0.0
         * @return array
         */
        public function get_integrations()
        {
        }
        /**
         * Gets the integration object for the given ID.
         *
         * @since 5.0.0
         *
         * @param string $id the integration ID, e.g. subscriptions
         * @return SV_WC_Payment_Gateway_Integration|null
         */
        public function get_integration($id)
        {
        }
        /**
         * Builds the Subscriptions integration class instance.
         *
         * Concrete classes can override this method to return a custom implementation.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Integration_Subscriptions
         */
        protected function build_subscriptions_integration()
        {
        }
        /**
         * Gets the Subscriptions integration class instance.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Integration_Subscriptions|null
         */
        public function get_subscriptions_integration()
        {
        }
        /**
         * Builds the Pre-Orders integration class instance.
         *
         * Concrete classes can override this method to return a custom implementation.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Integration_Pre_Orders
         */
        protected function build_pre_orders_integration()
        {
        }
        /**
         * Gets the Pre-Orders integration class instance.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Integration_Pre_Orders|null
         */
        public function get_pre_orders_integration()
        {
        }
        /**
         * Determines if the gateway supports Subscriptions.
         *
         * A gateway supports Subscriptions if all of the following are true:
         *
         * + Subscriptions is active
         * + tokenization is supported
         * + tokenization is enabled
         *
         * Concrete gateways can override this to conditionally support Subscriptions
         * based on certain settings (e.g. only when CSC is not required, etc.)
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function supports_subscriptions()
        {
        }
        /**
         * Determines if the gateway supports Pre-Orders.
         *
         * A gateway supports Pre-Orders if all of the following are true:
         *
         * + Pre-Orders is active
         * + tokenization is supported
         * + tokenization is enabled
         *
         * Concrete gateways can override this to conditionally support Pre-Orders
         * based on certain settings (e.g. only when CSC is not required, etc.)
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function supports_pre_orders()
        {
        }
        /** Apple Pay Feature *****************************************************/
        /**
         * Determines whether this gateway supports Apple Pay.
         *
         * @since 4.7.0
         *
         * @return bool
         */
        public function supports_apple_pay()
        {
        }
        /**
         * Gets the Apple Pay gateway capabilities.
         *
         * Gateways should override this if they have more or less capabilities than
         * the default. See https://developer.apple.com/reference/applepayjs/paymentrequest/1916123-merchantcapabilities
         * for valid values.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_apple_pay_capabilities()
        {
        }
        /**
         * Gets the currencies supported by Apple Pay.
         *
         * This method should be overwritten by any gateway that needs to restrict the supported currencies.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_apple_pay_currencies()
        {
        }
        /**
         * Adds the Apple Pay payment data to the order object.
         *
         * Gateways should override this to set the appropriate values depending on
         * how their processing API needs to handle the data.
         *
         * @since 4.7.0
         *
         * @param \WC_Order the order object
         * @param SV_WC_Payment_Gateway_Apple_Pay_Payment_Response authorized payment response
         * @return \WC_Order
         */
        public function get_order_for_apple_pay(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay_Payment_Response $response)
        {
        }
        /** Google Pay Feature *****************************************************/
        /**
         * Determines whether this gateway supports Google Pay.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function supports_google_pay()
        {
        }
        /**
         * Gets the currencies supported by Google Pay.
         *
         * This method should be overwritten by any gateway that needs to restrict the supported currencies.
         *
         * @since 5.10.0
         *
         * @return array
         */
        public function get_google_pay_currencies()
        {
        }
        /**
         * Adds the Google Pay payment data to the order object.
         *
         * Gateways should override this to set the appropriate values depending on
         * how their processing API needs to handle the data.
         *
         * @since 5.10.0
         *
         * @param \WC_Order the order object
         * @param mixed|array $response_data authorized payment response data
         * @return \WC_Order
         */
        public function get_order_for_google_pay(\WC_Order $order, $response_data)
        {
        }
        /**
         * Get the default payment method title, which is configurable within the
         * admin and displayed on checkout
         *
         * @since 2.1.0
         * @return string payment method title to show on checkout
         */
        protected function get_default_title()
        {
        }
        /**
         * Get the default payment method description, which is configurable
         * within the admin and displayed on checkout
         *
         * @since 2.1.0
         * @return string payment method description to show on checkout
         */
        protected function get_default_description()
        {
        }
        /**
         * Initialize payment gateway settings fields
         *
         * @since 1.0.0
         * @see WC_Settings_API::init_form_fields()
         */
        public function init_form_fields()
        {
        }
        /**
         * Returns an array of form fields specific for this method.
         *
         * To add environment-dependent fields, include the 'class' form field argument
         * with 'environment-field production-field' where "production" matches a
         * key from the environments member
         *
         * @since 1.0.0
         * @return array of form fields
         */
        protected abstract function get_method_form_fields();
        /**
         * Adds the gateway environment form fields
         *
         * @since 1.0.0
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_environment_form_fields($form_fields)
        {
        }
        /**
         * Adds the optional shared settings toggle element.  The 'shared_settings'
         * optional constructor parameter must have been used in order for shared
         * settings to be supported.
         *
         * @since 1.0.0
         * @see SV_WC_Payment_Gateway::$shared_settings
         * @see SV_WC_Payment_Gateway::$inherit_settings
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_shared_settings_form_fields($form_fields)
        {
        }
        /**
         * Adds the enable Card Security Code form fields
         *
         * @since 1.0.0
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_csc_form_fields($form_fields)
        {
        }
        /**
         * Displays settings page with some additional javascript for hiding conditional fields.
         *
         * @see \WC_Settings_API::admin_options()
         *
         * @since 1.0.0
         */
        public function admin_options()
        {
        }
        /**
         * Checks for proper gateway configuration including:
         *
         * + gateway enabled
         * + correct configuration (gateway specific)
         * + any dependencies met
         * + required currency
         * + required country
         *
         * @since 1.0.0
         * @see WC_Payment_Gateway::is_available()
         * @return true if this gateway is available for checkout, false otherwise
         */
        public function is_available()
        {
        }
        /**
         * Determines whether the gateway is properly configured to perform transactions.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function is_configured()
        {
        }
        /**
         * Returns the gateway icon markup
         *
         * @since 1.0.0
         * @see WC_Payment_Gateway::get_icon()
         * @return string icon markup
         */
        public function get_icon()
        {
        }
        /**
         * Returns the payment method image URL (if any) for the given $type, ie
         * if $type is 'amex' a URL to the american express card icon will be
         * returned.  If $type is 'echeck', a URL to the echeck icon will be
         * returned.
         *
         * @since 1.0.0
         * @param string $type the payment method cc type or name
         * @return string the image URL or null
         */
        public function get_payment_method_image_url($type)
        {
        }
        /**
         * Add payment and transaction information as class members of WC_Order
         * instance.  The standard information that can be added includes:
         *
         * $order->payment_total           - the payment total
         * $order->customer_id             - optional payment gateway customer id (useful for tokenized payments, etc)
         * $order->payment->type           - one of 'credit_card' or 'check'
         * $order->description             - an order description based on the order
         * $order->unique_transaction_ref  - a combination of order number + retry count, should provide a unique value for each transaction attempt
         *
         * Note that not all gateways will necessarily pass or require all of the
         * above.  These represent the most common attributes used among a variety
         * of gateways, it's up to the specific gateway implementation to make use
         * of, or ignore them, or add custom ones by overridding this method.
         *
         * The returned order is expected to be used in a transaction request.
         *
         * @since 1.0.0
         * @param int|\WC_Order $order the order or order ID being processed
         * @return \WC_Order object with payment and transaction information attached
         */
        public function get_order($order)
        {
        }
        /**
         * Completes an order payment.
         *
         * This method marks the order with an appropriate status, and adds a relevant order note.
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Response $response response object
         * @throws \Exception
         */
        protected function complete_payment(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /** Capture Methods ***********************************************************************************************/
        /**
         * Builds the capture handler instance.
         *
         * @since 5.3.0
         */
        public function init_capture_handler()
        {
        }
        /**
         * Gets the capture handler instance.
         *
         * @since 5.3.0
         *
         * @return Payment_Gateway\Handlers\Capture
         */
        public function get_capture_handler()
        {
        }
        /**
         * Gets an order object with payment data added for use in credit card capture transactions.
         *
         * This was intentionally not moved to the capture handler since we'll likely be refactoring how this information is
         * set in the future, and plenty of gateways override it.
         *
         * @since 4.5.0
         *
         * @param \WC_Order|int $order the order being processed
         * @param float|null $amount amount to capture or null for the full order amount
         * @return \WC_Order
         */
        public function get_order_for_capture($order, $amount = null)
        {
        }
        /** Refund feature ********************************************************/
        /**
         * Returns true if this is gateway that supports refunds
         *
         * @since 3.1.0
         * @return boolean true if the gateway supports refunds
         */
        public function supports_refunds()
        {
        }
        /**
         * Processes a refund.
         *
         * @since 3.1.0
         *
         * @param int $order_id order being refunded
         * @param float $amount refund amount
         * @param string $reason user-entered reason text for refund
         * @return bool|\WP_Error true on success, or a WP_Error object on failure/error
         */
        public function process_refund($order_id, $amount = null, $reason = '')
        {
        }
        /**
         * Add refund information as class members of WC_Order
         * instance for use in refund transactions.  Standard information includes:
         *
         * $order->refund->amount = refund amount
         * $order->refund->reason = user-entered reason text for the refund
         * $order->refund->trans_id = the ID of the original payment transaction for the order
         *
         * Payment gateway implementations can override this to add their own
         * refund-specific data
         *
         * @since 3.1.0
         *
         * @param \WC_Order|int $order order being processed
         * @param float $amount refund amount
         * @param string $reason optional refund reason text
         * @return \WC_Order|\WP_Error object with refund information attached
         */
        protected function get_order_for_refund($order, $amount, $reason)
        {
        }
        /**
         * Adds the standard refund transaction data to the order.
         *
         * Note that refunds can be performed multiple times for a single order so
         * transaction IDs keys are not unique
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response transaction response
         */
        protected function add_refund_data(\WC_Order $order, $response)
        {
        }
        /**
         * Adds any gateway-specific data to the order after a refund is performed.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response the transaction response
         */
        protected function add_payment_gateway_refund_data(\WC_Order $order, $response)
        {
        }
        /**
         * Adds an order note with the amount and (optional) refund transaction ID.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Response $response transaction response
         */
        protected function add_refund_order_note(\WC_Order $order, $response)
        {
        }
        /**
         * Builds the WP_Error object for a failed refund.
         *
         * @since 3.1.0
         *
         * @param int|string $error_code error code
         * @param string $error_message error message
         * @return \WP_Error suitable for returning from the process_refund() method
         */
        protected function get_refund_failed_wp_error($error_code, $error_message)
        {
        }
        /**
         * Mark an order as refunded. This should only be used when the full order
         * amount has been refunded.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order order object
         */
        public function mark_order_as_refunded($order)
        {
        }
        /** Void feature ********************************************************/
        /**
         * Returns true if this is gateway that supports voids
         *
         * @since 3.1.0
         * @return boolean true if the gateway supports voids
         */
        public function supports_voids()
        {
        }
        /**
         * Allow gateways to void an order that was attempted to be refunded. This is
         * particularly useful for gateways that can void an authorized & captured
         * charge that has not yet settled (e.g. Authorize.net AIM/CIM)
         *
         * @since 4.0.0
         *
         * @param \WC_Order $order order
         * @param SV_WC_Payment_Gateway_API_Response $response refund response
         * @return boolean true if a void should be performed for the given order/response
         */
        protected function maybe_void_instead_of_refund($order, $response)
        {
        }
        /**
         * Processes a void order.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order order object (with refund class member already added)
         * @return bool|\WP_Error true on success, or a WP_Error object on failure/error
         */
        protected function process_void(\WC_Order $order)
        {
        }
        /**
         * Adds the standard void transaction data to the order.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response transaction response
         */
        protected function add_void_data(\WC_Order $order, $response)
        {
        }
        /**
         * Adds any gateway-specific data to the order after a void is performed.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response the transaction response
         */
        protected function add_payment_gateway_void_data(\WC_Order $order, $response)
        {
        }
        /**
         * Builds the WP_Error object for a failed void.
         *
         * @since 3.1.0
         *
         * @param int|string $error_code error code
         * @param string $error_message error message
         * @return \WP_Error suitable for returning from the process_refund() method
         */
        protected function get_void_failed_wp_error($error_code, $error_message)
        {
        }
        /**
         * Marks an order as voided.
         *
         * Because WC has no status for "void", we use refunded.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Response $response object
         */
        public function mark_order_as_voided($order, $response)
        {
        }
        /**
         * Maybe change the order status for a voided order to cancelled
         *
         * @hooked woocommerce_order_fully_refunded_status filter
         *
         * @see SV_WC_Payment_Gateway::mark_order_as_voided()
         * @since 4.0.0
         * @param string $order_status default order status for fully refunded orders
         * @param int $order_id order ID
         * @return string 'cancelled'
         */
        public function maybe_cancel_voided_order($order_status, $order_id)
        {
        }
        /**
         * Returns the $order object with a unique transaction ref member added.
         *
         * @since 2.2.0
         *
         * @param \WC_Order $order the order object
         * @return \WC_Order order object with member named unique_transaction_ref
         */
        protected function get_order_with_unique_transaction_ref($order)
        {
        }
        /**
         * Called after an unsuccessful transaction attempt.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @param SV_WC_Payment_Gateway_API_Response $response the transaction response
         * @return false
         */
        protected function do_transaction_failed_result(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Adds the standard transaction data to the order.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response|null $response optional transaction response
         */
        public function add_transaction_data($order, $response = null)
        {
        }
        /**
         * Adds any gateway-specific transaction data to the order.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Customer_Response $response the transaction response
         */
        public function add_payment_gateway_transaction_data($order, $response)
        {
        }
        /**
         * Add customer data to an order/user if the gateway supports the customer ID
         * response
         *
         * @since 4.0.0
         *
         * @param \WC_Order $order order
         * @param SV_WC_Payment_Gateway_API_Customer_Response $response
         */
        protected function add_customer_data($order, $response = null)
        {
        }
        /**
         * Gets the order note message for approved credit card transactions.
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Response $response response object
         * @return string
         * @throws \Exception
         */
        public function get_credit_card_transaction_approved_message(\WC_Order $order, $response)
        {
        }
        /**
         * Gets the order note message for approved eCheck transactions.
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Response $response response object
         * @return string
         */
        public function get_echeck_transaction_approved_message(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Marks the given order as 'on-hold', set an order note and display a message to the customer.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @param string $message a message to display within the order note
         * @param SV_WC_Payment_Gateway_API_Response $response optional, the transaction response object
         */
        public function mark_order_as_held($order, $message, $response = null)
        {
        }
        /**
         * Maybe render custom order received text on the thank you page when
         * an order is held
         *
         * If detailed customer decline messages are enabled, this message may
         * additionally include more detailed information.
         *
         * @since 4.0.0
         *
         * @param string $text order received text
         * @param \WC_Order|null $order order object
         * @return string
         */
        public function maybe_render_held_order_received_text($text, $order)
        {
        }
        /**
         * Marks the given order as failed and set the order note.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @param string $error_message a message to display inside the "Payment Failed" order note
         * @param SV_WC_Payment_Gateway_API_Response optional $response the transaction response object
         */
        public function mark_order_as_failed($order, $error_message, $response = null)
        {
        }
        /**
         * Marks the given order as cancelled and set the order note.
         *
         * @since 2.1.0
         *
         * @param \WC_Order $order the order
         * @param string $message a message to display inside the "Payment Cancelled" order note
         * @param SV_WC_Payment_Gateway_API_Response optional $response the transaction response object
         */
        public function mark_order_as_cancelled($order, $message, $response = null)
        {
        }
        /** Customer ID Feature  **************************************************/
        /**
         * Returns true if this is gateway that supports gateway customer IDs
         *
         * @since 4.0.0
         * @return boolean true if the gateway supports gateway customer IDs
         */
        public function supports_customer_id()
        {
        }
        /**
         * Gets/sets the payment gateway customer id.
         *
         * This defaults to wc-{user id} and retrieves/stores to the user meta named by get_customer_id_user_meta_name()
         * This can be overridden for gateways that use some other value, or made to return false for gateways that don't support a customer id.
         * @see SV_WC_Payment_Gateway::get_customer_id_user_meta_name()
         *
         * @since 1.0.0
         *
         * @param int $user_id wordpress user identifier
         * @param array $args optional additional arguments which can include: environment_id, autocreate (true/false), and order
         * @return string payment gateway customer id
         */
        public function get_customer_id($user_id, $args = [])
        {
        }
        /**
         * Updates the payment gateway customer id for the given $environment, or for the plugin current environment.
         *
         * @see SV_WC_Payment_Gateway::get_customer_id()
         *
         * @since 1.0.0
         *
         * @param int $user_id WP user ID
         * @param string $customer_id payment gateway customer id
         * @param string $environment_id optional environment id, defaults to current environment
         * @return false|int false if no change was made (if the new value was the same as previous value) or if the update failed, meta id if the value was different and the update a success
         */
        public function update_customer_id($user_id, $customer_id, $environment_id = null)
        {
        }
        /**
         * Removes the payment gateway customer id for the given $environment, or for the plugin current environment.
         *
         * @since 4.0.0
         *
         * @param int $user_id WP user ID
         * @param string $environment_id optional environment id, defaults to current environment
         * @return bool success
         */
        public function remove_customer_id($user_id, $environment_id = null)
        {
        }
        /**
         * Gets a payment gateway customer id for a guest customer.
         *
         * This defaults to wc-guest-{order id} but can be overridden for gateways that use some other value, or made to return false for gateways that don't support a customer id.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order order object
         * @return string payment gateway guest customer id
         */
        public function get_guest_customer_id(\WC_Order $order)
        {
        }
        /**
         * Returns the payment gateway customer id user meta name for persisting the
         * gateway customer id.  Defaults to wc_{plugin id}_customer_id for the
         * production environment and wc_{plugin id}_customer_id_{environment}
         * for other environments.  A particular environment can be passed,
         * otherwise this will default to the plugin current environment.
         *
         * This can be overridden and made to return false for gateways that don't
         * support a customer id.
         *
         * NOTE: the plugin id, rather than gateway id, is used by default to create
         * the meta key for this setting, because it's assumed that in the case of a
         * plugin having multiple gateways (ie credit card and eCheck) the customer
         * id will be the same between them.
         *
         * @since 1.0.0
         *
         * @param string $environment_id optional environment id, defaults to plugin current environment
         * @return string payment gateway customer id user meta name
         */
        public function get_customer_id_user_meta_name($environment_id = null)
        {
        }
        /** Authorization/Charge feature ******************************************/
        /**
         * Returns true if this is a credit card gateway which supports
         * authorization transactions
         *
         * @since 1.0.0
         * @return boolean true if the gateway supports authorization
         */
        public function supports_credit_card_authorization()
        {
        }
        /**
         * Returns true if this is a credit card gateway which supports
         * charge transactions
         *
         * @since 1.0.0
         * @return boolean true if the gateway supports charges
         */
        public function supports_credit_card_charge()
        {
        }
        /**
         * Determines if this is a credit card gateway that supports charging virtual-only orders.
         *
         * @since 4.5.0
         * @return bool
         */
        public function supports_credit_card_charge_virtual()
        {
        }
        /**
         * Returns true if the gateway supports capturing a charge
         *
         * @since 3.1.0
         * @return boolean true if the gateway supports capturing a charge
         */
        public function supports_credit_card_capture()
        {
        }
        /**
         * Determines if the gateway supports capturing a partial charge.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function supports_credit_card_partial_capture()
        {
        }
        /**
         * Adds any credit card authorization/charge admin fields, allowing the
         * administrator to choose between performing authorizations or charges
         *
         * @since 1.0.0
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_authorization_charge_form_fields($form_fields)
        {
        }
        /**
         * Return the authorization time window in hours. An authorization is considered
         * expired if it is older than this.
         *
         * 30 days (720 hours) is the standard authorization window. Individual gateways
         * can override this as necessary.
         *
         * @since 2.2.0
         * @return int hours
         */
        public function get_authorization_time_window()
        {
        }
        /**
         * Determines if a credit card transaction should result in a charge.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order Optional. The order being charged
         * @return bool
         */
        public function perform_credit_card_charge(\WC_Order $order = null)
        {
        }
        /**
         * Determines if a credit card transaction should result in an authorization.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order Optional. The order being authorized
         * @return bool
         */
        public function perform_credit_card_authorization(\WC_Order $order = null)
        {
        }
        /**
         * Determines if partial capture is enabled.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function is_partial_capture_enabled()
        {
        }
        /**
         * Determines if orders should be captured when switched to a "paid" status.
         *
         * @since 5.0.1
         *
         * @return bool
         */
        public function is_paid_capture_enabled()
        {
        }
        /** Add Payment Method feature ********************************************/
        /**
         * Determines if the gateway supports the add payment method feature.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function supports_add_payment_method()
        {
        }
        // TODO: generalize the direct methods
        /** Card Types feature ******************************************************/
        /**
         * Returns true if the gateway supports card_types: allows the admin to
         * configure card type icons to display at checkout
         *
         * @since 1.0.0
         * @return boolean true if the gateway supports card_types
         */
        public function supports_card_types()
        {
        }
        /**
         * Returns the array of accepted card types if this is a credit card gateway
         * that supports card types.  Return format is 'VISA', 'MC', 'AMEX', etc
         *
         * @since 1.0.0
         * @see get_available_card_types()
         * @return array of accepted card types, ie 'VISA', 'MC', 'AMEX', etc
         */
        public function get_card_types()
        {
        }
        /**
         * Adds any card types form fields, allowing the admin to configure the card
         * types icons displayed during checkout
         *
         * @since 1.0.0
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_card_types_form_fields($form_fields)
        {
        }
        /**
         * Returns available card types, ie 'VISA' => 'Visa', 'MC' => 'MasterCard', etc
         *
         * @since 1.0.0
         * @return array associative array of card type to display name
         */
        public function get_available_card_types()
        {
        }
        /** Tokenization feature **************************************************/
        /**
         * Returns true if the gateway supports tokenization
         *
         * @since 1.0.0
         * @return boolean true if the gateway supports tokenization
         */
        public function supports_tokenization()
        {
        }
        /**
         * Returns true if tokenization is enabled
         *
         * @since 1.0.0
         * @return boolean true if tokenization is enabled
         */
        public function tokenization_enabled()
        {
        }
        /**
         * Adds any tokenization form fields for the settings page
         *
         * @since 1.0.0
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_tokenization_form_fields($form_fields)
        {
        }
        /** Helper methods ******************************************************/
        /**
         * Safely gets and trims data from $_POST
         *
         * @since 1.0.0
         * @deprecated 5.5.0
         *
         * @param string $key array key to get from $_POST array
         * @return string value from $_POST or blank string if $_POST[ $key ] is not set
         */
        protected function get_post($key)
        {
        }
        /**
         * Safely gets and trims data from $_REQUEST.
         *
         * @since 1.0.0
         * @deprecated 5.5.0
         *
         * @param string $key array key to get from $_REQUEST array
         * @return string value from $_REQUEST or blank string if $_REQUEST[ $key ] is not set
         */
        protected function get_request($key)
        {
        }
        /**
         * Add API request logging for the gateway. The main plugin class typically handles this, but the payment
         * gateway plugin class no-ops the method so each gateway's requests can be logged individually (e.g. credit card &
         * eCheck) and make use of the payment gateway-specific add_debug_message() method
         *
         * @since 2.2.0
         * @see SV_WC_Plugin::add_api_request_logging()
         */
        public function add_api_request_logging()
        {
        }
        /**
         * Log gateway API requests/responses
         *
         * @since 2.2.0
         * @param array $request request data, see SV_WC_API_Base::broadcast_request() for format
         * @param array $response response data
         */
        public function log_api_request($request, $response)
        {
        }
        /**
         * Adds debug messages to the page as a WC message/error, and/or to the WC Error log
         *
         * @since 1.0.0
         * @param string $message message to add
         * @param string $type how to add the message, options are:
         *     'message' (styled as WC message), 'error' (styled as WC Error)
         */
        public function add_debug_message($message, $type = 'message')
        {
        }
        /**
         * Gets the payment currency, either from current order or WC settings.
         *
         * @since 4.1.0
         *
         * @return string three-letter currency code
         */
        protected function get_payment_currency()
        {
        }
        /**
         * Determines if a given currency is accepted by this gateway.
         *
         * @since 2.1.0
         *
         * @param string $currency optional three-letter currency code, defaults to order currency (if available) or currently configured WooCommerce currency
         * @return bool
         */
        public function currency_is_accepted($currency = null)
        {
        }
        /**
         * Returns true if the given order needs shipping, false otherwise.  This
         * is based on the WooCommerce core Cart::needs_shipping()
         *
         * @since 2.2.0
         * @param \WC_Order $order
         * @return boolean true if $order needs shipping, false otherwise
         */
        protected function order_needs_shipping($order)
        {
        }
        /** Order Meta helper methods *********************************************/
        /**
         * Adds order meta data.
         *
         * @since 2.2.0
         *
         * @param \WC_Order|int the order to add meta to
         * @param string $key meta key (already prefixed with gateway ID)
         * @param mixed $value meta value
         * @param bool $unique whether the meta value should be unique
         * @return bool success
         */
        public function add_order_meta($order, $key, $value, $unique = false)
        {
        }
        /**
         * Gets order meta data.
         *
         * @since 2.2.0
         *
         * @param \WC_Order|int the order to get meta for
         * @param string $key meta key
         * @return false|mixed
         */
        public function get_order_meta($order, $key)
        {
        }
        /**
         * Updates order meta data.
         *
         * @since 2.2.0
         *
         * @param \WC_Order|int the order to update meta for
         * @param string $key meta key
         * @param mixed $value meta value
         * @return bool success
         */
        public function update_order_meta($order, $key, $value)
        {
        }
        /**
         * Delete order meta data.
         *
         * @since 2.2.0
         * @param \WC_Order|int the order to delete meta for
         * @param string $key meta key
         * @return bool success
         */
        public function delete_order_meta($order, $key)
        {
        }
        /**
         * Gets the order meta prefixed used for the *_order_meta() methods
         *
         * Defaults to `_wc_{gateway_id}_`
         *
         * @since 2.2.0
         *
         * @return string
         */
        public function get_order_meta_prefix()
        {
        }
        /** Getters ******************************************************/
        /**
         * Returns the payment gateway id
         *
         * @since 1.0.0
         * @see WC_Payment_Gateway::$id
         * @return string payment gateway id
         */
        public function get_id()
        {
        }
        /**
         * Returns the payment gateway id with dashes in place of underscores, and
         * appropriate for use in frontend element names, classes and ids
         *
         * @since 1.0.0
         * @return string payment gateway id with dashes in place of underscores
         */
        public function get_id_dasherized()
        {
        }
        /**
         * Returns the parent plugin object
         *
         * @since 1.0.0
         *
         * @return SV_WC_Payment_Gateway_Plugin the parent plugin object
         */
        public function get_plugin()
        {
        }
        /**
         * Returns the admin method title.  This should be the gateway name, ie
         * 'Intuit QBMS'
         *
         * @since 1.0.0
         * @see WC_Settings_API::$method_title
         * @return string method title
         */
        public function get_method_title()
        {
        }
        /**
         * Determines if the Card Security Code (CVV) field should be used at checkout.
         *
         * @since 1.0.0
         * @return bool
         */
        public function csc_enabled()
        {
        }
        /**
         * Determines if the Card Security Code (CVV) field should be used for saved cards at checkout.
         *
         * @since 5.0.0
         * @return bool
         */
        public function csc_enabled_for_tokens()
        {
        }
        /**
         * Determines if the Card Security Code (CVV) field should be required at checkout.
         *
         * @since 4.5.0
         * @return bool
         */
        public function csc_required()
        {
        }
        /**
         * Determines if the gateway supports sharing settings with sibling gateways.
         *
         * @since 4.5.0
         * @return bool
         */
        public function share_settings()
        {
        }
        /**
         * Determines if settings should be inherited for this gateway.
         *
         * @since 1.0.0
         * @return bool
         */
        public function inherit_settings()
        {
        }
        /**
         * Returns an array of two-letter country codes this gateway is allowed for, defaults to all
         *
         * @since 2.2.0
         * @see WC_Payment_Gateway::$countries
         * @return array of two-letter country codes this gateway is allowed for, defaults to all
         */
        public function get_available_countries()
        {
        }
        /**
         * Add support for the named feature or features
         *
         * @since 1.0.0
         * @param string|array $feature the feature name or names supported by this gateway
         */
        public function add_support($feature)
        {
        }
        /**
         * Remove support for the named feature or features
         *
         * @since 4.1.0
         * @param string|array $feature feature name or names not supported by this gateway
         */
        public function remove_support($feature)
        {
        }
        /**
         * Set all features supported
         *
         * @since 1.0.0
         * @param array $features array of supported feature names
         */
        public function set_supports($features)
        {
        }
        /**
         * Returns true if this echeck gateway supports
         *
         * @since 1.0.0
         * @param string $field_name check gateway field name, includes 'check_number', 'account_type'
         * @return boolean true if this check gateway supports the named field
         */
        public function supports_check_field($field_name)
        {
        }
        /**
         * Gets the set of environments supported by this gateway.  All gateways
         * support at least the production environment
         *
         * @since 1.0.0
         * @return array associative array of environment id to name supported by this gateway
         */
        public function get_environments()
        {
        }
        /**
         * Returns the environment setting, one of the $environments keys, ie
         * 'production'
         *
         * @since 1.0.0
         * @return string the configured environment id
         */
        public function get_environment()
        {
        }
        /**
         * Get the configured environment's display name.
         *
         * @since 4.3.0
         * @return string The configured environment name
         */
        public function get_environment_name()
        {
        }
        /**
         * Returns true if the current environment is $environment_id.
         *
         * @since 1.0.0
         *
         * @param string|mixed $environment_id
         * @return bool
         */
        public function is_environment($environment_id)
        {
        }
        /**
         * Returns true if the current gateway environment is configured to
         * 'production'.  All gateways have at least the production environment
         *
         * @since 1.0.0
         * @param string $environment_id optional environment id to check, otherwise defaults to the gateway current environment
         * @return boolean true if $environment_id (if non-null) or otherwise the current environment is production
         */
        public function is_production_environment($environment_id = null)
        {
        }
        /**
         * Returns true if the current gateway environment is configured to 'test'
         *
         * @since 2.1.0
         * @param string $environment_id optional environment id to check, otherwise defaults to the gateway current environment
         * @return boolean true if $environment_id (if non-null) or otherwise the current environment is test
         */
        public function is_test_environment($environment_id = null)
        {
        }
        /**
         * Returns true if the gateway is enabled.  This has nothing to do with
         * whether the gateway is properly configured or functional.
         *
         * @since 2.1.0
         * @see WC_Payment_Gateway::$enabled
         * @return boolean true if the gateway is enabled
         */
        public function is_enabled()
        {
        }
        /**
         * Returns true if detailed decline messages should be displayed to
         * customers on checkout when available, rather than a single generic
         * decline message
         *
         * @since 2.2.0
         * @see SV_WC_Payment_Gateway_API_Response_Message_Helper
         * @see SV_WC_Payment_Gateway_API_Response::get_user_message()
         * @return boolean true if detailed decline messages should be displayed
         *         on checkout
         */
        public function is_detailed_customer_decline_messages_enabled()
        {
        }
        /**
         * Returns the set of accepted currencies, or empty array if all currencies
         * are accepted by this gateway
         *
         * @since 2.1.0
         * @return array of currencies accepted by this gateway
         */
        public function get_accepted_currencies()
        {
        }
        /**
         * Returns true if all debugging is disabled
         *
         * @since 1.0.0
         * @return boolean if all debuging is disabled
         */
        public function debug_off()
        {
        }
        /**
         * Returns true if debug logging is enabled
         *
         * @since 1.0.0
         * @return boolean if debug logging is enabled
         */
        public function debug_log()
        {
        }
        /**
         * Returns true if checkout debugging is enabled.  This will cause debugging
         * statements to be displayed on the checkout/pay pages
         *
         * @since 1.0.0
         * @return boolean if checkout debugging is enabled
         */
        public function debug_checkout()
        {
        }
        /**
         * Returns true if this is a direct type gateway
         *
         * @since 1.0.0
         * @return boolean if this is a direct payment gateway
         */
        public function is_direct_gateway()
        {
        }
        /**
         * Returns true if this is a hosted type gateway
         *
         * @since 1.0.0
         * @return boolean if this is a hosted IPN payment gateway
         */
        public function is_hosted_gateway()
        {
        }
        /**
         * Returns the payment type for this gateway
         *
         * @since 2.1.0
         * @return string the payment type, ie 'credit-card', 'echeck', etc
         */
        public function get_payment_type()
        {
        }
        /**
         * Returns true if this is a credit card gateway
         *
         * @since 1.0.0
         * @return boolean true if this is a credit card gateway
         */
        public function is_credit_card_gateway()
        {
        }
        /**
         * Returns true if this is an echeck gateway
         *
         * @since 1.0.0
         * @return boolean true if this is an echeck gateway
         */
        public function is_echeck_gateway()
        {
        }
        /**
         * Returns the API instance for this gateway if it uses direct communication
         *
         * This is a stub method which must be overridden if this gateway performs
         * direct communication
         *
         * @since 1.0.0
         * @return SV_WC_Payment_Gateway_API the payment gateway API instance
         */
        public function get_api()
        {
        }
        /**
         * Returns the order_id if on the checkout pay page
         *
         * @since 3.0.0
         * @return int order identifier
         */
        public function get_checkout_pay_page_order_id()
        {
        }
        /**
         * Returns the order_id if on the checkout order received page
         *
         * Note this must be used in the `wp` or later action, as earlier
         * actions do not yet have access to the query vars
         *
         * @since 3.0.0
         * @return int order identifier
         */
        public function get_checkout_order_received_order_id()
        {
        }
        /**
         * Returns the error message for display if the gateway is not configured.
         *
         * @since 5.4.2
         *
         * @return string
         */
        public function get_not_configured_error_message()
        {
        }
        /** Deprecated Methods ********************************************************************************************/
        /**
         * Determines if the authorization for $order is still valid for capture.
         *
         * @since 2.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function authorization_valid_for_capture($order)
        {
        }
        /**
         * Determines if an order's authorization has been captured, event partially.
         *
         * @since 5.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function authorization_captured($order)
        {
        }
        /**
         * Returns true if the authorization for $order has expired
         *
         * @since 2.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function has_authorization_expired($order)
        {
        }
        /**
         * Determines if an order's authorization has been fully captured.
         *
         * @since 5.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function authorization_fully_captured($order)
        {
        }
        /**
         * Perform a credit card capture for an order.
         *
         * @since 4.5.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order the order object
         * @param float|null $amount amount to capture
         * @return array
         */
        public function do_credit_card_capture($order, $amount = null)
        {
        }
        /**
         * Lets gateways handle any specific capture failure results for the order.
         *
         * @since 5.1.3
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response API response object
         */
        protected function do_credit_card_capture_failed(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Gets the maximum amount that can be captured from an order.
         *
         * Gateways can override this for an value above or below the order total.
         * For instance, some processors allow capturing an amount a certain
         * percentage higher than the payment total.
         *
         * @since 5.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return float
         */
        public function get_order_capture_maximum(\WC_Order $order)
        {
        }
        /**
         * Gets the amount originally authorized for an order.
         *
         * @since 5.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return float
         */
        public function get_order_authorization_amount(\WC_Order $order)
        {
        }
        /**
         * Adds the standard capture data to an order.
         *
         * @since 4.5.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response the transaction response
         */
        protected function add_capture_data($order, $response)
        {
        }
        /**
         * Adds any gateway-specific data to the order after a capture is performed.
         *
         * @since 4.5.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response the transaction response
         */
        protected function add_payment_gateway_capture_data($order, $response)
        {
        }
    }
    /**
     * # WooCommerce Payment Gateway Framework Direct Gateway
     *
     * @since 1.0.0
     */
    abstract class SV_WC_Payment_Gateway_Direct extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway
    {
        /**
         * Validate the payment fields when processing the checkout
         *
         * NOTE: if we want to bring billing field validation (ie length) into the
         * fold, see the Elavon VM Payment Gateway for a sample implementation
         *
         * @since 1.0.0
         * @see WC_Payment_Gateway::validate_fields()
         * @return bool true if fields are valid, false otherwise
         */
        public function validate_fields()
        {
        }
        /**
         * Returns true if the posted credit card fields are valid, false otherwise
         *
         * @since 1.0.0
         * @param boolean $is_valid true if the fields are valid, false otherwise
         * @return boolean true if the fields are valid, false otherwise
         */
        protected function validate_credit_card_fields($is_valid)
        {
        }
        /**
         * Validates the provided credit card expiration date
         *
         * @since 2.1.0
         * @param string $expiration_month the credit card expiration month
         * @param string $expiration_year the credit card expiration month
         * @return boolean true if the card expiration date is valid, false otherwise
         */
        protected function validate_credit_card_expiration_date($expiration_month, $expiration_year)
        {
        }
        /**
         * Validates the provided credit card account number
         *
         * @since 2.1.0
         * @param string $account_number the credit card account number
         * @return boolean true if the card account number is valid, false otherwise
         */
        protected function validate_credit_card_account_number($account_number)
        {
        }
        /**
         * Validates the provided Card Security Code, adding user error messages as
         * needed
         *
         * @since 1.0.0
         * @param string $csc the customer-provided card security code
         * @return boolean true if the card security code is valid, false otherwise
         */
        protected function validate_csc($csc)
        {
        }
        /**
         * Returns true if the posted echeck fields are valid, false otherwise
         *
         * @since 1.0.0
         * @param bool $is_valid true if the fields are valid, false otherwise
         * @return bool
         */
        protected function validate_check_fields($is_valid)
        {
        }
        /**
         * Handles payment processing.
         *
         * @see WC_Payment_Gateway::process_payment()
         *
         * @since 1.0.0
         *
         * @param int|string $order_id
         * @return array associative array with members 'result' and 'redirect'
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Handles updating a user's payment method during payment.
         *
         * This allows us to check the billing address against the last used so we can determine if it needs an update.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order
         * @return \WC_Order
         */
        protected function update_transaction_payment_method(\WC_Order $order)
        {
        }
        /**
         * Add payment and transaction information as class members of WC_Order
         * instance.  The standard information that can be added includes:
         *
         * $order->payment_total           - the payment total
         * $order->customer_id             - optional payment gateway customer id (useful for tokenized payments for certain gateways, etc)
         * $order->payment->account_number - the credit card or checking account number
         * $order->payment->last_four      - the last four digits of the account number
         * $order->payment->card_type      - the card type (e.g. visa) derived from the account number
         * $order->payment->routing_number - account routing number (check transactions only)
         * $order->payment->account_type   - optional type of account one of 'checking' or 'savings' if type is 'check'
         * $order->payment->card_type      - optional card type, ie one of 'visa', etc
         * $order->payment->exp_month      - the 2 digit credit card expiration month (for credit card gateways), e.g. 07
         * $order->payment->exp_year       - the 2 digit credit card expiration year (for credit card gateways), e.g. 17
         * $order->payment->csc            - the card security code (for credit card gateways)
         * $order->payment->check_number   - optional check number (check transactions only)
         * $order->payment->drivers_license_number - optional driver license number (check transactions only)
         * $order->payment->drivers_license_state  - optional driver license state code (check transactions only)
         * $order->payment->token          - payment token (for tokenized transactions)
         *
         * Note that not all gateways will necessarily pass or require all of the
         * above.  These represent the most common attributes used among a variety
         * of gateways, it's up to the specific gateway implementation to make use
         * of, or ignore them, or add custom ones by overridding this method.
         *
         * @since 1.0.0
         * @see SV_WC_Payment_Gateway::get_order()
         * @param int|\WC_Order $order_id order ID being processed
         * @return \WC_Order object with payment and transaction information attached
         */
        public function get_order($order_id)
        {
        }
        /**
         * Performs a check transaction for the given order and returns the result.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response optional check transaction response
         * @return SV_WC_Payment_Gateway_API_Response the response
         * @throws SV_WC_Plugin_Exception network timeouts, etc
         */
        protected function do_check_transaction($order, $response = null)
        {
        }
        /**
         * Performs a credit card transaction for the given order and returns the result.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Response $response optional credit card transaction response
         * @return SV_WC_Payment_Gateway_API_Response the response
         * @throws SV_WC_Plugin_Exception network timeouts, etc
         */
        protected function do_credit_card_transaction($order, $response = null)
        {
        }
        /**
         * Create a transaction.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order object
         * @return bool
         * @throws SV_WC_Plugin_Exception
         */
        protected function do_transaction($order)
        {
        }
        /** Add Payment Method feature ********************************************/
        /**
         * Entry method for the Add Payment Method feature flow. Note this is *not*
         * stubbed in the WC_Payment_Gateway abstract class, but is called if the
         * gateway declares support for it.
         *
         * @since 4.0.0
         */
        public function add_payment_method()
        {
        }
        /**
         * Performs the transaction to add the customer's payment method to their account.
         *
         * @since 4.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_API_Create_Payment_Token_Response $response optional payment token transaction response
         * @return array result with success/error message and request status (success/failure)
         * @throws SV_WC_Plugin_Exception
         */
        protected function do_add_payment_method_transaction(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Create_Payment_Token_Response $response = null)
        {
        }
        /**
         * Creates the order required for adding a new payment method.
         *
         * Note that a mock order is generated as there is no actual order associated with the request.
         *
         * @since 4.0.0
         *
         * @return \WC_Order generated order object
         */
        protected function get_order_for_add_payment_method()
        {
        }
        /**
         * Add customer data as part of the add payment method transaction, primarily
         * customer ID
         *
         * @since 4.0.0
         * @param \WC_Order $order mock order
         * @param SV_WC_Payment_Gateway_API_Create_Payment_Token_Response $response
         */
        protected function add_add_payment_method_customer_data($order, $response)
        {
        }
        /**
         * Adds data from the add payment method transaction, primarily:
         *
         * + transaction ID
         * + transaction date
         * + transaction environment
         *
         * @since 4.0.0
         *
         * @param SV_WC_Payment_Gateway_API_Create_Payment_Token_Response $response
         */
        protected function add_add_payment_method_transaction_data($response)
        {
        }
        /**
         * Allow gateway implementations to add additional data to the data saved
         * during the add payment method transaction
         *
         * @since 4.0.0
         * @param SV_WC_Payment_Gateway_API_Create_Payment_Token_Response $response create payment token response
         * @return array
         */
        protected function get_add_payment_method_payment_gateway_transaction_data($response)
        {
        }
        /** Getters ******************************************************/
        /**
         * Returns true if this is a direct type gateway
         *
         * @since 1.0.0
         * @return boolean if this is a direct payment gateway
         */
        public function is_direct_gateway()
        {
        }
        /**
         * Returns true if a transaction should be forced (meaning payment
         * processed even if the order amount is 0).  This is useful mostly for
         * testing situations
         *
         * @since 2.2.0
         * @return boolean true if the transaction request should be forced
         */
        public function transaction_forced()
        {
        }
    }
}
namespace {
    /**
     * Braintree Base Gateway Class
     *
     * Handles common functionality among the Credit Card/PayPal gateways
     *
     * @since 2.0.0
     */
    class WC_Gateway_Braintree extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Direct
    {
        /** sandbox environment ID */
        const ENVIRONMENT_SANDBOX = 'sandbox';
        /** @var string the Braintree Auth access token */
        protected $auth_access_token;
        /** @var bool whether the gateway is connected manually */
        protected $connect_manually;
        /** @var string production merchant ID */
        protected $merchant_id;
        /** @var string production public key */
        protected $public_key;
        /** @var string production private key */
        protected $private_key;
        /** @var string sandbox merchant ID */
        protected $sandbox_merchant_id;
        /** @var string sandbox public key */
        protected $sandbox_public_key;
        /** @var string sandbox private key */
        protected $sandbox_private_key;
        /** @var string name dynamic descriptor */
        protected $name_dynamic_descriptor;
        /** @var string phone dynamic descriptor */
        protected $phone_dynamic_descriptor;
        /** @var string url dynamic descriptor */
        protected $url_dynamic_descriptor;
        /** @var \WC_Braintree_API instance */
        protected $api;
        /** @var array shared settings names */
        protected $shared_settings_names = array('public_key', 'private_key', 'merchant_id', 'sandbox_public_key', 'sandbox_private_key', 'sandbox_merchant_id', 'name_dynamic_descriptor');
        /**
         * WC_Gateway_Braintree constructor.
         *
         * @param string $id the gateway id
         * @param Framework\SV_WC_Payment_Gateway_Plugin $plugin the parent plugin class
         * @param array $args gateway arguments
         */
        public function __construct($id, $plugin, $args)
        {
        }
        /**
         * Initializes the payment form handler.
         *
         * TODO: remove this method by version 3.0.0 or by 2021-05-05 {WV 2020-05-05}
         *
         * @since 2.2.1
         * @deprecated 2.4.0
         */
        public function init_payment_form_handler()
        {
        }
        /**
         * Enqueues admin scripts.
         *
         * @internal
         *
         * @since 2.3.11
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Gets admin params.
         *
         * @internal
         *
         * @since 2.5.0
         * @return array
         */
        protected function get_admin_params()
        {
        }
        /**
         * Loads the plugin configuration settings
         *
         * @since 2.0.0
         */
        public function load_settings()
        {
        }
        /**
         * Enqueue the Braintree.js library prior to enqueueing gateway scripts
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::enqueue_scripts()
         */
        public function enqueue_gateway_assets()
        {
        }
        /**
         * Gets a client authorization token via AJAX.
         *
         * @internal
         *
         * @since 2.1.0
         */
        public function ajax_get_client_token()
        {
        }
        /**
         * Validate the payment nonce exists
         *
         * @since 3.0.0
         * @param $is_valid
         * @return bool
         */
        public function validate_payment_nonce($is_valid)
        {
        }
        /**
         * Add Braintree-specific data to the order prior to processing, currently:
         *
         * $order->payment->nonce - payment method nonce
         * $order->payment->tokenize - true to tokenize payment method, false otherwise
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::get_order()
         * @param int $order order ID being processed
         * @return \WC_Order object with payment and transaction information attached
         */
        public function get_order($order)
        {
        }
        /**
         * Gets the order object with data added to process a refund.
         *
         * Overridden to add the transaction ID to legacy orders since the v1.x
         * plugin didn't set its own transaction ID meta.
         *
         * @see \SV_WC_Payment_Gateway::get_order_for_refund()
         * @since 2.0.0
         * @param \WC_Order $order the order object
         * @param float $amount the refund amount
         * @param string $reason the refund reason
         * @return \WC_Order
         */
        public function get_order_for_refund($order, $amount, $reason)
        {
        }
        /**
         * Gets the capture handler.
         *
         * @since 2.2.0
         *
         * @return \WC_Braintree\Capture
         */
        public function get_capture_handler()
        {
        }
        /** Tokenization methods **************************************************/
        /**
         * Braintree tokenizes payment methods during the transaction (if successful)
         *
         * @since 3.0.0
         * @return bool
         */
        public function tokenize_with_sale()
        {
        }
        /**
         * Return the custom Braintree payment tokens handler class
         *
         * @since 3.2.0
         * @return \WC_Braintree_Payment_Method_Handler
         */
        protected function build_payment_tokens_handler()
        {
        }
        /** Admin settings methods ************************************************/
        /**
         * Returns an array of form fields specific for this method
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::get_method_form_fields()
         * @return array of form fields
         */
        protected function get_method_form_fields()
        {
        }
        /**
         * Adds the shared settings form fields.
         *
         * @since 2.0.0
         *
         * @param array $form_fields
         * @return array
         */
        protected function add_shared_settings_form_fields($form_fields)
        {
        }
        /**
         * Generates the Braintree Auth connection HTML.
         *
         * This method will be phased out as the manual connection is the preferred setup method.
         * @see \WC_Gateway_Braintree::add_shared_settings_form_fields()
         *
         * @internal
         *
         * @since 2.0.0
         * @deprecated since 2.3.11
         *
         * @return string HTML
         */
        public function generate_braintree_auth_html()
        {
        }
        /**
         * Gets the Braintree Auth connect URL.
         *
         * Although the Partner API expects an array, the WooCommerce Connect
         * middleware presently wants things flattened. So instead of passing a user
         * array and a business array, we pass selected fields with `user_` and
         * `business_` prepended.
         *
         * @since 2.0.0
         * @param string $environment the desired environment, either 'production' or 'sandbox'
         * @return string
         */
        protected function get_connect_url($environment = self::ENVIRONMENT_PRODUCTION)
        {
        }
        /**
         * Gets the Braintree Auth disconnect URL.
         *
         * @since 2.0.0
         * @return string
         */
        protected function get_disconnect_url()
        {
        }
        /** Merchant account ID (multi-currency) feature **************************/
        /**
         * Generate the merchant account ID section HTML, including the currency
         * selector and any existing merchant account IDs that have been entered
         * by the admin
         *
         * @since 3.0.0
         * @return string HTML
         */
        protected function generate_merchant_account_ids_html()
        {
        }
        /**
         * Display the settings page with some additional CSS/JS to support the
         * merchant account IDs feature
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::admin_options()
         */
        public function admin_options()
        {
        }
        /**
         * Generate HTML for an individual merchant account ID field
         *
         * @since 3.0.0
         * @param string|null $currency_code 3 character currency code for the merchant account ID
         * @return string HTML
         */
        protected function generate_merchant_account_id_html($currency_code = \null)
        {
        }
        /**
         * Filter admin options before saving to dynamically inject valid merchant
         * account IDs so they're persisted to settings
         *
         * @since 3.3.0
         * @param array $sanitized_fields
         * @return array
         */
        public function filter_admin_options($sanitized_fields)
        {
        }
        /** Getters ***************************************************************/
        /**
         * Gets order meta.
         *
         * Overridden to account for some straggling meta that may be leftover from
         * the v1 in certain cases when WC was updated to 3.0 before Subscriptions.
         *
         * @since 2.0.2
         *
         * @param \WC_Order|int $order order object or ID
         * @param string $key meta key to get
         * @return mixed meta value
         */
        public function get_order_meta($order, $key)
        {
        }
        /**
         * Returns the customer ID for the given user ID. Braintree provides a customer
         * ID after creation.
         *
         * This is overridden to account for merchants that switched to v1 from the
         * SkyVerge plugin, then updated old subscriptions and/or processed new
         * subscriptions while waiting for v2.
         *
         * @since 2.0.1
         * @see SV_WC_Payment_Gateway::get_customer_id()
         * @param int $user_id WP user ID
         * @param array $args optional additional arguments which can include: environment_id, autocreate (true/false), and order
         * @return string payment gateway customer id
         */
        public function get_customer_id($user_id, $args = array())
        {
        }
        /**
         * Ensure a customer ID is created in Braintree for guest customers
         *
         * A customer ID must exist in Braintree before it can be used so a guest
         * customer ID cannot be generated on the fly. This ensures a customer is
         * created when a payment method is tokenized for transactions such as a
         * pre-order guest purchase.
         *
         * @since 3.1.1
         * @see SV_WC_Payment_Gateway::get_guest_customer_id()
         * @param WC_Order $order
         * @return bool false
         */
        public function get_guest_customer_id(\WC_Order $order)
        {
        }
        /**
         * Returns the merchant account transaction URL for the given order
         *
         * @since 3.0.0
         * @see WC_Payment_Gateway::get_transaction_url()
         * @param \WC_Order $order the order object
         * @return string transaction URL
         */
        public function get_transaction_url($order)
        {
        }
        /**
         * Returns true if the gateway is properly configured to perform transactions
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::is_configured()
         * @return boolean true if the gateway is properly configured
         */
        public function is_configured()
        {
        }
        /**
         * Determines if the gateway is connected via Braintree Auth.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_connected()
        {
        }
        /**
         * Determines if the merchant can use Braintree Auth.
         *
         * Right now this checks that the shop is US-based and transacting in USD.
         *
         * @since 2.0.0
         * @return bool
         */
        public function can_connect()
        {
        }
        /**
         * Determines if the API is connected via standard credentials.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_connected_manually()
        {
        }
        /**
         * Returns true if the current page contains a payment form
         *
         * @since 3.0.0
         * @return bool
         */
        public function is_payment_form_page()
        {
        }
        /**
         * Get the API object
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::get_api()
         * @return \WC_Braintree_API instance
         */
        public function get_api()
        {
        }
        /**
         * Returns true if the current gateway environment is configured to 'sandbox'
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::is_test_environment()
         * @param string $environment_id optional environment id to check, otherwise defaults to the gateway current environment
         * @return boolean true if $environment_id (if non-null) or otherwise the current environment is test
         */
        public function is_test_environment($environment_id = \null)
        {
        }
        /**
         * Gets configured environment.
         *
         * If connected to Braintree Auth, the environment was explicitly set at
         * the time of authentication. Otherwise, use the standard setting.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_environment()
        {
        }
        /**
         * Returns true if the gateway is PayPal
         *
         * @since 3.2.0
         * @return bool
         */
        public function is_paypal_gateway()
        {
        }
        /**
         * Determines if this is a gateway that supports charging virtual-only orders.
         *
         * @since 2.0.0
         * @return bool
         */
        public function supports_credit_card_charge_virtual()
        {
        }
        /**
         * Returns the merchant ID based on the current environment
         *
         * @since 3.0.0
         * @param string $environment_id optional one of 'sandbox' or 'production', defaults to current configured environment
         * @return string merchant ID
         */
        public function get_merchant_id($environment_id = \null)
        {
        }
        /**
         * Gets the Braintree Auth access token.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_auth_access_token()
        {
        }
        /**
         * Gets the Braintree Auth merchant ID.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_auth_environment()
        {
        }
        /**
         * Gets the Braintree Auth merchant ID.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_auth_merchant_id()
        {
        }
        /**
         * Returns the public key based on the current environment
         *
         * @since 3.0.0
         * @param string $environment_id optional one of 'sandbox' or 'production', defaults to current configured environment
         * @return string public key
         */
        public function get_public_key($environment_id = \null)
        {
        }
        /**
         * Returns the private key based on the current environment
         *
         * @since 3.0.0
         * @param string $environment_id optional one of 'sandbox' or 'production', defaults to current configured environment
         * @return string private key
         */
        public function get_private_key($environment_id = \null)
        {
        }
        /**
         * Return the merchant account ID for the given currency and environment
         *
         * @since 3.0.0
         * @param string|null $currency optional currency code, defaults to base WC currency
         * @return string|null
         */
        public function get_merchant_account_id($currency = \null)
        {
        }
        /**
         * Return an array of valid Braintree environments
         *
         * @since 3.0.0
         * @return array
         */
        protected function get_braintree_environments()
        {
        }
        /**
         * Determines if a dynamic descriptor name value is valid.
         *
         * @since 2.1.0
         *
         * @param string $value name to check. Defaults to the gateway's configured setting
         * @return bool
         */
        public function is_name_dynamic_descriptor_valid($value = '')
        {
        }
        /**
         * Return the name dynamic descriptor
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#descriptor.name
         * @since 3.0.0
         * @return string
         */
        public function get_name_dynamic_descriptor()
        {
        }
        /**
         * Determines if a phone dynamic descriptor value is valid.
         *
         * The value must be 14 characters or less, have exactly 10 digits, and
         * otherwise contain only numbers, dashes, parentheses, or periods.
         *
         * @since 2.1.0
         *
         * @param string $value value to check. Defaults to the gateway's configured setting
         * @return bool
         */
        public function is_phone_dynamic_descriptor_valid($value = '')
        {
        }
        /**
         * Return the phone dynamic descriptor
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#descriptor.phone
         * @since 3.0.0
         * @return string
         */
        public function get_phone_dynamic_descriptor()
        {
        }
        /**
         * Return the URL dynamic descriptor
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#descriptor.url
         * @since 3.0.0
         * @return string
         */
        public function get_url_dynamic_descriptor()
        {
        }
        /**
         * Gets the transaction type for the gateway.
         *
         * @since 2.5.0
         *
         * @return string
         */
        public function get_transaction_type()
        {
        }
        /**
         * Adds the standard transaction data to the order.
         * This function is added to set transaction ID to order using WooCommerce Order API.
         *
         * @since 2.9.1
         *
         * @param \WC_Order                               $order    the order object.
         * @param SV_WC_Payment_Gateway_API_Response|null $response optional transaction response.
         */
        public function add_transaction_data($order, $response = \null)
        {
        }
    }
    /**
     * Braintree Credit Card Gateway Class
     *
     * @since 3.0.0
     */
    class WC_Gateway_Braintree_Credit_Card extends \WC_Gateway_Braintree
    {
        /** @var string 3D Secure standard mode */
        const THREED_SECURE_MODE_STANDARD = 'standard';
        /** @var string 3D Secure strict mode */
        const THREED_SECURE_MODE_STRICT = 'strict';
        /** @var string require CSC field */
        protected $require_csc;
        /** @var string fraud tool to use */
        protected $fraud_tool;
        /** @var string kount merchant ID */
        protected $kount_merchant_id;
        /** @var string 3D Secure enabled */
        protected $threed_secure_enabled;
        /** @var string 3D Secure mode, standard or strict */
        protected $threed_secure_mode;
        /** @var array 3D Secure card types */
        protected $threed_secure_card_types = array();
        /** @var bool 3D Secure available */
        protected $threed_secure_available;
        /**
         * Initialize the gateway
         *
         * @since 3.0.0
         */
        public function __construct()
        {
        }
        /**
         * Enqueue credit card method specific scripts, currently:
         *
         * + Fraud tool library
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::enqueue_gateway_assets()
         */
        public function enqueue_gateway_assets()
        {
        }
        /**
         * Gets the payment form JS localized script params.
         *
         * Adds a couple of name params to the framework base.
         *
         * @since 2.3.4
         *
         * @return array
         */
        protected function get_payment_form_js_localized_script_params()
        {
        }
        /**
         * Initializes the payment form handler.
         *
         * @since 2.4.0
         *
         * @return \WC_Braintree_Hosted_Fields_Payment_Form
         */
        protected function init_payment_form_instance()
        {
        }
        /**
         * Add credit card method specific form fields, currently:
         *
         * + Fraud tool settings
         *
         * @since 3.0.0
         * @see WC_Gateway_Braintree::get_method_form_fields()
         * @return array
         */
        protected function get_method_form_fields()
        {
        }
        /**
         * Gets the 3D Secure settings fields.
         *
         * @since 2.2.0
         *
         * @return array
         */
        protected function get_3d_secure_fields()
        {
        }
        /**
         * Override the standard CSC setting to instead indicate that it's a combined
         * Display & Require CSC setting. Braintree doesn't allow the CSC field to be
         * present without also requiring it to be populated.
         *
         * @since 3.0.0
         * @param array $form_fields gateway form fields
         * @return array $form_fields gateway form fields
         */
        protected function add_csc_form_fields($form_fields)
        {
        }
        /**
         * Returns true if the CSC field should be displayed and required at checkout
         *
         * @since 3.0.0
         */
        public function is_csc_required()
        {
        }
        /**
         * Override the standard CSC enabled method to return the value of the csc_required()
         * check since enabled/required is the same for Braintree
         *
         * @since 3.0.0
         * @return bool
         */
        public function csc_enabled()
        {
        }
        /**
         * Render credit card method specific JS to the settings page, currently:
         *
         * + Hide/show Fraud tool kount merchant ID setting
         *
         * @since 3.0.0
         * @see WC_Gateway_Braintree::admin_options()
         */
        public function admin_options()
        {
        }
        /**
         * Returns true if the payment nonce is provided when not using a saved
         * payment token. Note this can't be moved to the parent class because
         * validation is payment-type specific.
         *
         * @since 3.0.0
         * @param boolean $is_valid true if the fields are valid, false otherwise
         * @return boolean true if the fields are valid, false otherwise
         */
        protected function validate_credit_card_fields($is_valid)
        {
        }
        /**
         * Returns true if the payment nonce is provided when using a saved payment method
         * and CSC is required.
         *
         * @since 3.2.0
         * @param string $csc
         * @return bool
         */
        protected function validate_csc($csc)
        {
        }
        /**
         * Add credit card specific data to the order, primarily for 3DS support
         *
         * 1) $order->payment->is_3ds_required - require 3DS for every transaction
         * 2) $order->payment->use_3ds_nonce - use nonce instead of token for transaction
         *
         * @since 3.0.0
         * @param \WC_Order|int $order order
         * @return \WC_Order
         */
        public function get_order($order)
        {
        }
        /**
         * Overrides the parent method to set the $order->payment members that are
         * usually set prior to payment with a direct gateway. Because Braintree uses
         * a nonce, we don't have access to the card info (last four, expiry date, etc)
         * until after the transaction is processed.
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::do_credit_card_transaction()
         * @param WC_Order $order the order object
         * @param \WC_Braintree_API_Credit_Card_Transaction_Response $response optional credit card transaction response
         * @return \WC_Braintree_API_Credit_Card_Transaction_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        protected function do_credit_card_transaction($order, $response = \null)
        {
        }
        /**
         * Adds any gateway-specific transaction data to the order, for credit cards
         * this is:
         *
         * + risk data (if available)
         * + 3D Secure data (if available)
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::add_transaction_data()
         * @param \WC_Order $order the order object
         * @param \WC_Braintree_API_Credit_Card_Transaction_Response $response transaction response
         */
        public function add_payment_gateway_transaction_data($order, $response)
        {
        }
        /** Apple Pay Methods *********************************************************************************************/
        /**
         * Gets the order for Apple Pay transactions.
         *
         * @since 2.2.0
         *
         * @param \WC_Order $order order object
         * @param Framework\SV_WC_Payment_Gateway_Apple_Pay_Payment_Response $response
         * @return \WC_Order
         */
        public function get_order_for_apple_pay(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay_Payment_Response $response)
        {
        }
        /** Refund/Void feature ***************************************************/
        /**
         * Void a transaction instead of refunding when it has a submitted for settlement
         * status. Note that only credit card transactions are eligible for this, as
         * PayPal transactions are settled immediately
         *
         * @since 3.0.0
         * @param \WC_Order $order order
         * @param \WC_Braintree_API_Response $response refund response
         * @return bool true if the transaction should be transaction
         */
        protected function maybe_void_instead_of_refund($order, $response)
        {
        }
        /** Add Payment Method feature ********************************************/
        /**
         * Save verification transactional data when a customer
         * adds a new credit via the add payment method flow
         *
         * @since 3.0.0
         * @param \WC_Braintree_API_Customer_Response|\WC_Braintree_API_Payment_Method_Response $response
         * @return array
         */
        protected function get_add_payment_method_payment_gateway_transaction_data($response)
        {
        }
        /** Fraud Tool feature ****************************************************/
        /**
         * Renders the fraud tool script.
         *
         * Note this is hooked to load at high priority (1) so that it's rendered prior to the braintree.js/braintree-data.js scripts being loaded
         * @link https://developers.braintreepayments.com/guides/advanced-fraud-tools/overview
         *
         * @internal
         *
         * @since 3.0.0
         */
        public function render_fraud_js()
        {
        }
        /**
         * Add an async attribute to the braintree-data.js script tag, there's no
         * way to do this when enqueing so it must be done manually here
         *
         * @since 3.0.0
         * @param string $url cleaned URL from esc_url()
         * @return string
         */
        public function adjust_fraud_script_tag($url)
        {
        }
        /**
         * Return the enabled fraud tool setting, either 'basic', 'advanced', or
         * 'kount_direct'
         *
         * @since 3.0.0
         * @return string
         */
        public function get_fraud_tool()
        {
        }
        /**
         * Return true if advanced fraud tools are enabled (either advanced or
         * kount direct)
         *
         * @since 3.0.0
         * @return bool
         */
        public function is_advanced_fraud_tool_enabled()
        {
        }
        /**
         * Return true if the Kount Direct fraud tool is enabled
         *
         * @since 3.0.0
         * @return bool
         */
        public function is_kount_direct_enabled()
        {
        }
        /**
         * Get the Kount merchant ID, only used when the Kount Direct fraud tool
         * is enabled
         *
         * @since 3.0.0
         * @return string
         */
        public function get_kount_merchant_id()
        {
        }
        /**
         * Determines if Kount is supported.
         *
         * @since 2.1.0
         *
         * @return bool
         */
        public function is_kount_supported()
        {
        }
        /** 3D Secure feature *****************************************************/
        /**
         * Determines if 3D Secure is available for the merchant account.
         *
         * @since 2.2.0
         *
         * @return bool
         */
        public function is_3d_secure_available()
        {
        }
        /**
         * Determines if 3D secure is enabled.
         *
         * We've removed the 3D Secure setting, and its availability is determined by the connected account, however this
         * allows users to disable it completely via a filter should they want to.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function is_3d_secure_enabled()
        {
        }
        /**
         * Determines if 3D Secure is in strict mode.
         *
         * @since 2.2.0
         *
         * @return bool
         */
        public function is_3d_secure_strict()
        {
        }
        /**
         * Gets the currently configured 3D Secure mode.
         *
         * @since 2.2.0
         *
         * @return string
         */
        public function get_3d_secure_mode()
        {
        }
        /**
         * Return true if a liability shift is required for *every* 3DS-eligible
         * transaction (even for those where liability shift wasn't possible, e.g.
         * the cardholder was not enrolled)
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function is_3d_secure_liability_shift_always_required()
        {
        }
        /**
         * Determines if the passed card type supports 3D Secure.
         *
         * This checks the card types configured in the settings.
         *
         * @since 2.2.0
         *
         * @param string $card_type card type
         * @return bool
         */
        public function card_type_supports_3d_secure($card_type)
        {
        }
        /**
         * Gets the card types to validate with 3D Secure.
         *
         * @since 2.2.0
         *
         * @return array
         */
        public function get_3d_secure_card_types()
        {
        }
        /**
         * Get a payment nonce for an existing payment token so that 3D Secure verification
         * can be performed on a saved payment method
         *
         * @link https://developers.braintreepayments.com/guides/3d-secure/server-side/php#vaulted-credit-card-nonces
         *
         * @since 2.0.0
         *
         * @param \WC_Braintree_Payment_Method $token payment method
         * @return string nonce
         */
        public function get_3d_secure_nonce_for_token($token)
        {
        }
        /**
         * If 3D Secure is enabled, perform validation of the provided nonce. This
         * complements the client-side check and must be performed server-side. Note
         * that this is done in validate_fields() and not a later validation check
         * as 3D Secure transactions also apply when using a saved payment token.
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::validate_fields()
         * @return bool true if 3DS validations pass (or 3DS not enabled)
         */
        public function validate_fields()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Handlers {
    /**
     * Script Handler Abstract Class
     *
     * Handles initializing the payment registered JavaScripts
     *
     * @since 5.7.0
     */
    abstract class Script_Handler
    {
        /** @var string JS handler base class name, without the FW version */
        protected $js_handler_base_class_name = '';
        /**
         * Script_Handler constructor.
         *
         * @since 5.7.0
         */
        public function __construct()
        {
        }
        /**
         * Adds the action and filter hooks.
         *
         * @since 5.7.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Returns the JS handler class name.
         *
         * @since 5.7.0
         *
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Returns the JS handler object name.
         *
         * @since 5.7.0
         *
         * @return string
         */
        protected function get_js_handler_object_name()
        {
        }
        /**
         * Gets the JS event triggered after the JS handler class is loaded.
         *
         * @since 5.7.0
         *
         * @return string
         */
        protected function get_js_loaded_event()
        {
        }
        /**
         * Gets the handler instantiation JS wrapped in a safe load technique.
         *
         * @since 5.7.0
         *
         * @param array $additional_args additional handler arguments, if any
         * @param string $handler_name handler name, if different from self::get_js_handler_class_name()
         * @param string $object_name object name, if different from self::get_js_handler_object_name()
         * @return string
         */
        protected function get_safe_handler_js(array $additional_args = [], $handler_name = '', $object_name = '')
        {
        }
        /**
         * Gets the handler instantiation JS.
         *
         * @since 5.7.0
         *
         * @param array $additional_args additional handler arguments, if any
         * @param string $handler_name handler name, if different from self::get_js_handler_class_name()
         * @param string $object_name object name, if different from self::get_js_handler_object_name()
         * @return string
         */
        protected function get_handler_js(array $additional_args = [], $handler_name = '', $object_name = '')
        {
        }
        /**
         * Gets the JS handler arguments.
         *
         * @since 5.7.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
        /**
         * Gets inline JavaScript code to issue an AJAX request to log a script error event.
         *
         * @since 5.7.0
         *
         * @return string
         */
        protected function get_js_handler_event_debug_log_request()
        {
        }
        /**
         * Logs an event via AJAX.
         *
         * @internal
         *
         * @since 5.7.0
         */
        public function ajax_log_event()
        {
        }
        /**
         * Adds a log entry.
         *
         * @since 5.7.0
         *
         * @param string $message message to log
         */
        protected abstract function log_event($message);
        /** Conditional methods *******************************************************************************************/
        /**
         * Determines whether logging is enabled.
         *
         * @since 5.7.0
         *
         * @return bool
         */
        protected function is_logging_enabled()
        {
        }
        /** Getter methods ************************************************************************************************/
        /**
         * Gets the ID of this script handler.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public abstract function get_id();
        /**
         * Gets the ID, but dasherized.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id_dasherized()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Payment Form Class
     *
     * Handles rendering the payment form for both credit card and eCheck gateways
     *
     * @since 4.0.0
     */
    class SV_WC_Payment_Gateway_Payment_Form extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Handlers\Script_Handler
    {
        /** @var \SV_WC_Payment_Gateway gateway for this payment form */
        protected $gateway;
        /** @var array of SV_WC_Payment_Gateway_Payment_Tokens, keyed by token ID */
        protected $tokens;
        /** @var bool default to show new payment method form */
        protected $default_new_payment_method = true;
        /** @var string JS handler base class name, without the FW version */
        protected $js_handler_base_class_name = 'SV_WC_Payment_Form_Handler';
        /** @var bool memoization to account whether the payment JS has been rendered for a gateway */
        protected $payment_form_js_rendered = [];
        /**
         * Sets up class.
         *
         * @since 4.0.0
         *
         * @param SV_WC_Payment_Gateway|SV_WC_Payment_Gateway_Direct $gateway gateway for form
         */
        public function __construct($gateway)
        {
        }
        /**
         * Adds hooks for rendering the payment form.
         *
         * @see SV_WC_Payment_Gateway_Payment_Form::render()
         *
         * @since 4.0.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Gets the script ID.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Gets the script ID, dasherized.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id_dasherized()
        {
        }
        /**
         * Returns the active tokens for the current user/gateway
         *
         * @since 4.0.0
         * @return array of SV_WC_Payment_Gateway_Payment_Tokens, keyed by token ID
         */
        protected function get_tokens()
        {
        }
        /**
         * Returns the gateway for this form.
         *
         * @since 4.0.0
         *
         * @return SV_WC_Payment_Gateway|SV_WC_Payment_Gateway_Direct
         */
        public function get_gateway()
        {
        }
        /**
         * Return true if the current user has active tokens to display
         *
         * @since 4.0.0
         * @return bool
         */
        public function has_tokens()
        {
        }
        /**
         * Returns true if tokenization is allowed for the payment form. This is true
         * if both the gateway supports tokenization and it is enabled.
         *
         * Note that tokenization is not allowed on the pay page for guest customers,
         * as there is no way to create an account there.
         *
         * @since 4.0.0
         * @return bool true if tokenization is allowed
         */
        public function tokenization_allowed()
        {
        }
        /**
         * Returns true if tokenization is forced for the payment form. This is generally
         * true when a subscription or pre-order is in the cart and the payment
         * method must be tokenized.
         *
         * Note that only direct gateways support forced tokenization
         *
         * @since 4.0.0
         * @return bool true if tokenization is forced
         */
        public function tokenization_forced()
        {
        }
        /**
         * Return true if the payment form should default to showing the new payment
         * method form
         *
         * @since 4.0.0
         * @return bool
         */
        public function default_new_payment_method()
        {
        }
        /**
         * Get the payment form fields
         *
         * @since 4.0.0
         * @return array payment fields in format suitable for woocommerce_form_field()
         */
        protected function get_payment_fields()
        {
        }
        /**
         * Get default credit card form fields, note this pulls default values
         * from the associated gateway
         *
         * for an explanation of autocomplete attribute values, see:
         * @link https://html.spec.whatwg.org/multipage/forms.html#autofill
         *
         * @since 4.0.0
         * @return array credit card form fields
         */
        protected function get_credit_card_fields()
        {
        }
        /**
         * Get default eCheck form fields, note this pulls default values
         * from the associated gateway
         *
         * @since 4.0.0
         * @return array eCheck form fields
         */
        protected function get_echeck_fields()
        {
        }
        /**
         * Get the payment form description HTML, generally set by the admin in
         * the gateway settings
         *
         * @since 4.0.0
         * @return string payment form description HTML
         */
        public function get_payment_form_description_html()
        {
        }
        /**
         * Get the sample check image HTML
         *
         * @since 4.0.0
         * @return string sample check image HTML
         */
        protected function get_sample_check_html()
        {
        }
        /**
         * Get the saved payment methods HTML, this section includes the
         * "Manage Payment Method" button, the radio inputs for selecting an existing saved
         * payment method, and the radio input for using a new saved payment method
         *
         * @since 4.0.0
         * @return string saved payment methods HTML
         */
        protected function get_saved_payment_methods_html()
        {
        }
        /**
         * Get the "Manage Payment Methods" button HTML
         *
         * @since 4.0.0
         * @return string manage payment methods button html
         */
        protected function get_manage_payment_methods_button_html()
        {
        }
        /**
         * Get the saved payment method HTML for an given token, renders an input + label like:
         *
         * o <Amex logo> American Express ending in 6666 (expires 10/20)
         *
         * @since 4.0.0
         * @param SV_WC_Payment_Gateway_Payment_Token $token payment token
         * @return string saved payment method HTML
         */
        protected function get_saved_payment_method_html($token)
        {
        }
        /**
         * Get the title for a saved payment method, like
         *
         * <Amex logo> American Express ending in 6666 (expires 10/20)
         *
         * @since 4.0.0
         * @param SV_WC_Payment_Gateway_Payment_Token $token payment token
         * @return string saved payment method title
         */
        protected function get_saved_payment_method_title($token)
        {
        }
        /**
         * Get the "Use new payment method" radio input HTML, like
         *
         * o Use new <card>|<bank account>
         *
         * @since 4.0.0
         * @return string saved payment method title
         */
        protected function get_use_new_payment_method_input_html()
        {
        }
        /**
         * Get saved payment method checkbox HTML, like:
         *
         * [] Securely Save to Account
         *
         * @since 4.0.0
         * @return string save payment method checkbox HTML
         */
        protected function get_save_payment_method_checkbox_html()
        {
        }
        /** Rendering methods *****************************************************/
        /**
         * Renders the payment form
         *
         * @since 4.0.0
         */
        public function render()
        {
        }
        /**
         * Render the payment form description
         *
         * @hooked wc_{gateway ID}_payment_form_start @ priority 15
         *
         * @since 4.0.0
         */
        public function render_payment_form_description()
        {
        }
        /**
         * Render the saved payment methods
         *
         * @hooked wc_{gateway ID}_payment_form_start @ priority 20
         *
         * @since 4.0.0
         */
        public function render_saved_payment_methods()
        {
        }
        /**
         * Render the sample check image if gateway is eCheck
         *
         * @hooked wc_{gateway ID}_payment_form_start @ priority 25
         *
         * @since 4.0.0
         */
        public function render_sample_check()
        {
        }
        /**
         * Render the payment form opening fieldset tag and div
         *
         * @hooked wc_{gateway ID}_payment_form_start @ priority 30
         *
         * @since 4.0.0
         */
        public function render_fieldset_start()
        {
        }
        /**
         * Render the payment fields (e.g. account number, expiry, etc)
         *
         * @hooked wc_{gateway ID}_payment_form_start @ priority 0
         *
         * @since 4.0.0
         */
        public function render_payment_fields()
        {
        }
        /**
         * Render the payment, a simple wrapper around woocommerce_form_field() to
         * make it more convenient for concrete gateways to override form output
         *
         * @since 4.1.2
         * @param array $field
         */
        protected function render_payment_field($field)
        {
        }
        /**
         * Render the payment form closing fieldset tag, clearing div, and "save
         * payment method" checkbox
         *
         * @hooked wc_{gateway ID}_payment_form_end @ priority 5
         *
         * @since 4.0.0
         */
        public function render_fieldset_end()
        {
        }
        /**
         * Maybe renders the payment gateway JS on checkout or pay pages.
         *
         * This is hooking directly into `wp_footer` in case the `wc_{$gateway_id}_payment_form_end` didn't trigger already.
         *
         * @since 5.10.8
         */
        public function maybe_render_js()
        {
        }
        /**
         * Renders the payment form JS.
         *
         * This is normally hooked to `wc_{$gateway_id}_payment_form_end` with priority 5.
         * However, in the circumstance this doesn't trigger, {@see SV_WC_Payment_Gateway_Payment_Form::maybe_render_js()} hooked to footer.
         * This may happen when the customer reaches checkout with a $0 value order.
         *
         * @see SV_WC_Payment_Gateway_Payment_Form::get_safe_handler_js()
         *
         * @since 4.0.0
         */
        public function render_js()
        {
        }
        /**
         * Gets the handler instantiation JS.
         *
         * @since 5.7.0
         *
         * @param array $additional_args additional handler arguments, if any
         * @param string $handler_name handler name, if different from self::get_js_handler_class_name()
         * @param string $object_name object name, if different from self::get_js_handler_object_name()
         * @return string
         */
        protected function get_handler_js(array $additional_args = [], $handler_name = '', $object_name = '')
        {
        }
        /**
         * Gets the JS args for the payment form handler.
         *
         * Payment gateways can overwrite this method to define specific args.
         * render_js() will apply filters to the returned array of args.
         *
         * @since 5.7.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
        /**
         * Adds a log entry.
         *
         * @since 5.7.0
         *
         * @param string $message message to log
         */
        protected function log_event($message)
        {
        }
        /**
         * Determines whether logging is enabled.
         *
         * @since 5.7.0
         *
         * @return bool
         */
        protected function is_logging_enabled()
        {
        }
    }
}
namespace {
    /**
     * Braintree Abstract Payment Form
     *
     * @since 3.0.0
     */
    abstract class WC_Braintree_Payment_Form extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Form
    {
        /**
         * Sets up the class.
         *
         * Overridden here to avoid calling get_tokens() on construct.
         *
         * @since 2.4.0
         *
         * @param Framework\SV_WC_Payment_Gateway|Framework\SV_WC_Payment_Gateway_Direct $gateway gateway for form
         */
        public function __construct($gateway)
        {
        }
        /**
         * Adds hooks for rendering the payment form.
         *
         * Overridden here to move the location of the payment form JS enqueue
         *
         * @since 2.4.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Renders the payment form
         *
         * Overridden here to attempt to load tokens before render rather than on form construct.
         *
         * @since 2.4.0
         */
        public function render()
        {
        }
        /**
         * Render a test amount input field that can be used to override the order total
         * when using the gateway in sandbox mode. The order total can then be set to
         * various amounts to simulate various authorization/settlement responses
         *
         * @link https://developers.braintreepayments.com/reference/general/testing/php
         *
         * @since 3.0.0
         */
        public function render_payment_form_description()
        {
        }
        /**
         * Render a hidden input for the payment nonce and device_data before the
         * credit card/PayPal fields. This is populated by the payment form javascript
         * when it receives a nonce from Braintree.
         *
         * @since 3.0.0
         */
        public function render_payment_fields()
        {
        }
        /**
         * Get gateway-specific JS params that are passed to the payment form handler script
         *
         * @since 2.0.0
         *
         * @return array
         */
        protected function get_payment_form_handler_js_params()
        {
        }
        /**
         * Render JS to instantiate the Braintree-specific payment form handler class.
         * Note that this intentionally does not instantiate the standard payment
         * form handler, as Braintree replaces it entirely.
         *
         * @since 3.0.0
         */
        public function render_js()
        {
        }
        /**
         * Gets the order total for both checkout and order pay page instances.
         *
         * @since 3.3.2-1
         */
        public function get_order_total()
        {
        }
        /**
         * Gets the JS handler arguments.
         *
         * @since 2.4.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
    }
    /**
     * Braintree Hosted Fields Payment Form
     *
     * @since 3.0.0
     *
     * @method \WC_Gateway_Braintree_Credit_Card get_gateway()
     */
    class WC_Braintree_Hosted_Fields_Payment_Form extends \WC_Braintree_Payment_Form
    {
        /**
         * Gets the JS handler class name.
         *
         * @since 2.4.0
         *
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Override the standard payment method HTML to add a nonce to the associated
         * token so it can be used for 3D Secure verification. This is added as a
         * data-nonce attribute.
         *
         * @since 3.0.0
         * @param \WC_Braintree_Payment_Method $token payment token
         * @return string saved payment method HTML
         */
        protected function get_saved_payment_method_html($token)
        {
        }
        /**
         * Override the default form fields to add hosted field specific classes
         *
         * @since 3.0.0
         * @return array credit card form fields
         */
        protected function get_credit_card_fields()
        {
        }
        /**
         * Render a custom payment field. This essentially replaces <input> types
         * usually generated by woocommerce_form_field() with <div>s that are required
         * by Braintree's hosted field implementation
         *
         * @since 3.0.0
         * @param array $field
         */
        public function render_payment_field($field)
        {
        }
        /**
         * Return the JS params passed to the the payment form handler script
         *
         * @since 3.0.0
         * @see WC_Braintree_Payment_Form::get_payment_form_handler_js_params()
         * @return array
         */
        protected function get_payment_form_handler_js_params()
        {
        }
        /**
         * Determines whether 3D Secure should be enabled for the current transaction.
         *
         * @since 2.3.1
         *
         * @return bool
         */
        private function should_enable_3d_secure()
        {
        }
        /**
         * Gets the enabled card types in the Braintree SDK format.
         *
         * @since 2.1.0
         *
         * @return array
         */
        protected function get_enabled_card_types()
        {
        }
        /**
         * Get the hosted fields styles in an associative array. These are used
         * by the Braintree SDK to apply to the inputs inside the hosted field iframes.
         *
         * @link https://developers.braintreepayments.com/guides/hosted-fields/styling/javascript/v2
         *
         * @since 3.0.0
         * @return array
         */
        protected function get_hosted_fields_styles()
        {
        }
        /**
         * Renders hidden inputs for the handling 3D Secure transactions.
         *
         * @since 3.0.0
         */
        public function render_payment_fields()
        {
        }
        /**
         * Calculate the order total used for card verification.
         *
         * @since 2.3.1
         *
         * @return float cart total or the subscription recurring amount
         */
        private function get_order_total_for_3d_secure()
        {
        }
        /**
         * Calculate the recurring amount for the subscriptions included in the cart.
         *
         * @since 2.3.1
         *
         * @see \WC_Subscriptions_Cart::calculate_subscription_totals()
         * @return float
         */
        private function get_subscription_totals()
        {
        }
    }
    /**
     * Braintree PayPal Payment Form
     *
     * @since 3.0.0
     *
     * @method \WC_Gateway_Braintree_PayPal get_gateway()
     */
    class WC_Braintree_PayPal_Payment_Form extends \WC_Braintree_Payment_Form
    {
        /**
         * Gets the JS handler class name.
         *
         * @since 2.4.0
         *
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Return the JS params passed to the the payment form handler script
         *
         * @since 3.0.0
         * @see WC_Braintree_Payment_Form::get_payment_form_handler_js_params()
         * @return array
         */
        public function get_payment_form_handler_js_params()
        {
        }
        /**
         * Gets the cart nonce from the session, if any.
         *
         * @since 2.3.0
         *
         * @return string
         */
        public function get_cart_nonce()
        {
        }
        /**
         * Determines if the current view is at Checkout, confirming the cart PayPal purchase.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        public function is_checkout_confirmation()
        {
        }
        /**
         * Renders the payment form description.
         *
         * Overridden to bail if confirming a cart order.
         *
         * @since 2.0.0
         */
        public function render_payment_form_description()
        {
        }
        /**
         * Renders the saved payment methods.
         *
         * Overridden to bail if confirming a cart order.
         *
         * @since 2.0.0
         */
        public function render_saved_payment_methods()
        {
        }
        /**
         * Gets the saved method title.
         *
         * Adds special handling to ensure PayPal accounts display their email address if no nickname is set.
         *
         * @since 2.2.5
         *
         * @param WC_Braintree_Payment_Method $token token object
         * @return string
         */
        protected function get_saved_payment_method_title($token)
        {
        }
        /**
         * Render the PayPal container div, which is replaced by the PayPal button
         * when the frontend JS executes. This also renders 3 hidden inputs:
         *
         * 1) wc_braintree_paypal_amount - order total
         * 2) wc_braintree_paypal_currency - active store currency
         * 3) wc_braintree_paypal_locale - site locale
         *
         * Note these are rendered as hidden inputs and not passed to the script constructor
         * because these will be refreshed and re-rendered when the checkout updates,
         * which is important for the accuracy of things like the order total.
         *
         * Also note that the order total is used for rendering info inside the PayPal
         * modal and _not_ for actual processing for the transaction, so there's no
         * security concerns here.
         *
         * @since 3.0.0
         */
        public function render_payment_fields()
        {
        }
        /**
         * Gets the disabled funding options.
         *
         * @since 2.6.0
         *
         * @return array
         */
        protected function get_disabled_funding_options()
        {
        }
    }
}
namespace WC_Braintree\PayPal\Buttons {
    /**
     * Abstract PayPal button class.
     *
     * @since 2.3.0
     */
    abstract class Abstract_Button extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Handlers\Script_Handler
    {
        /** @var \WC_Gateway_Braintree_PayPal PayPal gateway instance */
        protected $gateway;
        /** @var bool tracks whether a cancel link has been rendered from any button */
        protected static $rendered_cancel_link = false;
        /**
         * Constructs the button handler.
         *
         * @since 2.3.0
         *
         * @param \WC_Gateway_Braintree_PayPal $gateway the gateway instance
         */
        public function __construct($gateway)
        {
        }
        /**
         * Checks if this button should be enabled or not.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_enabled()
        {
        }
        /**
         * Adds the action and filter hooks.
         *
         * @since 2.3.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Adds any actions and filters needed for the button, if the button is enabled.
         *
         * @since 2.4.0
         */
        protected function add_button_hooks()
        {
        }
        /**
         * Renders the button markup and JS.
         *
         * @since 2.3.0
         */
        public function render()
        {
        }
        /**
         * Handles the request made to the WC API after the JS has generated a token.
         *
         * @since 2.3.0
         */
        public function handle_wc_api()
        {
        }
        /**
         * Validates a WC API request.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected abstract function is_wc_api_request_valid();
        /**
         * Processes a WC API request after the JS has generated a token.
         *
         * @since 2.3.0
         */
        protected function process_wc_api_request()
        {
        }
        /**
         * Gets the array of form handler JS params.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_form_handler_params()
        {
        }
        /**
         * Gets the JS handler arguments.
         *
         * @since 2.4.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
        /**
         * Gets the JS handler params.
         *
         * TODO: remove this method by version 3.0.0 or by 2021-05-07 {WV 2020-05-07}
         *
         * @since 2.3.0
         * @deprecated 2.4.0
         *
         * @return array
         */
        protected function get_js_handler_params()
        {
        }
        /**
         * Gets additional JS Handler params - Override in concrete classes.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_additional_js_handler_params()
        {
        }
        /**
         * Renders the PayPal button JS.
         *
         * @since 2.3.0
         */
        protected function render_js()
        {
        }
        /**
         * Gets the handler instantiation JS.
         *
         * @since 2.4.0
         *
         * @param array $additional_args additional handler arguments, if any
         * @param string $handler_name handler name, if different from self::get_js_handler_class_name()
         * @param string $object_name object name, if different from self::get_js_handler_object_name()
         * @return string
         */
        protected function get_handler_js(array $additional_args = [], $handler_name = '', $object_name = '')
        {
        }
        /**
         * Renders the PayPal button markup.
         *
         * @since 2.3.0
         */
        public function render_button()
        {
        }
        /**
         * Gets an array of params for rendering the button HTML.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_button_params()
        {
        }
        /**
         * Gets additional button params for the button markup - override in concrete classes.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_additional_button_params()
        {
        }
        /**
         * Determines if the PayPal token should be considered "single use".
         *
         * This is primarily dependent on if there are subscriptions or Pre-Orders
         * present in the cart.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_single_use()
        {
        }
        /**
         * Gets the total amount the button should charge - override in concrete classes.
         *
         * @since 2.3.0
         *
         * @return float
         */
        protected function get_button_total()
        {
        }
        /**
         * Gets the currency to be used for the button.
         *
         * @since 2.3.0
         *
         * @return string
         */
        protected function get_button_currency()
        {
        }
        /**
         * Gets the locale to be used for the button.
         *
         * @since 2.3.0
         *
         * @return string
         */
        protected function get_button_locale()
        {
        }
        /**
         * Determines if shipping address needs to be enable on express checkout or not.
         *
         * This is primarily dependent on if cart or product needs shipping.
         *
         * @since 2.9.1
         *
         * @return bool
         */
        protected function needs_shipping()
        {
        }
        /**
         * Gets the JS handler class name.
         *
         * TODO: remove this method by version 3.0.0 or by 2021-05-07 {WV 2020-05-07}
         *
         * @since 2.3.0
         * @deprecated 2.4.0
         *
         * @return string
         */
        protected function get_js_handler_name()
        {
        }
        /**
         * Sets the checkout address value if it's available from the PayPal session.
         *
         * @since 2.3.0
         *
         * @param null $value
         * @param string $key the checkout field key
         * @return string|null
         */
        public function set_checkout_value($value, $key)
        {
        }
        /**
         * Sets the "Ship to different address" checkbox based on PayPal session data.
         *
         * @since 2.3.0
         *
         * @param bool $checked
         * @return bool
         */
        public function set_ship_to_different_address($checked)
        {
        }
        /**
         * Disables all other gateways at checkout when confirming payment.
         *
         * @since 2.0.0
         * @param array $gateways
         * @return array
         */
        public function disable_other_gateways($gateways)
        {
        }
        /**
         * Adds styles for the cart & confirmation page.
         *
         * @since 2.3.0
         */
        public function enqueue_styles()
        {
        }
        /**
         * Renders a "Cancel" link.
         *
         * @since 2.3.0
         */
        public function render_cancel_link()
        {
        }
        /**
         * Sets the customer address session data from a PayPal token request.
         *
         * @since 2.3.0
         *
         * @param array $data the customer data
         */
        protected function set_customer_data($data = [])
        {
        }
        /**
         * Determines if the current view is at Checkout, confirming the cart PayPal purchase.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        public function is_checkout_confirmation()
        {
        }
        /**
         * Gets the cart nonce from the session, if any.
         *
         * @since 2.3.0
         *
         * @return string
         */
        public function get_cart_nonce()
        {
        }
        /**
         * Clears any PayPal cart session data.
         *
         * @since 2.3.0
         */
        public function clear_session_data()
        {
        }
        /**
         * Returns the gateway instance.
         *
         * @since 2.3.0
         *
         * @return \WC_Gateway_Braintree_PayPal
         */
        protected function get_gateway()
        {
        }
        /**
         * Adds a log entry.
         *
         * @since 2.4.0
         *
         * @param string $message message to log
         */
        protected function log_event($message)
        {
        }
        /**
         * Determines whether logging is enabled.
         *
         * @since 2.4.0
         *
         * @return bool
         */
        protected function is_logging_enabled()
        {
        }
    }
    /**
     * Product page button class.
     *
     * @since 2.3.0
     */
    class Product extends \WC_Braintree\PayPal\Buttons\Abstract_Button
    {
        /** @var \WC_Product|null|false the product object if on a product page or false if not on a product page */
        protected $product;
        /**
         * Gets the JS handler class name.
         *
         * @since 2.4.0
         *
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Checks if this button should be enabled or not.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_enabled()
        {
        }
        /**
         * Adds necessary actions and filters for this button.
         *
         * @since 2.3.0
         * @since 2.4.0 renamed add_hooks() to add_button_hooks()
         */
        protected function add_button_hooks()
        {
        }
        /**
         * Initializes the product page buy now button.
         *
         * @internal
         *
         * @since 2.3.0
         */
        public function init_product()
        {
        }
        /**
         * Gets the form handler params.
         *
         * @since 2.3.0
         */
        protected function get_form_handler_params()
        {
        }
        /**
         * Validates a WC API request.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_wc_api_request_valid()
        {
        }
        /**
         * Processes a WC API request that contains data from the button JS response.
         *
         * @since 2.3.0
         */
        protected function process_wc_api_request()
        {
        }
        /**
         * Determines if product data should be validated before displaying a buy button.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        public function should_validate_product_data()
        {
        }
        /**
         * Validates product add-ons via AJAX to show/hide the PayPal button appropriately.
         *
         * @since 2.3.0
         */
        public function validate_product_data()
        {
        }
        /**
         * Gets the order amount for the product and quantity specified in the given form data.
         *
         * @since 2.5.0
         *
         * @return float
         */
        protected function get_order_amount_from_form($form)
        {
        }
        /**
         * Gets any additional JS handler params needed for this button.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_additional_js_handler_params()
        {
        }
        /**
         * Gets additional button markup params.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_additional_button_params()
        {
        }
        /**
         * Gets the product total.
         *
         * @since 2.3.0
         *
         * @return float
         */
        protected function get_button_total()
        {
        }
        /**
         * Returns whether the button is for single-use transaction or not.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_single_use()
        {
        }
        /**
         * Gets the product page product object, or false if not on a product page.
         *
         * @since 2.3.0
         *
         * @return \WC_Product|false
         */
        protected function get_product()
        {
        }
        /**
         * Gets the ID of this script handler.
         *
         * @since 2.4.0
         *
         * @return string
         */
        public function get_id()
        {
        }
    }
    /**
     * Cart page button class.
     *
     * @since 2.3.0
     */
    class Cart extends \WC_Braintree\PayPal\Buttons\Abstract_Button
    {
        /**
         * Gets the JS handler class name.
         *
         * @since 2.4.0
         *
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Checks if this button should be enabled or not.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_enabled()
        {
        }
        /**
         * Adds any actions and filters needed for the button.
         *
         * @since 2.3.0
         * @since 2.4.0 renamed add_hooks() to add_button_hooks()
         */
        protected function add_button_hooks()
        {
        }
        /**
         * Validates the WC API request.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        protected function is_wc_api_request_valid()
        {
        }
        /**
         * Renders the PayPal button JS.
         *
         * @since 2.3.0
         *
         * @return array
         */
        protected function get_form_handler_params()
        {
        }
        /**
         * Gets the total amount the button should charge.
         *
         * @since 2.3.0
         *
         * @return float
         */
        protected function get_button_total()
        {
        }
        /**
         * Gets the ID of this script handler.
         *
         * @since 2.4.0
         *
         * @return string
         */
        public function get_id()
        {
        }
    }
}
namespace WC_Braintree\Integrations {
    /**
     * Product Add-ons integration class.
     *
     * @since 2.3.0
     */
    class Product_Addons
    {
        /**
         * Constructs the product add-ons integration class.
         *
         * @since 2.3.0
         */
        public function __construct()
        {
        }
        /**
         * Validates the product data for displaying the product button.
         *
         * @since 2.3.0
         *
         * @param bool $is_valid
         * @param Buttons\Product $product_button product button instance
         * @return bool
         */
        public function validate_product_data($is_valid, $product_button)
        {
        }
        /**
         * Prepares the data for product add-ons before adding the product to the cart.
         *
         * @since 2.3.0
         *
         * @param int $product_id product ID
         * @param int $quantity quantity
         * @param int $variation_id product variation ID
         * @param array $cart_data cart data
         */
        public function prepare_product_data_for_addons($product_id, $quantity, $variation_id, $cart_data)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Abstract Integration
     *
     * @since 4.1.0
     */
    abstract class SV_WC_Payment_Gateway_Integration
    {
        /** @var SV_WC_Payment_Gateway direct gateway instance */
        protected $gateway;
        /**
         * Bootstraps the class.
         *
         * @since 4.1.0
         *
         * @param SV_WC_Payment_Gateway $gateway direct gateway instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Return the gateway for the integration
         *
         * @since 4.1.0
         * @return SV_WC_Payment_Gateway
         */
        public function get_gateway()
        {
        }
    }
    /**
     * Pre-Orders Integration
     *
     * @since 4.1.0
     */
    class SV_WC_Payment_Gateway_Integration_Pre_Orders extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Integration
    {
        /**
         * Bootstrap class
         *
         * @since 4.1.0
         *
         * @param SV_WC_Payment_Gateway|SV_WC_Payment_Gateway_Direct $gateway gateway object
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Adds support for pre-orders by hooking in some necessary actions
         *
         * @since 4.1.0
         */
        public function add_support()
        {
        }
        /**
         * Forces tokenization for pre-orders.
         *
         * @see SV_WC_Payment_Gateway::tokenization_forced()
         *
         * @since 4.1.0
         *
         * @param bool $force_tokenization whether tokenization should be forced
         * @return bool
         */
        public function maybe_force_tokenization($force_tokenization)
        {
        }
        /**
         * Adds pre-orders data to the order object.
         *
         * Filtered onto SV_WC_Payment_Gateway::get_order()
         *
         * @see SV_WC_Payment_Gateway::get_order()
         *
         * @since 4.1.0
         *
         * @param \WC_Order $order the order
         * @return \WC_Order
         */
        public function get_order($order)
        {
        }
        /**
         * Handle the pre-order initial payment/tokenization, or defer back to the normal payment
         * processing flow
         *
         * @since 4.1.0
         * @see SV_WC_Payment_Gateway::process_payment()
         * @param boolean $result the result of this pre-order payment process
         * @param int $order_id the order identifier
         * @return true|array true to process this payment as a regular transaction, otherwise
         *         return an array containing keys 'result' and 'redirect'
         */
        public function process_payment($result, $order_id)
        {
        }
        /**
         * Completes a pre-order payment by marking the order as Pre-Ordered.
         *
         * @internal
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         */
        public function complete_payment($order)
        {
        }
        /**
         * Processes a pre-order payment when the pre-order is released.
         *
         * @since 4.1.0
         *
         * @param \WC_Order $order original order containing the pre-order
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function process_release_payment($order)
        {
        }
    }
}
namespace WC_Braintree\Integrations {
    /**
     * Pre-Orders Integration
     *
     * @since 2.4.0
     */
    class Pre_Orders extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Integration_Pre_Orders
    {
        /**
         * Processes a pre-order payment when the pre-order is released.
         *
         * Overridden here to handle PayPal transactions.
         *
         * @since 2.4.0
         *
         * @param \WC_Order $order original order containing the pre-order
         */
        public function process_release_payment($order)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Payment Gateway Token
     *
     * Represents a credit card or check payment token
     */
    class SV_WC_Payment_Gateway_Payment_Token
    {
        /** @var string payment gateway token ID */
        protected $id;
        /**
         * @var array associated token data
         */
        protected $data;
        /**
         * @var string payment type image url
         */
        protected $img_url;
        /**
         * @var array key-value array to map WooCommerce core token props to framework token `$data` keys
         */
        protected $props = ['gateway_id' => 'gateway_id', 'user_id' => 'user_id', 'is_default' => 'default', 'last4' => 'last_four', 'expiry_year' => 'exp_year', 'expiry_month' => 'exp_month', 'card_type' => 'card_type'];
        /**
         * @var null|\WC_Payment_Token WooCommerce core token corresponding to the framework token, if set
         */
        protected $token;
        /**
         * Initializes a payment token.
         *
         * The token $data is expected to have the following members:
         *
         * gateway_id   - string identifier of the gateway the token belongs to (in WooCommerce core tokens this also identifies the environment of the gateway)
         * user_id      - int identifier of the customer user associated to this token
         * default      - boolean optional indicates this is the default payment token
         * type         - string one of 'credit_card' or 'echeck' ('check' for backwards compatibility)
         * last_four    - string last four digits of account number
         * card_type    - string credit card type: visa, mc, amex, disc, diners, jcb, etc (credit card only)
         * exp_month    - string optional expiration month MM (credit card only)
         * exp_year     - string optional expiration year YYYY (credit card only)
         * account_type - string one of 'checking' or 'savings' (checking gateway only)
         * environment  - string optional gateway environment id
         *
         * @since 1.0.0
         *
         * @param string $id the payment gateway token ID
         * @param array|\WC_Payment_Token $data associated data array or WC core token
         */
        public function __construct($id, $data)
        {
        }
        /**
         * Gets the payment token string.
         *
         * @since 4.0.0
         *
         * @return string payment token string
         */
        public function get_id()
        {
        }
        /**
         * Sets the payment token string.
         *
         * @since 5.8.0
         *
         * @param string $id payment token string
         */
        public function set_id($id)
        {
        }
        /**
         * Gets the gateway ID for the token.
         *
         * @since 5.8.0
         *
         * @return string
         */
        public function get_gateway_id()
        {
        }
        /**
         * Sets the gateway ID for the token.
         *
         * @since 5.8.0
         *
         * @param string $gateway_id
         */
        public function set_gateway_id($gateway_id)
        {
        }
        /**
         * Gets the ID of the user associated with the token.
         *
         * @since 5.8.0
         *
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * Sets the ID of the user associated with the token.
         *
         * @since 5.8.0
         *
         * @param int $user_id
         */
        public function set_user_id($user_id)
        {
        }
        /**
         * Determines if this payment token is default.
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function is_default()
        {
        }
        /**
         * Makes this payment token the default or a non-default one.
         *
         * @since 1.0.0
         *
         * @param bool $default
         */
        public function set_default($default)
        {
        }
        /**
         * Determines true if this payment token represents a credit card
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function is_credit_card()
        {
        }
        /**
         * Determines if this payment token represents an eCheck.
         *
         * @since 4.0.0
         *
         * @return bool
         */
        public function is_echeck()
        {
        }
        /**
         * Gets the payment type, one of 'credit_card' or 'echeck'.
         *
         * @since 1.0.0
         *
         * @return string the payment type
         */
        public function get_type()
        {
        }
        /**
         * Gets the card type ie visa, mc, amex, disc, diners, jcb, etc.
         *
         * Credit card gateways only.
         *
         * @since 1.0.0
         *
         * @return null|string the payment type
         */
        public function get_card_type()
        {
        }
        /**
         * Sets the card type.
         *
         * Credit Card gateways only.
         *
         * @since 4.0.0
         *
         * @param string $card_type
         */
        public function set_card_type($card_type)
        {
        }
        /**
         * Gets the bank account type, one of 'checking' or 'savings'.
         *
         * eCheck gateways only.
         *
         * @since 1.0.0
         *
         * @return null|string the payment type
         */
        public function get_account_type()
        {
        }
        /**
         * Sets the account type
         *
         * eCheck gateways only.
         *
         * @since 4.0.0
         *
         * @param string $account_type
         */
        public function set_account_type($account_type)
        {
        }
        /**
         * Gets the full payment type, ie Visa, MasterCard, American Express, Discover, Diners, JCB, eCheck, etc.
         *
         * @since 1.0.0
         *
         * @return string the payment type
         */
        public function get_type_full()
        {
        }
        /**
         * Gets the last four digits of the credit card or check account number.
         *
         * @since 1.0.0
         *
         * @return string last four of account
         */
        public function get_last_four()
        {
        }
        /**
         * Sets the account last four.
         *
         * @since 4.0.0
         *
         * @param string $last_four
         */
        public function set_last_four($last_four)
        {
        }
        /**
         * Gets the expiration month of the credit card.
         *
         * This should only be called for credit card tokens.
         *
         * @since 1.0.0
         *
         * @return string expiration month as a two-digit number
         */
        public function get_exp_month()
        {
        }
        /**
         * Sets the expiration month.
         *
         * @since 4.0.0
         *
         * @param string $month
         */
        public function set_exp_month($month)
        {
        }
        /**
         * Gets the expiration year of the credit card.
         *
         * This should only be called for credit card tokens.
         *
         * @since 1.0.0
         *
         * @return string expiration year as a four-digit number
         */
        public function get_exp_year()
        {
        }
        /**
         * Sets the expiration year.
         *
         * @since 4.0.0
         *
         * @param string $year
         */
        public function set_exp_year($year)
        {
        }
        /**
         * Gets the expiration date in the format MM/YY.
         *
         * Suitable for use in order notes or other customer-facing areas.
         *
         * @since 1.0.0
         *
         * @return string formatted expiration date
         */
        public function get_exp_date()
        {
        }
        /**
         * Sets the full image URL based on the token payment type.
         *
         * Note that this is available for convenience during a single request and will not be  included in persistent storage.
         * @see SV_WC_Payment_Gateway_Payment_Token::get_image_url()
         *
         * @since 1.0.0
         *
         * @param string $url the full image URL
         */
        public function set_image_url($url)
        {
        }
        /**
         * Gets the full image URL based on teh token payment type.
         *
         * @see SV_WC_Payment_Gateway_Payment_Token::set_image_url()
         *
         * @since 1.0.0
         *
         * @return string the full image URL
         */
        public function get_image_url()
        {
        }
        /**
         * Gets the payment method nickname.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_nickname()
        {
        }
        /**
         * Sets the payment method nickname.
         *
         * @since 5.1.0
         *
         * @param string $value nickname value
         */
        public function set_nickname($value)
        {
        }
        /**
         * Gets the billing address hash.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_billing_hash()
        {
        }
        /**
         * Sets the billing hash.
         *
         * @since 5.3.0
         *
         * @param string $value billing hash
         */
        public function set_billing_hash($value)
        {
        }
        /**
         * Gets the gateway environment that this token is associated with.
         *
         * @since 5.8.0
         *
         * @return string
         */
        public function get_environment()
        {
        }
        /**
         * Sets the gateway environment that this token is associated with.
         *
         * @since 5.8.0
         *
         * @param string $value environment to set
         */
        public function set_environment($value)
        {
        }
        /**
         * Determines if this token's data has been migrated to core storage.
         *
         * @since 5.8.0
         *
         * @return bool
         */
        public function is_migrated()
        {
        }
        /**
         * Sets if this token's data has been migrated to core storage.
         *
         * @since 5.8.0
         *
         * @param bool $value if this token's data has been migrated to core storage
         */
        public function set_migrated($value)
        {
        }
        /**
         * Gets the framework token type based on the type of the associated WooCommerce core token.
         *
         * Defaults to 'echeck' if core token is not an instance of \WC_Payment_Token_CC
         *
         * @since 5.10.5
         *
         * @param \WC_Payment_Token $token WooCommerce core token
         *
         * @return string
         */
        protected function get_type_from_woocommerce_payment_token(\WC_Payment_Token $token)
        {
        }
        /**
         * Gets the WooCommerce core payment token object related to this framework token.
         *
         * @since 5.8.0
         *
         * @return \WC_Payment_Token|null
         */
        public function get_woocommerce_payment_token()
        {
        }
        /**
         * Creates the WooCommerce core payment token object that store the data of this framework token.
         *
         * If it's not a credit card, we default to echeck, so there's always an instance.
         *
         * @since 5.10.5
         *
         * @return \WC_Payment_Token
         */
        protected function make_new_woocommerce_payment_token()
        {
        }
        /**
         * Gets a representation of this token suitable for persisting to a datastore.
         *
         * Note: moving forward we will use {@see \WC_Data} and {@see \WC_Payment_Token} to handle data stores.
         * @see SV_WC_Payment_Gateway_Payment_Token::save()
         *
         * @since 1.0.0
         *
         * @return array|mixed datastore representation of token
         */
        public function to_datastore_format()
        {
        }
        /**
         * Reads the properties and meta data of a WooCommerce core token.
         *
         * Sets the found key-values as an array in the data property.
         *
         * @since 5.8.0
         *
         * @param \WC_Payment_Token $core_token
         */
        private function read(\WC_Payment_Token $core_token)
        {
        }
        /**
         * Stores the token data in the database.
         *
         * Stores the token as a Woocommerce payment token.
         * @see \WC_Payment_Token::save()
         *
         * @since 5.8.0
         *
         * @return int ID of the token saved as returned by {@see \WC_Payment_Token::save()}
         * @throws SV_WC_Payment_Gateway_Exception when saving and validating the parent token hits an error
         */
        public function save()
        {
        }
        /**
         * Deletes the associated WooCommerce core token from the database, if any.
         *
         * @see \WC_Payment_Token::delete()
         *
         * @since 5.8.0
         *
         * @param bool $force_delete argument mapped to {@see \WC_Data::delete()}
         * @return bool
         */
        public function delete($force_delete = false)
        {
        }
    }
}
namespace {
    /**
     * Braintree Payment Method Class.
     *
     * Extends the framework Payment Token class to provide Braintree-specific functionality like billing addresses and PayPal support.
     *
     * @since 3.0.0
     */
    class WC_Braintree_Payment_Method extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token
    {
        /** credit card payment method type */
        const CREDIT_CARD_TYPE = 'credit_card';
        /** paypal payment method type */
        const PAYPAL_TYPE = 'paypal';
        /**
         * Gets the billing address ID associated with the credit card.
         *
         * @since 3.0.0
         * @return string|null
         */
        public function get_billing_address_id()
        {
        }
        /**
         * Determines if the payment method is for a PayPal account.
         *
         * @since 3.0.0
         *
         * @return bool
         */
        public function is_paypal_account()
        {
        }
        /**
         * Overrides the standard type full method to change the type text to the email address associated with the PayPal account.
         *
         * @since 3.0.0
         *
         * @return string|void
         */
        public function get_type_full()
        {
        }
        /**
         * Gets the email associated with the PayPal account
         *
         * @since 3.0.0
         *
         * @return string|null
         */
        public function get_payer_email()
        {
        }
        /**
         * Gets the payer ID associated with the PayPal account
         *
         * @since 3.0.0
         *
         * @return string|null
         */
        public function get_payer_id()
        {
        }
        /**
         * Gets the framework token type based on the type of the associated WooCommerce core token.
         *
         * @since 2.5.0
         *
         * @param \WC_Payment_Token $token WooCommerce core token
         *
         * @return string
         */
        protected function get_type_from_woocommerce_payment_token(\WC_Payment_Token $token)
        {
        }
        /**
         * Creates the WooCommerce core payment token object that store the data of this framework token.
         *
         * @since 2.5.0
         *
         * @return \WC_Payment_Token
         */
        protected function make_new_woocommerce_payment_token()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * My Payment Methods Class
     *
     * Renders the My Payment Methods table on the My Account page and handles
     * any associated actions (deleting a payment method, etc)
     *
     * @since 4.0.0
     */
    class SV_WC_Payment_Gateway_My_Payment_Methods extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Handlers\Script_Handler
    {
        /** @var SV_WC_Payment_Gateway_Plugin */
        protected $plugin;
        /** @var SV_WC_Payment_Gateway_Payment_Token[] array of token objects */
        protected $tokens;
        /** @var SV_WC_Payment_Gateway_Payment_Token[] array of token objects */
        protected $credit_card_tokens;
        /** @var SV_WC_Payment_Gateway_Payment_Token[] array of token objects */
        protected $echeck_tokens;
        /** @var bool true if there are tokens */
        protected $has_tokens;
        /** @var string JS handler base class name, without the FW version */
        protected $js_handler_base_class_name = 'SV_WC_Payment_Methods_Handler';
        /**
         * Sets up the class.
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin gateway plugin
         *
         * @since 4.0.0
         */
        public function __construct($plugin)
        {
        }
        /**
         * Adds the action and filter hooks.
         *
         * @since 5.7.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Gets the script ID.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Gets the script ID, dasherized.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id_dasherized()
        {
        }
        /**
         * Initializes the My Payment Methods table
         *
         * @since 5.1.0
         */
        public function init()
        {
        }
        /**
         * Enqueue frontend CSS/JS
         *
         * @since 4.0.0
         */
        public function maybe_enqueue_styles_scripts()
        {
        }
        /**
         * Gets the the available tokens for each plugin gateway and combine them.
         *
         * Tokens are also separated into Credit Card and eCheck-specific class members for convenience.
         *
         * @since 4.0.0
         */
        protected function load_tokens()
        {
        }
        /**
         * Clear the tokens transients after making a method the default,
         * so that the correct payment method shows as default.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param int $token_id token ID
         * @param \WC_Payment_Token $token core token object
         */
        public function clear_payment_methods_transients($token_id, $token)
        {
        }
        /**
         * Adds the token ID to the token data array.
         *
         * @see wc_get_account_saved_payment_methods_list
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array $item individual list item from woocommerce_saved_payment_methods_list
         * @param \WC_Payment_Token $token payment token associated with this method entry
         * @return array
         */
        public function add_payment_methods_list_item_id($item, $token)
        {
        }
        /**
         * Adds the Edit and Save buttons to the Actions column.
         *
         * @see wc_get_account_saved_payment_methods_list
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array $item individual list item from woocommerce_saved_payment_methods_list
         * @param \WC_Payment_Token $core_token payment token associated with this method entry
         * @return array
         */
        public function add_payment_methods_list_item_edit_action($item, $core_token)
        {
        }
        /**
         * Adds columns to the payment methods table.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array of table columns in key => Title format
         * @return array of table columns in key => Title format
         */
        public function add_payment_methods_columns($columns = [])
        {
        }
        /**
         * Gets FW token object from payment method token ID.
         *
         * @since 5.8.0
         *
         * @param string $token_id token string
         * @return SV_WC_Payment_Gateway_Payment_Token|null
         */
        private function get_token_by_id($token_id)
        {
        }
        /**
         * Gets FW token object from payment method data array.
         *
         * @since 5.8.0
         *
         * @param array $method payment method data array
         * @return SV_WC_Payment_Gateway_Payment_Token|null
         */
        private function get_token_from_method_data_array($method)
        {
        }
        /**
         * Adds the Title column content.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array $method payment method
         */
        public function add_payment_method_title($method)
        {
        }
        /**
         * Adds the Details column content.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array $method payment method
         */
        public function add_payment_method_details($method)
        {
        }
        /**
         * Adds the Default column content.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array $method payment method
         */
        public function add_payment_method_default($method)
        {
        }
        /**
         * Triggers the wc_{id}_before_my_payment_method_table action.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param bool $has_methods whether there any saved payment methods in the table
         */
        public function before_payment_methods_table($has_methods)
        {
        }
        /**
         * Triggers the wc_{id}_after_my_payment_method_table action.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param bool $has_methods whether there any saved payment methods in the table
         */
        public function after_payment_methods_table($has_methods)
        {
        }
        /**
         * Triggers action wc_payment_gateway_{id}_payment_method_deleted when a framework token is deleted.
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param int $core_token_id the ID of a core token
         * @param \WC_Payment_Token $core_token the core token object
         */
        public function payment_token_deleted($core_token_id, $core_token)
        {
        }
        /**
         * Renders the payment methods table.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-20 {WV 2020-02-20}
         *
         * @internal
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         */
        public function render()
        {
        }
        /**
         * Gets the JS args for the payment methods handler.
         *
         * Payment gateways can overwrite this method to define specific args.
         * render_js() will apply filters to the returned array of args.
         *
         * @since 5.7.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
        /**
         * Gets the JS handler class name.
         *
         * Plugins can override this for their own JS implementations.
         *
         * @since 5.1.0
         * @deprecated 5.7.0
         *
         * @return string
         */
        protected function get_js_handler_class()
        {
        }
        /**
         * Adds a log entry.
         *
         * @since 5.7.0
         *
         * @param string $message message to log
         */
        protected function log_event($message)
        {
        }
        /**
         * Determines whether logging is enabled.
         *
         * Considers logging enabled at the plugin level if at least one gateway has logging enabled.
         *
         * @since 5.7.0
         *
         * @return bool
         */
        protected function is_logging_enabled()
        {
        }
        /**
         * Return the no payment methods section HTML
         *
         * @since 4.0.0
         * @return string no payment methods HTML
         */
        protected function get_no_payment_methods_html()
        {
        }
        /** Table HTML methods ****************************************************/
        /**
         * Return the table title HTML, text defaults to "My Payment Methods"
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @return string table title HTML
         */
        protected function get_table_title_html()
        {
        }
        /**
         * Returns the table HTML
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @return string table HTML
         */
        public function get_table_html()
        {
        }
        /**
         * Returns the table head HTML
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @return string table thead HTML
         */
        protected function get_table_head_html()
        {
        }
        /**
         * Returns the table headers.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-17 {DM 2020-02-17}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @return array of table headers in key => Title format
         */
        protected function get_table_headers()
        {
        }
        /**
         * Returns the table body HTML
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @return string table tbody HTML
         */
        protected function get_table_body_html()
        {
        }
        /**
         * Returns the table body row HTML, each row represents a single payment method.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token[] $tokens token objects
         * @return string table tbody > tr HTML
         */
        protected function get_table_body_row_html($tokens)
        {
        }
        /**
         * Gets the payment method data for a given token.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-24 {FN 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token the token object
         * @return array payment method data suitable for HTML output
         */
        protected function get_table_body_row_data($token)
        {
        }
        /**
         * Get a token's payment method title HTML.
         *
         * @since 5.1.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token token object
         * @return string
         */
        protected function get_payment_method_title_html(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token)
        {
        }
        /**
         * Get a token's payment method "default" flag HTML.
         *
         * @since 5.1.0
         *
         * @param boolean $is_default true if the token is the default token
         * @param SV_WC_Payment_Gateway_Payment_Token|null $token FW token object, only set if the token is a FW token
         * @return string
         */
        protected function get_payment_method_default_html($is_default = false, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token = null)
        {
        }
        /**
         * Gets a token's payment method details HTML.
         *
         * This includes the method type icon, last four digits, and "default"
         * badge if applicable. Example:
         *
         * [icon] * * * 1234 [default]
         *
         * @since 5.1.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token token object
         * @return array
         */
        protected function get_payment_method_details_html(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token)
        {
        }
        /**
         * Get a token's payment method expiration date HTML.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 5.1.0
         * @deprecated 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token token object
         * @return string
         */
        protected function get_payment_method_expiry_html(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token)
        {
        }
        /**
         * Get a token's payment method actions HTML.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 5.1.0
         * @deprecated 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token token object
         * @return string
         */
        protected function get_payment_method_actions_html(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token)
        {
        }
        /**
         * Gets the actions for the given payment method token.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-21 {WV 2020-02-21}
         *
         * @since 4.0.0
         * @deprecated 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token token object
         * @return array
         */
        protected function get_payment_method_actions($token)
        {
        }
        /** Payment Method actions ************************************************/
        /**
         * Saves a payment method via AJAX.
         *
         * @internal
         *
         * @since 5.1.0
         */
        public function ajax_save_payment_method()
        {
        }
        /**
         * Saves data to a token.
         *
         * Gateways can override this to set their own data if they add custom Edit
         * fields. Note that this does not persist the data to the db, but only sets
         * it for the object.
         *
         * @since 5.1.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token token object
         * @param array $data {
         *    new data to store for the token
         *
         *    @type string $nickname method nickname
         *    @type string $default  whether the method should be set as default
         * }
         * @return SV_WC_Payment_Gateway_Payment_Token
         */
        protected function save_token_data(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token, array $data)
        {
        }
        /**
         * Handles custom payment methods actions.
         *
         * @internal
         *
         * @since 4.0.0
         */
        public function handle_payment_method_actions()
        {
        }
        /**
         * Renders the JavaScript.
         *
         * @since 5.1.0
         */
        public function render_js()
        {
        }
        /**
         * Redirect back to the Payment Methods (WC 2.6+) or My Account page
         *
         * @since 4.0.0
         */
        protected function redirect_to_my_account()
        {
        }
        /**
         * Return the gateway plugin, primarily a convenience method to other actors
         * using filters
         *
         * @since 4.0.0
         *
         * @return SV_WC_Payment_Gateway_Plugin
         */
        public function get_plugin()
        {
        }
        /**
         * Returns true if at least one of the plugin's gateways supports the
         * add new payment method feature
         *
         * @since 4.0.0
         * @return bool
         */
        protected function supports_add_payment_method()
        {
        }
        /**
         * Determines if we're viewing the My Account -> Payment Methods page.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        protected function is_payment_methods_page()
        {
        }
    }
}
namespace {
    /**
     * My Payment Methods Class
     *
     * Renders the My Payment Methods table on the My Account page and handles
     * any associated actions (deleting a payment method, etc).
     * Overrides the default implementation in the SkyVerge framework.
     *
     * @since 2.6.2
     */
    class WC_Braintree_My_Payment_Methods extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_My_Payment_Methods
    {
        /**
         * Returns the JS handler class name. Overrides the one in the SV framework.
         *
         * @since 2.6.2
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Enqueue frontend CSS/JS.
         *
         * @since 2.6.2
         */
        public function maybe_enqueue_styles_scripts()
        {
        }
        /**
         * Initializes the My Payment Methods table.
         *
         * @since 2.6.2
         */
        public function init()
        {
        }
        /**
         * Adds the Expires column content.
         *
         * @since 2.6.2
         * @param array $method Payment method.
         */
        public function add_payment_method_expires($method)
        {
        }
        /**
         * Returns a token's expiration date HTML.
         *
         * @since 2.6.2
         * @internal
         * @param Framework\SV_WC_Payment_Gateway_Payment_Token $token Token object.
         * @return string
         */
        protected function get_payment_method_expires_html($token)
        {
        }
        /**
         * Saves a payment method via AJAX.
         *
         * @since 5.1.0
         * @internal
         */
        public function ajax_save_payment_method()
        {
        }
        /**
         * Saves data to a token.
         * Overrides the method in the parent class to add support for editing expiration dates.
         *
         * @since 2.6.2
         * @param Framework\SV_WC_Payment_Gateway_Payment_Token $token Token object.
         * @param array $data New data to store for the token.
         * @return Framework\SV_WC_Payment_Gateway_Payment_Token
         */
        protected function save_token_data(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Payment_Token $token, array $data)
        {
        }
        /**
         * Validates and splits an expiration date in format MM/YY into month and year parts.
         *
         * @param string $expiration_date The expiration date in MM/YY format.
         * @return array|null NULL if expiration date is invalid. Otherwise, array with keys 'month' and 'year'.
         */
        protected function prepare_expiration_date($expiration_date)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Plugin {
    /**
     * Plugin lifecycle handler.
     *
     * Registers and displays milestone notice prompts and eventually the plugin
     * install, upgrade, activation, and deactivation routines.
     *
     * @since 5.1.0
     */
    class Lifecycle
    {
        /** @var array the version numbers that have an upgrade routine */
        protected $upgrade_versions = [];
        /** @var string minimum milestone version */
        private $milestone_version;
        /** @var SV_WC_Plugin plugin instance */
        private $plugin;
        /**
         * Constructs the class.
         *
         * @since 5.1.0
         *
         * @param SV_WC_Plugin $plugin plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin $plugin)
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.1.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Initializes the plugin lifecycle.
         *
         * @since 5.2.0
         */
        public function init()
        {
        }
        /**
         * Triggers plugin activation.
         *
         * We don't use register_activation_hook() as that can't be called inside
         * the 'plugins_loaded' action. Instead, we rely on setting to track the
         * plugin's activation status.
         *
         * @internal
         *
         * @link https://developer.wordpress.org/reference/functions/register_activation_hook/#comment-2100
         *
         * @since 5.2.0
         */
        public function handle_activation()
        {
        }
        /**
         * Triggers plugin deactivation.
         *
         * @internal
         *
         * @since 5.2.0
         */
        public function handle_deactivation()
        {
        }
        /**
         * Handles plugin activation.
         *
         * Plugins can override this to run their own activation tasks.
         *
         * Important Note: operations here should never be destructive for existing
         * data. Since we rely on an option to track activation, it's possible for
         * this to run outside of genuine activations.
         *
         * @since 5.2.0
         */
        public function activate()
        {
        }
        /**
         * Handles plugin deactivation.
         *
         * Plugins can override this to run their own deactivation tasks.
         *
         * @since 5.2.0
         */
        public function deactivate()
        {
        }
        /**
         * Helper method to install default settings for a plugin.
         *
         * @since 5.2.0
         *
         * @param array $settings settings in format required by WC_Admin_Settings
         */
        public function install_default_settings(array $settings)
        {
        }
        /**
         * Performs any install tasks.
         *
         * @since 5.2.0
         */
        protected function install()
        {
        }
        /**
         * Performs any upgrade tasks based on the provided installed version.
         *
         * @since 5.2.0
         *
         * @param string $installed_version installed version
         */
        protected function upgrade($installed_version)
        {
        }
        /**
         * Adds any lifecycle admin notices.
         *
         * @since 5.1.0
         */
        public function add_admin_notices()
        {
        }
        /** Milestone Methods *****************************************************/
        /**
         * Triggers a milestone.
         *
         * This will only be triggered if the install's "milestone version" is lower
         * than $since. Plugins can specify $since as the version at which a
         * milestone's feature was added. This prevents existing installs from
         * triggering notices for milestones that have long passed, like a payment
         * gateway's first successful payment. Omitting $since will assume the
         * milestone has always existed and should only trigger for fresh installs.
         *
         * @since 5.1.0
         *
         * @param string $id milestone ID
         * @param string $message message to display to the user
         * @param string $since the version since this milestone has existed in the plugin
         * @return bool
         */
        public function trigger_milestone($id, $message, $since = '1.0.0')
        {
        }
        /**
         * Generates a milestone notice message.
         *
         * @since 5.1.0
         *
         * @param string $custom_message custom text that notes what milestone was completed.
         * @return string
         */
        protected function generate_milestone_notice_message($custom_message)
        {
        }
        /**
         * Registers a milestone message to be displayed in the admin.
         *
         * @since 5.1.0
         * @see Lifecycle::generate_milestone_notice_message()
         *
         * @param string $id milestone ID
         * @param string $message message to display to the user
         * @return bool whether the message was successfully registered
         */
        public function register_milestone_message($id, $message)
        {
        }
        /** Event history methods *****************************************************************************************/
        /**
         * Adds an upgrade lifecycle event.
         *
         * @since 5.4.0
         *
         * @param string $from_version version upgrading from
         * @param array $data extra data to add
         * @return false|int
         */
        public function add_upgrade_event($from_version, array $data = array())
        {
        }
        /**
         * Adds a migration lifecycle event.
         *
         * @since 5.4.0
         *
         * @param string $from_plugin plugin migrating from
         * @param string $from_version version migrating from
         * @param array $data extra data to add
         * @return false|int
         */
        public function add_migrate_event($from_plugin, $from_version = '', array $data = array())
        {
        }
        /**
         * Stores a lifecycle event.
         *
         * This can be used to log installs, upgrades, etc...
         *
         * Uses a direct database query to avoid cache issues.
         *
         * @since 5.4.0
         *
         * @param string $name lifecycle event name
         * @param array $data any extra data to store
         * @return false|int
         */
        public function store_event($name, array $data = array())
        {
        }
        /**
         * Gets the lifecycle event history.
         *
         * The last 30 events are stored, with the latest first.
         *
         * @since 5.4.0
         *
         * @return array
         */
        public function get_event_history()
        {
        }
        /**
         * Gets the event history option name.
         *
         * @since 5.4.0
         *
         * @return string
         */
        protected function get_event_history_option_name()
        {
        }
        /** Utility Methods *******************************************************/
        /**
         * Gets the registered milestone messages.
         *
         * @since 5.1.0
         *
         * @return array
         */
        protected function get_milestone_messages()
        {
        }
        /**
         * Sets the milestone version.
         *
         * @since 5.1.0
         *
         * @param string $version plugin version
         * @return bool
         */
        public function set_milestone_version($version)
        {
        }
        /**
         * Gets the milestone version.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_milestone_version()
        {
        }
        /**
         * Gets the currently installed plugin version.
         *
         * @since 5.2.0
         *
         * @return string
         */
        protected function get_installed_version()
        {
        }
        /**
         * Sets the installed plugin version.
         *
         * @since 5.2.0
         *
         * @param string $version version to set
         */
        protected function set_installed_version($version)
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 5.1.0
         *
         * @return SV_WC_Plugin|SV_WC_Payment_Gateway_Plugin
         */
        protected function get_plugin()
        {
        }
        /** Deprecated methods ****************************************************/
        /**
         * Handles tasks after the plugin has been updated.
         *
         * @internal
         *
         * @since 5.1.0
         */
        public function do_update()
        {
        }
    }
}
namespace WC_Braintree {
    /**
     * The lifecycle handler class.
     *
     * @since 2.2.0
     *
     * @method \WC_Braintree get_plugin()
     */
    class Lifecycle extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Plugin\Lifecycle
    {
        /**
         * Initializes the plugin lifecycle.
         *
         * @since 2.2.0
         */
        public function init()
        {
        }
        /**
         * Performs any upgrade tasks based on the provided installed version.
         *
         * @since 2.2.0
         *
         * @param string $installed_version currently installed version
         */
        protected function upgrade($installed_version)
        {
        }
        /**
         * Migrate the necessary settings from the retired plugin.
         *
         * @since 2.2.0
         */
        protected function migrate_from_sv()
        {
        }
        /**
         * Migrates Braintree legacy order, subscription, and user meta to v2.
         *
         * @since 2.2.0
         */
        protected function update_legacy_meta()
        {
        }
        /**
         * Updates to version 2.5.0.
         *
         * Adds an option to indicate whether the PayPal Pay Later button settings must be unchecked by default.
         *
         * @since 2.5.0
         */
        protected function upgrade_to_2_5_0()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout {
    /**
     * Base class to set up an external checkout front-end functionality.
     *
     * @since 5.10.0
     */
    abstract class Frontend extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Handlers\Script_Handler
    {
        /** @var SV_WC_Payment_Gateway_Plugin $plugin the gateway plugin instance */
        protected $plugin;
        /** @var External_Checkout $handler the external checkout handler instance */
        protected $handler;
        /** @var SV_WC_Payment_Gateway $gateway the gateway instance */
        protected $gateway;
        /**
         * Constructs the class.
         *
         * @since 5.10.0
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin the gateway plugin instance
         * @param External_Checkout the handler instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\External_Checkout $handler)
        {
        }
        /**
         * Adds the action and filter hooks.
         *
         * @since 5.10.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Initializes the scripts and hooks.
         *
         * @since 5.10.0
         */
        public function init()
        {
        }
        /**
         * Initializes external checkout on the single product page.
         *
         * Each handler can override this method to add specific product validation.
         *
         * @since 5.10.0
         */
        public function init_product()
        {
        }
        /**
         * Initializes external checkout on the cart page.
         *
         * Each handler can override this method to add specific cart validation.
         *
         * @since 5.10.0
         */
        public function init_cart()
        {
        }
        /**
         * Initializes external checkout on the checkout page.
         *
         * Each handler can override this method to add specific cart validation.
         *
         * @since 5.10.0
         */
        public function init_checkout()
        {
        }
        /**
         * Maybe renders the external checkout buttons and possibly terms notice.
         *
         * @since 5.10.0
         */
        public function maybe_render_external_checkout()
        {
        }
        /**
         * Renders the external checkout buttons and possibly terms notice.
         *
         * @since 5.10.0
         */
        public function render_external_checkout()
        {
        }
        /**
         * Maybe renders the external checkout buttons and possibly terms notice with a divider.
         *
         * @since 5.10.0
         */
        public function maybe_render_external_checkout_with_divider()
        {
        }
        /**
         * Renders the external checkout buttons and possibly terms notice with a divider.
         *
         * @since 5.10.0
         */
        public function render_external_checkout_with_divider()
        {
        }
        /**
         * Renders an external checkout button.
         *
         * Each handler should override this method to render its own button.
         *
         * @since 5.10.0
         */
        public abstract function render_button();
        /**
         * Renders a notice informing the customer that by purchasing they are accepting the website's terms and conditions.
         *
         * Only displayed if a Terms and conditions page is configured.
         *
         * @internal
         *
         * @since 5.10.0
         */
        public function render_terms_notice()
        {
        }
        /**
         * Enqueues the scripts.
         *
         * Each handler should override this method to add its specific JS.
         *
         * @since 5.10.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Enqueues an external checkout JS handler.
         *
         * @since 5.10.0
         *
         * @param array $args handler arguments
         * @param string $object_name JS object name
         * @param string $handler_name handler class name
         */
        protected function enqueue_js_handler(array $args, $object_name = '', $handler_name = '')
        {
        }
        /**
         * Gets the handler instantiation JS.
         *
         * @since 5.10.0
         *
         * @param array $additional_args additional handler arguments, if any
         * @param string $handler_name handler name, if different from self::get_js_handler_class_name()
         * @param string $object_name object name, if different from self::get_js_handler_object_name()
         * @return string
         */
        protected function get_handler_js(array $additional_args = [], $handler_name = '', $object_name = '')
        {
        }
        /**
         * Adds a log entry.
         *
         * @since 5.10.0
         *
         * @param string $message message to log
         */
        protected function log_event($message)
        {
        }
        /**
         * Determines whether logging is enabled.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        protected function is_logging_enabled()
        {
        }
        /**
         * Gets the gateway instance.
         *
         * @since 5.10.0
         *
         * @return SV_WC_Payment_Gateway
         */
        protected function get_gateway()
        {
        }
        /**
         * Gets the gateway plugin instance.
         *
         * @since 5.10.0
         *
         * @return SV_WC_Payment_Gateway_Plugin
         */
        protected function get_plugin()
        {
        }
        /**
         * Gets the external checkout handler instance.
         *
         * @since 5.10.0
         *
         * @return External_Checkout
         */
        protected function get_handler()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Sets up the Apple Pay front-end functionality.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_Frontend extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Frontend
    {
        /** @var string JS handler base class name, without the FW version */
        protected $js_handler_base_class_name = 'SV_WC_Apple_Pay_Handler';
        /**
         * Constructs the class.
         *
         * @since 4.7.0
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin the gateway plugin instance
         * @param SV_WC_Payment_Gateway_Apple_Pay $handler the Apple Pay handler instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay $handler)
        {
        }
        /**
         * Adds the action and filter hooks.
         *
         * @since 5.7.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Gets the script ID.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Gets the script ID, dasherized.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id_dasherized()
        {
        }
        /**
         * Enqueues the scripts.
         *
         * @since 4.7.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Gets the JS handler arguments.
         *
         * @since 5.7.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
        /**
         * Renders an Apple Pay button.
         *
         * @since 4.7.0
         */
        public function render_button()
        {
        }
        /**
         * Gets the args passed to the product JS handler.
         *
         * @since 5.6.0
         *
         * @param \WC_Product $product product object
         * @return array
         */
        protected function get_product_js_handler_args(\WC_Product $product)
        {
        }
        /** Cart functionality ****************************************************/
        /**
         * Gets the args passed to the cart JS handler.
         *
         * @since 5.6.0
         *
         * @param \WC_Cart $cart cart object
         * @return array
         */
        protected function get_cart_js_handler_args(\WC_Cart $cart)
        {
        }
        /** Checkout functionality ************************************************/
        /**
         * Gets the args passed to the checkout JS handler.
         *
         * @since 5.6.0
         *
         * @return array
         */
        protected function get_checkout_js_handler_args()
        {
        }
        /** Deprecated methods ********************************************************************************************/
        /**
         * Gets the JS handler class name.
         *
         * Concrete implementations can override this with their own handler.
         *
         * @since 5.6.0
         * @deprecated 5.7.0
         *
         * @return string
         */
        protected function get_js_handler_name()
        {
        }
        /**
         * Gets the JS handler parameters.
         *
         * @since 4.7.0
         * @deprecated 5.7.0
         *
         * @return array
         */
        protected function get_js_handler_params()
        {
        }
    }
}
namespace WC_Braintree\Apple_Pay {
    /**
     * The Braintree Apple Pay frontend handler.
     *
     * @since 2.2.0
     */
    class Frontend extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay_Frontend
    {
        /**
         * Gets the JS handler class name.
         *
         * @since 2.4.0
         *
         * @return string
         */
        protected function get_js_handler_class_name()
        {
        }
        /**
         * Enqueues the scripts.
         *
         * @see Framework\SV_WC_Payment_Gateway_Apple_Pay_Frontend::enqueue_scripts()
         *
         * @since 2.2.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Gets the parameters to be passed to the JS handler.
         *
         * @see Framework\SV_WC_Payment_Gateway_Apple_Pay_Frontend::get_js_handler_args()
         *
         * @since 2.4.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout {
    /**
     * Base class to set up an external checkout integration.
     *
     * @since 5.10.0
     */
    abstract class External_Checkout
    {
        /** @var string external checkout ID */
        protected $id;
        /** @var string external checkout human-readable label (used in notices and log entries) */
        protected $label;
        /** @var SV_WC_Payment_Gateway_Plugin the plugin instance */
        protected $plugin;
        /**
         * Constructs the class.
         *
         * @since 5.10.0
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin the plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin)
        {
        }
        /**
         * Initializes the handlers.
         *
         * @since 5.10.0
         */
        protected function init()
        {
        }
        /**
         * Initializes the admin handler.
         *
         * @since 5.10.0
         */
        protected abstract function init_admin();
        /**
         * Initializes the AJAX handler.
         *
         * @since 5.10.0
         */
        protected abstract function init_ajax();
        /**
         * Initializes the frontend handler.
         *
         * @since 5.10.0
         */
        protected abstract function init_frontend();
        /**
         * Checks if the external checkout provides the customer billing address to WC before payment confirmation.
         *
         * Each external checkout handler should implement this method according to the external checkout behavior.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public abstract function is_billing_address_available_before_payment();
        /**
         * Gets the configured display locations.
         *
         * @since 5.10.0
         *
         * @return array
         */
        public function get_display_locations()
        {
        }
        /**
         * Adds a log entry to the gateway's debug log.
         *
         * @since 5.10.0
         *
         * @param string $message the log message to add
         */
        public function log($message)
        {
        }
        /**
         * Simulates a successful gateway payment response.
         *
         * This provides an easy way for merchants to test that their settings are correctly configured and communicating
         * with the external checkout provider without processing actual payments to test.
         *
         * @since 5.10.0
         *
         * @param \WC_Order $order order object
         * @return array
         */
        protected function process_test_payment(\WC_Order $order)
        {
        }
        /**
         * Determines if the external checkout is available.
         *
         * Each handler can override this method to add availability requirements.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Determines if the external checkout settings are properly configured.
         *
         * Each handler can override this method to add configuration requirements.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function is_configured()
        {
        }
        /**
         * Determines if the external checkout is enabled.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * Determines if test mode is enabled.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function is_test_mode()
        {
        }
        /**
         * Gets the gateways that declare support for this external checkout flow.
         *
         * @since 5.10.0
         *
         * @return array the supporting gateways as `$gateway_id => \SV_WC_Payment_Gateway`
         */
        public function get_supporting_gateways()
        {
        }
        /**
         * Gets the gateway set to process transactions for this external checkout flow.
         *
         * @since 5.10.0
         *
         * @return SV_WC_Payment_Gateway|null
         */
        public function get_processing_gateway()
        {
        }
        /**
         * Gets the external checkout button style.
         *
         * @since 5.10.0
         *
         * @return string
         */
        public function get_button_style()
        {
        }
        /**
         * Gets the gateway plugin instance.
         *
         * @since 5.10.0
         *
         * @return SV_WC_Payment_Gateway_Plugin
         */
        public function get_plugin()
        {
        }
        /**
         * Gets the external checkout label.
         *
         * @since 5.10.0
         *
         * @return string
         */
        public function get_label()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Sets up Apple Pay support.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\External_Checkout
    {
        /** @var SV_WC_Payment_Gateway_Apple_Pay_Admin the admin instance */
        protected $admin;
        /** @var SV_WC_Payment_Gateway_Apple_Pay_Frontend the frontend instance */
        protected $frontend;
        /** @var SV_WC_Payment_Gateway_Apple_Pay_AJAX the AJAX instance */
        protected $ajax;
        /** @var SV_WC_Payment_Gateway_Apple_Pay_API the Apple Pay API */
        protected $api;
        /**
         * Constructs the class.
         *
         * @since 4.7.0
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin the plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin)
        {
        }
        /**
         * Initializes the admin handler.
         *
         * @since 5.6.0
         */
        protected function init_admin()
        {
        }
        /**
         * Initializes the AJAX handler.
         *
         * @since 5.6.0
         */
        protected function init_ajax()
        {
        }
        /**
         * Initializes the frontend handler.
         *
         * @since 5.6.0
         */
        protected function init_frontend()
        {
        }
        /**
         * Checks if the external checkout provides the customer billing address to WC before payment confirmation.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function is_billing_address_available_before_payment()
        {
        }
        /**
         * Processes the payment after an Apple Pay authorization.
         *
         * This method creates a new order and calls the gateway for processing.
         *
         * @since 4.7.0
         *
         * @return array
         * @throws \Exception
         */
        public function process_payment()
        {
        }
        /**
         * Updates a customer's stored billing & shipping addresses based on the
         * Apple Pay payment response.
         *
         * @since 4.7.0
         *
         * @param int $user_id WordPress user ID
         * @param SV_WC_Payment_Gateway_Apple_Pay_Payment_Response $payment_response payment response object
         */
        protected function update_customer_addresses($user_id, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay_Payment_Response $payment_response)
        {
        }
        /**
         * Gets a single product payment request.
         *
         * @since 4.7.0
         * @see SV_WC_Payment_Gateway_Apple_Pay::build_payment_request()
         *
         * @param \WC_Product $product product object
         * @param bool $in_cart whether to generate a cart for this request
         * @return array
         * @throws \Exception
         */
        public function get_product_payment_request(\WC_Product $product, $in_cart = false)
        {
        }
        /**
         * Gets a payment request based on WooCommerce cart data.
         *
         * @since 4.7.0
         * @see SV_WC_Payment_Gateway_Apple_Pay::build_payment_request()
         *
         * @param \WC_Cart $cart cart object
         * @return array
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function get_cart_payment_request(\WC_Cart $cart)
        {
        }
        /**
         * Recalculates the lines and totals for the current payment request.
         *
         * @since 4.7.0
         *
         * @return array
         * @throws \Exception
         */
        public function recalculate_totals()
        {
        }
        /**
         * Gets the line totals for a cart.
         *
         * @since 4.7.0
         * @see SV_WC_Payment_Gateway_Apple_Pay::build_payment_request_lines()
         *
         * @param \WC_Cart $cart cart object
         * @return array
         */
        protected function get_cart_totals(\WC_Cart $cart)
        {
        }
        /**
         * Builds a payment request for the Apple Pay JS.
         *
         * This contains all of the data necessary to complete a payment.
         *
         * @since 4.7.0
         *
         * @param float|int $amount amount to be charged by Apple Pay
         * @param array $args {
         *     Optional. The payment request args.
         *
         *     @type string $currency_code         Payment currency code. Defaults to the shop currency.
         *     @type string $country_code          Payment country code. Defaults to the shop base country.
         *     @type string $merchant_name         Merchant name. Defaults to the shop name.
         *     @type array  $merchant_capabilities merchant capabilities
         *     @type array  $supported_networks    supported networks or card types
         *     @type bool   $needs_shipping        whether the payment needs shipping
         *     @type array  $line_totals           request line totals. @see \SV_WC_Payment_Gateway_Apple_Pay::build_payment_request_lines()
         * }
         *
         * @return array
         */
        public function build_payment_request($amount, $args = [])
        {
        }
        /**
         * Builds payment request lines for the Apple Pay JS.
         *
         * Apple guidelines prefer that the "lines" displayed on the Apple Pay card
         * should be overall order totals, instead of listing actual product lines.
         * This method standardizes the main breakdowns which are:
         * + Subtotal
         * + Discounts (represented as a single negative amount)
         * + Shipping
         * + Fees
         * + Taxes
         *
         * @since 4.7.0
         *
         * @param array $totals {
         *     Payment line totals.
         *
         *     @type float $subtotal items subtotal
         *     @type float $discount discounts total
         *     @type float $shipping shipping total
         *     @type float $fees     fees total
         *     @type float $taxes    tax total
         * }
         * @return array
         */
        public function build_payment_request_lines($totals)
        {
        }
        /**
         * Formats a total price for use with Apple Pay JS.
         *
         * @since 4.7.0
         *
         * @param string|float $price the price to format
         * @return string
         */
        protected function format_price($price)
        {
        }
        /**
         * Gets the stored payment request data.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_stored_payment_request()
        {
        }
        /**
         * Gets the stored payment response data.
         *
         * @since 4.7.0
         *
         * @return false|SV_WC_Payment_Gateway_Apple_Pay_Payment_Response|false
         */
        public function get_stored_payment_response()
        {
        }
        /**
         * Builds a payment response object from an array of data.
         *
         * @since 5.6.0
         *
         * @param string $data response data, as a JSON string
         * @return SV_WC_Payment_Gateway_Apple_Pay_Payment_Response
         */
        protected function build_payment_response($data)
        {
        }
        /**
         * Stores payment request data for later use.
         *
         * @since 4.7.0
         *
         * @param mixed|array $data
         */
        public function store_payment_request($data)
        {
        }
        /**
         * Stores payment response data for later use.
         *
         * @since 4.7.0
         *
         * @param mixed|array $data
         */
        public function store_payment_response($data)
        {
        }
        /**
         * Clears all payment request & response data from the session.
         *
         * @since 4.7.0
         */
        public function clear_payment_data()
        {
        }
        /**
         * Filters and sets the customer's taxable address.
         *
         * This is necessary because Apple Pay doesn't ever provide a billing
         * address until after payment is complete. If the shop is set to calculate
         * tax based on the billing address, we need to use the shipping address
         * to at least get some rates for new customers.
         *
         * @internal
         *
         * @since 4.7.0
         *
         * @param array $address taxable address
         * @return array
         */
        public function set_customer_taxable_address($address)
        {
        }
        /**
         * Allows the processing gateway to add Apple Pay details to the payment data.
         *
         * @internal
         *
         * @since 4.7.0
         *
         * @param \WC_Order $order the order object
         * @return \WC_Order
         */
        public function add_order_data($order)
        {
        }
        /**
         * Gets the Apple Pay API.
         *
         * @since 4.7.0
         *
         * @return SV_WC_Payment_Gateway_Apple_Pay_API
         */
        public function get_api()
        {
        }
        /**
         * Determines if Apple Pay is available.
         *
         * This does not indicate browser support or a user's ability, but rather
         * that Apple Pay is properly configured and ready to be initiated by the
         * Apple Pay JS.
         *
         * @since 4.7.0
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Determines if Apple Pay settings are properly configured.
         *
         * @since 4.7.0
         *
         * @return bool
         */
        public function is_configured()
        {
        }
        /**
         * Determines if the certification path is set and valid.
         *
         * @since 4.7.0
         *
         * @return bool
         */
        public function is_cert_configured()
        {
        }
        /**
         * Determines if a merchant ID is required for configuration.
         *
         * @since 5.6.0
         *
         * @return bool
         */
        public function requires_merchant_id()
        {
        }
        /**
         * Determines if a local Apple Pay certificate is required for configuration.
         *
         * @since 5.6.0
         *
         * @return bool
         */
        public function requires_certificate()
        {
        }
        /**
         * Gets the configured Apple merchant ID.
         *
         * @since 4.7.0
         * @return string
         */
        public function get_merchant_id()
        {
        }
        /**
         * Gets the certificate file path.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public function get_cert_path()
        {
        }
        /**
         * Gets the currencies accepted by the gateway's Apple Pay integration.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_accepted_currencies()
        {
        }
        /**
         * Gets the gateway's Apple Pay capabilities.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_capabilities()
        {
        }
        /**
         * Gets the supported networks for Apple Pay.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_supported_networks()
        {
        }
    }
}
namespace WC_Braintree {
    /**
     * The Braintree Apple Pay base handler.
     *
     * @since 2.2.0
     */
    class Apple_Pay extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay
    {
        /**
         * Initializes the frontend handler.
         *
         * @since 2.2.0
         */
        protected function init_frontend()
        {
        }
        /**
         * Builds a new payment request.
         *
         * Overridden to remove some properties that are set by Braintree from account configuration.
         *
         * @since 2.2.0
         *
         * @param float|int $amount payment amount
         * @param array $args payment args
         * @return array
         */
        public function build_payment_request($amount, $args = array())
        {
        }
        /**
         * Builds a payment response object based on an array of data.
         *
         * @since 2.2.0
         *
         * @param string $data response data as a JSON string
         *
         * @return Apple_Pay\API\Payment_Response
         */
        protected function build_payment_response($data)
        {
        }
        /**
         * Determines if a local Apple Pay certificate is required.
         *
         * @since 2.2.0
         *
         * @return bool
         */
        public function requires_certificate()
        {
        }
        /**
         * Determines if a merchant ID is required.
         *
         * @since 2.2.0
         *
         * @return bool
         */
        public function requires_merchant_id()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * API Response
     */
    interface SV_WC_API_Response
    {
        /**
         * Returns the string representation of this request
         *
         * @since 2.2.0
         * @return string the request
         */
        public function to_string();
        /**
         * Returns the string representation of this request with any and all
         * sensitive elements masked or removed
         *
         * @since 2.2.0
         * @return string the request, safe for logging/displaying
         */
        public function to_string_safe();
    }
    /**
     * Base JSON API response class.
     *
     * @since 4.3.0
     */
    abstract class SV_WC_API_JSON_Response implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Response
    {
        /** @var string string representation of this response */
        protected $raw_response_json;
        /** @var mixed decoded response data */
        public $response_data;
        /**
         * Build the data object from the raw JSON.
         *
         * @since 4.3.0
         * @param string $raw_response_json The raw JSON
         */
        public function __construct($raw_response_json)
        {
        }
        /**
         * Magic accessor for response data attributes
         *
         * @since 4.3.0
         * @param string $name The attribute name to get.
         * @return mixed The attribute value
         */
        public function __get($name)
        {
        }
        /**
         * Get the string representation of this response.
         *
         * @since 4.3.0
         * @see SV_WC_API_Response::to_string()
         * @return string
         */
        public function to_string()
        {
        }
        /**
         * Get the string representation of this response with any and all sensitive elements masked
         * or removed.
         *
         * @since 4.3.0
         * @see SV_WC_API_Response::to_string_safe()
         * @return string
         */
        public function to_string_safe()
        {
        }
    }
    /**
     * The Apple Pay payment response object.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_Payment_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_JSON_Response
    {
        /**
         * Gets the authorized payment data.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_payment_data()
        {
        }
        /**
         * Gets the authorization transaction ID.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public function get_transaction_id()
        {
        }
        /**
         * Gets the authorized card type.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public function get_card_type()
        {
        }
        /**
         * Gets the last four digits of the authorized card.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public function get_last_four()
        {
        }
        /**
         * Gets the billing address.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_billing_address()
        {
        }
        /**
         * Gets the shipping address.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_shipping_address()
        {
        }
        /**
         * Prepare an address to WC formatting.
         *
         * @since 4.7.0
         *
         * @param \stdClass|object $contact the address to prepare
         * @return array
         */
        protected function prepare_address($contact)
        {
        }
        /**
         * Get the string representation of this response with any and all sensitive
         * elements masked or removed.
         *
         * No strong indication from the Apple documentation that these _need_ to be
         * masked, but they don't provide any useful info and only make the debug
         * logs unnecessarily huge.
         *
         * @since 4.7.0
         *
         * @see SV_WC_API_Response::to_string_safe()
         * @return string
         */
        public function to_string_safe()
        {
        }
    }
}
namespace WC_Braintree\Apple_Pay\API {
    /**
     * The Braintree Apple Pay payment response class.
     *
     * @since 2.2.0
     */
    class Payment_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay_Payment_Response
    {
        /**
         * Gets the associated Braintree nonce.
         *
         * @since 2.2.0
         *
         * @return string
         */
        public function get_braintree_nonce()
        {
        }
    }
}
namespace {
    /**
     * Braintree PayPal Gateway Class
     *
     * @since 3.0.0
     */
    class WC_Gateway_Braintree_PayPal extends \WC_Gateway_Braintree
    {
        /** PayPal payment type */
        const PAYMENT_TYPE_PAYPAL = 'paypal';
        /** @var bool whether cart checkout is enabled */
        protected $enable_cart_checkout;
        /** @var bool whether buy now buttons should be added to product pages */
        protected $enable_product_buy_now;
        /** @var bool whether paypal pay later is enabled */
        protected $enable_paypal_pay_later;
        /** @var string button color */
        protected $button_color;
        /** @var string button size */
        protected $button_size;
        /** @var string button shape */
        protected $button_shape;
        /** @var Buttons\Abstract_Button[] PayPal button handler instances  */
        protected $button_handlers = [];
        /**
         * Initialize the gateway
         *
         * @since 3.0.0
         */
        public function __construct()
        {
        }
        /**
         * Initializes any PayPal buttons that may be required on the current page.
         *
         * @since 2.3.0
         */
        protected function init_paypal_buttons()
        {
        }
        /**
         * Enqueues the PayPal JS scripts
         *
         * @since 2.1.0
         * @see SV_WC_Payment_Gateway::enqueue_gateway_assets()
         */
        public function enqueue_gateway_assets()
        {
        }
        /**
         * Determines if the current page contains a payment form.
         *
         * @since 2.1.0
         * @return bool
         */
        public function is_payment_form_page()
        {
        }
        /**
         * Add PayPal-specific fields to the admin payment token editor
         *
         * @since 3.2.0
         * @return array
         */
        public function adjust_token_editor_fields()
        {
        }
        /**
         * Initializes the payment form handler.
         *
         * @since 2.4.0
         *
         * @return \WC_Braintree_PayPal_Payment_Form
         */
        protected function init_payment_form_instance()
        {
        }
        /**
         * Tweak two frontend strings so they match PayPal lingo instead of "Bank". This is
         * the least hacky approach that doesn't require fairly significant refactoring
         * of the framework code responsible for these strings, or results in an approach
         * that won't work when the strings are translated
         *
         * @since 3.0.0
         * @param string $translated_text translated text
         * @param string $raw_text pre-translated text
         * @param string $text_domain text domain
         * @return string
         */
        public function tweak_payment_methods_text($translated_text, $raw_text, $text_domain)
        {
        }
        /**
         * Tweak the "Delete" link on the My Payment Methods actions list to "Unlink"
         * which is more semantically correct (and less likely to cause customers
         * to think they are deleting their actual PayPal account)
         *
         * @internal
         *
         * @since 3.0.0
         *
         * @param array $item individual list item from woocommerce_saved_payment_methods_list
         * @param \WC_Payment_Token $core_token payment token associated with this method entry
         *
         * @return array
         */
        public function tweak_my_payment_methods_delete_text($item, $core_token)
        {
        }
        /**
         * Adds any credit card authorization/charge admin fields, allowing the
         * administrator to choose between performing authorizations or charges.
         *
         * Overridden to add the Cart Checkout setting in an appropriate spot.
         *
         * @since 2.1.0
         *
         * @param array $form_fields gateway form fields
         * @return array
         */
        protected function add_authorization_charge_form_fields($form_fields)
        {
        }
        /**
         * Generates HTML for the PayPal button preview.
         *
         * @since 2.2.0
         *
         * @return string
         */
        protected function generate_button_preview_html()
        {
        }
        /**
         * Gets the URL used to load the PayPal SDK for the button preview.
         *
         * @since 2.5.0
         *
         * @return string
         */
        protected function get_paypal_sdk_url()
        {
        }
        /**
         * Add PayPal method specific form fields, currently:
         *
         * + remove phone/URL dynamic descriptor (does not apply to PayPal)
         *
         * @since 3.0.0
         * @see WC_Gateway_Braintree::get_method_form_fields()
         * @return array
         */
        protected function get_method_form_fields()
        {
        }
        /**
         * Verify that a payment method nonce is present before processing the
         * transaction
         *
         * @since 3.0.0
         * @return bool
         */
        protected function validate_paypal_fields($is_valid)
        {
        }
        /**
         * Gets the PayPal checkout locale based on the WordPress locale
         *
         * @link http://wpcentral.io/internationalization/
         * @link https://developers.braintreepayments.com/guides/paypal/vault/javascript/v2#country-and-language-support
         *
         * @since 2.0.0
         * @return string
         */
        public function get_safe_locale()
        {
        }
        /**
         * Performs a payment transaction for the given order and returns the
         * result
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::do_transaction()
         * @param \WC_Order $order the order object
         * @return \SV_WC_Payment_Gateway_API_Response the response
         */
        protected function do_paypal_transaction(\WC_Order $order)
        {
        }
        /**
         * Get the order note message when a customer saves their PayPal account
         * to their WC account
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::get_saved_payment_method_token_order_note()
         * @param \WC_Braintree_Payment_Method $token the payment token being saved
         * @return string
         */
        protected function get_saved_payment_token_order_note($token)
        {
        }
        /**
         * Adds any gateway-specific transaction data to the order
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Direct::add_transaction_data()
         * @param \WC_Order $order the order object
         * @param \WC_Braintree_API_PayPal_Transaction_Response $response the transaction response
         */
        public function add_payment_gateway_transaction_data($order, $response)
        {
        }
        /**
         * Builds the Pre-Orders integration class instance.
         *
         * @since 2.4.0
         *
         * @return \WC_Braintree\Integrations\Pre_Orders
         */
        protected function build_pre_orders_integration()
        {
        }
        /** Refund feature ********************************************************/
        /**
         * Adds PayPal-specific data to the order after a refund is performed
         *
         * @since 3.0.0
         * @param \WC_Order $order the order object
         * @param \WC_Braintree_API_PayPal_Transaction_Response $response the transaction response
         */
        protected function add_payment_gateway_refund_data(\WC_Order $order, $response)
        {
        }
        /** Getters ***************************************************************/
        /**
         * Gets the array of instantiated button handlers.
         *
         * @since 2.3.0
         *
         * @return Buttons\Abstract_Button[]
         */
        public function get_button_handlers()
        {
        }
        /**
         * Get the default payment method title, which is configurable within the
         * admin and displayed on checkout
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::get_default_title()
         * @return string payment method title to show on checkout
         */
        protected function get_default_title()
        {
        }
        /**
         * Get the default payment method description, which is configurable
         * within the admin and displayed on checkout
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::get_default_description()
         * @return string payment method description to show on checkout
         */
        protected function get_default_description()
        {
        }
        /**
         * Override the default icon to set a PayPal-specific one
         *
         * @since 3.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Return the PayPal payment method image URL
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway::get_payment_method_image_url()
         * @param string $type unused
         * @return string the image URL
         */
        public function get_payment_method_image_url($type)
        {
        }
        /**
         * Braintree PayPal acts like a direct gateway
         *
         * @since 3.0.0
         * @return boolean true if the gateway supports authorization
         */
        public function supports_credit_card_authorization()
        {
        }
        /**
         * Braintree PayPal acts like a direct gateway
         *
         * @since 3.0.0
         * @return boolean true if the gateway supports charges
         */
        public function supports_credit_card_charge()
        {
        }
        /**
         * Determines if cart checkout is enabled.
         *
         * @since 2.1.0
         *
         * @return bool
         */
        public function cart_checkout_enabled()
        {
        }
        /**
         * Determines if buy now buttons should be added to the product pages.
         *
         * @since 2.3.0
         *
         * @return bool
         */
        public function product_page_buy_now_enabled()
        {
        }
        /**
         * Determines whether the PayPal Pay Later button is enabled.
         *
         * @since 2.5.0
         *
         * @return bool
         */
        public function is_paypal_pay_later_enabled()
        {
        }
        /**
         * Determines whether PayPal Pay Later is supported.
         *
         * @since 2.5.0
         *
         * @return bool
         */
        public function is_paypal_pay_later_supported()
        {
        }
        /**
         * Gets the configured logo type for the Pay Later messaging component.
         *
         * @since 2.5.0
         *
         * @return string
         */
        public function get_pay_later_messaging_logo_type()
        {
        }
        /**
         * Gets the configured logo position for the Pay Later messaging component.
         *
         * @since 2.5.0
         *
         * @return string
         */
        public function get_pay_later_messaging_logo_postion()
        {
        }
        /**
         * Gets the configured text color for the Pay Later messaging component.
         *
         * @since 2.5.0
         *
         * @return string
         */
        public function get_pay_later_messaging_text_color()
        {
        }
        /**
         * Gets disabled funding sources that should not be offer to customers
         *
         * @since 2.6.1
         *
         * @return array
         */
        public function get_disabled_funding_sources()
        {
        }
        /**
         * Determines whether PayPal Debit/Credit Card option should be offered to customers.
         *
         * The Debit/Credit Card should only be shown if the merchant has not enabled Credit Card via Braintree.
         *
         * @since 2.5.0
         *
         * @return bool
         */
        public function is_paypal_card_enabled()
        {
        }
        /**
         * Determines whether the buyer country must be programmatically set or not.
         *
         * When this method returns true, the PayPal SDK will force the buyer country param, which
         * is retrieved automatically by PayPal by default.
         *
         * @since 2.5.0
         *
         * @return bool
         */
        public function should_force_buyer_country_on_loading_sdk()
        {
        }
        /**
         * Gets the configured button color.
         *
         * @since 2.2.0
         *
         * @return string
         */
        public function get_button_color()
        {
        }
        /**
         * Gets the configured button size.
         *
         * @since 2.2.0
         *
         * @return string
         */
        public function get_button_size()
        {
        }
        /**
         * Gets the configured button shape.
         *
         * @since 2.2.0
         *
         * @return string
         */
        public function get_button_shape()
        {
        }
        /**
         * Add Braintree-specific data to the order prior to processing, currently:
         *
         * @since 2.5.0
         * @see SV_WC_Payment_Gateway_Direct::get_order()
         * @param int $order order ID being processed
         * @return \WC_Order object with payment and transaction information attached
         */
        public function get_order($order)
        {
        }
        /**
         * Gets the standard button sizes provided by the original Checkout.js customization options so that we can set the
         * height param and container width as expected by the new SDK.
         *
         * @see https://developer.paypal.com/docs/archive/checkout/how-to/customize-button/#size
         * @see https://developer.paypal.com/docs/checkout/integration-features/customize-button
         *
         * @since 2.5.0
         * @return array
         */
        public function get_button_sizes()
        {
        }
        /**
         * Gets the button height based on the configured button size.
         *
         * @since 2.5.0
         * @param string $size
         * @return int|null
         */
        public function get_button_height($size)
        {
        }
        /**
         * Gets the button width based on the configured button size.
         *
         * @since 2.5.0
         * @param string $size
         * @return int|null
         */
        protected function get_button_width($size)
        {
        }
        /**
         * Gets the style tag for the button container HTML.
         *
         * @since 2.5.0
         * @return string
         */
        public function get_button_container_style()
        {
        }
        /**
         * Gets the style attributes for the Pay Later Messaging container element.
         *
         * @since 2.5.0
         *
         * @return string
         */
        public function get_pay_later_messaging_style_attributes()
        {
        }
        /**
         * Gets admin params.
         *
         * @internal
         *
         * @since 2.5.0
         * @return array
         */
        protected function get_admin_params()
        {
        }
        /**
         * Gets the specific settings help text for a given country.
         *
         * @since 2.5.0
         *
         * @return string the best help text for the store's country
         */
        protected function get_settings_description_text()
        {
        }
        /**
         * Gets the specific client ID for a given country.
         *
         * @since 2.5.0
         *
         * @param string $country the country code to determine which client ID to be returned
         * @return string the best client ID for the given country
         */
        protected function get_sandbox_sdk_client_id($country)
        {
        }
    }
    /**
     * WooCommerce PayPal Payment Token provided by Braintree.
     *
     * Representation of a payment token for PayPal accounts.
     *
     * @since 2.5.0
     */
    class WC_Payment_Token_Braintree_PayPal extends \WC_Payment_Token
    {
        /** @var string Toke Type String */
        protected $type = 'Braintree_PayPal';
        /** @var array Stores PayPal payment token data */
        protected $extra_data = ['payer_email' => '', 'payer_id' => ''];
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Direct Payment Gateway API Response
     */
    interface SV_WC_Payment_Gateway_API_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Response
    {
        /**
         * Checks if the transaction was successful.
         *
         * @since 1.0.0
         *
         * @return bool true if approved, false otherwise
         */
        public function transaction_approved();
        /**
         * Returns true if the transaction was held, for instance due to AVS/CSC
         * Fraud Settings.  This indicates that the transaction was successful, but
         * did not pass a fraud check and should be reviewed.
         *
         * @since 1.0.0
         *
         * @return bool true if the transaction was held, false otherwise
         */
        public function transaction_held();
        /**
         * Gets the response status message, or null if there is no status message
         * associated with this transaction.
         *
         * @since 1.0.0
         *
         * @return string status message
         */
        public function get_status_message();
        /**
         * Gets the response status code, or null if there is no status code
         * associated with this transaction.
         *
         * @since 1.0.0
         *
         * @return string status code
         */
        public function get_status_code();
        /**
         * Gets the response transaction id, or null if there is no transaction id
         * associated with this transaction.
         *
         * @since 1.0.0
         *
         * @return string transaction id
         */
        public function get_transaction_id();
        /**
         * Gets the payment type: 'credit-card', 'echeck', etc...
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_payment_type();
        /**
         * Returns a message appropriate for a frontend user.  This should be used
         * to provide enough information to a user to allow them to resolve an
         * issue on their own, but not enough to help nefarious folks fishing for
         * info.
         *
         * @see SV_WC_Payment_Gateway_API_Response_Message_Helper
         *
         * @since 2.2.0
         *
         * @return string user message, if there is one
         */
        public function get_user_message();
    }
    /**
     * WooCommerce Direct Payment Gateway API Authorization Response
     *
     * Represents a Payment Gateway Credit Card Authorization response.  This should
     * also be used as the parent class for credit card charge (authorization +
     * capture) responses.
     */
    interface SV_WC_Payment_Gateway_API_Authorization_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response
    {
        /**
         * The authorization code is returned from the credit card processor to
         * indicate that the charge will be paid by the card issuer.
         *
         * @since 1.0.0
         *
         * @return string credit card authorization code
         */
        public function get_authorization_code();
        /**
         * Returns the result of the AVS check.
         *
         * @since 1.0.0
         *
         * @return string result of the AVS check, if any
         */
        public function get_avs_result();
        /**
         * Returns the result of the CSC check.
         *
         * @since 1.0.0
         *
         * @return string result of CSC check
         */
        public function get_csc_result();
        /**
         * Returns true if the CSC check was successful.
         *
         * @since 1.0.0
         *
         * @return boolean true if the CSC check was successful
         */
        public function csc_match();
    }
    /**
     * WooCommerce Direct Payment Gateway API Create Payment Token Response
     */
    interface SV_WC_Payment_Gateway_API_Create_Payment_Token_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response
    {
        /**
         * Returns the payment token.
         *
         * @since 1.0.0
         *
         * @return SV_WC_Payment_Gateway_Payment_Token payment token
         */
        public function get_payment_token();
    }
    /**
     * WooCommerce Direct Payment Gateway API Customer Response
     */
    interface SV_WC_Payment_Gateway_API_Customer_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response
    {
        /**
         * Returns the customer ID.
         *
         * @since 4.0.0
         *
         * @return string customer ID returned by the gateway
         */
        public function get_customer_id();
    }
}
namespace {
    /**
     * Braintree API Abstract Response Class
     *
     * Provides functionality common to all responses
     *
     * @since 3.0.0
     */
    abstract class WC_Braintree_API_Response implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Response
    {
        /** @var mixed raw response from the Braintree SDK */
        protected $response;
        /**
         * Setup the response
         *
         * @since 3.0.0
         * @param mixed $response response data from Braintree SDK
         * @param string $response_type indicates whether the response is from a credit card or PayPal request
         */
        public function __construct($response, $response_type)
        {
        }
        /**
         * Checks if the transaction was successful. Braintree's "success" attribute
         * indicates _both_ that the request was successful *and* the transaction
         * (if the request was a transaction) was successful. If a request/transaction
         * isn't successful, it's due to one or more of the following 4 things:
         *
         * 1) Validation failure - invalid request data or the request itself was invalid
         * 2) Gateway Rejection - the gateway rejected the transaction (duplicate check, AVS, CVV, fraud, 3dsecure)
         * 3) Processor Declined - the merchant processor declined the transaction (soft/hard decline, depends on error code)
         * 4) Exception - invalid API credentials, Braintree's servers are down or undergoing maintenance
         *
         * Note that exceptions are handled prior to response "parsing" so there's no
         * handling for them here.
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Response::transaction_approved()
         * @return bool true if approved, false otherwise
         */
        public function transaction_approved()
        {
        }
        /**
         * Braintree does not support the concept of held requests/transactions, so this
         * doesn not apply
         *
         * @since 3.0.0
         * @return bool
         */
        public function transaction_held()
        {
        }
        /**
         * Gets the transaction status code
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Response::get_status_code()
         * @return string status code
         */
        public function get_status_code()
        {
        }
        /**
         * Gets the transaction status message
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Response::get_status_message()
         * @return string status message
         */
        public function get_status_message()
        {
        }
        /**
         * Get the success status info for the given parameter, either code or message
         *
         * @since 3.0.0
         * @param string $type status info type, either `code` or `message`
         * @return string
         */
        public function get_success_status_info($type)
        {
        }
        /**
         * Get the failure status info for the given parameter, either code or message
         *
         * @since 3.0.0
         * @param string $type status info type, either `code` or `message`
         * @return string
         */
        public function get_failure_status_info($type)
        {
        }
        /**
         * Returns true if the response contains validation errors (API call
         * cannot be processed because the request was invalid)
         *
         * @link https://developers.braintreepayments.com/reference/general/validation-errors/overview/php
         *
         * @since 3.0.0
         * @return bool
         */
        public function has_validation_errors()
        {
        }
        /**
         * Get an associative array of validation codes => messages
         *
         * @link https://developers.braintreepayments.com/reference/general/validation-errors/all/php
         *
         * @since 3.0.0
         * @return array
         */
        public function get_validation_errors()
        {
        }
        /**
         * Get the error message suitable for displaying to the customer. This should
         * provide enough information to be helpful for correcting customer-solvable
         * issues (e.g. invalid CVV) but not enough to help nefarious folks phishing
         * for data
         *
         * @since 3.0.0
         */
        public function get_user_message()
        {
        }
        /**
         * Return the string representation of the response
         *
         * @since 3.0.0
         * @return string
         */
        public function to_string()
        {
        }
        /**
         * Return the string representation of the response, stripped of any
         * confidential info
         *
         * @since 3.0.0
         * @return string
         */
        public function to_string_safe()
        {
        }
        /**
         * Return the response type, either `credit-card` or `paypal`
         *
         * @since 3.0.0
         * @return string
         */
        protected function get_response_type()
        {
        }
        /**
         * Return the payment type for the response, either `credit-card` or `paypal`
         *
         * @since 3.2.0
         * @return string
         */
        public function get_payment_type()
        {
        }
        /**
         * Return true if this response is from a credit card request
         *
         * @since 3.0.0
         * @return bool
         */
        protected function is_credit_card_response()
        {
        }
    }
    /**
     * Braintree API Abstract Transaction Response Class
     *
     * Provides common functionality to Credit Card & PayPal transaction response classes
     *
     * @link https://developers.braintreepayments.com/javascript+php/reference/response/transaction
     *
     * @since 3.0.0
     */
    abstract class WC_Braintree_API_Transaction_Response extends \WC_Braintree_API_Response implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_response, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Authorization_Response, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Create_Payment_Token_Response, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Customer_Response
    {
        /** Braintree's CSC match value */
        const CSC_MATCH = 'M';
        /**
         * Gets the response transaction ID
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Response::get_transaction_id()
         * @return string transaction id
         */
        public function get_transaction_id()
        {
        }
        /**
         * Returns the result of the AVS check
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#avs_error_response_code
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Authorization_Response::get_avs_result()
         * @return string result of the AVS check, if any
         */
        public function get_avs_result()
        {
        }
        /**
         * Returns the result of the CSC check
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Authorization_Response::get_csc_result()
         * @return string result of CSC check
         */
        public function get_csc_result()
        {
        }
        /**
         * Returns true if the CSC check was successful
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#cvv_response_code
         *
         * @since 3.0
         * @see SV_WC_Payment_Gateway_API_Authorization_Response::csc_match()
         * @return boolean true if the CSC check was successful
         */
        public function csc_match()
        {
        }
        /**
         * Return the customer ID for the request
         *
         * @since 3.0.0
         * @return string|null
         */
        public function get_customer_id()
        {
        }
        /** Risk Data feature *****************************************************/
        /**
         * Returns true if the transaction has risk data present. If this is not
         * present, advanced fraud tools are not enabled (and set to "show") in
         * the merchant's Braintree account and/or not enabled within plugin settings
         *
         * @since 3.0.0
         */
        public function has_risk_data()
        {
        }
        /**
         * Get the risk ID for this transaction
         *
         * @since 3.0.0
         */
        public function get_risk_id()
        {
        }
        /**
         * Get the risk decision for this transaction, one of: 'not evaulated',
         * 'approve', 'review', 'decline'
         *
         * @since 3.0.0
         */
        public function get_risk_decision()
        {
        }
    }
    /**
     * Braintree API Vault Response Class
     *
     * Handles common methods for parsing vault responses (customers/payment methods)
     *
     * @since 3.0.0
     */
    abstract class WC_Braintree_API_Vault_Response extends \WC_Braintree_API_Response
    {
        /**
         * Get the payment token data from the given payment method
         *
         * @since 3.0.0
         * @param \Braintree\CreditCard|\Braintree\PayPalAccount $payment_method payment method object
         * @return array
         */
        protected function get_payment_token_data($payment_method)
        {
        }
    }
    /**
     * Braintree API PayPal Transaction Response Class
     *
     * Handles parsing PayPal transaction responses
     *
     * @see https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_PayPal_Transaction_Response extends \WC_Braintree_API_Transaction_Response
    {
        /**
         * Get the authorization code
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details.authorization_id
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Authorization_Response::get_authorization_code()
         * @return string 6 character credit card authorization code
         */
        public function get_authorization_code()
        {
        }
        /**
         * Get the PayPal payment token created during this transaction
         *
         * @since 3.0.0
         * @return \WC_Braintree_Payment_Method
         * @throws \SV_WC_Payment_Gateway_Exception if token is missing
         */
        public function get_payment_token()
        {
        }
        /**
         * Get the email address associated with the PayPal account used for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details.payer_email
         *
         * @since 3.0.0
         * @return string
         */
        public function get_payer_email()
        {
        }
        /**
         * Get the payer ID associated with the PayPal account used for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details.payer_id
         *
         * @since 3.0.0
         * @return string
         */
        public function get_payer_id()
        {
        }
        /**
         * Get the payment ID for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details.payment_id
         *
         * @since 3.0.0
         * @return string
         */
        public function get_payment_id()
        {
        }
        /**
         * Get the debug ID for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details
         *
         * @since 3.0.0
         * @return string
         */
        public function get_debug_id()
        {
        }
        /**
         * Get the refund ID for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#paypal_details.refund_id
         *
         * @since 3.0.0
         * @return string
         */
        public function get_refund_id()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Direct Payment Gateway API Create Payment Token Response
     */
    interface SV_WC_Payment_Gateway_API_Get_Tokenized_Payment_Methods_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response
    {
        /**
         * Returns any payment tokens.
         *
         * @since 1.0.0
         *
         * @return SV_WC_Payment_Gateway_Payment_Token[] array of SV_WC_Payment_Gateway_Payment_Token payment tokens, keyed by the token ID
         */
        public function get_payment_tokens();
    }
}
namespace {
    /**
     * Braintree API Customer Response Class
     *
     * Handles parsing customer responses
     *
     * @since 3.0.0
     *
     * @property Braintree\Customer $response
     */
    class WC_Braintree_API_Customer_Response extends \WC_Braintree_API_Vault_Response implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Create_Payment_Token_Response, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Get_Tokenized_Payment_Methods_Response, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Customer_Response
    {
        /** @var \Braintree\CreditCard|\Braintree\PayPalAccount created payment method */
        protected $payment_method;
        /**
         * Override the default constructor to set created payment method since
         * Braintree simply provides a list of payment methods instead of an object
         * containing the one just created ಠ_ಠ
         *
         * @since 3.0.0
         * @param mixed $response response data from Braintree SDK
         * @param string $response_type indicates whether the response is from a credit card or PayPal request
         */
        public function __construct($response, $response_type)
        {
        }
        /**
         * Get the transaction ID, which is typically only present for create customer
         * requests when verifying the associated credit card. PayPal
         * requests (successful or unsuccessful) do not return a transaction ID
         *
         * @since 3.0.0
         */
        public function get_transaction_id()
        {
        }
        /**
         * Get the single payment token from creating a new customer with a payment
         * method
         *
         * @link https://developers.braintreepayments.com/reference/response/customer/php
         *
         * @since 3.0.0
         * @return \WC_Braintree_Payment_Method
         */
        public function get_payment_token()
        {
        }
        /**
         * Get the payment tokens for the customer.
         *
         * @link https://developers.braintreepayments.com/reference/response/customer/php
         *
         * @since 3.0.0
         *
         * @return array associative array of token => WC_Braintree_Payment_Method objects
         */
        public function get_payment_tokens()
        {
        }
        /**
         * Get the customer ID generated by Braintree when creating a new customer
         *
         * @since 3.0.0
         * @return string
         */
        public function get_customer_id()
        {
        }
        /** Risk Data feature *****************************************************/
        /**
         * Returns true if the transaction has risk data present. If this is not
         * present, advanced fraud tools are not enabled (and set to "show") in
         * the merchant's Braintree account and/or not enabled within plugin settings
         *
         * @since 3.0.0
         */
        public function has_risk_data()
        {
        }
        /**
         * Get the risk ID for this transaction
         *
         * @since 3.0.0
         */
        public function get_risk_id()
        {
        }
        /**
         * Get the risk decision for this transaction, one of: 'not evaulated',
         * 'approve', 'review', 'decline'
         *
         * @since 3.0.0
         */
        public function get_risk_decision()
        {
        }
        /** Helpers ***************************************************************/
        /**
         * Helper to return the payment method created along with the customer, can be
         * either a credit card or PayPal account
         *
         * @since 3.0.0
         * @return \Braintree\CreditCard|\Braintree\PayPalAccount
         */
        protected function get_created_payment_method()
        {
        }
    }
    /**
     * Braintree API Credit Card Transaction Response Class
     *
     * Handles parsing credit card transaction responses
     *
     * @see https://developers.braintreepayments.com/reference/response/transaction/php#credit_card_details
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Credit_Card_Transaction_Response extends \WC_Braintree_API_Transaction_Response
    {
        /**
         * Get the authorization code
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API_Authorization_Response::get_authorization_code()
         * @return string 6 character credit card authorization code
         */
        public function get_authorization_code()
        {
        }
        /**
         * Get the credit card payment token created during this transaction
         *
         * @since 3.0.0
         * @return \WC_Braintree_Payment_Method
         * @throws \SV_WC_Payment_Gateway_Exception if token is missing
         */
        public function get_payment_token()
        {
        }
        /**
         * Get the card type used for this transaction
         *
         * @since 3.0.0
         * @return string
         */
        public function get_card_type()
        {
        }
        /**
         * Get the BIN (bank identification number), AKA the first 6 digits of the card
         * number. Most useful for identifying the card type.
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#credit_card_details.bin
         *
         * @since 3.0.0
         * @return string
         */
        public function get_bin()
        {
        }
        /**
         * Get the masked card number, which is the first 6 digits followed by
         * 6 asterisks then the last 4 digits. This complies with PCI security standards.
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#credit_card_details.masked_number
         *
         * @since 3.0.0
         * @return string
         */
        public function get_masked_number()
        {
        }
        /**
         * Get the last four digits of the card number used for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#credit_card_details.last_4
         *
         * @since 3.0.0
         * @return string
         */
        public function get_last_four()
        {
        }
        /**
         * Get the expiration month (MM) of the card number used for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#credit_card_details.expiration_month
         *
         * @since 3.0.0
         * @return string
         */
        public function get_exp_month()
        {
        }
        /**
         * Get the expiration year (YYYY) of the card number used for this transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#credit_card_details.expiration_year
         *
         * @since 3.0.0
         * @return string
         */
        public function get_exp_year()
        {
        }
        /**
         * Get the billing address ID associated with the credit card token added
         * during the transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/transaction/php#billing_details.id
         *
         * @since 3.0.0
         * @return string
         */
        public function get_billing_address_id()
        {
        }
        /** 3D Secure feature *****************************************************/
        /**
         * Returns true if 3D Secure information is present for the transaction
         *
         * @since 3.0.0
         */
        public function has_3d_secure_info()
        {
        }
        /**
         * Returns the 3D secure statuses
         *
         * @link https://developers.braintreepayments.com/guides/3d-secure/server-side/php#server-side-details
         *
         * @since 3.0.0
         * @return string
         */
        public function get_3d_secure_status()
        {
        }
        /**
         * Returns true if liability was shifted for the 3D secure transaction
         *
         * @link https://developers.braintreepayments.com/guides/3d-secure/server-side/php#server-side-details
         *
         * @since 3.0.0
         * @return bool
         */
        public function get_3d_secure_liability_shifted()
        {
        }
        /**
         * Returns true if a liability shift was possible for the 3D secure transaction
         *
         * @link https://developers.braintreepayments.com/guides/3d-secure/server-side/php#server-side-details
         *
         * @since 3.0.0
         * @return bool
         */
        public function get_3d_secure_liability_shift_possible()
        {
        }
        /**
         * Returns true if the card was enrolled in a 3D secure program
         *
         * @link https://developers.braintreepayments.com/guides/3d-secure/server-side/php#server-side-details
         *
         * @since 3.0.0
         * @return bool
         */
        public function get_3d_secure_enrollment()
        {
        }
    }
    /**
     * Braintree API Payment Method Response Class
     *
     * Handles parsing payment method responses
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Payment_Method_Response extends \WC_Braintree_API_Vault_Response implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Create_Payment_Token_Response
    {
        /**
         * Get the transaction ID, which is typically only present for create customer/
         * payment method requests when verifying the associated credit card. PayPal
         * requests (successful or unsuccessful) do not return a transaction ID
         *
         * @since 3.0.0
         */
        public function get_transaction_id()
        {
        }
        /**
         * Get the single payment token from a Braintree create payment method call
         *
         * @link https://developers.braintreepayments.com/reference/response/payment-method/php
         *
         * @since 3.0.0
         *
         * @return \WC_Braintree_Payment_Method
         */
        public function get_payment_token()
        {
        }
        /**
         * Return true if the verification for this payment method has an AVS rejection from the gateway.
         *
         * @since 3.2.0
         * @return bool
         */
        public function has_avs_rejection()
        {
        }
        /**
         * Return true if the verification for this payment method has an CVV rejection from the gateway.
         *
         * @since 3.2.0
         * @return bool
         */
        public function has_cvv_rejection()
        {
        }
        /** Risk Data feature *****************************************************/
        /**
         * Returns true if the transaction has risk data present. If this is not
         * present, advanced fraud tools are not enabled (and set to "show") in
         * the merchant's Braintree account and/or not enabled within plugin settings
         *
         * @since 3.0.0
         */
        public function has_risk_data()
        {
        }
        /**
         * Get the risk ID for this transaction
         *
         * @since 3.0.0
         */
        public function get_risk_id()
        {
        }
        /**
         * Get the risk decision for this transaction, one of: 'not evaulated',
         * 'approve', 'review', 'decline'
         *
         * @since 3.0.0
         */
        public function get_risk_decision()
        {
        }
    }
    /**
     * Braintree API Merchant configuration response.
     *
     * This is always preceded by a client token request, as that contains all of the information necessary for the
     * merchant account.
     *
     * @since 2.2.0
     */
    class WC_Braintree_API_Merchant_Configuration_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_JSON_Response
    {
        /**
         * Determines if 3D Secure is enabled for the merchant account.
         *
         * @since 2.2.0
         *
         * @return bool
         */
        public function is_3d_secure_enabled()
        {
        }
        // TODO: we should be able to check for PayPal & Apple Pay too
    }
    /**
     * Braintree API Payment Method Nonce Response Class
     *
     * Handles parsing payment method nonce responses
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Payment_Method_Nonce_Response extends \WC_Braintree_API_Response
    {
        /**
         * Get the payment method nonce
         *
         * @link https://developers.braintreepayments.com/reference/response/payment-method-nonce/php
         *
         * @since 3.0.0
         * @return mixed
         */
        public function get_nonce()
        {
        }
        /**
         * Returns true if the payment method has 3D Secure information present
         *
         * @since 3.0.0
         * @return bool
         */
        public function has_3d_secure_info()
        {
        }
        /**
         * Returns the 3D secure statuses
         *
         * @link https://developers.braintreepayments.com/reference/response/payment-method-nonce/php#three_d_secure_info.status
         *
         * @since 3.0.0
         * @return string
         */
        public function get_3d_secure_status()
        {
        }
        /**
         * Returns true if liability was shifted for the 3D secure transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/payment-method-nonce/php#three_d_secure_info.liability_shifted
         *
         * @since 3.0.0
         * @return bool
         */
        public function get_3d_secure_liability_shifted()
        {
        }
        /**
         * Returns true if a liability shift was possible for the 3D secure transaction
         *
         * @link https://developers.braintreepayments.com/reference/response/payment-method-nonce/php#three_d_secure_info.liability_shift_possible
         *
         * @since 3.0.0
         * @return bool
         */
        public function get_3d_secure_liability_shift_possible()
        {
        }
        /**
         * Returns true if the card was enrolled in a 3D secure program
         *
         * @link https://developers.braintreepayments.com/reference/response/payment-method-nonce/php#three_d_secure_info.enrolled
         *
         * @since 3.0.0
         * @return bool
         */
        public function get_3d_secure_enrollment()
        {
        }
        /**
         * Gets the payment method data.
         *
         * Some API requests will return the object directly, and others return it inside `paymentMethodNonce` so we need to
         * check for that.
         *
         * @since 2.2.0
         *
         * @return object|null
         */
        protected function get_payment_method()
        {
        }
    }
    /**
     * Braintree API Client Token Response Class
     *
     * Handles retrieving the client token
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Client_Token_Response extends \WC_Braintree_API_Response
    {
        /**
         * Return the client token string
         *
         * @since 3.0.0
         * @return string a very long string (1000+ chars)
         */
        public function get_client_token()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Direct Payment Gateway API
     */
    interface SV_WC_Payment_Gateway_API
    {
        /**
         * Perform a credit card authorization for the given order
         *
         * If the gateway does not support credit card authorizations, this method can be a no-op.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @return SV_WC_Payment_Gateway_API_Response credit card charge response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function credit_card_authorization(\WC_Order $order);
        /**
         * Perform a credit card charge for the given order
         *
         * If the gateway does not support credit card charges, this method can be a no-op.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @return SV_WC_Payment_Gateway_API_Response credit card charge response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function credit_card_charge(\WC_Order $order);
        /**
         * Perform a credit card capture for a given authorized order
         *
         * If the gateway does not support credit card capture, this method can be a no-op.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @return SV_WC_Payment_Gateway_API_Response credit card capture response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function credit_card_capture(\WC_Order $order);
        /**
         * Perform an eCheck debit (ACH transaction) for the given order
         *
         * If the gateway does not support check debits, this method can be a no-op.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @return SV_WC_Payment_Gateway_API_Response check debit response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function check_debit(\WC_Order $order);
        /**
         * Perform a refund for the given order
         *
         * If the gateway does not support refunds, this method can be a no-op.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order order object
         * @return SV_WC_Payment_Gateway_API_Response refund response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function refund(\WC_Order $order);
        /**
         * Perform a void for the given order
         *
         * If the gateway does not support voids, this method can be a no-op.
         *
         * @since 3.1.0
         *
         * @param \WC_Order $order order object
         * @return SV_WC_Payment_Gateway_API_Response void response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function void(\WC_Order $order);
        /**
         * Creates a payment token for the given order
         *
         * If the gateway does not support tokenization, this method can be a no-op.
         *
         * @since 1.0.0
         *
         * @param \WC_Order $order the order
         * @return SV_WC_Payment_Gateway_API_Create_Payment_Token_Response payment method tokenization response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function tokenize_payment_method(\WC_Order $order);
        /**
         * Updates a tokenized payment method.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         * @return SV_WC_Payment_Gateway_API_Response
         * @throws SV_WC_Plugin_Exception
         */
        public function update_tokenized_payment_method(\WC_Order $order);
        /**
         * Determines if this API supports updating tokenized payment methods.
         *
         * @see SV_WC_Payment_Gateway_API::update_tokenized_payment_method()
         *
         * @since 5.3.0
         *
         * @return bool
         */
        public function supports_update_tokenized_payment_method();
        /**
         * Removes the tokenized payment method.  This method should not be invoked
         * unless supports_remove_tokenized_payment_method() returns true, otherwise
         * the results are undefined.
         *
         * @since 1.0.0
         * @see SV_WC_Payment_Gateway_API::supports_remove_tokenized_payment_method()
         *
         * @param string $token the payment method token
         * @param string $customer_id unique customer id for gateways that support it
         * @return SV_WC_Payment_Gateway_API_Response remove tokenized payment method response
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function remove_tokenized_payment_method($token, $customer_id);
        /**
         * Returns true if this API supports a "remove tokenized payment method"
         * request.  If this method returns true, then remove_tokenized_payment_method()
         * is considered safe to call.
         *
         * @since 1.0.0
         * @see SV_WC_Payment_Gateway_API::remove_tokenized_payment_method()
         *
         * @return boolean true if this API supports a "remove tokenized payment method" request, false otherwise
         */
        public function supports_remove_tokenized_payment_method();
        /**
         * Returns all tokenized payment methods for the customer.  This method
         * should not be invoked unless supports_get_tokenized_payment_methods()
         * return true, otherwise the results are undefined
         *
         * @since 1.0.0
         * @see SV_WC_Payment_Gateway_API::supports_get_tokenized_payment_methods()
         *
         * @param string $customer_id unique customer id
         * @return SV_WC_Payment_Gateway_API_Get_Tokenized_Payment_Methods_Response response containing any payment tokens for the customer
         * @throws SV_WC_Payment_Gateway_Exception network timeouts, etc
         */
        public function get_tokenized_payment_methods($customer_id);
        /**
         * Returns true if this API supports a "get tokenized payment methods"
         * request.  If this method returns true, then get_tokenized_payment_methods()
         * is considered safe to call.
         *
         * @since 1.0.0
         * @see SV_WC_Payment_Gateway_API::get_tokenized_payment_methods()
         *
         * @return boolean true if this API supports a "get tokenized payment methods" request, false otherwise
         */
        public function supports_get_tokenized_payment_methods();
        /**
         * Returns the most recent request object
         *
         * @since 1.0.0
         *
         * @return SV_WC_Payment_Gateway_API_Request the most recent request object
         */
        public function get_request();
        /**
         * Returns the most recent response object
         *
         * @since 1.0.0
         *
         * @return SV_WC_Payment_Gateway_API_Response the most recent response object
         */
        public function get_response();
        /**
         * Returns the WC_Order object associated with the request, if any
         *
         * @since 4.1.0
         *
         * @return \WC_Order
         */
        public function get_order();
    }
    /**
     * # WooCommerce Plugin Framework API Base Class
     *
     * This class provides a standardized framework for constructing an API wrapper
     * to external services. It is designed to be extremely flexible.
     *
     * @version 2.2.0
     */
    abstract class SV_WC_API_Base
    {
        /** @var string request method, defaults to POST */
        protected $request_method = 'POST';
        /** @var string URI used for the request */
        protected $request_uri;
        /** @var array request headers */
        protected $request_headers = array();
        /** @var string request user-agent */
        protected $request_user_agent;
        /** @var string request HTTP version, defaults to 1.0 */
        protected $request_http_version = '1.0';
        /** @var string request duration */
        protected $request_duration;
        /** @var SV_WC_API_Request|object request */
        protected $request;
        /** @var string response code */
        protected $response_code;
        /** @var string response message */
        protected $response_message;
        /** @var array response headers */
        protected $response_headers;
        /** @var string raw response body */
        protected $raw_response_body;
        /** @var string response handler class name */
        protected $response_handler;
        /** @var SV_WC_API_Response|object response */
        protected $response;
        /**
         * Perform the request and return the parsed response
         *
         * @since 2.2.0
         *
         * @param SV_WC_API_Request|object $request class instance which implements SV_WC_API_Request
         * @return SV_WC_API_Response|object class instance which implements SV_WC_API_Response
         * @throws SV_WC_API_Exception may be thrown in implementations
         */
        protected function perform_request($request)
        {
        }
        /**
         * Simple wrapper for wp_remote_request() so child classes can override this
         * and provide their own transport mechanism if needed, e.g. a custom
         * cURL implementation
         *
         * @since 2.2.0
         *
         * @param string $request_uri
         * @param string $request_args
         * @return array|\WP_Error
         */
        protected function do_remote_request($request_uri, $request_args)
        {
        }
        /**
         * Handle and parse the response
         *
         * @since 2.2.0
         * @param array|\WP_Error $response response data
         * @throws SV_WC_API_Exception network issues, timeouts, API errors, etc
         * @return SV_WC_API_Request|object request class instance that implements SV_WC_API_Request
         */
        protected function handle_response($response)
        {
        }
        /**
         * Allow child classes to validate a response prior to instantiating the
         * response object. Useful for checking response codes or messages, e.g.
         * throw an exception if the response code is not 200.
         *
         * A child class implementing this method should simply return true if the response
         * processing should continue, or throw a \SV_WC_API_Exception with a
         * relevant error message & code to stop processing.
         *
         * Note: Child classes *must* sanitize the raw response body before throwing
         * an exception, as it will be included in the broadcast_request() method
         * which is typically used to log requests.
         *
         * @since 2.2.0
         */
        protected function do_pre_parse_response_validation()
        {
        }
        /**
         * Allow child classes to validate a response after it has been parsed
         * and instantiated. This is useful for check error codes or messages that
         * exist in the parsed response.
         *
         * A child class implementing this method should simply return true if the response
         * processing should continue, or throw a \SV_WC_API_Exception with a
         * relevant error message & code to stop processing.
         *
         * Note: Response body sanitization is handled automatically
         *
         * @since 2.2.0
         */
        protected function do_post_parse_response_validation()
        {
        }
        /**
         * Return the parsed response object for the request
         *
         * @since 2.2.0
         * @param string $raw_response_body
         * @return object|SV_WC_API_Request response class instance which implements SV_WC_API_Request
         */
        protected function get_parsed_response($raw_response_body)
        {
        }
        /**
         * Alert other actors that a request has been performed. This is primarily used
         * for request logging.
         *
         * @since 2.2.0
         */
        protected function broadcast_request()
        {
        }
        /**
         * Reset the API response members to their
         *
         * @since 1.0.0
         */
        protected function reset_response()
        {
        }
        /** Request Getters *******************************************************/
        /**
         * Get the request URI
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_request_uri()
        {
        }
        /**
         * Gets the request path.
         *
         * @since 4.5.0
         * @return string
         */
        protected function get_request_path()
        {
        }
        /**
         * Gets the request URL query.
         *
         * @since 4.5.0
         *
         * @return string
         */
        protected function get_request_query()
        {
        }
        /**
         * Get the request arguments in the format required by wp_remote_request()
         *
         * @since 2.2.0
         *
         * @return array
         */
        protected function get_request_args()
        {
        }
        /**
         * Get the request method, POST by default
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_request_method()
        {
        }
        /**
         * Gets the request body.
         *
         * @since 4.5.0
         * @return string
         */
        protected function get_request_body()
        {
        }
        /**
         * Gets the sanitized request body, for logging.
         *
         * @since 4.5.0
         * @return string
         */
        protected function get_sanitized_request_body()
        {
        }
        /**
         * Get the request HTTP version, 1.1 by default
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_request_http_version()
        {
        }
        /**
         * Get the request headers
         *
         * @since 2.2.0
         * @return array
         */
        protected function get_request_headers()
        {
        }
        /**
         * Get sanitized request headers suitable for logging, stripped of any
         * confidential information
         *
         * The `Authorization` header is sanitized automatically.
         *
         * Child classes that implement any custom authorization headers should
         * override this method to perform sanitization.
         *
         * @since 2.2.0
         * @return array
         */
        protected function get_sanitized_request_headers()
        {
        }
        /**
         * Get the request user agent, defaults to:
         *
         * Dasherized-Plugin-Name/Plugin-Version (WooCommerce/WC-Version; WordPress/WP-Version)
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_request_user_agent()
        {
        }
        /**
         * Get the request duration in seconds, rounded to the 5th decimal place
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_request_duration()
        {
        }
        /**
         * Gets the request data for broadcasting the request.
         *
         * Overriding this method allows child classes to customize the request data when broadcasting the request.
         *
         * @since 5.10.10
         *
         * @return array
         */
        protected function get_request_data_for_broadcast() : array
        {
        }
        /** Response Getters ******************************************************/
        /**
         * Get the response handler class name
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_response_handler()
        {
        }
        /**
         * Get the response code
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_response_code()
        {
        }
        /**
         * Get the response message
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_response_message()
        {
        }
        /**
         * Get the response headers
         *
         * @since 2.2.0
         * @return array
         */
        protected function get_response_headers()
        {
        }
        /**
         * Get the raw response body, prior to any parsing or sanitization
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_raw_response_body()
        {
        }
        /**
         * Get the sanitized response body, provided by the response class
         * to_string_safe() method
         *
         * @since 2.2.0
         * @return string|null
         */
        protected function get_sanitized_response_body()
        {
        }
        /**
         * Gets the response data for broadcasting the request.
         *
         * Overriding this method allows child classes to customize the response data when broadcasting the request.
         *
         * @since 5.10.10
         *
         * @return array
         * @return array
         */
        protected function get_response_data_for_broadcast() : array
        {
        }
        /** Misc Getters ******************************************************/
        /**
         * Returns the most recent request object.
         *
         * @since 2.2.0
         *
         * @return SV_WC_API_Request|object the most recent request object
         */
        public function get_request()
        {
        }
        /**
         * Returns the most recent response object.
         *
         * @since 2.2.0
         *
         * @return SV_WC_API_Response|object the most recent response object
         */
        public function get_response()
        {
        }
        /**
         * Get the ID for the API, used primarily to namespace the action name
         * for broadcasting requests
         *
         * @since 2.2.0
         * @return string
         */
        protected function get_api_id()
        {
        }
        /**
         * Return a new request object
         *
         * Child classes must implement this to return an object that implements
         * \SV_WC_API_Request which should be used in the child class API methods
         * to build the request. The returned SV_WC_API_Request should be passed
         * to self::perform_request() by your concrete API methods
         *
         * @since 2.2.0
         *
         * @param array $args optional request arguments
         * @return SV_WC_API_Request|object
         */
        protected abstract function get_new_request($args = array());
        /**
         * Return the plugin class instance associated with this API
         *
         * Child classes must implement this to return their plugin class instance
         *
         * This is used for defining the plugin ID used in filter names, as well
         * as the plugin name used for the default user agent.
         *
         * @since 2.2.0
         *
         * @return SV_WC_Plugin
         */
        protected abstract function get_plugin();
        /** Setters ***************************************************************/
        /**
         * Set a request header
         *
         * @since 2.2.0
         * @param string $name header name
         * @param string $value header value
         * @return string
         */
        protected function set_request_header($name, $value)
        {
        }
        /**
         * Set multiple request headers at once
         *
         * @since 4.3.0
         * @param array $headers
         */
        protected function set_request_headers(array $headers)
        {
        }
        /**
         * Set HTTP basic auth for the request
         *
         * Since 2.2.0
         * @param string $username
         * @param string $password
         */
        protected function set_http_basic_auth($username, $password)
        {
        }
        /**
         * Set the Content-Type request header
         *
         * @since 2.2.0
         * @param string $content_type
         */
        protected function set_request_content_type_header($content_type)
        {
        }
        /**
         * Set the Accept request header
         *
         * @since 2.2.0
         * @param string $type the request accept type
         */
        protected function set_request_accept_header($type)
        {
        }
        /**
         * Set the response handler class name. This class will be instantiated
         * to parse the response for the request.
         *
         * Note the class should implement SV_WC_API
         *
         * @since 2.2.0
         *
         * @param string $handler handle class name
         */
        protected function set_response_handler($handler)
        {
        }
        /**
         * Maybe force TLS v1.2 requests.
         *
         * @since 4.4.0
         *
         * @param resource $handle the cURL handle returned by curl_init() (passed by reference)
         * @param array $r the HTTP request arguments
         * @param $url string the request URL
         */
        public function set_tls_1_2_request($handle, $r, $url)
        {
        }
        /**
         * Determines if TLS v1.2 is required for API requests.
         *
         * @since 4.4.0
         * @deprecated 5.5.2
         *
         * @return bool
         */
        public function require_tls_1_2()
        {
        }
        /**
         * Determines if TLS 1.2 is available.
         *
         * @since 4.6.5
         *
         * @return bool
         */
        public function is_tls_1_2_available()
        {
        }
    }
}
namespace {
    /**
     * Braintree API Class
     *
     * This is a pseudo-wrapper around the Braintree PHP SDK
     *
     * @link https://github.com/braintree/braintree_php
     * @link https://developers.braintreepayments.com/javascript+php/reference/overview
     *
     * @since 3.0.0
     */
    class WC_Braintree_API extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Base implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API
    {
        /** Braintree Partner ID for transactions using Braintree Auth */
        const BT_AUTH_CHANNEL = 'woothemes_bt';
        /** Braintree Partner ID for transactions using API keys */
        const API_CHANNEL = 'woocommerce_bt';
        /** @var \WC_Gateway_Braintree class instance */
        protected $gateway;
        /** @var \WC_Order order associated with the request, if any */
        protected $order;
        /**
         * Constructor - setup request object and set endpoint
         *
         * @since 3.0.0
         * @param \WC_Gateway_Braintree $gateway class instance
         */
        public function __construct($gateway)
        {
        }
        /** API Methods ***********************************************************/
        /**
         * Gets the merchant account configuration.
         *
         * @since 2.2.0
         *
         * @return WC_Braintree_API_Merchant_Configuration_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function get_merchant_configuration()
        {
        }
        /**
         * Get a client token for initializing the hosted fields or PayPal forms
         *
         * @since 3.0.0
         *
         * @param array $args
         * @return \WC_Braintree_API_Client_Token_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function get_client_token(array $args = array())
        {
        }
        /**
         * Create a new credit card charge transaction
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_API::credit_card_charge()
         *
         * @param \WC_Order $order order
         * @return \WC_Braintree_API_Credit_Card_Transaction_Response|\WC_Braintree_API_PayPal_Transaction_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function credit_card_charge(\WC_Order $order)
        {
        }
        /**
         * Create a new credit card auth transaction
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_API::credit_card_authorization()
         * @param \WC_Order $order order
         * @return \WC_Braintree_API_Credit_Card_Transaction_Response|\WC_Braintree_API_PayPal_Transaction_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function credit_card_authorization(\WC_Order $order)
        {
        }
        /**
         * Verify the CSC for a transaction when using a saved payment toke and CSC
         * is required. This must be done prior to processing the actual transaction.
         *
         * @since 3.0.0
         *
         * @param \WC_Order $order order
         * @throws Framework\SV_WC_Plugin_Exception if CSC verification fails
         */
        public function verify_csc(\WC_Order $order)
        {
        }
        /**
         * Capture funds for a credit card authorization
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_API::credit_card_capture()
         * @param \WC_Order $order order
         * @return \WC_Braintree_API_Transaction_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function credit_card_capture(\WC_Order $order)
        {
        }
        /**
         * Check Debit - no-op
         *
         * @since 3.0.0
         * @param \WC_Order $order order
         * @return null
         */
        public function check_debit(\WC_Order $order)
        {
        }
        /**
         * Perform a refund for the order
         *
         * @since 3.0.0
         *
         * @param \WC_Order $order the order
         * @return \WC_Braintree_API_Transaction_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function refund(\WC_Order $order)
        {
        }
        /**
         * Perform a void for the order
         *
         * @since 3.0.0
         *
         * @param \WC_Order $order the order
         * @return \WC_Braintree_API_Transaction_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function void(\WC_Order $order)
        {
        }
        /** API Tokenization methods **********************************************/
        /**
         * Tokenize the payment method associated with the order
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_API::tokenize_payment_method()
         * @param WC_Order $order the order with associated payment and customer info
         * @return \WC_Braintree_API_Customer_Response|\WC_Braintree_API_Payment_Method_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function tokenize_payment_method(\WC_Order $order)
        {
        }
        /**
         * Get the tokenized payment methods for the customer
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_API::get_tokenized_payment_methods()
         * @param string $customer_id unique
         * @return \WC_Braintree_API_Customer_response
         * @throws Framework\SV_WC_API_Exception
         */
        public function get_tokenized_payment_methods($customer_id)
        {
        }
        /**
         * Update the tokenized payment method for given customer
         *
         * @since 3.0.0
         * @param WC_Order $order
         */
        public function update_tokenized_payment_method(\WC_Order $order)
        {
        }
        /**
         * Determines whether updating tokenized methods is supported.
         *
         * @since 2.2.0
         *
         * @return bool
         */
        public function supports_update_tokenized_payment_method()
        {
        }
        /**
         * Updates a credit card token expiration date.
         *
         * @since 2.6.2
         * @param string $token the payment method token.
         * @param string $expiration_date the expiration date in MM/YY format.
         */
        public function update_cc_token_expiration_date($token, $expiration_date)
        {
        }
        /**
         * Remove the given tokenized payment method for the customer
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_API::remove_tokenized_payment_method()
         * @param string $token the payment method token
         * @param string $customer_id unique
         * @return \WC_Braintree_API_Payment_Method_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function remove_tokenized_payment_method($token, $customer_id)
        {
        }
        /**
         * Braintree supports retrieving tokenized payment methods
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API::supports_get_tokenized_payment_methods()
         * @return boolean true
         */
        public function supports_get_tokenized_payment_methods()
        {
        }
        /**
         * Braintree supports removing tokenized payment methods
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_API::supports_remove_tokenized_payment_method()
         * @return boolean true
         */
        public function supports_remove_tokenized_payment_method()
        {
        }
        /**
         * Get payment method info from a client-side provided nonce, generally
         * used for retrieving and verifying 3D secure information server-side
         *
         * @since 3.0.0
         * @param string $nonce payment nonce
         * @return \WC_Braintree_API_Payment_Method_Nonce_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function get_payment_method_from_nonce($nonce)
        {
        }
        /**
         * Get the payment nonce from a given payment token, generally used to
         * provide a nonce for a previously vaulted payment method to the client-side
         * 3D Secure verification script
         *
         * @since 3.0.0
         * @param string $token payment method token ID
         * @return \WC_Braintree_API_Payment_Method_Nonce_Response
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function get_nonce_from_payment_token($token)
        {
        }
        /** Request/Response Methods **********************************************/
        /**
         * Perform a remote request using the Braintree SDK. Overriddes the standard
         * wp_remote_request() as the SDK already provides a cURL implementation
         *
         * @since 3.0.0
         * @see SV_WC_API_Base::do_remote_request()
         * @param string $callback SDK static callback, e.g. `\Braintree\ClientToken::generate`
         * @param array $callback_params parameters to pass to the static callback
         * @return \Exception|mixed
         */
        protected function do_remote_request($callback, $callback_params)
        {
        }
        /**
         * Handle and parse the response
         *
         * @since 3.0.0
         * @param mixed $response directly from Braintree SDK
         * @return \WC_Braintree_API_Response
         * @throws Framework\SV_WC_API_Exception braintree errors
         */
        protected function handle_response($response)
        {
        }
        /**
         * Get a human-friendly message from the Braintree exception object
         *
         * @link https://developers.braintreepayments.com/reference/general/exceptions/php
         * @since 3.0.0
         * @param \Exception $e
         * @return string
         */
        protected function get_braintree_exception_message($e)
        {
        }
        /**
         * Override the standard request URI with the static callback instead, since
         * the Braintree SDK handles the actual remote request
         *
         * @since 3.0.0
         * @see SV_WC_API_Base::get_request_uri()
         * @return string
         */
        protected function get_request_uri()
        {
        }
        /**
         * Override the standard request args with the static callback params instead,
         * since the Braintree SDK handles the actual remote request
         *
         * @since 3.0.0
         * @see SV_WC_API_Base::get_request_args()
         * @return array
         */
        protected function get_request_args()
        {
        }
        /**
         * Alert other actors that a request has been performed, primarily for
         * request/response logging.
         *
         * @see SV_WC_API_Base::broadcast_request()
         * @since 3.0.0
         */
        protected function broadcast_request()
        {
        }
        /**
         * Builds and returns a new API request object
         *
         * @since 3.0.0
         * @see SV_WC_API_Base::get_new_request()
         * @param array $args
         * @throws Framework\SV_WC_API_Exception for invalid request types
         * @return \WC_Braintree_API_Client_Token_Request|\WC_Braintree_API_Transaction_Request|\WC_Braintree_API_Customer_Request|\WC_Braintree_API_Payment_Method_Request|\WC_Braintree_API_Payment_Method_Nonce_Request
         */
        protected function get_new_request($args = array())
        {
        }
        /** Helper methods ********************************************************/
        /**
         * Determines if the gateway is configured with Braintree Auth or standard
         * API keys.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        protected function is_braintree_auth()
        {
        }
        /**
         * Return the order associated with the request, if any
         *
         * @since 3.0.0
         * @return \WC_Order
         */
        public function get_order()
        {
        }
        /**
         * Get the ID for the API, used primarily to namespace the action name
         * for broadcasting requests
         *
         * @since 3.0.0
         * @return string
         */
        protected function get_api_id()
        {
        }
        /**
         * Return the gateway plugin
         *
         * @since 3.0.0
         * @return \WC_Braintree
         */
        public function get_plugin()
        {
        }
        /**
         * Returns the gateway class associated with the request
         *
         * @since 3.0.0
         * @return \WC_Gateway_Braintree class instance
         */
        public function get_gateway()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Payment Gateway API Response Message Helper
     *
     * This utility class is meant to provide a standard set of error messages to be
     * displayed to the customer during checkout.
     *
     * Most gateways define a plethora of error conditions, some of which a customer
     * can resolve on their own, and others which must be handled by the admin/
     * merchant.  It's not always clear which conditions should be reported to a
     * customer, or what the best wording is.  This utility class seeks to ease
     * the development burden of handling customer-facing error messages by
     * defining a set of common error conditions/messages which can be used by
     * nearly any gateway.
     *
     * This class, or a subclass, should be instantiated by the API response object,
     * which will use a gateway-specific mapping of error conditions to message,
     * and returned by the `SV_WC_Payment_Gateway_API_Response::get_user_message()`
     * method implementation.  Add new common/generic codes and messages to this
     * base class as they are encountered during gateway integration development,
     * and use a subclass to include any gateway-specific codes/messages.
     *
     * @since 2.2.0
     */
    class SV_WC_Payment_Gateway_API_Response_Message_Helper
    {
        /**
         * Returns a message appropriate for a frontend user.  This should be used
         * to provide enough information to a user to allow them to resolve an
         * issue on their own, but not enough to help nefarious folks fishing for
         * info.
         *
         * @since 2.2.0
         *
         * @param string[] $message_ids array of string $message_id's which identify the message(s) to return
         * @return string a user message, combining all $message_ids
         */
        public function get_user_messages($message_ids)
        {
        }
        /**
         * Returns a message appropriate for a frontend user.  This should be used
         * to provide enough information to a user to allow them to resolve an
         * issue on their own, but not enough to help nefarious folks fishing for
         * info.
         *
         * @since 2.2.0
         * @param string $message_id identifies the message to return
         * @return string a user message
         */
        public function get_user_message($message_id)
        {
        }
    }
}
namespace {
    /**
     * Braintree API Response Message Helper
     *
     * Builds customer-friendly response messages by mapping the various Braintree
     * error codes to standardized messages
     *
     * @link https://developers.braintreepayments.com/reference/general/processor-responses/authorization-responses
     * @link https://developers.braintreepayments.com/reference/general/validation-errors/all/php
     *
     * @since 3.0.0
     * @see SV_WC_Payment_Gateway_API_Response_Message_Helper
     */
    class WC_Braintree_API_Response_Message_Helper extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response_Message_Helper
    {
        /** @var \WC_Braintree_API_Response response */
        protected $response;
        /** @var array decline codes */
        protected $decline_codes = array('cvv' => 'csc_mismatch', 'avs' => 'avs_mismatch', '2000' => 'card_declined', '2001' => 'insufficient_funds', '2002' => 'credit_limit_reached', '2003' => 'card_declined', '2004' => 'card_expired', '2005' => 'card_number_invalid', '2006' => 'card_expiry_invalid', '2007' => 'card_type_invalid', '2008' => 'card_number_invalid', '2010' => 'csc_mismatch', '2012' => 'card_declined', '2013' => 'card_declined', '2014' => 'card_declined', '2016' => 'error', '2017' => 'card_declined', '2018' => 'card_declined', '2023' => 'card_type_not_accepted', '2024' => 'card_type_not_accepted', '2038' => 'card_declined', '2046' => 'card_declined', '2056' => 'credit_limit_reached', '2059' => 'avs_mismatch', '2060' => 'avs_mismatch', '2075' => 'paypal_closed');
        /**
         * Initialize the API response message handler
         *
         * @since 3.0.0
         * @param \WC_Braintree_API_Response $response
         */
        public function __construct($response)
        {
        }
        /**
         * Get the user-facing error/decline message. Used in place of the get_user_message()
         * method because this class is instantiated with the response class and handles
         * generating the message ID internally
         *
         * @since 3.0.0
         * @return string
         */
        public function get_message()
        {
        }
        /**
         * Returns a message appropriate for a frontend user.  This should be used
         * to provide enough information to a user to allow them to resolve an
         * issue on their own, but not enough to help nefarious folks fishing for
         * info. Adds a few custom authorize.net-specific user error messages.
         *
         * @since 2.0.0
         * @see SV_WC_Payment_Gateway_API_Response_Message_Helper::get_user_message()
         * @param string $message_id identifies the message to return
         * @return string a user message
         */
        public function get_user_message($message_id)
        {
        }
        /**
         * Return the response object for this user message
         *
         * @since 3.0.0
         * @return \WC_Braintree_API_Response
         */
        public function get_response()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * API Request
     */
    interface SV_WC_API_Request
    {
        /**
         * Returns the method for this request: one of HEAD, GET, PUT, PATCH, POST, DELETE
         *
         * @since 4.0.0
         * @return string the request method, or null to use the API default
         */
        public function get_method();
        /**
         * Returns the request path
         *
         * @since 4.0.0
         * @return string the request path, or '' if none
         */
        public function get_path();
        /**
         * Gets the request query params.
         *
         * @since 5.0.0
         *
         * @return array
         */
        public function get_params();
        /**
         * Gets the request data.
         *
         * @since 5.0.0
         *
         * @return array
         */
        public function get_data();
        /**
         * Returns the string representation of this request
         *
         * @since 2.2.0
         * @return string the request
         */
        public function to_string();
        /**
         * Returns the string representation of this request with any and all
         * sensitive elements masked or removed
         *
         * @since 2.2.0
         * @return string the request, safe for logging/displaying
         */
        public function to_string_safe();
    }
    /**
     * WooCommerce Direct Payment Gateway API Request
     */
    interface SV_WC_Payment_Gateway_API_Request extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Request
    {
    }
}
namespace {
    /**
     * Braintree API Abstract Request Class
     *
     * Provides functionality common to all requests
     *
     * @since 3.0.0
     */
    abstract class WC_Braintree_API_Request implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Request
    {
        /** @var string Braintree SDK resource for the request, e.g. `transaction` */
        protected $resource;
        /** @var string Braintree SDK callback for the request, e.g. `generate` */
        protected $callback;
        /** @var array request data passed to the static callback */
        protected $request_data = array();
        /** @var \WC_Order order associated with the request, if any */
        protected $order;
        /**
         * Setup request
         *
         * @since 3.0.0
         * @param \WC_Order|null $order order if available
         */
        public function __construct($order = \null)
        {
        }
        /**
         * Sets the Braintree SDK resource for the request.
         *
         * @since 2.0.0
         * @param string $resource, e.g. `transaction`
         */
        protected function set_resource($resource)
        {
        }
        /**
         * Gets the Braintree SDK resource for the request.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_resource()
        {
        }
        /**
         * Set the static callback for the request
         *
         * @since 3.0.0
         * @param string $callback, e.g. `\Braintree\ClientToken::generate`
         */
        protected function set_callback($callback)
        {
        }
        /**
         * Get the static callback for the request
         *
         * @since 3.0.0
         * @return string static callback
         */
        public function get_callback()
        {
        }
        /**
         * Get the callback parameters for the request
         *
         * @since 3.0.0
         * @return array
         */
        public function get_callback_params()
        {
        }
        /**
         * Return the string representation of the request
         *
         * @since 3.0.0
         * @return string
         */
        public function to_string()
        {
        }
        /**
         * Return the string representation of the request, stripped of any
         * confidential information
         *
         * @since 3.0.0
         * @return string
         */
        public function to_string_safe()
        {
        }
        /**
         * Gets the request data.
         *
         * @since 2.2.0
         *
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Gets the request data which is the 1st parameter passed to the static callback set.
         *
         * @since 3.0.0
         * @deprecated 2.2.0
         *
         * @return array
         */
        public function get_request_data()
        {
        }
        /**
         * Remove null or blank string values from the request data (up to 2 levels deep)
         *
         * @TODO: this can be improved to traverse deeper and be simpler @MR 2015-10-23
         *
         * @since 3.0.0
         */
        protected function remove_empty_data()
        {
        }
        /**
         * Gets a property from the associated order.
         *
         * @since 2.0.0
         * @param string $prop the desired order property
         * @return mixed
         */
        public function get_order_prop($prop)
        {
        }
        /**
         * Get the order associated with the request, if any
         *
         * @since 3.0.0
         * @return \WC_Order|null
         */
        public function get_order()
        {
        }
        /**
         * Braintree requests do not require a method per request
         *
         * @since 3.0.0
         * @return null
         */
        public function get_method()
        {
        }
        /**
         * Braintree requests do not require a path per request
         *
         * @since 3.0.0
         * @return null
         */
        public function get_path()
        {
        }
        /**
         * Braintree requests do not require any query params.
         *
         * @since 2.2.0
         *
         * @return array
         */
        public function get_params()
        {
        }
    }
    /**
     * Braintree API Payment Method Nonce Request class
     *
     * Handles creating and getting payment method nonces, generally for use with 3D Secure
     * transactions
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Payment_Method_Nonce_Request extends \WC_Braintree_API_Request
    {
        /**
         * Get the payment method associated with a nonce. This is used to retrieve
         * 3D Secure information about a nonce server-side before processing the transaction.
         *
         * @link https://developers.braintreepayments.com/reference/request/payment-method-nonce/create/php
         *
         * @since 3.0.0
         * @param string $nonce nonce from 3D secure verification
         */
        public function get_payment_method($nonce)
        {
        }
        /**
         * Create a nonce given an existing vaulted payment token. This is used to
         * provide a nonce to the 3D Secure verification method client-side.
         *
         * @link https://developers.braintreepayments.com/reference/request/payment-method-nonce/find/php
         *
         * @since 3.0.0
         * @param string $token vault token ID
         */
        public function create_nonce($token)
        {
        }
    }
    /**
     * Braintree API Client Token Request class
     *
     * Handles building the request for a client token
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Client_Token_Request extends \WC_Braintree_API_Request
    {
        /**
         * Get the client token
         *
         * @see https://developers.braintreepayments.com/javascript+php/reference/request/client-token/generate
         *
         * @since 3.0.0
         * @param array $args token args
         */
        public function get_token(array $args)
        {
        }
    }
    /**
     * Braintree API Abstract Vault Request class
     *
     * Handles common methods for vault requests - Customers/Payment Methods
     *
     * @since 3.0.0
     */
    abstract class WC_Braintree_API_Vault_Request extends \WC_Braintree_API_Request
    {
        /**
         * Return the billing address in the format required by Braintree
         *
         * @link https://developers.braintreepayments.com/reference/request/payment-method/create/php#billing_address
         * @link https://developers.braintreepayments.com/reference/request/customer/create/php#credit_card.billing_address
         *
         * @since 3.0.0
         * @return array
         */
        protected function get_billing_address()
        {
        }
        /**
         * Return the options used for creating a payment method, mostly for
         * credit cards. This verifies the card by running CVV/AVS checks and prevents
         * duplicate payment methods from being added.
         *
         * @since 3.0.0
         * @return array
         */
        protected function get_credit_card_options()
        {
        }
        /**
         * Add device data for advanced fraud handling, if it's present
         *
         * @since 3.0.0
         */
        protected function add_device_data()
        {
        }
    }
    /**
     * Braintree API Customer Request class
     *
     * Handles creating customers and retrieving their payment methods
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Customer_Request extends \WC_Braintree_API_Vault_Request
    {
        /**
         * Create a new customer and associated payment method
         *
         * @link https://developers.braintreepayments.com/reference/request/customer/create/php
         *
         * @since 3.0.0
         * @param \WC_Order $order
         */
        public function create_customer(\WC_Order $order)
        {
        }
        /**
         * Get the payment methods for a given customer
         *
         * @link https://developers.braintreepayments.com/reference/request/customer/find/php
         *
         * @since 3.0.0
         * @param string $customer_id Braintree customer ID
         */
        public function get_payment_methods($customer_id)
        {
        }
    }
    /**
     * Braintree API Transaction Request Class
     *
     * Handles transaction requests (charges, auths, captures, refunds, voids)
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Transaction_Request extends \WC_Braintree_API_Request
    {
        /** auth and capture transaction type */
        const AUTHORIZE_AND_CAPTURE = \true;
        /** authorize-only transaction type */
        const AUTHORIZE_ONLY = \false;
        /** @var string Braintree partner ID */
        protected $channel;
        /**
         * Constructs the class.
         *
         * @since 2.0.0
         * @param \WC_Order|null $order order if available
         * @param string $channel Braintree Partner ID/channel
         */
        public function __construct($order = \null, $channel = '')
        {
        }
        /**
         * Creates a credit card charge request for the payment method / customer
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php
         *
         * @since 3.0.0
         */
        public function create_credit_card_charge()
        {
        }
        /**
         * Creates a credit card auth request for the payment method / customer
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php
         *
         * @since 3.0.0
         */
        public function create_credit_card_auth()
        {
        }
        /**
         * Capture funds for a previous credit card authorization
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/submit-for-settlement/php
         *
         * @since 3.0.0
         */
        public function create_credit_card_capture()
        {
        }
        /**
         * Refund funds from a previous transaction
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/refund/php
         *
         * @since 3.0.0
         */
        public function create_refund()
        {
        }
        /**
         * Void a previous transaction
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/void/php
         *
         * @since 3.0.0
         */
        public function create_void()
        {
        }
        /**
         * Create a sale transaction with the given settlement type
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php
         *
         * @since 3.0.0
         * @param bool $settlement_type true = auth/capture, false = auth-only
         */
        protected function create_transaction($settlement_type)
        {
        }
        /**
         * Set the customer data for the transaction
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#customer
         *
         * @since 3.0.0
         */
        protected function set_customer()
        {
        }
        /**
         * Get the billing address for the transaction
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#billing
         *
         * @since 3.0.0
         * @return array
         */
        protected function set_billing()
        {
        }
        /**
         * Get the shipping address for the transaction
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#shipping
         *
         * @since 3.0.0
         * @return array
         */
        protected function get_shipping_address()
        {
        }
        /**
         * Set the payment method for the transaction, either a previously saved payment
         * method (token) or a new payment method (nonce)
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#payment_method_nonce
         *
         * @since 3.0.0
         */
        protected function set_payment_method()
        {
        }
        /**
         * Set the dynamic descriptors for the transaction, these are set by the
         * admin in the gateway settings
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#descriptor
         *
         * @since 3.0.0
         */
        protected function set_dynamic_descriptors()
        {
        }
        /**
         * Get the options for the transaction
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#options
         *
         * @since 3.0.0
         * @param bool $settlement_type, authorize or auth/capture
         * @return array
         */
        protected function get_options($settlement_type)
        {
        }
        /**
         * Gets the channel ID for the transaction.
         *
         * @link https://developers.braintreepayments.com/reference/request/transaction/sale/php#channel
         *
         * @since 3.0.0
         */
        protected function get_channel()
        {
        }
    }
    /**
     * Braintree API Payment Method Request class
     *
     * Handles creating, updating, and deleting individual payment methods
     *
     * @since 3.0.0
     */
    class WC_Braintree_API_Payment_Method_Request extends \WC_Braintree_API_Vault_Request
    {
        /**
         * Create a new payment method for an existing customer
         *
         * @link https://developers.braintreepayments.com/reference/request/payment-method/create/php
         *
         * @since 3.0.0
         * @param \WC_Order $order
         */
        public function create_payment_method(\WC_Order $order)
        {
        }
        /**
         * Delete a customer's payment method
         *
         * @link https://developers.braintreepayments.com/reference/request/payment-method/delete/php
         *
         * @since 3.0.0
         * @param string $token Braintree payment method token
         */
        public function delete_payment_method($token)
        {
        }
        /**
         * Verify the CSC for an existing saved payment method using the provided
         * nonce
         *
         * @since 3.0.0
         * @param string $token existing payment method token
         * @param string $nonce nonce provided from client-side hosted fields
         */
        public function verify_csc($token, $nonce)
        {
        }
        /**
         * @since 2.6.2
         * @param string $token existing payment method token.
         * @param string $expiration_date expiration date in MM/YY format.
         */
        public function update_expiration_date($token, $expiration_date)
        {
        }
    }
    /**
     * Braintree Frontend class
     *
     * Modifies the "My Payment Methods" table output from Framework files.
     *
     * TODO: This class can be removed if / when the SV Plugin Framework implements card icons in their own table cells.
     * @see https://github.com/skyverge/wc-plugin-framework/issues/198
     *
     * @since 2.0.0
     */
    class WC_Braintree_Frontend
    {
        /**
         * Modifies the "My Payment Methods" table headers.
         *
         * @since 2.0.0
         * @deprecated 2.2.0
         *
         * @param string[] $headers the table headers
         * @return string[] updated headers
         */
        public function modify_table_headers($headers)
        {
        }
        /**
         * Adds a new table cell for the card icon, e.g. an Amex logo.
         *
         * @since 2.0.0
         * @deprecated 2.2.0
         *
         * @param string[] $method {
         *     @type string $title payment method title
         *     @type string $expiry payment method expiry
         *     @type string $actions actions for payment method
         * }
         * @param Framework\SV_WC_Payment_Gateway_Payment_Token $token token
         * @return string[] updated method data
         */
        public function add_card_icon_cell($method, $token)
        {
        }
        /**
         * Since we want to remove the card image, we need to re-build the method title html.
         *
         * Note: the textdomain is intentionally different here, which allows for existing framework translations to remain.
         *
         * @since 2.0.0
         * @deprecated 2.2.0
         *
         * @param string $html the method title html
         * @param \SV_WC_Payment_Gateway_Payment_Token $token token
         * @return string updated html
         */
        public function remove_card_icon_from_title($html, $token)
        {
        }
        /**
         * Gets the payment method icon for a given token, e.g.: the Amex logo.
         *
         * @since 2.0.0
         * @deprecated 2.2.0
         *
         * @param Framework\SV_WC_Payment_Gateway_Payment_Token $token token
         * @return string payment method icon html
         */
        protected function get_payment_token_icon($token)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\Handlers {
    /**
     * The transaction capture handler.
     *
     * @since 5.3.0
     */
    class Capture
    {
        /** @var Framework\SV_WC_Payment_Gateway payment gateway instance */
        private $gateway;
        /**
         * Capture constructor.
         *
         * @since 5.3.0
         *
         * @param Framework\SV_WC_Payment_Gateway $gateway payment gateway instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Captures an order on status change to a "paid" status.
         *
         * @internal
         *
         * @since 5.3.0
         *
         * @param int $order_id order ID
         * @param string $old_status status being changed
         * @param string $new_status new order status
         */
        public function maybe_capture_paid_order($order_id, $old_status, $new_status)
        {
        }
        /**
         * Perform a capture on an order if it can be captured.
         *
         * This acts as a wrapper for when the process should just bail without logging any errors or order notes, like when
         * performing capture via bulk action.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         * @param float|null $amount amount to capture
         * @return bool
         */
        public function maybe_perform_capture(\WC_Order $order, $amount = null)
        {
        }
        /**
         * Performs a credit card capture for an order.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order WooCommerce order object
         * @param float|null $amount amount to capture
         * @return array {
         *     Capture transaction results
         *
         *     @type bool   $success whether the capture was successful
         *     @type int    $code    result code
         *     @type string $message result message
         * }
         */
        public function perform_capture(\WC_Order $order, $amount = null)
        {
        }
        /**
         * Adds the standard capture data to an order.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order the order object
         * @param Framework\SV_WC_Payment_Gateway_API_Response $response transaction response
         */
        public function do_capture_success(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Lets gateways handle any specific capture failure results for the order.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order WooCommerce order object
         * @param Framework\SV_WC_Payment_Gateway_API_Response $response API response object
         */
        public function do_capture_failed(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /** Conditional Methods *******************************************************************************************/
        /**
         * Determines if an order is eligible for capture.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function order_can_be_captured(\WC_Order $order)
        {
        }
        /**
         * Determines if an order is ready for capture.
         *
         * The base implementation of this method checks for a valid order status and that a transaction ID is set.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function is_order_ready_for_capture(\WC_Order $order)
        {
        }
        /**
         * Determines if an order has been fully captured
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order
         * @return bool
         */
        public function is_order_fully_captured(\WC_Order $order)
        {
        }
        /**
         * Determines if an order's authorization has expired.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order
         * @return bool
         */
        public function has_order_authorization_expired(\WC_Order $order)
        {
        }
        /**
         * Determines if an order's authorization has been captured, even partially.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function is_order_captured(\WC_Order $order)
        {
        }
        /** Getter Methods ************************************************************************************************/
        /**
         * Gets the maximum amount that can be captured from an order.
         *
         * Gateways can override this for an value above or below the order total.
         * For instance, some processors allow capturing an amount a certain
         * percentage higher than the payment total.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order WooCommerce order object
         * @return float
         */
        public function get_order_capture_maximum(\WC_Order $order)
        {
        }
        /**
         * Gets the amount originally authorized for an order.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         * @return float
         */
        public function get_order_authorization_amount(\WC_Order $order)
        {
        }
        /**
         * Gets the payment gateway instance.
         *
         * @since 5.3.0
         *
         * @return Framework\SV_WC_Payment_Gateway
         */
        protected function get_gateway()
        {
        }
    }
}
namespace WC_Braintree {
    /**
     * The Braintree capture handler.
     *
     * @since 2.2.0
     */
    class Capture extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\Handlers\Capture
    {
        /**
         * Determines if an order's authorization has expired.
         *
         * @since 2.2.0
         *
         * @param \WC_Order $order
         * @return bool
         */
        public function has_order_authorization_expired(\WC_Order $order)
        {
        }
        /**
         * Determines if an order is eligible for capture.
         *
         * @since 2.2.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public function order_can_be_captured(\WC_Order $order)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * # WooCommerce Plugin Framework
     *
     * This framework class provides a base level of configurable and overrideable
     * functionality and features suitable for the implementation of a WooCommerce
     * plugin.  This class handles all the "non-feature" support tasks such
     * as verifying dependencies are met, loading the text domain, etc.
     *
     * @version 5.8.0
     */
    abstract class SV_WC_Plugin
    {
        /** Plugin Framework Version */
        const VERSION = '5.10.12';
        /** @var object single instance of plugin */
        protected static $instance;
        /** @var string plugin id */
        private $id;
        /** @var string version number */
        private $version;
        /** @var string plugin path, without trailing slash */
        private $plugin_path;
        /** @var string plugin URL */
        private $plugin_url;
        /** @var string template path, without trailing slash */
        private $template_path;
        /** @var \WC_Logger instance */
        private $logger;
        /** @var  SV_WP_Admin_Message_Handler instance */
        private $message_handler;
        /** @var string the plugin text domain */
        private $text_domain;
        /** @var array memoized list of active plugins */
        private $active_plugins = [];
        /** @var SV_WC_Plugin_Dependencies dependency handler instance */
        private $dependency_handler;
        /** @var SV_WC_Hook_Deprecator hook deprecator instance */
        private $hook_deprecator;
        /** @var Plugin\Lifecycle lifecycle handler instance */
        protected $lifecycle_handler;
        /** @var REST_API REST API handler instance */
        protected $rest_api_handler;
        /** @var Admin\Setup_Wizard handler instance */
        protected $setup_wizard_handler;
        /** @var SV_WC_Admin_Notice_Handler the admin notice handler class */
        private $admin_notice_handler;
        /**
         * Initialize the plugin.
         *
         * Child plugin classes may add their own optional arguments.
         *
         * @since 2.0.0
         *
         * @param string $id plugin id
         * @param string $version plugin version number
         * @param array $args {
         *     optional plugin arguments
         *
         *     @type int|float $latest_wc_versions the last supported versions of WooCommerce, as a major.minor float relative to the latest available version
         *     @type string $text_domain the plugin textdomain, used to set up translations
         *     @type array  $dependencies {
         *         PHP extension, function, and settings dependencies
         *
         *         @type array $php_extensions PHP extension dependencies
         *         @type array $php_functions  PHP function dependencies
         *         @type array $php_settings   PHP settings dependencies
         *     }
         * }
         */
        public function __construct($id, $version, $args = [])
        {
        }
        /** Init methods **********************************************************/
        /**
         * Initializes the plugin dependency handler.
         *
         * @since 5.2.0
         *
         * @param array $dependencies {
         *     PHP extension, function, and settings dependencies
         *
         *     @type array $php_extensions PHP extension dependencies
         *     @type array $php_functions  PHP function dependencies
         *     @type array $php_settings   PHP settings dependencies
         * }
         */
        protected function init_dependencies($dependencies)
        {
        }
        /**
         * Builds the admin message handler instance.
         *
         * Plugins can override this with their own handler.
         *
         * @since 5.2.0
         */
        protected function init_admin_message_handler()
        {
        }
        /**
         * Builds the admin notice handler instance.
         *
         * Plugins can override this with their own handler.
         *
         * @since 5.2.0
         */
        protected function init_admin_notice_handler()
        {
        }
        /**
         * Builds the hook deprecator instance.
         *
         * Plugins can override this with their own handler.
         *
         * @since 5.2.0
         */
        protected function init_hook_deprecator()
        {
        }
        /**
         * Builds the lifecycle handler instance.
         *
         * Plugins can override this with their own handler to perform install and
         * upgrade routines.
         *
         * @since 5.2.0
         */
        protected function init_lifecycle_handler()
        {
        }
        /**
         * Builds the REST API handler instance.
         *
         * Plugins can override this to add their own data and/or routes.
         *
         * @since 5.2.0
         */
        protected function init_rest_api_handler()
        {
        }
        /**
         * Builds the Setup Wizard handler instance.
         *
         * Plugins can override and extend this method to add their own setup wizard.
         *
         * @since 5.3.0
         */
        protected function init_setup_wizard_handler()
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.2.0
         */
        private function add_hooks()
        {
        }
        /**
         * Cloning instances is forbidden due to singleton pattern.
         *
         * @since 3.1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances is forbidden due to singleton pattern.
         *
         * @since 3.1.0
         */
        public function __wakeup()
        {
        }
        /**
         * Load plugin & framework text domains.
         *
         * @internal
         *
         * @since 4.2.0
         */
        public function load_translations()
        {
        }
        /**
         * Loads the framework textdomain.
         *
         * @since 4.5.0
         */
        protected function load_framework_textdomain()
        {
        }
        /**
         * Loads the plugin textdomain.
         *
         * @since 4.5.0
         */
        protected function load_plugin_textdomain()
        {
        }
        /**
         * Loads the plugin textdomain.
         *
         * @since 4.5.0
         * @param string $textdomain the plugin textdomain
         * @param string $path the i18n path
         */
        protected function load_textdomain($textdomain, $path)
        {
        }
        /**
         * Initializes the plugin.
         *
         * Plugins can override this to set up any handlers after WordPress is ready.
         *
         * @since 5.2.0
         */
        public function init_plugin()
        {
        }
        /**
         * Initializes the plugin admin.
         *
         * Plugins can override this to set up any handlers after the WordPress admin is ready.
         *
         * @since 5.2.0
         */
        public function init_admin()
        {
        }
        /**
         * Include any critical files which must be available as early as possible,
         *
         * @since 2.0.0
         */
        private function includes()
        {
        }
        /**
         * Gets a list of framework deprecated/removed hooks.
         *
         * @see SV_WC_Plugin::init_hook_deprecator()
         * @see SV_WC_Plugin::get_deprecated_hooks()
         *
         * @since 5.8.0
         *
         * @return array associative array
         */
        private function get_framework_deprecated_hooks()
        {
        }
        /**
         * Gets a list of the plugin's deprecated/removed hooks.
         *
         * Implementing classes should override this and return an array of deprecated/removed hooks in the following format:
         *
         * $old_hook_name = array {
         *   @type string $version version the hook was deprecated/removed in
         *   @type bool $removed if present and true, the message will indicate the hook was removed instead of deprecated
         *   @type string|bool $replacement if present and a string, the message will indicate the replacement hook to use,
         *     otherwise (if bool and false) the message will indicate there is no replacement available.
         * }
         *
         * @since 4.3.0
         *
         * @return array
         */
        protected function get_deprecated_hooks()
        {
        }
        /** Admin methods ******************************************************/
        /**
         * Returns true if on the admin plugin settings page, if any
         *
         * @since 2.0.0
         * @return boolean true if on the admin plugin settings page
         */
        public function is_plugin_settings()
        {
        }
        /**
         * Adds admin notices upon initialization.
         *
         * @internal
         *
         * @since 3.0.0
         */
        public function add_admin_notices()
        {
        }
        /**
         * Convenience method to add delayed admin notices, which may depend upon
         * some setting being saved prior to determining whether to render
         *
         * @since 3.0.0
         */
        public function add_delayed_admin_notices()
        {
        }
        /**
         * Return the plugin action links.  This will only be called if the plugin
         * is active.
         *
         * @since 2.0.0
         * @param array $actions associative array of action names to anchor tags
         * @return array associative array of plugin action links
         */
        public function plugin_action_links($actions)
        {
        }
        /** Helper methods ******************************************************/
        /**
         * Automatically log API requests/responses when using SV_WC_API_Base
         *
         * @since 2.2.0
         * @see SV_WC_API_Base::broadcast_request()
         */
        public function add_api_request_logging()
        {
        }
        /**
         * Log API requests/responses
         *
         * @since 2.2.0
         * @param array $request request data, see SV_WC_API_Base::broadcast_request() for format
         * @param array $response response data
         * @param string|null $log_id log to write data to
         */
        public function log_api_request($request, $response, $log_id = null)
        {
        }
        /**
         * Transform the API request/response data into a string suitable for logging
         *
         * @since 2.2.0
         * @param array $data
         * @return string
         */
        public function get_api_log_message($data)
        {
        }
        /**
         * Adds any PHP incompatibilities to the system status report.
         *
         * @since 4.5.0
         *
         * @param array $rows WooCommerce system status rows
         * @return array
         */
        public function add_system_status_php_information($rows)
        {
        }
        /**
         * Saves errors or messages to WooCommerce Log (woocommerce/logs/plugin-id-xxx.txt)
         *
         * @since 2.0.0
         * @param string $message error or message to save to log
         * @param string $log_id optional log id to segment the files by, defaults to plugin id
         */
        public function log($message, $log_id = null)
        {
        }
        /**
         * Require and instantiate a class
         *
         * @since 4.2.0
         * @param string $local_path path to class file in plugin, e.g. '/includes/class-wc-foo.php'
         * @param string $class_name class to instantiate
         * @return object instantiated class instance
         */
        public function load_class($local_path, $class_name)
        {
        }
        /**
         * Determines if TLS v1.2 is required for API requests.
         *
         * Subclasses should override this to return true if TLS v1.2 is required.
         *
         * @since 5.5.2
         *
         * @return bool
         */
        public function require_tls_1_2()
        {
        }
        /**
         * Determines if TLS 1.2 is available.
         *
         * @since 5.5.2
         *
         * @return bool
         */
        public function is_tls_1_2_available()
        {
        }
        /** Getter methods ******************************************************/
        /**
         * Gets the main plugin file.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_plugin_file()
        {
        }
        /**
         * The implementation for this abstract method should simply be:
         *
         * return __FILE__;
         *
         * @since 2.0.0
         * @return string the full path and filename of the plugin file
         */
        protected abstract function get_file();
        /**
         * Returns the plugin id
         *
         * @since 2.0.0
         * @return string plugin id
         */
        public function get_id()
        {
        }
        /**
         * Returns the plugin id with dashes in place of underscores, and
         * appropriate for use in frontend element names, classes and ids
         *
         * @since 2.0.0
         * @return string plugin id with dashes in place of underscores
         */
        public function get_id_dasherized()
        {
        }
        /**
         * Returns the plugin full name including "WooCommerce", ie
         * "WooCommerce X".  This method is defined abstract for localization purposes
         *
         * @since 2.0.0
         * @return string plugin name
         */
        public abstract function get_plugin_name();
        /** Handler methods *******************************************************/
        /**
         * Gets the dependency handler.
         *
         * @since 5.2.0.1
         *
         * @return SV_WC_Plugin_Dependencies
         */
        public function get_dependency_handler()
        {
        }
        /**
         * Gets the lifecycle handler instance.
         *
         * @since 5.1.0
         *
         * @return Plugin\Lifecycle
         */
        public function get_lifecycle_handler()
        {
        }
        /**
         * Gets the Setup Wizard handler instance.
         *
         * @since 5.3.0
         *
         * @return null|Admin\Setup_Wizard
         */
        public function get_setup_wizard_handler()
        {
        }
        /**
         * Gets the admin message handler.
         *
         * @since 2.0.0
         *
         * @return SV_WP_Admin_Message_Handler
         */
        public function get_message_handler()
        {
        }
        /**
         * Gets the admin notice handler instance.
         *
         * @since 3.0.0
         *
         * @return SV_WC_Admin_Notice_Handler
         */
        public function get_admin_notice_handler()
        {
        }
        /**
         * Gets the settings API handler instance.
         *
         * Plugins can use this to init the settings API handler.
         *
         * @since 5.7.0
         *
         * @return void|Settings_API\Abstract_Settings
         */
        public function get_settings_handler()
        {
        }
        /**
         * Returns the plugin version name.  Defaults to wc_{plugin id}_version
         *
         * @since 2.0.0
         * @return string the plugin version name
         */
        public function get_plugin_version_name()
        {
        }
        /**
         * Returns the current version of the plugin
         *
         * @since 2.0.0
         * @return string plugin version
         */
        public function get_version()
        {
        }
        /**
         * Returns the "Configure" plugin action link to go directly to the plugin
         * settings page (if any)
         *
         * @since 2.0.0
         * @see SV_WC_Plugin::get_settings_url()
         * @param string $plugin_id optional plugin identifier.  Note that this can be a
         *        sub-identifier for plugins with multiple parallel settings pages
         *        (ie a gateway that supports both credit cards and echecks)
         * @return string plugin configure link
         */
        public function get_settings_link($plugin_id = null)
        {
        }
        /**
         * Gets the plugin configuration URL
         *
         * @since 2.0.0
         * @see SV_WC_Plugin::get_settings_link()
         * @param string $plugin_id optional plugin identifier.  Note that this can be a
         *        sub-identifier for plugins with multiple parallel settings pages
         *        (ie a gateway that supports both credit cards and echecks)
         * @return string plugin settings URL
         */
        public function get_settings_url($plugin_id = null)
        {
        }
        /**
         * Returns true if the current page is the admin general configuration page
         *
         * @since 3.0.0
         * @return boolean true if the current page is the admin general configuration page
         */
        public function is_general_configuration_page()
        {
        }
        /**
         * Returns the admin configuration url for the admin general configuration page
         *
         * @since 3.0.0
         * @return string admin configuration url for the admin general configuration page
         */
        public function get_general_configuration_url()
        {
        }
        /**
         * Gets the plugin documentation url, used for the 'Docs' plugin action
         *
         * @since 2.0.0
         * @return string documentation URL
         */
        public function get_documentation_url()
        {
        }
        /**
         * Gets the support URL, used for the 'Support' plugin action link
         *
         * @since 4.0.0
         * @return string support url
         */
        public function get_support_url()
        {
        }
        /**
         * Gets the plugin sales page URL.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_sales_page_url()
        {
        }
        /**
         * Gets the plugin reviews page URL.
         *
         * Used for the 'Reviews' plugin action and review prompts.
         *
         * @since 5.1.0
         *
         * @return string
         */
        public function get_reviews_url()
        {
        }
        /**
         * Gets the plugin's path without a trailing slash.
         *
         * e.g. /path/to/wp-content/plugins/plugin-directory
         *
         * @since 2.0.0
         *
         * @return string
         */
        public function get_plugin_path()
        {
        }
        /**
         * Gets the plugin's URL without a trailing slash.
         *
         * E.g. http://skyverge.com/wp-content/plugins/plugin-directory
         *
         * @since 2.0.0
         *
         * @return string
         */
        public function get_plugin_url()
        {
        }
        /**
         * Gets the woocommerce uploads path, without trailing slash.
         *
         * Oddly WooCommerce core does not provide a way to get this.
         *
         * @since 2.0.0
         *
         * @return string
         */
        public static function get_woocommerce_uploads_path()
        {
        }
        /**
         * Returns the loaded framework __FILE__
         *
         * @since 4.0.0
         * @return string
         */
        public function get_framework_file()
        {
        }
        /**
         * Gets the loaded framework path, without trailing slash.
         *
         * This matches the path to the highest version of the framework currently loaded.
         *
         * @since 4.0.0
         * @return string
         */
        public function get_framework_path()
        {
        }
        /**
         * Gets the absolute path to the loaded framework image directory, without a trailing slash.
         *
         * @since 4.0.0
         *
         * @return string
         */
        public function get_framework_assets_path()
        {
        }
        /**
         * Gets the loaded framework assets URL without a trailing slash.
         *
         * @since 4.0.0
         *
         * @return string
         */
        public function get_framework_assets_url()
        {
        }
        /**
         * Gets the plugin default template path, without a trailing slash.
         *
         * @since 5.5.0
         *
         * @return string
         */
        public function get_template_path()
        {
        }
        /**
         * Loads and outputs a template file HTML.
         *
         * @see \wc_get_template() except we define automatically the default path
         *
         * @since 5.5.0
         *
         * @param string $template template name/part
         * @param array $args associative array of optional template arguments
         * @param string $path optional template path, can be empty, as themes can override this
         * @param string $default_path optional default template path, will normally use the plugin's own template path unless overridden
         */
        public function load_template($template, array $args = [], $path = '', $default_path = '')
        {
        }
        /**
         * Determines whether a plugin is active.
         *
         * @since 2.0.0
         *
         * @param string $plugin_name plugin name, as the plugin-filename.php
         * @return boolean true if the named plugin is installed and active
         */
        public function is_plugin_active($plugin_name)
        {
        }
        /** Deprecated methods ****************************************************/
        /**
         * Handles version checking.
         *
         * @since 2.0.0
         * @deprecated 5.2.0
         */
        public function do_install()
        {
        }
        /**
         * Helper method to install default settings for a plugin.
         *
         * @since 4.2.0
         * @deprecated 5.2.0
         *
         * @param array $settings array of settings in format required by WC_Admin_Settings
         */
        public function install_default_settings(array $settings)
        {
        }
        /**
         * Plugin activated method. Perform any activation tasks here.
         * Note that this _does not_ run during upgrades.
         *
         * @since 4.2.0
         * @deprecated 5.2.0
         */
        public function activate()
        {
        }
        /**
         * Plugin deactivation method. Perform any deactivation tasks here.
         *
         * @since 4.2.0
         * @deprecated 5.2.0
         */
        public function deactivate()
        {
        }
        /**
         * Gets the string name of any required PHP extensions that are not loaded.
         *
         * @since 4.5.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        public function get_missing_extension_dependencies()
        {
        }
        /**
         * Gets the string name of any required PHP functions that are not loaded.
         *
         * @since 2.1.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        public function get_missing_function_dependencies()
        {
        }
        /**
         * Gets the string name of any required PHP extensions that are not loaded.
         *
         * @since 4.5.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        public function get_incompatible_php_settings()
        {
        }
        /**
         * Gets the PHP dependencies.
         *
         * @since 2.0.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        protected function get_dependencies()
        {
        }
        /**
         * Gets the PHP extension dependencies.
         *
         * @since 4.5.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        protected function get_extension_dependencies()
        {
        }
        /**
         * Gets the PHP function dependencies.
         *
         * @since 2.1.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        protected function get_function_dependencies()
        {
        }
        /**
         * Gets the PHP settings dependencies.
         *
         * @since 4.5.0
         * @deprecated 5.2.0
         *
         * @return array
         */
        protected function get_php_settings_dependencies()
        {
        }
        /**
         * Sets the plugin dependencies.
         *
         * @since 4.5.0
         * @deprecated 5.2.0
         *
         * @param array $dependencies the environment dependencies
         */
        protected function set_dependencies($dependencies = [])
        {
        }
    }
    /**
     * # WooCommerce Payment Gateway Plugin Framework
     *
     * A payment gateway refinement of the WooCommerce Plugin Framework
     *
     * This framework class provides a base level of configurable and overrideable
     * functionality and features suitable for the implementation of a WooCommerce
     * payment gateway.  This class handles all the non-gateway support tasks such
     * as verifying dependencies are met, loading the text domain, etc.  It also
     * loads the payment gateway when needed now that the gateway is only created
     * on the checkout & settings pages / api hook.  The gateway can also be loaded
     * in the following instances:
     *
     * + On the My Account page to display / change saved payment methods (if supports tokenization)
     * + On the Admin User/Your Profile page to render/persist the customer ID field(s) (if supports customer_id)
     * + On the Admin Order Edit page to render a merchant account transaction direct link (if supports transaction_link)
     *
     * ## Supports (zero or more):
     *
     * + `customer_id`             - adds actions to show/persist the "Customer ID" area of the admin User edit page
     * + `transaction_link`        - adds actions to render the merchant account transaction direct link on the Admin Order Edit page.  (Don't forget to override the SV_WC_Payment_Gateway::get_transaction_url() method!)
     * + `capture_charge`          - adds actions to capture charge for authorization-only transactions
     * + `my_payment_methods`      - adds actions to show/handle a "My Payment Methods" area on the customer's My Account page. This will show saved payment methods for all plugin gateways that support tokenization.
     *
     * @version 2.0.0
     */
    abstract class SV_WC_Payment_Gateway_Plugin extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin
    {
        /** Customer ID feature */
        const FEATURE_CUSTOMER_ID = 'customer_id';
        /** Charge capture feature */
        const FEATURE_CAPTURE_CHARGE = 'capture_charge';
        /** My Payment Methods feature */
        const FEATURE_MY_PAYMENT_METHODS = 'my_payment_methods';
        /** @var array optional associative array of gateway id to array( 'gateway_class_name' => string, 'gateway' => SV_WC_Payment_Gateway ) */
        private $gateways;
        /** @var array optional array of currency codes this gateway is allowed for */
        private $currencies = array();
        /** @var array named features that this gateway supports which require action from the parent plugin, including 'tokenization' */
        private $supports = array();
        /** @var bool helper for lazy subscriptions active check */
        private $subscriptions_active;
        /** @var bool helper for lazy pre-orders active check */
        private $pre_orders_active;
        /** @var boolean true if this gateway requires SSL for processing transactions, false otherwise */
        private $require_ssl;
        /** @var SV_WC_Payment_Gateway_Privacy payment gateway privacy handler instance */
        protected $privacy_handler;
        /** @var SV_WC_Payment_Gateway_Admin_Order order handler instance */
        protected $admin_order_handler;
        /** @var SV_WC_Payment_Gateway_Admin_User_Handler user handler instance */
        protected $admin_user_handler;
        /** @var SV_WC_Payment_Gateway_My_Payment_Methods adds My Payment Method functionality */
        private $my_payment_methods;
        /** @var SV_WC_Payment_Gateway_Apple_Pay the Apple Pay handler instance */
        private $apple_pay;
        /** @var Google_Pay the Google Pay handler instance */
        private $google_pay;
        /**
         * Initializes the plugin.
         *
         * Optional args:
         *
         * + `require_ssl` - boolean true if this plugin requires SSL for proper functioning, false otherwise. Defaults to false
         * + `gateways` - array associative array of gateway id to gateway class name.  A single plugin might support more than one gateway, ie credit card, echeck.  Note that the credit card gateway must always be the first one listed.
         * + `currencies` -  array of currency codes this gateway is allowed for, defaults to all
         * + `supports` - array named features that this gateway supports, including 'tokenization', 'transaction_link', 'customer_id', 'capture_charge'
         *
         * @since 1.0.0
         *
         * @see SV_WC_Plugin::__construct()
         * @param string $id plugin id
         * @param string $version plugin version number
         * @param array $args plugin arguments
         */
        public function __construct($id, $version, $args)
        {
        }
        /**
         * Builds the REST API handler instance.
         *
         * Gateway plugins can override this to add their own data and/or routes.
         *
         * @see SV_WC_Plugin::init_rest_api_handler()
         *
         * @since 5.2.0
         */
        protected function init_rest_api_handler()
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.2.0
         */
        private function add_hooks()
        {
        }
        /**
         * Initializes the plugin admin.
         *
         * @see SV_WC_Plugin::init_admin()
         *
         * @since 5.2.0
         */
        public function init_admin()
        {
        }
        /**
         * Adds any gateways supported by this plugin to the list of available payment gateways.
         *
         * @internal
         *
         * @since 1.0.0
         *
         * @param array $gateways
         * @return array $gateways
         */
        public function load_gateways($gateways)
        {
        }
        /**
         * Adjust the available gateways in certain cases.
         *
         * @since 4.4.0
         *
         * @param array $available_gateways the available payment gateways
         * @return array
         */
        public function adjust_available_gateways($available_gateways)
        {
        }
        /**
         * Include required files.
         *
         * @internal
         *
         * @since 1.0.0
         */
        private function includes()
        {
        }
        /** My Payment Methods methods ***********************************/
        /**
         * Instantiates the My Payment Methods table class instance when a user is
         * logged in on an account page and tokenization is enabled for at least
         * one of the active gateways.
         *
         * @internal
         *
         * @since 4.0.0
         */
        public function maybe_init_my_payment_methods()
        {
        }
        /**
         * Returns true if tokenization is supported and enabled for at least one
         * active gateway
         *
         * @since 4.2.0
         *
         * @return bool
         */
        public function tokenization_enabled()
        {
        }
        /**
         * Gets the My Payment Methods table instance.
         *
         * Overrideable by concrete gateway plugins to return a custom instance as needed
         *
         * @since 4.0.0
         *
         * @return SV_WC_Payment_Gateway_My_Payment_Methods
         */
        protected function get_my_payment_methods_instance()
        {
        }
        /**
         * Determines whether the My Payment Methods feature is supported.
         *
         * @since 5.1.0
         *
         * @return bool
         */
        public function supports_my_payment_methods()
        {
        }
        /** Apple Pay *************************************************************/
        /**
         * Initializes Apple Pay if it's supported.
         *
         * @since 4.7.0
         */
        public function maybe_init_apple_pay()
        {
        }
        /**
         * Determines whether Apple Pay is activated.
         *
         * @since 5.5.1
         */
        private function is_apple_pay_activated()
        {
        }
        /**
         * Builds the Apple Pay handler instance.
         *
         * Gateways can override this to define their own Apple Pay class.
         *
         * @since 4.7.0
         *
         * @return SV_WC_Payment_Gateway_Apple_Pay
         */
        protected function build_apple_pay_instance()
        {
        }
        /**
         * Gets the Apple Pay handler instance.
         *
         * @since 4.7.0
         *
         * @return SV_WC_Payment_Gateway_Apple_Pay
         */
        public function get_apple_pay_instance()
        {
        }
        /**
         * Determines if this plugin has any gateways with Apple Pay support.
         *
         * @since 4.7.0
         *
         * @return bool
         */
        public function supports_apple_pay()
        {
        }
        /** Google Pay *************************************************************/
        /**
         * Initializes Google Pay if it's supported.
         *
         * @since 5.10.0
         */
        public function maybe_init_google_pay()
        {
        }
        /**
         * Builds the Google Pay handler instance.
         *
         * Gateways can override this to define their own Google Pay class.
         *
         * @since 5.10.0
         *
         * @return Google_Pay
         */
        protected function build_google_pay_instance()
        {
        }
        /**
         * Gets the Google Pay handler instance.
         *
         * @since 5.10.0
         *
         * @return Google_Pay
         */
        public function get_google_pay_instance()
        {
        }
        /**
         * Determines if this plugin has any gateways with Google Pay support.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function supports_google_pay()
        {
        }
        /** Admin methods ******************************************************/
        /**
         * Adds the gateway plugin action links.
         *
         * @see SV_WC_Plugin::plugin_action_links()
         *
         * @since 1.0.0
         *
         * @param string[] $actions associative array of action names to anchor tags
         * @return string[]
         */
        public function plugin_action_links($actions)
        {
        }
        /**
         * Determines if on the admin gateway settings screen for this plugin.
         *
         * Multi-gateway plugins will return true if on either settings page
         *
         * @since 2.0.0
         *
         * @see SV_WC_Plugin::is_plugin_settings()
         * @return bool
         */
        public function is_plugin_settings()
        {
        }
        /**
         * Convenience method to add delayed admin notices, which may depend upon
         * some setting being saved prior to determining whether to render.
         *
         * @since 3.0.0
         *
         * @see SV_WC_Plugin::add_delayed_admin_notices()
         */
        public function add_delayed_admin_notices()
        {
        }
        /**
         * Adds any SSL admin notices.
         *
         * Checks if SSL is required and not available and adds a dismissible admin
         * notice if so.
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_Plugin::add_admin_notices()
         */
        protected function add_ssl_admin_notices()
        {
        }
        /**
         * Adds any currency admin notices.
         *
         * Checks if a particular currency is required and not being used and adds a
         * dismissible admin notice if so.
         *
         * @since 3.0.0
         *
         * @see SV_WC_Payment_Gateway_Plugin::render_admin_notices()
         */
        protected function add_currency_admin_notices()
        {
        }
        /**
         * Adds notices about enabled debug logging.
         *
         * @since 5.3.0
         */
        protected function add_debug_setting_notices()
        {
        }
        /**
         * Adds notices about gateways not being configured.
         *
         * @since 5.4.2
         */
        protected function add_gateway_not_configured_notices()
        {
        }
        /**
         * Adds notices about Apple Pay not supported in the current WooCommerce version.
         *
         * @since 5.5.1
         */
        protected function add_apple_pay_not_supported_notices()
        {
        }
        /**
         * Adds notices about Google Pay not supported in the current WooCommerce version.
         *
         * @since 5.10.0
         */
        protected function add_google_pay_not_supported_notices()
        {
        }
        /** Integration methods ***************************************************/
        /**
         * Checks if a supported integration is activated (Subscriptions or Pre-Orders)
         * and adds a notice if a gateway supports the integration *and* tokenization,
         * but tokenization is not enabled
         *
         * @since 4.0.0
         */
        protected function add_integration_requires_tokenization_notices()
        {
        }
        /**
         * Edit the Subscriptions automatic renewal payments support column content
         * when a gateway supports subscriptions (via tokenization) but tokenization
         * is not enabled
         *
         * @since 4.1.0
         *
         * @param string $html column content
         * @param \WC_Payment_Gateway|SV_WC_Payment_Gateway $gateway payment gateway being checked for support
         * @return string html
         */
        public function subscriptions_maybe_edit_renewal_support_status($html, $gateway)
        {
        }
        /**
         * Add some inline CSS to render the failed order status icon for the
         * automatic renewal payment support status column
         *
         * @since 4.1.0
         */
        public function subscriptions_add_renewal_support_status_inline_style()
        {
        }
        /**
         * Add gateway information to the system status report.
         *
         * @since 4.3.0
         */
        public function add_system_status_information()
        {
        }
        /** Helper methods ******************************************************/
        /**
         * Determines if the plugin supports the capture charge feature.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function supports_capture_charge()
        {
        }
        /**
         * Returns true if the gateway supports the named feature
         *
         * @since 1.0.0
         * @param string $feature the feature
         * @return boolean true if the named feature is supported
         */
        public function supports($feature)
        {
        }
        /** Getter methods ******************************************************/
        /**
         * Gets the privacy handler instance.
         *
         * @since 5.1.4
         *
         * @return SV_WC_Payment_Gateway_Privacy
         */
        public function get_privacy_instance()
        {
        }
        /**
         * Get the admin order handler instance.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Admin_Order
         */
        public function get_admin_order_handler()
        {
        }
        /**
         * Get the admin user handler instance.
         *
         * @since 4.3.0
         *
         * @return SV_WC_Payment_Gateway_Admin_User_Handler
         */
        public function get_admin_user_handler()
        {
        }
        /**
         * Returns the gateway settings option name for the identified gateway.
         * Defaults to woocommerce_{gateway id}_settings
         *
         * @since 1.0.0
         *
         * @param string $gateway_id
         * @return string the gateway settings option name
         */
        protected function get_gateway_settings_name($gateway_id)
        {
        }
        /**
         * Returns the settings array for the identified gateway.  Note that this
         * will not include any defaults if the gateway has yet to be saved
         *
         * @since 1.0.0
         *
         * @param string $gateway_id gateway identifier
         * @return array settings array
         */
        public function get_gateway_settings($gateway_id)
        {
        }
        /**
         * Returns true if this plugin requires SSL to function properly
         *
         * @since 1.0.0
         *
         * @return boolean true if this plugin requires ssl
         */
        protected function requires_ssl()
        {
        }
        /**
         * Gets the plugin configuration URL
         *
         * @since 1.0.0
         *
         * @see SV_WC_Plugin::get_settings_url()
         * @param string $gateway_id the gateway identifier
         * @return string gateway settings URL
         */
        public function get_settings_url($gateway_id = null)
        {
        }
        /**
         * Returns the admin configuration url for a gateway
         *
         * @since 3.0.0
         *
         * @param string $gateway_id the gateway ID
         * @return string admin configuration url for the gateway
         */
        public function get_payment_gateway_configuration_url($gateway_id)
        {
        }
        /**
         * Returns true if the current page is the admin configuration page for a gateway
         *
         * @since 3.0.0
         *
         * @param string $gateway_id the gateway ID
         * @return boolean true if the current page is the admin configuration page for the gateway
         */
        public function is_payment_gateway_configuration_page($gateway_id)
        {
        }
        /**
         * Get a gateway's settings screen section ID.
         *
         * This was used as a helper method for WC 2.5 compatibility, but is no longer needed and now deprecated.
         *
         * @since 4.4.0
         * @deprecated 5.0.1
         *
         * @param string $gateway_id the gateway ID
         * @return string
         */
        public function get_payment_gateway_configuration_section($gateway_id)
        {
        }
        /**
         * Adds the given gateway id and gateway class name as an available gateway
         * supported by this plugin
         *
         * @since 1.0.0
         *
         * @param string $gateway_id the gateway identifier
         * @param string $gateway_class_name the corresponding gateway class name
         */
        public function add_gateway($gateway_id, $gateway_class_name)
        {
        }
        /**
         * Gets all supported gateway class names; typically this will be just one,
         * unless the plugin supports credit card and echeck variations
         *
         * @since 1.0.0
         *
         * @return array of string gateway class names
         */
        public function get_gateway_class_names()
        {
        }
        /**
         * Gets the gateway class name for the given gateway id
         *
         * @since 1.0.0
         *
         * @param string $gateway_id the gateway identifier
         * @return string gateway class name
         */
        public function get_gateway_class_name($gateway_id)
        {
        }
        /**
         * Gets all supported gateway objects; typically this will be just one,
         * unless the plugin supports credit card and echeck variations
         *
         * @since 1.0.0
         *
         * @return SV_WC_Payment_Gateway[]
         */
        public function get_gateways()
        {
        }
        /**
         * Adds the given $gateway to the internal gateways store
         *
         * @since 2.2.0
         *
         * @param string $gateway_id the gateway identifier
         * @param SV_WC_Payment_Gateway $gateway the gateway object
         */
        public function set_gateway($gateway_id, $gateway)
        {
        }
        /**
         * Returns the identified gateway object
         *
         * @since 1.0.0
         *
         * @param string $gateway_id optional gateway identifier, defaults to first gateway, which will be the credit card gateway in plugins with support for both credit cards and echecks
         * @return SV_WC_Payment_Gateway the gateway object
         */
        public function get_gateway($gateway_id = null)
        {
        }
        /**
         * Returns true if the plugin supports this gateway
         *
         * @since 1.0.0
         *
         * @param string $gateway_id the gateway identifier
         * @return boolean true if the plugin has this gateway available, false otherwise
         */
        public function has_gateway($gateway_id)
        {
        }
        /**
         * Returns all available gateway ids for the plugin
         *
         * @since 1.0.0
         *
         * @return array of gateway id strings
         */
        public function get_gateway_ids()
        {
        }
        /**
         * Returns the gateway for a given token
         *
         * @since 4.0.0
         *
         * @param string|int $user_id the user ID associated with the token
         * @param string $token the token string
         * @return SV_WC_Payment_Gateway|null gateway if found, null otherwise
         */
        public function get_gateway_from_token($user_id, $token)
        {
        }
        /**
         * No-op the plugin class implementation so the payment gateway class can
         * implement its own request logging. This is primarily done to keep the log
         * files separated by gateway ID
         *
         * @see SV_WC_Plugin::add_api_request_logging()
         *
         * @since 2.2.0
         */
        public function add_api_request_logging()
        {
        }
        /**
         * Returns the set of accepted currencies, or empty array if all currencies
         * are accepted.  This is the intersection of all currencies accepted by
         * any gateways this plugin supports.
         *
         * @since 1.0.0
         *
         * @return array of accepted currencies
         */
        public function get_accepted_currencies()
        {
        }
        /**
         * Checks is WooCommerce Subscriptions is active
         *
         * @since 1.0.0
         *
         * @return bool true if the WooCommerce Subscriptions plugin is active, false if not active
         */
        public function is_subscriptions_active()
        {
        }
        /**
         * Checks is WooCommerce Pre-Orders is active
         *
         * @since 1.0.0
         *
         * @return bool true if WC Pre-Orders is active, false if not active
         */
        public function is_pre_orders_active()
        {
        }
        /**
         * Returns the loaded payment gateway framework __FILE__
         *
         * @since 4.0.0
         *
         * @return string
         */
        public function get_payment_gateway_framework_file()
        {
        }
        /**
         * Returns the loaded payment gateway framework path, without trailing slash.
         *
         * This is the highest version payment gateway framework that was loaded by
         * the bootstrap.
         *
         * @since 4.0.0
         *
         * @return string
         */
        public function get_payment_gateway_framework_path()
        {
        }
        /**
         * Returns the absolute path to the loaded payment gateway framework image
         * directory, without a trailing slash
         *
         * @since 4.0.0
         *
         * @return string relative path to framework image directory
         */
        public function get_payment_gateway_framework_assets_path()
        {
        }
        /**
         * Returns the loaded payment gateway framework assets URL, without a trailing slash
         *
         * @since 4.0.0
         *
         * @return string
         */
        public function get_payment_gateway_framework_assets_url()
        {
        }
    }
}
namespace {
    /**
     * WooCommerce Gateway Braintree Main Plugin Class.
     *
     * @since 2.0.0
     */
    class WC_Braintree extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin
    {
        /** plugin version number */
        const VERSION = '2.9.1';
        /** Braintree JS SDK version  */
        const BRAINTREE_JS_SDK_VERSION = '3.73.1';
        /** @var WC_Braintree single instance of this plugin */
        protected static $instance;
        /** plugin id */
        const PLUGIN_ID = 'braintree';
        /** credit card gateway class name */
        const CREDIT_CARD_GATEWAY_CLASS_NAME = 'WC_Gateway_Braintree_Credit_Card';
        /** credit card gateway ID */
        const CREDIT_CARD_GATEWAY_ID = 'braintree_credit_card';
        /** PayPal gateway class name */
        const PAYPAL_GATEWAY_CLASS_NAME = 'WC_Gateway_Braintree_PayPal';
        /** PayPal gateway ID */
        const PAYPAL_GATEWAY_ID = 'braintree_paypal';
        /** @var \WC_Braintree_Frontend the frontend instance */
        protected $frontend;
        /**
         * Initializes the plugin
         *
         * @since 2.0
         */
        public function __construct()
        {
        }
        /**
         * Include required files
         *
         * @since 2.0
         */
        public function includes()
        {
        }
        /**
         * Adds class aliases for framework classes renamed in 2.4.0.
         *
         * TODO: remove this method by version 3.0.0 or by 2021-06-10 {WV 2020-06-10}
         *
         * @since 2.4.0
         */
        private function add_framework_class_aliases()
        {
        }
        /**
         * Gets the deprecated hooks and their replacements, if any.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_deprecated_hooks()
        {
        }
        /**
         * Initializes the plugin lifecycle handler.
         *
         * @since 2.2.0
         */
        public function init_lifecycle_handler()
        {
        }
        /**
         * Handles the Braintree Auth connection response.
         *
         * @since 2.0.0
         */
        public function handle_auth_connect()
        {
        }
        /**
         * Handles a Braintree Auth disconnect request.
         *
         * @since 2.0.0
         */
        public function handle_auth_disconnect()
        {
        }
        /**
         * Initializes the PayPal cart handler.
         *
         * @since 2.0.0
         * @deprecated since 2.3.0
         */
        public function maybe_init_paypal_cart()
        {
        }
        /**
         * Gets the PayPal cart handler instance.
         *
         * @since 2.0.0
         * @deprecated since 2.3.0
         */
        public function get_paypal_cart_instance()
        {
        }
        /** Apple Pay Methods *********************************************************************************************/
        /**
         * Initializes the Apple Pay feature.
         *
         * The framework requires this be enabled by filter due to the complicated setup that's usually required. Braintree
         * makes the process a bit easier, so let's enable it by default.
         *
         * @since 2.2.0
         */
        public function maybe_init_apple_pay()
        {
        }
        /**
         * Builds the Apple Pay handler instance.
         *
         * @since 2.2.0
         *
         * @return \WC_Braintree\Apple_Pay
         */
        protected function build_apple_pay_instance()
        {
        }
        /** Admin methods ******************************************************/
        /**
         * Render a notice for the user to select their desired export format
         *
         * @since 2.1.3
         * @see SV_WC_Plugin::add_admin_notices()
         */
        public function add_admin_notices()
        {
        }
        /**
         * Adds delayed admin notices for invalid Dynamic Descriptor Name values.
         *
         * @since 2.1.0
         */
        public function add_delayed_admin_notices()
        {
        }
        /** Helper methods ******************************************************/
        /**
         * Main Braintree Instance, ensures only one instance is/can be loaded
         *
         * @since 2.2.0
         * @see wc_braintree()
         * @return WC_Braintree
         */
        public static function instance()
        {
        }
        /**
         * Gets the frontend class instance.
         *
         * @since 2.0.0
         * @return \WC_Braintree_Frontend
         */
        public function get_frontend_instance()
        {
        }
        /**
         * Overrides the default SV framework implementation of payment methods in My Account.
         *
         * @since 2.6.2
         * @return \WC_Braintree_My_Payment_Methods
         */
        public function get_my_payment_methods_instance()
        {
        }
        /**
         * Returns the plugin name, localized
         *
         * @since 2.1
         * @see SV_WC_Plugin::get_plugin_name()
         * @return string the plugin name
         */
        public function get_plugin_name()
        {
        }
        /**
         * Returns __FILE__
         *
         * @since 2.1
         * @see SV_WC_Plugin::get_file()
         * @return string the full path and filename of the plugin file
         */
        protected function get_file()
        {
        }
        /**
         * Gets the plugin documentation url
         *
         * @since 2.1
         * @see SV_WC_Plugin::get_documentation_url()
         * @return string documentation URL
         */
        public function get_documentation_url()
        {
        }
        /**
         * Gets the plugin support URL
         *
         * @since 2.3.0
         * @see SV_WC_Plugin::get_support_url()
         * @return string
         */
        public function get_support_url()
        {
        }
        /**
         * Returns the "Configure Credit Card" or "Configure PayPal" plugin action
         * links that go directly to the gateway settings page
         *
         * @since 3.0.0
         * @see SV_WC_Payment_Gateway_Plugin::get_settings_url()
         * @param string $gateway_id the gateway identifier
         * @return string plugin configure link
         */
        public function get_settings_link($gateway_id = \null)
        {
        }
        /**
         * Determines if WooCommerce is active.
         *
         * @since 2.0.0
         * @return bool
         */
        public static function is_woocommerce_active()
        {
        }
        /**
         * Determines if website is staging site.
         *
         * This functions use WooCommerce Subscriptions 'WCS_Staging' Class to determine staging site.
         * So, if WooCommerce Subscriptions plugin is not activated, this will always return false.
         *
         * @return bool
         */
        public static function is_staging_site()
        {
        }
    }
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit2c8b15d679b4169ba590cf8ac4f20788
    {
        private static $loader;
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit2c8b15d679b4169ba590cf8ac4f20788
    {
        public static $prefixLengthsPsr4 = array('B' => array('Braintree\\' => 10));
        public static $prefixDirsPsr4 = array('Braintree\\' => array(0 => __DIR__ . '/..' . '/braintree/braintree_php/lib/Braintree'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * SkyVerge Admin Notice Handler Class
     *
     * The purpose of this class is to provide a facility for displaying
     * conditional (often dismissible) admin notices during a single page
     * request
     *
     * @since 3.0.0
     */
    class SV_WC_Admin_Notice_Handler
    {
        /** @var SV_WC_Plugin the plugin */
        private $plugin;
        /** @var array associative array of id to notice text */
        private $admin_notices = array();
        /** @var boolean static member to enforce a single rendering of the admin notice placeholder element */
        private static $admin_notice_placeholder_rendered = false;
        /** @var boolean static member to enforce a single rendering of the admin notice javascript */
        private static $admin_notice_js_rendered = false;
        /**
         * Initialize and setup the Admin Notice Handler
         *
         * @since 3.0.0
         */
        public function __construct($plugin)
        {
        }
        /**
         * Adds the given $message as a dismissible notice identified by $message_id,
         * unless the notice has been dismissed, or we're on the plugin settings page
         *
         * @since 3.0.0
         * @param string $message the notice message to display
         * @param string $message_id the message id
         * @param array $params {
         *     Optional parameters.
         *
         *     @type bool $dismissible             If the notice should be dismissible
         *     @type bool $always_show_on_settings If the notice should be forced to display on the
         *                                         plugin settings page, regardless of `$dismissible`.
         *     @type string $notice_class          Additional classes for the notice.
         * }
         */
        public function add_admin_notice($message, $message_id, $params = array())
        {
        }
        /**
         * Returns true if the identified notice hasn't been cleared, or we're on
         * the plugin settings page (where notices are always displayed)
         *
         * @since 3.0.0
         * @param string $message_id the message id
         * @param array $params {
         *     Optional parameters.
         *
         *     @type bool $dismissible             If the notice should be dismissible
         *     @type bool $always_show_on_settings If the notice should be forced to display on the
         *                                         plugin settings page, regardless of `$dismissible`.
         * }
         * @return bool
         */
        public function should_display_notice($message_id, $params = array())
        {
        }
        /**
         * Render any admin notices, as well as the admin notice placeholder
         *
         * @since 3.0.0
         * @param boolean $is_visible true if the notices should be immediately visible, false otherwise
         */
        public function render_admin_notices($is_visible = true)
        {
        }
        /**
         * Render any delayed admin notices, which have not yet already been rendered
         *
         * @since 3.0.0
         */
        public function render_delayed_admin_notices()
        {
        }
        /**
         * Render a single admin notice
         *
         * @since 3.0.0
         * @param string $message the notice message to display
         * @param string $message_id the message id
         * @param array $params {
         *     Optional parameters.
         *
         *     @type bool $dismissible             If the notice should be dismissible
         *     @type bool $is_visible              If the notice should be immediately visible
         *     @type bool $always_show_on_settings If the notice should be forced to display on the
         *                                         plugin settings page, regardless of `$dismissible`.
         *     @type string $notice_class          Additional classes for the notice.
         * }
         */
        public function render_admin_notice($message, $message_id, $params = array())
        {
        }
        /**
         * Render the javascript to handle the notice "dismiss" functionality
         *
         * @since 3.0.0
         */
        public function render_admin_notice_js()
        {
        }
        /**
         * Marks the identified admin notice as dismissed for the given user
         *
         * @since 3.0.0
         * @param string $message_id the message identifier
         * @param int $user_id optional user identifier, defaults to current user
         */
        public function dismiss_notice($message_id, $user_id = null)
        {
        }
        /**
         * Marks the identified admin notice as not dismissed for the identified user
         *
         * @since 3.0.0
         * @param string $message_id the message identifier
         * @param int $user_id optional user identifier, defaults to current user
         */
        public function undismiss_notice($message_id, $user_id = null)
        {
        }
        /**
         * Returns true if the identified admin notice has been dismissed for the
         * given user
         *
         * @since 3.0.0
         * @param string $message_id the message identifier
         * @param int $user_id optional user identifier, defaults to current user
         * @return boolean true if the message has been dismissed by the admin user
         */
        public function is_notice_dismissed($message_id, $user_id = null)
        {
        }
        /**
         * Returns the full set of dismissed notices for the user identified by
         * $user_id, for this plugin
         *
         * @since 3.0.0
         * @param int $user_id optional user identifier, defaults to current user
         * @return array of message id to dismissed status (true or false)
         */
        public function get_dismissed_notices($user_id = null)
        {
        }
        /** AJAX methods ******************************************************/
        /**
         * Dismiss the identified notice
         *
         * @since 3.0.0
         */
        public function handle_dismiss_notice()
        {
        }
        /** Getter methods ******************************************************/
        /**
         * Get the plugin
         *
         * @since 3.0.0
         * @return SV_WC_Plugin returns the plugin instance
         */
        protected function get_plugin()
        {
        }
    }
    /**
     * WooCommerce Compatibility Utility Class
     *
     * The unfortunate purpose of this class is to provide a single point of
     * compatibility functions for dealing with supporting multiple versions
     * of WooCommerce and various extensions.
     *
     * The expected procedure is to remove methods from this class, using the
     * latest ones directly in code, as support for older versions of WooCommerce
     * are dropped.
     *
     * Current Compatibility
     * + Core 3.0.9 - 3.7.x
     * + Subscriptions 2.2.x
     *
     * // TODO: move to /compatibility
     *
     * @since 2.0.0
     */
    class SV_WC_Plugin_Compatibility
    {
        /**
         * Gets the statuses that are considered "paid".
         *
         * @since 5.1.0
         * @deprecated 5.5.0
         *
         * @return string[]
         */
        public static function wc_get_is_paid_statuses()
        {
        }
        /**
         * Logs a doing_it_wrong message.
         *
         * @since 5.0.1
         * @deprecated 5.5.0
         *
         * @param string $function function used
         * @param string $message message to log
         * @param string $version version the message was added in
         */
        public static function wc_doing_it_wrong($function, $message, $version)
        {
        }
        /**
         * Formats a date for output.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_DateTime|SV_WC_DateTime $date date object
         * @param string $format date format
         * @return string
         */
        public static function wc_format_datetime($date, $format = '')
        {
        }
        /**
         * Logs a deprecated function notice.
         *
         * @since 5.0.0
         * @deprecated 5.5.0
         *
         * @param string $function deprecated function name
         * @param string $version deprecated-since version
         * @param string $replacement replacement function name
         */
        public static function wc_deprecated_function($function, $version, $replacement = null)
        {
        }
        /**
         * Retrieves a list of the latest available WooCommerce versions.
         *
         * Excludes betas, release candidates and development versions.
         * Versions are sorted from most recent to least recent.
         *
         * @since 5.4.1
         *
         * @return string[] array of semver strings
         */
        public static function get_latest_wc_versions()
        {
        }
        /**
         * Gets the version of the currently installed WooCommerce.
         *
         * @since 3.0.0
         *
         * @return string|null Woocommerce version number or null if undetermined
         */
        public static function get_wc_version()
        {
        }
        /**
         * Determines if the installed WooCommerce version matches a specific version.
         *
         * @since 5.5.0
         *
         * @param string $version semver
         * @return bool
         */
        public static function is_wc_version($version)
        {
        }
        /**
         * Determines if the installed version of WooCommerce is 3.0 or greater.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @return bool
         */
        public static function is_wc_version_gte_3_0()
        {
        }
        /**
         * Determines if the installed version of WooCommerce is less than 3.0.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @return bool
         */
        public static function is_wc_version_lt_3_0()
        {
        }
        /**
         * Determines if the installed version of WooCommerce is 3.1 or greater.
         *
         * @since 4.6.5
         * @deprecated 5.5.0
         *
         * @return bool
         */
        public static function is_wc_version_gte_3_1()
        {
        }
        /**
         * Determines if the installed version of WooCommerce is less than 3.1.
         *
         * @since 4.6.5
         * @deprecated 5.5.0
         *
         * @return bool
         */
        public static function is_wc_version_lt_3_1()
        {
        }
        /**
         * Determines if the installed version of WooCommerce is equal or greater than a given version.
         *
         * @since 4.7.3
         *
         * @param string $version version number to compare
         * @return bool
         */
        public static function is_wc_version_gte($version)
        {
        }
        /**
         * Determines if the installed version of WooCommerce is lower than a given version.
         *
         * @since 4.7.3
         *
         * @param string $version version number to compare
         * @return bool
         */
        public static function is_wc_version_lt($version)
        {
        }
        /**
         * Determines if the installed version of WooCommerce is greater than a given version.
         *
         * @since 2.0.0
         *
         * @param string $version the version to compare
         * @return bool
         */
        public static function is_wc_version_gt($version)
        {
        }
        /**
         * Determines whether the enhanced admin is available.
         *
         * This checks both for WooCommerce v4.0+ and the underlying package availability.
         *
         * @since 5.6.0
         *
         * @return bool
         */
        public static function is_enhanced_admin_available()
        {
        }
        /** WordPress core ******************************************************/
        /**
         * Normalizes a WooCommerce page screen ID.
         *
         * Needed because WordPress uses a menu title (which is translatable), not slug, to generate screen ID.
         * See details in: https://core.trac.wordpress.org/ticket/21454
         * TODO: Add WP version check when https://core.trac.wordpress.org/ticket/18857 is addressed {BR 2016-12-12}
         *
         * @since 4.6.0
         *
         * @param string $slug slug for the screen ID to normalize (minus `woocommerce_page_`)
         * @return string normalized screen ID
         */
        public static function normalize_wc_screen_id($slug = 'wc-settings')
        {
        }
        /**
         * Converts a shorthand byte value to an integer byte value.
         *
         * Wrapper for wp_convert_hr_to_bytes(), moved to load.php in WordPress 4.6 from media.php
         *
         * Based on ActionScheduler's compat wrapper for the same function:
         * ActionScheduler_Compatibility::convert_hr_to_bytes()
         *
         * @link https://secure.php.net/manual/en/function.ini-get.php
         * @link https://secure.php.net/manual/en/faq.using.php#faq.using.shorthandbytes
         *
         * @since 5.3.1
         *
         * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
         * @return int An integer byte value.
         */
        public static function convert_hr_to_bytes($value)
        {
        }
        /** Subscriptions *********************************************************/
        /**
         * Determines if the installed version of WooCommerce Subscriptions is 2.0.0 or greater.
         *
         * @since 4.1.0
         * @deprecated 5.5.0
         *
         * @return bool
         */
        public static function is_wc_subscriptions_version_gte_2_0()
        {
        }
        /**
         * Determines if the installed version of WooCommerce Subscriptions matches or exceeds a given version.
         *
         * @since 5.5.0
         *
         * @param string $version version number to compare
         * @return bool
         */
        public static function is_wc_subscriptions_version_gte($version)
        {
        }
        /**
         * Determines if the installed version of WooCommerce Subscriptions exceeds a given version.
         *
         * @since 5.5.0
         *
         * @param string $version version number to compare
         * @return bool
         */
        public static function is_wc_subscriptions_version_gt($version)
        {
        }
        /**
         * Determines if the installed version of WooCommerce Subscriptions is lower than a given version.
         *
         * @since 5.5.0
         *
         * @param string $version version number to compare
         * @return bool
         */
        public static function is_wc_subscriptions_version_lt($version)
        {
        }
        /**
         * Gets the version of the currently installed WooCommerce Subscriptions.
         *
         * @since 4.1.0
         *
         * @return string|null WooCommerce Subscriptions version number or null if not found
         */
        protected static function get_wc_subscriptions_version()
        {
        }
        /**
         * Determines if the installed WooCommerce Subscriptions version matches a specific version.
         *
         * @since 5.5.0
         *
         * @param string $version semver
         * @return bool
         */
        protected static function is_wc_subscriptions_version($version)
        {
        }
    }
    /**
     * The job batch handler class.
     *
     * This provides a way for plugins to process "background" jobs in batches when
     * regular background processing isn't available.
     *
     * @since 4.8.0
     */
    class SV_WP_Job_Batch_Handler
    {
        /** @var SV_WP_Background_Job_Handler job handler instance */
        protected $job_handler;
        /** @var SV_WC_Plugin $plugin WC plugin instance */
        protected $plugin;
        /** @var int default items per batch */
        protected $items_per_batch = 20;
        /**
         * Constructs the class.
         *
         * @since 4.8.0
         *
         * @param SV_WP_Background_Job_Handler $job_handler job handler instance
         * @param SV_WC_Plugin $plugin WC plugin instance
         */
        public function __construct($job_handler, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin $plugin)
        {
        }
        /**
         * Adds the necessary action and filter hooks.
         *
         * @since 4.8.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Enqueues the scripts.
         *
         * @since 4.8.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Renders the inline JavaScript for instantiating the batch handler class.
         *
         * @since 4.8.0
         */
        protected function render_js()
        {
        }
        /**
         * Gets the JavaScript batch handler arguments.
         *
         * @since 4.8.0
         *
         * @return array
         */
        protected function get_js_args()
        {
        }
        /**
         * Gets the JavaScript batch handler class name.
         *
         * Plugins can override this with their own handler that extends the base.
         *
         * @since 4.8.0
         *
         * @return string
         */
        protected function get_js_class()
        {
        }
        /**
         * Processes a job batch via AJAX.
         *
         * @internal
         *
         * @since 4.8.0
         *
         * @throws \Exception upon error.
         */
        public function ajax_process_batch()
        {
        }
        /**
         * Cancels a job via AJAX.
         *
         * @internal
         *
         * @since 4.8.0
         */
        public function ajax_cancel_job()
        {
        }
        /**
         * Handles a job after processing one of its batches.
         *
         * Allows plugins to add extra job properties and handle certain statuses.
         * Implementations may throw a SV_WC_Plugin_Exception.
         *
         * @since 4.8.0
         *
         * @param \stdClass|object $job job object
         * @return \stdClass|object $job job object
         */
        protected function process_job_status($job)
        {
        }
        /**
         * Processes a batch of items for the given job.
         *
         * A batch consists of the number of items defined by self::get_items_per_batch()
         * or the number we're able to process before exceeding time or memory limits.
         *
         * @since 4.8.0
         *
         * @param string $job_id job to process
         * @return \stdClass|object $job job after processing the batch
         * @throws \Exception
         * @throws SV_WC_Plugin_Exception
         */
        public function process_batch($job_id)
        {
        }
        /**
         * Gets the number of items to process in a single request when processing job item batches.
         *
         * @since 4.8.0
         *
         * @return int
         */
        protected function get_items_per_batch()
        {
        }
        /**
         * Gets the job handler.
         *
         * @since 4.8.0
         *
         * @return SV_WP_Background_Job_Handler
         */
        protected function get_job_handler()
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 4.8.0
         *
         * @return SV_WC_Plugin
         */
        protected function get_plugin()
        {
        }
    }
    /**
     * SkyVerge Wordpress Async Request class
     *
     * Based on the incredible work by deliciousbrains - most of the code is from
     * here: https://github.com/A5hleyRich/wp-background-processing
     *
     * Forked & namespaced to prevent dependency conflicts and to facilitate
     * further customizations.
     *
     * Use SV_WP_Async_Request::set_data() to set request data, instead of ::data().
     *
     * @since 4.4.0
     */
    abstract class SV_WP_Async_Request
    {
        /** @var string request prefix */
        protected $prefix = 'wp';
        /** @var string request action name */
        protected $action = 'async_request';
        /** @var string request identifier */
        protected $identifier;
        /** @var array request data */
        protected $data = array();
        /**
         * Initiate a new async request
         *
         * @since 4.4.0
         */
        public function __construct()
        {
        }
        /**
         * Set data used during the async request
         *
         * @since 4.4.0
         * @param array $data
         * @return SV_WP_Async_Request
         */
        public function set_data($data)
        {
        }
        /**
         * Dispatch the async request
         *
         * @since 4.4.0
         * @return array|\WP_Error
         */
        public function dispatch()
        {
        }
        /**
         * Get query args
         *
         * @since 4.4.0
         * @return array
         */
        protected function get_query_args()
        {
        }
        /**
         * Get query URL
         *
         * @since 4.4.0
         * @return string
         */
        protected function get_query_url()
        {
        }
        /**
         * Get request args
         *
         * In 4.6.3 renamed from get_post_args to get_request_args
         *
         * @since 4.4.0
         * @return array
         */
        protected function get_request_args()
        {
        }
        /**
         * Maybe handle
         *
         * Check for correct nonce and pass to handler.
         * @since 4.4.0
         */
        public function maybe_handle()
        {
        }
        /**
         * Handle
         *
         * Override this method to perform any actions required
         * during the async request.
         *
         * @since 4.4.0
         */
        protected abstract function handle();
    }
    /**
     * SkyVerge WordPress Background Job Handler class
     *
     * Based on the wonderful WP_Background_Process class by deliciousbrains:
     * https://github.com/A5hleyRich/wp-background-processing
     *
     * Subclasses SV_WP_Async_Request. Instead of the concept of `batches` used in
     * the Delicious Brains' version, however, this takes a more object-oriented approach
     * of background `jobs`, allowing greater control over manipulating job data and
     * processing.
     *
     * A batch implicitly expected an array of items to process, whereas a job does
     * not expect any particular data structure (although it does default to
     * looping over job data) and allows subclasses to provide their own
     * processing logic.
     *
     * # Sample usage:
     *
     * $background_job_handler = new SV_WP_Background_Job_Handler();
     * $job = $background_job_handler->create_job( $attrs );
     * $background_job_handler->dispatch();
     *
     * @since 4.4.0
     */
    abstract class SV_WP_Background_Job_Handler extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WP_Async_Request
    {
        /** @var string async request prefix */
        protected $prefix = 'sv_wp';
        /** @var string async request action */
        protected $action = 'background_job';
        /** @var string data key */
        protected $data_key = 'data';
        /** @var int start time of current process */
        protected $start_time = 0;
        /** @var string cron hook identifier */
        protected $cron_hook_identifier;
        /** @var string cron interval identifier */
        protected $cron_interval_identifier;
        /** @var string debug message, used by the system status tool */
        protected $debug_message;
        /**
         * Initiate new background job handler
         *
         * @since 4.4.0
         */
        public function __construct()
        {
        }
        /**
         * Adds the necessary action and filter hooks.
         *
         * @since 4.8.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Dispatch
         *
         * @since 4.4.0
         * @return array|WP_Error
         */
        public function dispatch()
        {
        }
        /**
         * Maybe processes job queue.
         *
         * Checks whether data exists within the job queue and that the background process is not already running.
         *
         * @since 4.4.0
         *
         * @throws \Exception upon error
         */
        public function maybe_handle()
        {
        }
        /**
         * Check whether job queue is empty or not
         *
         * @since 4.4.0
         * @return bool True if queue is empty, false otherwise
         */
        protected function is_queue_empty()
        {
        }
        /**
         * Check whether background process is running or not
         *
         * Check whether the current process is already running
         * in a background process.
         *
         * @since 4.4.0
         * @return bool True if processing is running, false otherwise
         */
        protected function is_process_running()
        {
        }
        /**
         * Lock process
         *
         * Lock the process so that multiple instances can't run simultaneously.
         * Override if applicable, but the duration should be greater than that
         * defined in the time_exceeded() method.
         *
         * @since 4.4.0
         */
        protected function lock_process()
        {
        }
        /**
         * Unlock process
         *
         * Unlock the process so that other instances can spawn.
         *
         * @since 4.4.0
         * @return SV_WP_Background_Job_Handler
         */
        protected function unlock_process()
        {
        }
        /**
         * Check if memory limit is exceeded
         *
         * Ensures the background job handler process never exceeds 90%
         * of the maximum WordPress memory.
         *
         * @since 4.4.0
         *
         * @return bool True if exceeded memory limit, false otherwise
         */
        protected function memory_exceeded()
        {
        }
        /**
         * Get memory limit
         *
         * @since 4.4.0
         *
         * @return int memory limit in bytes
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Check whether request time limit has been exceeded or not
         *
         * Ensures the background job handler never exceeds a sensible time limit.
         * A timeout limit of 30s is common on shared hosting.
         *
         * @since 4.4.0
         *
         * @return bool True, if time limit exceeded, false otherwise
         */
        protected function time_exceeded()
        {
        }
        /**
         * Create a background job
         *
         * Delicious Brains' versions alternative would be using ->data()->save().
         * Allows passing in any kind of job attributes, which will be available at item data processing time.
         * This allows sharing common options between items without the need to repeat
         * the same information for every single item in queue.
         *
         * Instead of returning self, returns the job instance, which gives greater
         * control over the job.
         *
         * @since 4.4.0
         *
         * @param array|mixed $attrs Job attributes.
         * @return \stdClass|object|null
         */
        public function create_job($attrs)
        {
        }
        /**
         * Get a job (by default the first in the queue)
         *
         * @since 4.4.0
         *
         * @param string $id Optional. Job ID. Will return first job in queue if not
         *                   provided. Will not return completed or failed jobs from queue.
         * @return \stdClass|object|null The found job object or null
         */
        public function get_job($id = null)
        {
        }
        /**
         * Gets jobs.
         *
         * @since 4.4.2
         *
         * @param array $args {
         *     Optional. An array of arguments
         *
         *     @type string|array $status Job status(es) to include
         *     @type string $order ASC or DESC. Defaults to DESC
         *     @type string $orderby Field to order by. Defaults to option_id
         * }
         * @return \stdClass[]|object[]|null Found jobs or null if none found
         */
        public function get_jobs($args = array())
        {
        }
        /**
         * Handles jobs.
         *
         * Process jobs while remaining within server memory and time limit constraints.
         *
         * @since 4.4.0
         *
         * @throws \Exception
         */
        protected function handle()
        {
        }
        /**
         * Process a job
         *
         * Default implementation is to loop over job data and passing each item to
         * the item processor. Subclasses are, however, welcome to override this method
         * to create totally different job processing implementations - see
         * WC_CSV_Import_Suite_Background_Import in CSV Import for an example.
         *
         * If using the default implementation, the job must have a $data_key property set.
         * Subclasses can override the data key, but the contents must be an array which
         * the job processor can loop over. By default, the data key is `data`.
         *
         * If no data is set, the job will completed right away.
         *
         * @since 4.4.0
         *
         * @param \stdClass|object $job
         * @param int $items_per_batch number of items to process in a single request. Defaults to unlimited.
         * @throws \Exception when job data is incorrect
         * @return \stdClass $job
         */
        public function process_job($job, $items_per_batch = null)
        {
        }
        /**
         * Update job attrs
         *
         * @since 4.4.0
         *
         * @param \stdClass|object|string $job Job instance or ID
         * @return \stdClass|object|false on failure
         */
        public function update_job($job)
        {
        }
        /**
         * Handles job completion.
         *
         * @since 4.4.0
         *
         * @param \stdClass|object|string $job Job instance or ID
         * @return \stdClass|object|false on failure
         */
        public function complete_job($job)
        {
        }
        /**
         * Handle job failure
         *
         * Default implementation does not call this method directly, but it's
         * provided as a convenience method for subclasses that may call this to
         * indicate that a particular job has failed for some reason.
         *
         * @since 4.4.0
         *
         * @param \stdClass|object|string $job Job instance or ID
         * @param string $reason Optional. Reason for failure.
         * @return \stdClass|false on failure
         */
        public function fail_job($job, $reason = '')
        {
        }
        /**
         * Delete a job
         *
         * @since 4.4.2
         *
         * @param \stdClass|object|string $job Job instance or ID
         * @return false on failure
         */
        public function delete_job($job)
        {
        }
        /**
         * Handle job queue completion
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         *
         * @since 4.4.0
         */
        protected function complete()
        {
        }
        /**
         * Schedule cron healthcheck
         *
         * @since 4.4.0
         * @param array $schedules
         * @return array
         */
        public function schedule_cron_healthcheck($schedules)
        {
        }
        /**
         * Handle cron healthcheck
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         *
         * @since 4.4.0
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule cron health check event
         *
         * @since 4.4.0
         */
        protected function schedule_event()
        {
        }
        /**
         * Clear scheduled health check event
         *
         * @since 4.4.0
         */
        protected function clear_scheduled_event()
        {
        }
        /**
         * Process an item from job data
         *
         * Implement this method to perform any actions required on each
         * item in job data.
         *
         * @since 4.4.2
         *
         * @param mixed $item Job data item to iterate over
         * @param \stdClass|object $job Job instance
         * @return mixed
         */
        protected abstract function process_item($item, $job);
        /**
         * Handles PHP shutdown, say after a fatal error.
         *
         * @since 4.5.0
         *
         * @param \stdClass|object $job the job being processed
         */
        public function handle_shutdown($job)
        {
        }
        /**
         * Update a job option in options database.
         *
         * @since 4.6.3
         *
         * @param \stdClass|object $job the job instance to update in database
         * @return int|bool number of rows updated or false on failure, see wpdb::update()
         */
        private function update_job_option($job)
        {
        }
        /** Debug & Testing Methods ***********************************************/
        /**
         * Tests the background handler's connection.
         *
         * @since 4.8.0
         *
         * @return bool
         */
        public function test_connection()
        {
        }
        /**
         * Handles the connection test request.
         *
         * @since 4.8.0
         */
        public function handle_connection_test_response()
        {
        }
        /**
         * Adds the WooCommerce debug tool.
         *
         * @since 4.8.0
         *
         * @param array $tools WooCommerce core tools
         * @return array
         */
        public function add_debug_tool($tools)
        {
        }
        /**
         * Runs the test connection debug tool.
         *
         * @since 4.8.0
         *
         * @return string
         */
        public function run_debug_tool()
        {
        }
        /**
         * Translate the tool success message.
         *
         * This can be removed in favor of returning the message string in `run_debug_tool()`
         *  when WC 3.1 is required, though that means the message will always be "success" styled.
         *
         * @since 4.8.0
         *
         * @param string $translated the text to output
         * @param string $original the original text
         * @param string $domain the textdomain
         * @return string the updated text
         */
        public function translate_success_message($translated, $original, $domain)
        {
        }
        /** Helper Methods ********************************************************/
        /**
         * Gets the job handler identifier.
         *
         * @since 4.8.0
         *
         * @return string
         */
        public function get_identifier()
        {
        }
    }
    /**
     * Plugin dependencies handler.
     *
     * @since 5.2.0
     */
    class SV_WC_Plugin_Dependencies
    {
        /** @var array required PHP extensions */
        protected $php_extensions = array();
        /** @var array required PHP functions */
        protected $php_functions = array();
        /** @var array required PHP settings */
        protected $php_settings = array();
        /** @var SV_WC_Plugin plugin instance */
        protected $plugin;
        /**
         * Constructs the class.
         *
         * @since 5.2.0
         *
         * @param SV_WC_Plugin $plugin plugin instance
         * @param array $args {
         *     PHP extension, function, and settings dependencies
         *
         *     @type array $php_extensions PHP extension dependencies
         *     @type array $php_functions  PHP function dependencies
         *     @type array $php_settings   PHP settings dependencies
         * }
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin $plugin, $args = array())
        {
        }
        /**
         * Parses the dependency arguments and sets defaults.
         *
         * @since 5.2.0
         *
         * @param array $args dependency args
         * @return array
         */
        private function parse_dependencies($args)
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.2.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Adds the admin dependency notices.
         *
         * @since 5.2.0
         */
        public function add_admin_notices()
        {
        }
        /**
         * Adds notices for any missing PHP extensions.
         *
         * @since 5.2.0
         */
        public function add_php_extension_notices()
        {
        }
        /**
         * Adds notices for any missing PHP functions.
         *
         * @since 5.2.0
         */
        public function add_php_function_notices()
        {
        }
        /**
         * Adds notices for any incompatible PHP settings.
         *
         * @since 5.2.0
         */
        public function add_php_settings_notices()
        {
        }
        /**
         * Gets any deprecated warning notices.
         *
         * @since 5.2.0
         */
        protected function add_deprecated_notices()
        {
        }
        /**
         * Adds an admin notice.
         *
         * @since 5.2.0
         *
         * @param string $id notice ID
         * @param string $message notice message
         * @param string $type notice type
         */
        protected function add_admin_notice($id, $message, $type = 'info')
        {
        }
        /**
         * Returns the active scripts optimization plugins.
         *
         * Returns a key-value array where the key contains the plugin file identifier and the value is the name of the plugin.
         *
         * @since 5.7.0
         *
         * @return array
         */
        public function get_active_scripts_optimization_plugins()
        {
        }
        /**
         * Returns true if any of the known scripts optimization plugins is active.
         *
         * @since 5.7.0
         *
         * @return bool
         */
        public function is_scripts_optimization_plugin_active()
        {
        }
        /** Getter methods ********************************************************/
        /**
         * Gets any missing PHP extensions.
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_missing_php_extensions()
        {
        }
        /**
         * Gets the required PHP extensions.
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_php_extensions()
        {
        }
        /**
         * Gets any missing PHP functions.
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_missing_php_functions()
        {
        }
        /**
         * Gets the required PHP functions.
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_php_functions()
        {
        }
        /**
         * Gets any incompatible PHP settings.
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_incompatible_php_settings()
        {
        }
        /**
         * Gets the required PHP settings.
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_php_settings()
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 5.2.0
         *
         * @return SV_WC_Plugin
         */
        protected function get_plugin()
        {
        }
    }
    /**
     * SkyVerge Hook Deprecator Class
     *
     * This class handles triggering PHP notices for deprecated and removed hooks
     *
     * @since 4.3.0
     */
    class SV_WC_Hook_Deprecator
    {
        /** @var string plugin name */
        protected $plugin_name;
        /** @var array deprecated/removed hooks */
        protected $hooks;
        /**
         * Setup class
         *
         * @param string $plugin_name
         * @param array $hooks
         */
        public function __construct($plugin_name, $hooks)
        {
        }
        /**
         * Sets the deprecated hook defaults.
         *
         * @since 4.5.0
         * @param array $hook_params the hook parameters
         * @return array
         */
        protected function set_hook_defaults($hook_params)
        {
        }
        /**
         * Map each deprecated hook to its replacement.
         *
         * @since 4.5.0
         */
        protected function map_deprecated_hooks()
        {
        }
        /**
         * Map a deprecated/renamed hook to a new one.
         *
         * This method works by hooking into the new, renamed version of the action/filter
         * and checking if any actions/filters are hooked into the old hook. It then runs
         * these and applies the data modifications in the new hook.
         *
         * @since 4.5.0
         * @return mixed
         */
        public function map_deprecated_hook()
        {
        }
        /**
         * Trigger a notice when other actors have attached callbacks to hooks that
         * are either deprecated or removed. This only runs when WP_DEBUG is on.
         *
         * @since 4.3.0
         */
        public function trigger_deprecated_errors()
        {
        }
        /**
         * Trigger the deprecated/removed notice
         *
         * @since 4.3.0
         * @param string $old_hook_name deprecated/removed hook name
         * @param array $hook {
         *   @type string $version version the hook was deprecated/removed in
         *   @type bool $removed if present and true, the message will indicate the hook was removed instead of deprecated
         *   @type string|bool $replacement if present and a string, the message will indicate the replacement hook to use,
         *     otherwise (if bool and false) the message will indicate there is no replacement available.
         * }
         */
        protected function trigger_error($old_hook_name, $hook)
        {
        }
    }
}
namespace {
    /**
     * # SkyVerge WooCommerce Plugin Framework Bootstrap
     *
     * The purpose of this class is to find and load the highest versioned
     * framework of the activated framework plugins, and then initialize any
     * compatible framework plugins.
     *
     * @since 2.0.0
     */
    class SV_WC_Framework_Bootstrap
    {
        /** @var SV_WC_Framework_Bootstrap The single instance of the class */
        protected static $instance = \null;
        /** @var array registered framework plugins */
        protected $registered_plugins = array();
        /** @var array registered and active framework plugins */
        protected $active_plugins = array();
        /** @var array of plugins that need to be updated due to an outdated framework */
        protected $incompatible_framework_plugins = array();
        /** @var array of plugins that require a newer version of WC */
        protected $incompatible_wc_version_plugins = array();
        /** @var array of plugins that require a newer version of WP */
        protected $incompatible_wp_version_plugins = array();
        /**
         * Hidden constructor
         *
         * @since 2.0.0
         */
        private function __construct()
        {
        }
        /**
         * Instantiate the class singleton
         *
         * @since 2.0.0
         * @return SV_WC_Framework_Bootstrap singleton instance
         */
        public static function instance()
        {
        }
        /**
         * Register a frameworked plugin
         *
         * @since 2.0.0
         * @param string $version the framework version
         * @param string $plugin_name the plugin name
         * @param string $path the plugin path
         * @param callable $callback function to initialize the plugin
         * @param array $args optional plugin arguments.  Possible arguments: 'is_payment_gateway', 'backwards_compatible'
         */
        public function register_plugin($version, $plugin_name, $path, $callback, $args = array())
        {
        }
        /**
         * Loads all registered framework plugins, first initializing the plugin
         * framework by loading the highest versioned one.
         *
         * @since 2.0.0
         */
        public function load_framework_plugins()
        {
        }
        /** Admin methods ******************************************************/
        /**
         * Deactivate backwards-incompatible framework plugins, which will allow
         * plugins with an older version of the framework to be active. Useful when
         * the admin isn't ready to upgrade older plugins yet needs them to still
         * function (e.g. a payment gateway)
         *
         * @since 4.0.0
         */
        public function maybe_deactivate_framework_plugins()
        {
        }
        /**
         * Render a notice with a count of the backwards incompatible frameworked
         * plugins that were deactivated
         *
         * @since 4.0.0
         */
        public function render_deactivation_notice()
        {
        }
        /**
         * Render a notice to update any plugins with incompatible framework
         * versions, or incompatiblities with the current WooCommerce or WordPress
         * versions
         *
         * @since 2.0.0
         */
        public function render_update_notices()
        {
        }
        /** Helper methods ******************************************************/
        /**
         * Is the WooCommerce plugin installed and active? This method is handy for
         * frameworked plugins that are listed on wordpress.org and thus don't have
         * access to the Woo Helper functions bundled with WooThemes-listed plugins.
         *
         * Notice: For now you can't rely on this method being available, since the
         * bootstrap class is the only piece of the framework which is loaded
         * simply according to the lexical order of plugin directories. Therefore
         * to use, you should first check that this method exists, or if you really
         * need to check for WooCommerce being active, define your own method.
         *
         * @since 4.0.0
         * @return boolean true if the WooCommerce plugin is installed and active
         */
        public static function is_woocommerce_active()
        {
        }
        /**
         * Compare the two framework versions.  Returns -1 if $a is less than $b, 0 if
         * they're equal, and 1 if $a is greater than $b
         *
         * @since 2.0.0
         * @param array $a first registered plugin to compare
         * @param array $b second registered plugin to compare
         * @return int -1 if $a is less than $b, 0 if they're equal, and 1 if $a is greater than $b
         */
        public function compare_frameworks($a, $b)
        {
        }
        /**
         * Returns the plugin path for the given $file
         *
         * @since 2.0.0
         * @param string $file the file
         * @return string plugin path
         */
        public function get_plugin_path($file)
        {
        }
        /**
         * Returns the WooCommerce version number, backwards compatible to
         * WC 1.5
         *
         * @since 3.0.0
         * @return null|string
         */
        protected function get_wc_version()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * SkyVerge Country Helper Class
     *
     * The purpose of this class is to centralize country-related utility
     * functions that are commonly used in SkyVerge plugins
     *
     * @since 5.4.3
     */
    class Country_Helper
    {
        /** @var array ISO 3166-alpha2 => ISO 3166-alpha3  */
        public static $alpha3 = ['AF' => 'AFG', 'AL' => 'ALB', 'DZ' => 'DZA', 'AD' => 'AND', 'AO' => 'AGO', 'AG' => 'ATG', 'AR' => 'ARG', 'AM' => 'ARM', 'AU' => 'AUS', 'AT' => 'AUT', 'AZ' => 'AZE', 'BS' => 'BHS', 'BH' => 'BHR', 'BD' => 'BGD', 'BB' => 'BRB', 'BY' => 'BLR', 'BE' => 'BEL', 'BZ' => 'BLZ', 'BJ' => 'BEN', 'BT' => 'BTN', 'BO' => 'BOL', 'BA' => 'BIH', 'BW' => 'BWA', 'BR' => 'BRA', 'BN' => 'BRN', 'BG' => 'BGR', 'BF' => 'BFA', 'BI' => 'BDI', 'KH' => 'KHM', 'CM' => 'CMR', 'CA' => 'CAN', 'CV' => 'CPV', 'CF' => 'CAF', 'TD' => 'TCD', 'CL' => 'CHL', 'CN' => 'CHN', 'CO' => 'COL', 'KM' => 'COM', 'CD' => 'COD', 'CG' => 'COG', 'CR' => 'CRI', 'CI' => 'CIV', 'HR' => 'HRV', 'CU' => 'CUB', 'CY' => 'CYP', 'CZ' => 'CZE', 'DK' => 'DNK', 'DJ' => 'DJI', 'DM' => 'DMA', 'DO' => 'DOM', 'EC' => 'ECU', 'EG' => 'EGY', 'SV' => 'SLV', 'GQ' => 'GNQ', 'ER' => 'ERI', 'EE' => 'EST', 'ET' => 'ETH', 'FJ' => 'FJI', 'FI' => 'FIN', 'FR' => 'FRA', 'GA' => 'GAB', 'GM' => 'GMB', 'GE' => 'GEO', 'DE' => 'DEU', 'GH' => 'GHA', 'GR' => 'GRC', 'GD' => 'GRD', 'GT' => 'GTM', 'GN' => 'GIN', 'GW' => 'GNB', 'GY' => 'GUY', 'HT' => 'HTI', 'HN' => 'HND', 'HU' => 'HUN', 'IS' => 'ISL', 'IN' => 'IND', 'ID' => 'IDN', 'IR' => 'IRN', 'IQ' => 'IRQ', 'IE' => 'IRL', 'IL' => 'ISR', 'IT' => 'ITA', 'JM' => 'JAM', 'JP' => 'JPN', 'JO' => 'JOR', 'KZ' => 'KAZ', 'KE' => 'KEN', 'KI' => 'KIR', 'KP' => 'PRK', 'KR' => 'KOR', 'KW' => 'KWT', 'KG' => 'KGZ', 'LA' => 'LAO', 'LV' => 'LVA', 'LB' => 'LBN', 'LS' => 'LSO', 'LR' => 'LBR', 'LY' => 'LBY', 'LI' => 'LIE', 'LT' => 'LTU', 'LU' => 'LUX', 'MK' => 'MKD', 'MG' => 'MDG', 'MW' => 'MWI', 'MY' => 'MYS', 'MV' => 'MDV', 'ML' => 'MLI', 'MT' => 'MLT', 'MH' => 'MHL', 'MR' => 'MRT', 'MU' => 'MUS', 'MX' => 'MEX', 'FM' => 'FSM', 'MD' => 'MDA', 'MC' => 'MCO', 'MN' => 'MNG', 'ME' => 'MNE', 'MA' => 'MAR', 'MZ' => 'MOZ', 'MM' => 'MMR', 'NA' => 'NAM', 'NR' => 'NRU', 'NP' => 'NPL', 'NL' => 'NLD', 'NZ' => 'NZL', 'NI' => 'NIC', 'NE' => 'NER', 'NG' => 'NGA', 'NO' => 'NOR', 'OM' => 'OMN', 'PK' => 'PAK', 'PW' => 'PLW', 'PA' => 'PAN', 'PG' => 'PNG', 'PY' => 'PRY', 'PE' => 'PER', 'PH' => 'PHL', 'PL' => 'POL', 'PT' => 'PRT', 'QA' => 'QAT', 'RO' => 'ROU', 'RU' => 'RUS', 'RW' => 'RWA', 'KN' => 'KNA', 'LC' => 'LCA', 'VC' => 'VCT', 'WS' => 'WSM', 'SM' => 'SMR', 'ST' => 'STP', 'SA' => 'SAU', 'SN' => 'SEN', 'RS' => 'SRB', 'SC' => 'SYC', 'SL' => 'SLE', 'SG' => 'SGP', 'SK' => 'SVK', 'SI' => 'SVN', 'SB' => 'SLB', 'SO' => 'SOM', 'ZA' => 'ZAF', 'ES' => 'ESP', 'LK' => 'LKA', 'SD' => 'SDN', 'SR' => 'SUR', 'SZ' => 'SWZ', 'SE' => 'SWE', 'CH' => 'CHE', 'SY' => 'SYR', 'TJ' => 'TJK', 'TZ' => 'TZA', 'TH' => 'THA', 'TL' => 'TLS', 'TG' => 'TGO', 'TO' => 'TON', 'TT' => 'TTO', 'TN' => 'TUN', 'TR' => 'TUR', 'TM' => 'TKM', 'TV' => 'TUV', 'UG' => 'UGA', 'UA' => 'UKR', 'AE' => 'ARE', 'GB' => 'GBR', 'US' => 'USA', 'UY' => 'URY', 'UZ' => 'UZB', 'VU' => 'VUT', 'VA' => 'VAT', 'VE' => 'VEN', 'VN' => 'VNM', 'YE' => 'YEM', 'ZM' => 'ZMB', 'ZW' => 'ZWE', 'TW' => 'TWN', 'CX' => 'CXR', 'CC' => 'CCK', 'HM' => 'HMD', 'NF' => 'NFK', 'NC' => 'NCL', 'PF' => 'PYF', 'YT' => 'MYT', 'GP' => 'GLP', 'PM' => 'SPM', 'WF' => 'WLF', 'TF' => 'ATF', 'BV' => 'BVT', 'CK' => 'COK', 'NU' => 'NIU', 'TK' => 'TKL', 'GG' => 'GGY', 'IM' => 'IMN', 'JE' => 'JEY', 'AI' => 'AIA', 'BM' => 'BMU', 'IO' => 'IOT', 'VG' => 'VGB', 'KY' => 'CYM', 'FK' => 'FLK', 'GI' => 'GIB', 'MS' => 'MSR', 'PN' => 'PCN', 'SH' => 'SHN', 'GS' => 'SGS', 'TC' => 'TCA', 'MP' => 'MNP', 'PR' => 'PRI', 'AS' => 'ASM', 'UM' => 'UMI', 'GU' => 'GUM', 'VI' => 'VIR', 'HK' => 'HKG', 'MO' => 'MAC', 'FO' => 'FRO', 'GL' => 'GRL', 'GF' => 'GUF', 'MQ' => 'MTQ', 'RE' => 'REU', 'AX' => 'ALA', 'AW' => 'ABW', 'AN' => 'ANT', 'SJ' => 'SJM', 'AC' => 'ASC', 'TA' => 'TAA', 'AQ' => 'ATA', 'CW' => 'CUW'];
        /** @var array ISO 3166-alpha2 => ISO 3166-numeric  */
        public static $numeric = ['AF' => '004', 'AX' => '248', 'AL' => '008', 'DZ' => '012', 'AS' => '016', 'AD' => '020', 'AO' => '024', 'AI' => '660', 'AQ' => '010', 'AG' => '028', 'AR' => '032', 'AM' => '051', 'AW' => '533', 'AU' => '036', 'AT' => '040', 'AZ' => '031', 'BS' => '044', 'BH' => '048', 'BD' => '050', 'BB' => '052', 'BY' => '112', 'BE' => '056', 'BZ' => '084', 'BJ' => '204', 'BM' => '060', 'BT' => '064', 'BO' => '068', 'BQ' => '535', 'BA' => '070', 'BW' => '072', 'BV' => '074', 'BR' => '076', 'IO' => '086', 'BN' => '096', 'BG' => '100', 'BF' => '854', 'BI' => '108', 'KH' => '116', 'CM' => '120', 'CA' => '124', 'CV' => '132', 'KY' => '136', 'CF' => '140', 'TD' => '148', 'CL' => '152', 'CN' => '156', 'CX' => '162', 'CC' => '166', 'CO' => '170', 'KM' => '174', 'CG' => '178', 'CD' => '180', 'CK' => '184', 'CR' => '188', 'CI' => '384', 'HR' => '191', 'CU' => '192', 'CW' => '531', 'CY' => '196', 'CZ' => '203', 'DK' => '208', 'DJ' => '262', 'DM' => '212', 'DO' => '214', 'EC' => '218', 'EG' => '818', 'SV' => '222', 'GQ' => '226', 'ER' => '232', 'EE' => '233', 'ET' => '231', 'FK' => '238', 'FO' => '234', 'FJ' => '242', 'FI' => '246', 'FR' => '250', 'GF' => '254', 'PF' => '258', 'TF' => '260', 'GA' => '266', 'GM' => '270', 'GE' => '268', 'DE' => '276', 'GH' => '288', 'GI' => '292', 'GR' => '300', 'GL' => '304', 'GD' => '308', 'GP' => '312', 'GU' => '316', 'GT' => '320', 'GG' => '831', 'GN' => '324', 'GW' => '624', 'GY' => '328', 'HT' => '332', 'HM' => '334', 'VA' => '336', 'HN' => '340', 'HK' => '344', 'HU' => '348', 'IS' => '352', 'IN' => '356', 'ID' => '360', 'IR' => '364', 'IQ' => '368', 'IE' => '372', 'IM' => '833', 'IL' => '376', 'IT' => '380', 'JM' => '388', 'JP' => '392', 'JE' => '832', 'JO' => '400', 'KZ' => '398', 'KE' => '404', 'KI' => '296', 'KP' => '408', 'KR' => '410', 'KW' => '414', 'KG' => '417', 'LA' => '418', 'LV' => '428', 'LB' => '422', 'LS' => '426', 'LR' => '430', 'LY' => '434', 'LI' => '438', 'LT' => '440', 'LU' => '442', 'MO' => '446', 'MK' => '807', 'MG' => '450', 'MW' => '454', 'MY' => '458', 'MV' => '462', 'ML' => '466', 'MT' => '470', 'MH' => '584', 'MQ' => '474', 'MR' => '478', 'MU' => '480', 'YT' => '175', 'MX' => '484', 'FM' => '583', 'MD' => '498', 'MC' => '492', 'MN' => '496', 'ME' => '499', 'MS' => '500', 'MA' => '504', 'MZ' => '508', 'MM' => '104', 'NA' => '516', 'NR' => '520', 'NP' => '524', 'NL' => '528', 'NC' => '540', 'NZ' => '554', 'NI' => '558', 'NE' => '562', 'NG' => '566', 'NU' => '570', 'NF' => '574', 'MP' => '580', 'NO' => '578', 'OM' => '512', 'PK' => '586', 'PW' => '585', 'PS' => '275', 'PA' => '591', 'PG' => '598', 'PY' => '600', 'PE' => '604', 'PH' => '608', 'PN' => '612', 'PL' => '616', 'PT' => '620', 'PR' => '630', 'QA' => '634', 'RE' => '638', 'RO' => '642', 'RU' => '643', 'RW' => '646', 'BL' => '652', 'SH' => '654', 'KN' => '659', 'LC' => '662', 'MF' => '663', 'PM' => '666', 'VC' => '670', 'WS' => '882', 'SM' => '674', 'ST' => '678', 'SA' => '682', 'SN' => '686', 'RS' => '688', 'SC' => '690', 'SL' => '694', 'SG' => '702', 'SX' => '534', 'SK' => '703', 'SI' => '705', 'SB' => '090', 'SO' => '706', 'ZA' => '710', 'GS' => '239', 'SS' => '728', 'ES' => '724', 'LK' => '144', 'SD' => '729', 'SR' => '740', 'SJ' => '744', 'SZ' => '748', 'SE' => '752', 'CH' => '756', 'SY' => '760', 'TW' => '158', 'TJ' => '762', 'TZ' => '834', 'TH' => '764', 'TL' => '626', 'TG' => '768', 'TK' => '772', 'TO' => '776', 'TT' => '780', 'TN' => '788', 'TR' => '792', 'TM' => '795', 'TC' => '796', 'TV' => '798', 'UG' => '800', 'UA' => '804', 'AE' => '784', 'GB' => '826', 'US' => '840', 'UM' => '581', 'UY' => '858', 'UZ' => '860', 'VU' => '548', 'VE' => '862', 'VN' => '704', 'VG' => '092', 'VI' => '850', 'WF' => '876', 'EH' => '732', 'YE' => '887', 'ZM' => '894', 'ZW' => '716'];
        /** @var array ISO 3166-alpha2 => phone calling code(s) */
        public static $calling_codes = ['BD' => '+880', 'BE' => '+32', 'BF' => '+226', 'BG' => '+359', 'BA' => '+387', 'BB' => '+1246', 'WF' => '+681', 'BL' => '+590', 'BM' => '+1441', 'BN' => '+673', 'BO' => '+591', 'BH' => '+973', 'BI' => '+257', 'BJ' => '+229', 'BT' => '+975', 'JM' => '+1876', 'BV' => '', 'BW' => '+267', 'WS' => '+685', 'BQ' => '+599', 'BR' => '+55', 'BS' => '+1242', 'JE' => '+441534', 'BY' => '+375', 'BZ' => '+501', 'RU' => '+7', 'RW' => '+250', 'RS' => '+381', 'TL' => '+670', 'RE' => '+262', 'TM' => '+993', 'TJ' => '+992', 'RO' => '+40', 'TK' => '+690', 'GW' => '+245', 'GU' => '+1671', 'GT' => '+502', 'GS' => '', 'GR' => '+30', 'GQ' => '+240', 'GP' => '+590', 'JP' => '+81', 'GY' => '+592', 'GG' => '+441481', 'GF' => '+594', 'GE' => '+995', 'GD' => '+1473', 'GB' => '+44', 'GA' => '+241', 'SV' => '+503', 'GN' => '+224', 'GM' => '+220', 'GL' => '+299', 'GI' => '+350', 'GH' => '+233', 'OM' => '+968', 'TN' => '+216', 'JO' => '+962', 'HR' => '+385', 'HT' => '+509', 'HU' => '+36', 'HK' => '+852', 'HN' => '+504', 'HM' => '', 'VE' => '+58', 'PR' => ['+1787', '+1939'], 'PS' => '+970', 'PW' => '+680', 'PT' => '+351', 'SJ' => '+47', 'PY' => '+595', 'IQ' => '+964', 'PA' => '+507', 'PF' => '+689', 'PG' => '+675', 'PE' => '+51', 'PK' => '+92', 'PH' => '+63', 'PN' => '+870', 'PL' => '+48', 'PM' => '+508', 'ZM' => '+260', 'EH' => '+212', 'EE' => '+372', 'EG' => '+20', 'ZA' => '+27', 'EC' => '+593', 'IT' => '+39', 'VN' => '+84', 'SB' => '+677', 'ET' => '+251', 'SO' => '+252', 'ZW' => '+263', 'SA' => '+966', 'ES' => '+34', 'ER' => '+291', 'ME' => '+382', 'MD' => '+373', 'MG' => '+261', 'MF' => '+590', 'MA' => '+212', 'MC' => '+377', 'UZ' => '+998', 'MM' => '+95', 'ML' => '+223', 'MO' => '+853', 'MN' => '+976', 'MH' => '+692', 'MK' => '+389', 'MU' => '+230', 'MT' => '+356', 'MW' => '+265', 'MV' => '+960', 'MQ' => '+596', 'MP' => '+1670', 'MS' => '+1664', 'MR' => '+222', 'IM' => '+441624', 'UG' => '+256', 'TZ' => '+255', 'MY' => '+60', 'MX' => '+52', 'IL' => '+972', 'FR' => '+33', 'IO' => '+246', 'SH' => '+290', 'FI' => '+358', 'FJ' => '+679', 'FK' => '+500', 'FM' => '+691', 'FO' => '+298', 'NI' => '+505', 'NL' => '+31', 'NO' => '+47', 'NA' => '+264', 'VU' => '+678', 'NC' => '+687', 'NE' => '+227', 'NF' => '+672', 'NG' => '+234', 'NZ' => '+64', 'NP' => '+977', 'NR' => '+674', 'NU' => '+683', 'CK' => '+682', 'XK' => '', 'CI' => '+225', 'CH' => '+41', 'CO' => '+57', 'CN' => '+86', 'CM' => '+237', 'CL' => '+56', 'CC' => '+61', 'CA' => '+1', 'CG' => '+242', 'CF' => '+236', 'CD' => '+243', 'CZ' => '+420', 'CY' => '+357', 'CX' => '+61', 'CR' => '+506', 'CW' => '+599', 'CV' => '+238', 'CU' => '+53', 'SZ' => '+268', 'SY' => '+963', 'SX' => '+599', 'KG' => '+996', 'KE' => '+254', 'SS' => '+211', 'SR' => '+597', 'KI' => '+686', 'KH' => '+855', 'KN' => '+1869', 'KM' => '+269', 'ST' => '+239', 'SK' => '+421', 'KR' => '+82', 'SI' => '+386', 'KP' => '+850', 'KW' => '+965', 'SN' => '+221', 'SM' => '+378', 'SL' => '+232', 'SC' => '+248', 'KZ' => '+7', 'KY' => '+1345', 'SG' => '+65', 'SE' => '+46', 'SD' => '+249', 'DO' => ['+1809', '+1829', '+1849'], 'DM' => '+1767', 'DJ' => '+253', 'DK' => '+45', 'VG' => '+1284', 'DE' => '+49', 'YE' => '+967', 'DZ' => '+213', 'US' => '+1', 'UY' => '+598', 'YT' => '+262', 'UM' => '+1', 'LB' => '+961', 'LC' => '+1758', 'LA' => '+856', 'TV' => '+688', 'TW' => '+886', 'TT' => '+1868', 'TR' => '+90', 'LK' => '+94', 'LI' => '+423', 'LV' => '+371', 'TO' => '+676', 'LT' => '+370', 'LU' => '+352', 'LR' => '+231', 'LS' => '+266', 'TH' => '+66', 'TF' => '', 'TG' => '+228', 'TD' => '+235', 'TC' => '+1649', 'LY' => '+218', 'VA' => '+379', 'VC' => '+1784', 'AE' => '+971', 'AD' => '+376', 'AG' => '+1268', 'AF' => '+93', 'AI' => '+1264', 'VI' => '+1340', 'IS' => '+354', 'IR' => '+98', 'AM' => '+374', 'AL' => '+355', 'AO' => '+244', 'AQ' => '', 'AS' => '+1684', 'AR' => '+54', 'AU' => '+61', 'AT' => '+43', 'AW' => '+297', 'IN' => '+91', 'AX' => '+35818', 'AZ' => '+994', 'IE' => '+353', 'ID' => '+62', 'UA' => '+380', 'QA' => '+974', 'MZ' => '+258'];
        /** @var array flipped calling codes */
        protected static $flipped_calling_codes;
        /**
         * Convert a 2-character country code into its 3-character equivalent, or
         * vice-versa, e.g.
         *
         * 1) given USA, returns US
         * 2) given US, returns USA
         *
         * @since 5.4.3
         *
         * @param string $code ISO-3166-alpha-2 or ISO-3166-alpha-3 country code
         * @return string country code
         */
        public static function convert_alpha_country_code($code)
        {
        }
        /**
         * Converts an ISO 3166-alpha2 country code to an ISO 3166-alpha3 country code.
         *
         * @since 5.4.3
         *
         * @param string $alpha2_code ISO 3166-alpha2 country code
         * @return string ISO 3166-alpha3 country code
         */
        public static function alpha2_to_alpha3($alpha2_code)
        {
        }
        /**
         * Converts an ISO 3166-alpha2 country code to an ISO 3166-numeric country code.
         *
         * @since 5.4.3
         *
         * @param string $alpha2_code ISO 3166-alpha2 country code
         * @return string ISO 3166-numeric country code
         */
        public static function alpha2_to_numeric($alpha2_code)
        {
        }
        /**
         * Converts an ISO 3166-alpha2 country code to a calling code.
         *
         * This conversion is available in WC 3.6+ so we'll call out to that when available.
         *
         * @since 5.4.3
         *
         * @param string $alpha2_code ISO 3166-alpha2 country code
         * @return string calling code
         */
        public static function alpha2_to_calling_code($alpha2_code)
        {
        }
        /**
         * Converts an ISO 3166-alpha3 country code to an ISO 3166-alpha2 country code.
         *
         * @since 5.4.3
         *
         * @param string $alpha3_code ISO 3166-alpha3 country code
         * @return string ISO 3166-alpha2 country code
         */
        public static function alpha3_to_alpha2($alpha3_code)
        {
        }
        /**
         * Converts an ISO 3166-alpha3 country code to an ISO 3166-numeric country code.
         *
         * @since 5.4.3
         *
         * @param string $alpha3_code ISO 3166-alpha3 country code
         * @return string ISO 3166-numeric country code
         */
        public static function alpha3_to_numeric($alpha3_code)
        {
        }
        /**
         * Converts an ISO 3166-alpha3 country code to a calling code.
         *
         * @since 5.4.3
         *
         * @param string $alpha3_code ISO 3166-alpha3 country code
         * @return string calling code
         */
        public static function alpha3_to_calling_code($alpha3_code)
        {
        }
        /**
         * Converts an ISO 3166-numeric country code to an ISO 3166-alpha2 code.
         *
         * @since 5.4.3
         *
         * @param string $numeric ISO 3166-numeric country code
         * @return string ISO 3166-alpha2 country code
         */
        public static function numeric_to_alpha2($numeric)
        {
        }
        /**
         * Converts an ISO 3166-numeric country code to an ISO 3166-alpha3 code.
         *
         * @since 5.4.3
         *
         * @param string $numeric ISO 3166-numeric country code
         * @return string ISO 3166-alpha3 country code
         */
        public static function numeric_to_alpha3($numeric)
        {
        }
        /**
         * Converts an ISO 3166-numeric country code to a calling code.
         *
         * @since 5.4.3
         *
         * @param string $numeric ISO 3166-numeric country code
         * @return string calling code
         */
        public static function numeric_to_calling_code($numeric)
        {
        }
        /**
         * Converts a country calling code to an ISO 3166-alpha2 code.
         *
         * @since 5.4.3
         *
         * @param string $calling_code country calling code (includes leading '+')
         * @return string ISO 3166-alpha2 code
         */
        public static function calling_code_to_alpha2($calling_code)
        {
        }
        /**
         * Converts a country calling code to an ISO 3166-alpha3 code.
         *
         * @since 5.4.3
         *
         * @param string $calling_code country calling code (includes leading '+')
         * @return string ISO 3166-alpha3 code
         */
        public static function calling_code_to_alpha3($calling_code)
        {
        }
        /**
         * Converts a country calling code to an ISO 3166-numeric code.
         *
         * @since 5.4.3
         *
         * @param string $calling_code country calling code (includes leading '+')
         * @return string ISO 3166-numeric code
         */
        public static function calling_code_to_numeric($calling_code)
        {
        }
        /**
         * Gets the flipped version of the calling codes array.
         *
         * Since array_flip will fail on the calling codes array due to
         * having some arrays as values, this custom function is necessary.
         *
         * @since 5.4.3
         *
         * @return array
         */
        public static function get_flipped_calling_codes()
        {
        }
    }
    /**
     * SkyVerge Helper Class
     *
     * The purpose of this class is to centralize common utility functions that
     * are commonly used in SkyVerge plugins
     *
     * @since 2.2.0
     */
    class SV_WC_Helper
    {
        /** encoding used for mb_*() string functions */
        const MB_ENCODING = 'UTF-8';
        /** String manipulation functions (all multi-byte safe) ***************/
        /**
         * Returns true if the haystack string starts with needle
         *
         * Note: case-sensitive
         *
         * @since 2.2.0
         * @param string $haystack
         * @param string $needle
         * @return bool
         */
        public static function str_starts_with($haystack, $needle)
        {
        }
        /**
         * Return true if the haystack string ends with needle
         *
         * Note: case-sensitive
         *
         * @since 2.2.0
         * @param string $haystack
         * @param string $needle
         * @return bool
         */
        public static function str_ends_with($haystack, $needle)
        {
        }
        /**
         * Returns true if the needle exists in haystack
         *
         * Note: case-sensitive
         *
         * @since 2.2.0
         * @param string $haystack
         * @param string $needle
         * @return bool
         */
        public static function str_exists($haystack, $needle)
        {
        }
        /**
         * Truncates a given $string after a given $length if string is longer than
         * $length. The last characters will be replaced with the $omission string
         * for a total length not exceeding $length
         *
         * @since 2.2.0
         * @param string $string text to truncate
         * @param int $length total desired length of string, including omission
         * @param string $omission omission text, defaults to '...'
         * @return string
         */
        public static function str_truncate($string, $length, $omission = '...')
        {
        }
        /**
         * Returns a string with all non-ASCII characters removed. This is useful
         * for any string functions that expect only ASCII chars and can't
         * safely handle UTF-8. Note this only allows ASCII chars in the range
         * 33-126 (newlines/carriage returns are stripped)
         *
         * @since 2.2.0
         * @param string $string string to make ASCII
         * @return string
         */
        public static function str_to_ascii($string)
        {
        }
        /**
         * Return a string with insane UTF-8 characters removed, like invisible
         * characters, unused code points, and other weirdness. It should
         * accept the common types of characters defined in Unicode.
         *
         * The following are allowed characters:
         *
         * p{L} - any kind of letter from any language
         * p{Mn} - a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.)
         * p{Mc} - a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages)
         * p{Nd} - a digit zero through nine in any script except ideographic scripts
         * p{Zs} - a whitespace character that is invisible, but does take up space
         * p{P} - any kind of punctuation character
         * p{Sm} - any mathematical symbol
         * p{Sc} - any currency sign
         *
         * pattern definitions from http://www.regular-expressions.info/unicode.html
         *
         * @since 4.0.0
         *
         * @param string $string
         * @return string
         */
        public static function str_to_sane_utf8($string)
        {
        }
        /**
         * Formats a number as a percentage.
         *
         * @since 5.10.9
         *
         * @NOTE The second and third parameter below are directly passed to {@see wc_format_decimal()} in case the decimal output or rounding needs to be tweaked.
         *
         * @param float|int|string $fraction the fraction to format as percentage
         * @param int|string|false number of decimal points to use, empty string to use {@see woocommerce_price_num_decimals(), or false to avoid rounding (optional, default).
         * @param bool $trim_zeros from end of string (optional, default false)
         * @return string fraction formatted as percentage
         */
        public static function format_percentage($fraction, $decimal_points = false, $trim_zeros = false)
        {
        }
        /**
         * Helper method to check if the multibyte extension is loaded, which
         * indicates it's safe to use the mb_*() string methods
         *
         * @since 2.2.0
         * @return bool
         */
        protected static function multibyte_loaded()
        {
        }
        /** Array functions ***************************************************/
        /**
         * Insert the given element after the given key in the array
         *
         * Sample usage:
         *
         * given
         *
         * array( 'item_1' => 'foo', 'item_2' => 'bar' )
         *
         * array_insert_after( $array, 'item_1', array( 'item_1.5' => 'w00t' ) )
         *
         * becomes
         *
         * array( 'item_1' => 'foo', 'item_1.5' => 'w00t', 'item_2' => 'bar' )
         *
         * @since 2.2.0
         * @param array $array array to insert the given element into
         * @param string $insert_key key to insert given element after
         * @param array $element element to insert into array
         * @return array
         */
        public static function array_insert_after(array $array, $insert_key, array $element)
        {
        }
        /**
         * Convert array into XML by recursively generating child elements
         *
         * First instantiate a new XML writer object:
         *
         * $xml = new XMLWriter();
         *
         * Open in memory (alternatively you can use a local URI for file output)
         *
         * $xml->openMemory();
         *
         * Then start the document
         *
         * $xml->startDocument( '1.0', 'UTF-8' );
         *
         * Don't forget to end the document and output the memory
         *
         * $xml->endDocument();
         *
         * $your_xml_string = $xml->outputMemory();
         *
         * @since 2.2.0
         *
         * @param \XMLWriter $xml_writer XML writer instance
         * @param string|array $element_key name for element, e.g. <per_page>
         * @param string|array $element_value value for element, e.g. 100
         */
        public static function array_to_xml($xml_writer, $element_key, $element_value = array())
        {
        }
        /**
         * Lists an array as text.
         *
         * Takes an array and returns a list like "one, two, three, and four"
         * with a (mandatory) oxford comma.
         *
         * @since 5.2.0
         *
         * @param array $items items to list
         * @param string|null $conjunction coordinating conjunction, like "or" or "and"
         * @param string $separator list separator, like a comma
         * @return string
         */
        public static function list_array_items(array $items, $conjunction = null, $separator = '')
        {
        }
        /** Number helper functions *******************************************/
        /**
         * Format a number with 2 decimal points, using a period for the decimal
         * separator and no thousands separator.
         *
         * Commonly used for payment gateways which require amounts in this format.
         *
         * @since 3.0.0
         * @param float $number
         * @return string
         */
        public static function number_format($number)
        {
        }
        /** WooCommerce helper functions **************************************/
        /**
         * Gets order line items (products) as an array of objects.
         *
         * Object properties:
         *
         * + id          - item ID
         * + name        - item name, usually product title, processed through htmlentities()
         * + description - formatted item meta (e.g. Size: Medium, Color: blue), processed through htmlentities()
         * + quantity    - item quantity
         * + item_total  - item total (line total divided by quantity, excluding tax & rounded)
         * + line_total  - line item total (excluding tax & rounded)
         * + meta        - formatted item meta array
         * + product     - item product or null if getting product from item failed
         * + item        - raw item array
         *
         * @since 3.0.0
         *
         * @param \WC_Order $order
         * @return \stdClass[] array of line item objects
         */
        public static function get_order_line_items($order)
        {
        }
        /**
         * Determines if an order contains only virtual products.
         *
         * @since 4.5.0
         *
         * @param \WC_Order $order the order object
         * @return bool
         */
        public static function is_order_virtual(\WC_Order $order)
        {
        }
        /**
         * Determines if a shop has any published virtual products.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public static function shop_has_virtual_products()
        {
        }
        /**
         * Safely gets and trims data from $_POST.
         *
         * @since 3.0.0
         * @deprecated 5.5.0
         *
         * @param string $key array key to get from $_POST array
         * @return string value from $_POST or blank string if $_POST[ $key ] is not set
         */
        public static function get_post($key)
        {
        }
        /**
         * Safely gets a value from $_POST.
         *
         * If the expected data is a string also trims it.
         *
         * @since 5.5.0
         *
         * @param string $key posted data key
         * @param int|float|array|bool|null|string $default default data type to return (default empty string)
         * @return int|float|array|bool|null|string posted data value if key found, or default
         */
        public static function get_posted_value($key, $default = '')
        {
        }
        /**
         * Safely gets and trims data from $_REQUEST.
         *
         * @since 3.0.0
         * @deprecated 5.5.0
         *
         * @param string $key array key to get from $_REQUEST array
         * @return string value from $_REQUEST or blank string if $_REQUEST[ $key ] is not set
         */
        public static function get_request($key)
        {
        }
        /**
         * Safely gets a value from $_REQUEST.
         *
         * If the expected data is a string also trims it.
         *
         * @since 5.5.0
         *
         * @param string $key posted data key
         * @param int|float|array|bool|null|string $default default data type to return (default empty string)
         * @return int|float|array|bool|null|string posted data value if key found, or default
         */
        public static function get_requested_value($key, $default = '')
        {
        }
        /**
         * Get the count of notices added, either for all notices (default) or for one
         * particular notice type specified by $notice_type.
         *
         * WC notice functions are not available in the admin
         *
         * @since 3.0.2
         * @param string $notice_type The name of the notice type - either error, success or notice. [optional]
         * @return int
         */
        public static function wc_notice_count($notice_type = '')
        {
        }
        /**
         * Add and store a notice.
         *
         * WC notice functions are not available in the admin
         *
         * @since 3.0.2
         * @param string $message The text to display in the notice.
         * @param string $notice_type The singular name of the notice type - either error, success or notice. [optional]
         */
        public static function wc_add_notice($message, $notice_type = 'success')
        {
        }
        /**
         * Print a single notice immediately
         *
         * WC notice functions are not available in the admin
         *
         * @since 3.0.2
         * @param string $message The text to display in the notice.
         * @param string $notice_type The singular name of the notice type - either error, success or notice. [optional]
         */
        public static function wc_print_notice($message, $notice_type = 'success')
        {
        }
        /**
         * Gets the full URL to the log file for a given $handle
         *
         * @since 4.0.0
         * @param string $handle log handle
         * @return string URL to the WC log file identified by $handle
         */
        public static function get_wc_log_file_url($handle)
        {
        }
        /**
         * Gets the current WordPress site name.
         *
         * This is helpful for retrieving the actual site name instead of the
         * network name on multisite installations.
         *
         * @since 4.6.0
         * @return string
         */
        public static function get_site_name()
        {
        }
        /** JavaScript helper functions ***************************************/
        /**
         * Enhanced search JavaScript (Select2)
         *
         * Enqueues JavaScript required for AJAX search with Select2.
         *
         * @codeCoverageIgnore no need to unit test this since it's mostly JavaScript
         *
         * @since 3.1.0
         */
        public static function render_select2_ajax()
        {
        }
        /** Framework translation functions ***********************************/
        /**
         * Gettext `__()` wrapper for framework-translated strings
         *
         * Warning! This function should only be used if an existing
         * translation from the framework is to be used. It should
         * never be called for plugin-specific or untranslated strings!
         * Untranslated = not registered via string literal.
         *
         * @since 4.1.0
         * @param string $text
         * @return string translated text
         */
        public static function f__($text)
        {
        }
        /**
         * Gettext `_e()` wrapper for framework-translated strings
         *
         * Warning! This function should only be used if an existing
         * translation from the framework is to be used. It should
         * never be called for plugin-specific or untranslated strings!
         * Untranslated = not registered via string literal.
         *
         * @since 4.1.0
         * @param string $text
         */
        public static function f_e($text)
        {
        }
        /**
         * Gettext `_x()` wrapper for framework-translated strings
         *
         * Warning! This function should only be used if an existing
         * translation from the framework is to be used. It should
         * never be called for plugin-specific or untranslated strings!
         * Untranslated = not registered via string literal.
         *
         * @since 4.1.0
         *
         * @param string $text
         * @param string $context
         * @return string translated text
         */
        public static function f_x($text, $context)
        {
        }
        /** Misc functions ****************************************************/
        /**
         * Gets the WordPress current screen.
         *
         * @see get_current_screen() replacement which is always available, unlike the WordPress core function
         *
         * @since 5.4.2
         *
         * @return \WP_Screen|null
         */
        public static function get_current_screen()
        {
        }
        /**
         * Checks if the current screen matches a specified ID.
         *
         * This helps avoiding using the get_current_screen() function which is not always available,
         * or setting the substitute global $current_screen every time a check needs to be performed.
         *
         * @since 5.4.2
         *
         * @param string $id id (or property) to compare
         * @param string $prop optional property to compare, defaults to screen id
         * @return bool
         */
        public static function is_current_screen($id, $prop = 'id')
        {
        }
        /**
         * Determines if viewing an enhanced admin screen.
         *
         * @since 5.6.0
         *
         * @return bool
         */
        public static function is_enhanced_admin_screen()
        {
        }
        /**
         * Determines whether the new WooCommerce enhanced navigation is supported and enabled.
         *
         * @since 5.10.6
         *
         * @return bool
         */
        public static function is_wc_navigation_enabled()
        {
        }
        /**
         * Determines if the current request is for a WC REST API endpoint.
         *
         * @see \WooCommerce::is_rest_api_request()
         *
         * @since 5.9.0
         *
         * @return bool
         */
        public static function is_rest_api_request()
        {
        }
        /**
         * Convert a 2-character country code into its 3-character equivalent, or
         * vice-versa, e.g.
         *
         * 1) given USA, returns US
         * 2) given US, returns USA
         *
         * @since 4.2.0
         * @deprecated 5.4.3
         *
         * @param string $code ISO-3166-alpha-2 or ISO-3166-alpha-3 country code
         * @return string country code
         */
        public static function convert_country_code($code)
        {
        }
        /**
         * Displays a notice if the provided hook has not yet run.
         *
         * @since 5.2.0
         *
         * @param string $hook action hook to check
         * @param string $method method/function name
         * @param string $version version the notice was added
         */
        public static function maybe_doing_it_early($hook, $method, $version)
        {
        }
        /**
         * Triggers a PHP error.
         *
         * This wrapper method ensures AJAX isn't broken in the process.
         *
         * @since 4.6.0
         * @param string $message the error message
         * @param int $type Optional. The error type. Defaults to E_USER_NOTICE
         */
        public static function trigger_error($message, $type = E_USER_NOTICE)
        {
        }
        /**
         * Converts an array of strings to a comma separated list of strings, escaped for SQL use.
         *
         * This can be safely used in SQL IN clauses.
         *
         * @since 5.10.9
         *
         * @param string[] $values
         * @return string
         */
        public static function get_escaped_string_list(array $values)
        {
        }
        /**
         * Converts an array of numerical integers into a comma separated list of IDs.
         *
         * This can be safely used for SQL IN clauses.
         *
         * @since 5.10.9
         *
         * @param int[] $ids
         * @return string
         */
        public static function get_escaped_id_list(array $ids)
        {
        }
    }
    /**
     * Plugin Framework Exception - generic Exception
     */
    class SV_WC_Plugin_Exception extends \Exception
    {
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Admin {
    /**
     * Helper class for WooCommerce enhanced admin notes.
     *
     * @since 5.6.0
     */
    class Notes_Helper
    {
        /** Conditional methods *******************************************************************************************/
        /**
         * Determines if any notes with the given name exist.
         *
         * @since 5.6.0
         *
         * @param string $name note name
         * @return bool
         */
        public static function note_with_name_exists($name)
        {
        }
        /** Getter methods ************************************************************************************************/
        /**
         * Gets a note with the given name.
         *
         * @since 5.6.0
         *
         * @param string $name name of the note to get
         * @return WooCommerce_Admin_Notes\WC_Admin_Note|null
         */
        public static function get_note_with_name($name)
        {
        }
        /**
         * Gets all notes with the given name.
         *
         * @since 5.6.0
         *
         * @param string $name note name
         * @return int[]
         */
        public static function get_note_ids_with_name($name)
        {
        }
        /**
         * Gets all note IDs from the given source.
         *
         * @since 5.6.1
         *
         * @param string $source note source
         * @return int[]
         */
        public static function get_note_ids_with_source($source)
        {
        }
        /**
         * Deletes all notes from the given source.
         *
         * @since 5.6.1
         *
         * @param string $source source name
         */
        public static function delete_notes_with_source($source)
        {
        }
    }
    /**
     * The plugin Setup Wizard class.
     *
     * This creates a setup wizard so that plugins can provide a user-friendly
     * step-by-step interaction for configuring critical plugin options.
     *
     * Based on WooCommerce's \WC_Admin_Setup_Wizard
     *
     * @since 5.2.2
     */
    abstract class Setup_Wizard
    {
        /** the "finish" step ID */
        const ACTION_FINISH = 'finish';
        /** @var string the user capability required to use this wizard */
        protected $required_capability = 'manage_woocommerce';
        /** @var string the current step ID */
        protected $current_step = '';
        /** @var array registered steps to be displayed */
        protected $steps = array();
        /** @var string setup handler ID  */
        private $id;
        /** @var Framework\SV_WC_Plugin plugin instance */
        private $plugin;
        /**
         * Constructs the class.
         *
         * @param Framework\SV_WC_Plugin $plugin plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin $plugin)
        {
        }
        /**
         * Registers the setup steps.
         *
         * Plugins should extend this to register their own steps.
         *
         * @since 5.2.2
         */
        protected abstract function register_steps();
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.2.2
         */
        protected function add_hooks()
        {
        }
        /**
         * Adds any admin notices.
         *
         * @since 5.2.2
         */
        public function add_admin_notices()
        {
        }
        /**
         * Gets the new installation documentation notice message.
         *
         * This prompts users to read the docs and is displayed if the wizard has
         * already been completed.
         *
         * @since 5.2.2
         *
         * @return string
         */
        protected function get_documentation_notice_message()
        {
        }
        /**
         * Gets the new installation setup notice message.
         *
         * This prompts users to start the setup wizard and is displayed if the
         * wizard has not yet been completed.
         *
         * @since 5.2.2
         *
         * @return string
         */
        protected function get_setup_notice_message()
        {
        }
        /**
         * Adds a 'Setup' link to the plugin action links if the wizard hasn't been completed.
         *
         * This will override the plugin's standard "Configure" link with a link to this setup wizard.
         *
         * @internal
         *
         * @since 5.2.2
         *
         * @param array $action_links plugin action links
         * @return array
         */
        public function add_setup_link($action_links)
        {
        }
        /**
         * Initializes setup.
         *
         * @since 5.2.2
         */
        protected function init_setup()
        {
        }
        /**
         * Adds the page to WordPress core.
         *
         * While this doesn't output any markup/menu items, it is essential to officially register the page to avoid permissions issues.
         *
         * @internal
         *
         * @since 5.2.2
         */
        public function add_page()
        {
        }
        /**
         * Renders the entire setup page markup.
         *
         * @internal
         *
         * @since 5.2.2
         */
        public function render_page()
        {
        }
        /**
         * Saves a step.
         *
         * @since 5.2.2
         *
         * @param string $step_id the step ID being saved
         * @return void|string redirects upon success, returns an error message upon failure
         */
        protected function save_step($step_id)
        {
        }
        /**
         * Registers and enqueues the wizard's scripts and styles.
         *
         * @since 5.2.2
         */
        protected function load_scripts_styles()
        {
        }
        /** Header Methods ************************************************************************************************/
        /**
         * Renders the header markup.
         *
         * @since 5.2.2
         */
        protected function render_header()
        {
        }
        /**
         * Gets the header image URL.
         *
         * Plugins can override this to point to their own branding image URL.
         *
         * @since 5.2.2
         *
         * @return string
         */
        protected function get_header_image_url()
        {
        }
        /**
         * Renders the step list.
         *
         * This displays a list of steps, marking them as complete or upcoming as sort of a progress bar.
         *
         * @since 5.2.2
         */
        protected function render_steps()
        {
        }
        /** Content Methods ***********************************************************************************************/
        /**
         * Renders the setup content.
         *
         * This will display the welcome screen, finished screen, or a specific step's markup.
         *
         * @since 5.2.2
         *
         * @param string $error_message custom error message
         */
        protected function render_content($error_message = '')
        {
        }
        /**
         * Renders a save error.
         *
         * @since 5.2.2
         *
         * @param string $message error message to render
         */
        protected function render_error($message)
        {
        }
        /**
         * Renders a default welcome note.
         *
         * @since 5.2.2
         */
        protected function render_welcome()
        {
        }
        /**
         * Renders the default welcome note heading.
         *
         * @since 5.2.2
         */
        protected function render_welcome_heading()
        {
        }
        /**
         * Renders the default welcome note text.
         *
         * @since 5.2.2
         */
        protected function render_welcome_text()
        {
        }
        /**
         * Renders the finished screen markup.
         *
         * This is what gets displayed after all of the steps have been completed or skipped.
         *
         * @since 5.2.2
         */
        protected function render_finished()
        {
        }
        /**
         * Renders HTML before the next steps in the finished step screen.
         *
         * Plugins can implement this method to output additional HTML before the next steps are printed.
         *
         * @since 5.2.2
         */
        protected function render_before_next_steps()
        {
        }
        /**
         * Renders HTML after the next steps in the finished step screen.
         *
         * Plugins can implement this method to output additional HTML after the next steps are printed.
         *
         * @since 5.2.2
         */
        protected function render_after_next_steps()
        {
        }
        /**
         * Renders the next steps.
         *
         * @since 5.2.2
         */
        protected function render_next_steps()
        {
        }
        /**
         * Gets the next steps.
         *
         * These are major actions a user can take after finishing the setup wizard.
         * For instance, things like "Create your first Add-On" could go here.
         *
         * @since 5.2.2
         *
         * @return array
         */
        protected function get_next_steps()
        {
        }
        /**
         * Gets the additional steps.
         *
         * These are secondary actions.
         *
         * @since 5.2.2
         *
         * @return array
         */
        protected function get_additional_actions()
        {
        }
        /**
         * Renders a given step's markup.
         *
         * This will display a title, whatever get's rendered by the step's view
         * callback, then the navigation buttons.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID to render
         */
        protected function render_step($step_id)
        {
        }
        /**
         * Renders a form field.
         *
         * Call this in the same way as woocommerce_form_field().
         *
         * @since 5.2.2
         *
         * @param string $key field key
         * @param array $args field args - @see woocommerce_form_field()
         * @param string|null $value field value
         */
        protected function render_form_field($key, $args, $value = null)
        {
        }
        /**
         * Renders the toggle form field.
         *
         * This requires special markup for the toggle UI.
         *
         * @since 5.2.2
         *
         * @param string $key field key
         * @param array $args field args - @see woocommerce_form_field()
         * @param string|null $value field value
         */
        public function render_toggle_form_field($key, $args, $value)
        {
        }
        /**
         * Renders the setup footer.
         *
         * @since 5.2.2
         */
        protected function render_footer()
        {
        }
        /** Helper Methods ************************************************************************************************/
        /**
         * Registers a step.
         *
         * @since 5.2.2
         *
         * @param string $id unique step ID
         * @param string $name step name for display
         * @param string|array $view_callback callback to render the step's content HTML
         * @param string|array|null $save_callback callback to save the step's form values
         * @return bool whether the step was successfully added
         */
        public function register_step($id, $name, $view_callback, $save_callback = null)
        {
        }
        /**
         * Marks the setup as complete.
         *
         * @since 5.2.2
         *
         * @return bool
         */
        public function complete_setup()
        {
        }
        /** Conditional Methods *******************************************************************************************/
        /**
         * Determines if the current page is the setup wizard page.
         *
         * @since 5.2.2
         *
         * @return bool
         */
        public function is_setup_page()
        {
        }
        /**
         * Determines if a step is the current one displayed.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID
         * @return bool
         */
        public function is_current_step($step_id)
        {
        }
        /**
         * Determines if setup has started.
         *
         * @since 5.2.2
         *
         * @return bool
         */
        public function is_started()
        {
        }
        /**
         * Determines if setup has completed all of the steps.
         *
         * @since 5.2.2
         *
         * @return bool
         */
        public function is_finished()
        {
        }
        /**
         * Determines if the setup wizard has been completed.
         *
         * This will be true if any user has been redirected back to the regular
         * WordPress dashboard, either manually or after finishing the steps.
         *
         * @since 5.2.2
         *
         * @return bool
         */
        public function is_complete()
        {
        }
        /**
         * Determines if the given step has been completed.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID to check
         * @return bool
         */
        public function is_step_complete($step_id)
        {
        }
        /**
         * Determines if the wizard has steps to display.
         *
         * @since 5.2.2
         *
         * @return bool
         */
        public function has_steps()
        {
        }
        /**
         * Determines if this setup handler has a given step.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID to check
         * @return bool
         */
        public function has_step($step_id)
        {
        }
        /** Getter Methods ************************************************************************************************/
        /**
         * Gets a given step's title.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID (optional: will assume the current step if unspecified)
         * @return string
         */
        public function get_step_title($step_id = '')
        {
        }
        /**
         * Gets the Setup Wizard URL.
         *
         * @since 5.2.2
         *
         * @return string
         */
        public function get_setup_url()
        {
        }
        /**
         * Gets the URL for the next step based on a current step.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID to base "next" off of - defaults to this class's internal pointer
         * @return string
         */
        public function get_next_step_url($step_id = '')
        {
        }
        /**
         * Gets a given step's URL.
         *
         * @since 5.2.2
         *
         * @param string $step_id step ID
         * @return string|false
         */
        public function get_step_url($step_id)
        {
        }
        /**
         * Gets the "finish" action URL.
         *
         * @since 5.2.2
         *
         * @return string
         */
        protected function get_finish_url()
        {
        }
        /**
         * Gets the return URL.
         *
         * Can be used to return the user to the dashboard. The plugin's settings URL
         * will be used if it exists, otherwise the general dashboard URL.
         *
         * @since 5.2.2
         *
         * @return string
         */
        protected function get_dashboard_url()
        {
        }
        /**
         * Gets the setup setup handler's slug.
         *
         * @since 5.2.2
         *
         * @return string
         */
        protected function get_slug()
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 5.2.2
         *
         * @return Framework\SV_WC_Plugin|Framework\SV_WC_Payment_Gateway_Plugin
         */
        protected function get_plugin()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * # WooCommerce Payment Gateway Framework Hosted Gateway
     *
     * Implement the following methods:
     *
     * + `get_hosted_pay_page_url()` - Return the hosted pay page url
     * + `get_hosted_pay_page_params()` - Return any hosted pay page parameters (optional)
     * + `get_transaction_response()` - Return the transaction response object on redirect-back/IPN
     *
     * @since 1.0.0
     */
    abstract class SV_WC_Payment_Gateway_Hosted extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway
    {
        /** @var string the WC API url, used for the IPN and/or redirect-back handler */
        protected $transaction_response_handler_url;
        /**
         * Initialize the gateway
         *
         * See parent constructor for full method documentation
         *
         * @since 2.1.0
         * @see SV_WC_Payment_Gateway::__construct()
         * @param string $id the gateway id
         * @param SV_WC_Payment_Gateway_Plugin $plugin the parent plugin class
         * @param array $args gateway arguments
         */
        public function __construct($id, $plugin, $args)
        {
        }
        /**
         * Display the payment fields on the checkout page
         *
         * @since 1.0.0
         * @see WC_Payment_Gateway::payment_fields()
         */
        public function payment_fields()
        {
        }
        /**
         * Processes the payment by redirecting customer to the WooCommerce pay page or the gateway hosted pay page.
         *
         * @see \WC_Payment_Gateway::process_payment()
         *
         * @since 1.0.0
         *
         * @param int $order_id the order to process
         * @return array with keys 'result' and 'redirect'
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Gets the payment URL: the checkout pay page
         *
         * @since 2.1.0
         * @param int $order_id the order id
         * @return string the payment URL, or false if unavailable
         */
        protected function get_payment_url($order_id)
        {
        }
        /**
         * Determines if the customers cart should be emptied before redirecting to the payment form, after the order is created.
         *
         * Gateways can set this to false if they want the cart to remain intact until a successful payment is made.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        protected function empty_cart_before_redirect()
        {
        }
        /**
         * Render the payment page for gateways that use a form post method
         *
         * @since 2.1.0
         * @see SV_WC_Payment_Gateway::payment_page()
         * @see SV_WC_Payment_Gateway_Hosted::use_form_post()
         * @see SV_WC_Payment_Gateway_Hosted::add_pay_page_handler()
         * @param int $order_id identifies the order
         */
        public function payment_page($order_id)
        {
        }
        /**
         * Generates the POST pay form.  Some inline javascript will attempt to
         * auto-submit this pay form, so as to make the checkout process as
         * seamless as possile
         *
         * @since 2.1.0
         * @param int $order_id the order identifier
         */
        public function generate_pay_form($order_id)
        {
        }
        /**
         * Renders the gateway pay page direct post form.  This is used by gateways
         * that collect some or all payment information on-site, and POST the
         * entered information to a remote server for processing
         *
         * @see SV_WC_Payment_Gateway_Hosted::use_auto_form_post()
         *
         * @since 2.2.0
         *
         * @param \WC_Order $order the order object
         * @param array $request_params associative array of request parameters
         */
        public function render_pay_page_form($order, $request_params)
        {
        }
        /**
         * Renders the gateway auto post form.  This is used for gateways that
         * collect no payment information on-site, but must POST parameters to a
         * hosted payment page where payment information is entered.
         *
         * @since 2.2.0
         * @see SV_WC_Payment_Gateway_Hosted::use_auto_form_post()
         *
         * @param \WC_Order $order the order object
         * @param array $request_params associative array of request parameters
         */
        public function render_auto_post_form(\WC_Order $order, $request_params)
        {
        }
        /**
         * Get the auto post form display arguments.
         *
         * @since 4.3.0
         * @see SV_WC_Payment_Gateway_Hosted::render_auto_post_form() for args
         *
         * @param \WC_Order $order the order object
         * @return array
         */
        protected function get_auto_post_form_args(\WC_Order $order)
        {
        }
        /**
         * Get the auto post form params HTML.
         *
         * This can be overridden by concrete gateways to support more complex param arrays.
         *
         * @since 4.3.0
         * @param array $request_params The request params
         * @return string
         */
        protected function get_auto_post_form_params_html($request_params = array())
        {
        }
        /**
         * Returns the gateway hosted pay page parameters, if any
         *
         * @since 2.1.0
         *
         * @param \WC_Order $order the order object
         * @return array associative array of name-value parameters
         */
        protected function get_hosted_pay_page_params($order)
        {
        }
        /**
         * Gets the hosted pay page url to redirect to, to allow the customer to
         * remit payment.  This is generally the bare URL, without any query params.
         *
         * This method may be called more than once during a single request.
         *
         * @since 2.1.0
         *
         * @see SV_WC_Payment_Gateway_Hosted::get_hosted_pay_page_params()
         * @param \WC_Order $order optional order object, defaults to null
         * @return string hosted pay page url, or false if it could not be determined
         */
        public abstract function get_hosted_pay_page_url($order = null);
        /**
         * Handle a payment notification request.
         *
         * @since 4.3.0
         *
         * @throws \Exception
         */
        public function handle_transaction_response_request()
        {
        }
        /**
         * Gets the order object with transaction data.
         *
         * @since 5.0.0
         *
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response response object
         * @return \WC_Order
         * @throws SV_WC_Payment_Gateway_Exception
         * @throws \Exception
         */
        protected function get_order_from_response($response)
        {
        }
        /**
         * Gets the order object with payment data added.
         *
         * @since 5.0.0
         * @see SV_WC_Payment_Gateway::get_order()
         *
         * @param int|\WC_Order $order_id order ID or object
         * @return \WC_Order
         */
        public function get_order($order_id)
        {
        }
        /**
         * Validate a transaction response.
         *
         * @since 4.3.0
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response the response object
         * @throws SV_WC_Payment_Gateway_Exception
         */
        protected function validate_transaction_response($order, $response)
        {
        }
        /**
         * Process the transaction response for the given order
         *
         * @since 2.1.0
         *
         * @param \WC_Order $order the order
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response transaction response
         * @throws \Exception
         */
        protected function process_transaction_response($order, $response)
        {
        }
        /**
         * Processes a transaction response's token data, if any.
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway_Payment_Notification_Tokenization_Response $response response object
         * @return \WC_Order order object
         * @throws \Exception
         */
        protected function process_tokenization_response(\WC_Order $order, $response)
        {
        }
        /**
         * Adds an order note, along with anything else required after an approved
         * transaction.  This is a generic, default approved handler.
         *
         * @since 2.1.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response the response object
         */
        protected function do_transaction_approved(\WC_Order $order, $response)
        {
        }
        /**
         * Handle a held transaction response.
         *
         * @since 4.3.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response the response object
         */
        protected function do_transaction_held(\WC_Order $order, $response)
        {
        }
        /**
         * Handles a cancelled transaction response.
         *
         * @since 4.3.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response the response object
         */
        protected function do_transaction_cancelled(\WC_Order $order, $response)
        {
        }
        /**
         * Handles a failed transaction response.
         *
         * @since 4.3.0
         *
         * @param \WC_Order $order the order object
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response the response object
         */
        protected function do_transaction_failed(\WC_Order $order, $response)
        {
        }
        /**
         * Handles an invalid transaction response.
         *
         * i.e. the order has already been paid or was not found
         *
         * @since 4.3.0
         *
         * @param \WC_Order $order WooCommerce order object
         * @param SV_WC_Payment_Gateway_API_Payment_Notification_Response $response the response object
         */
        protected function do_invalid_transaction_response($order, $response)
        {
        }
        /**
         * Returns an API response object for the current response request
         *
         * @since 2.1.0
         * @param array $request_response_data the current request response data
         * @return SV_WC_Payment_Gateway_API_Payment_Notification_Response the response object
         */
        protected abstract function get_transaction_response($request_response_data);
        /** Helper methods ******************************************************/
        /**
         * Returns the WC API URL for this gateway, based on the current protocol
         *
         * @since 2.1.0
         * @return string the WC API URL for this server
         */
        public function get_transaction_response_handler_url()
        {
        }
        /**
         * Returns true if currently doing a transaction response request
         *
         * @since 2.1.0
         * @return boolean true if currently doing a transaction response request
         */
        public function doing_transaction_response_handler()
        {
        }
        /**
         * Logs pay page form submission request.
         *
         * @since 2.1.0
         *
         * @param array $request the request data associative array, which should include members 'method', 'uri', 'body'
         */
        public function log_hosted_pay_page_request($request)
        {
        }
        /**
         * Logs IPN/redirect-back transaction response request to the log file.
         *
         * @since 2.1.0
         *
         * @param array|string $response the request data
         * @param string $message optional message string with a %s to hold the
         *        response data.  Defaults to 'Request %s'
         * $response
         */
        public function log_transaction_response_request($response, $message = null)
        {
        }
        /** Getters ******************************************************/
        /**
         * Returns true if this is a hosted type gateway
         *
         * @since 1.0.0
         * @return boolean true if this is a hosted payment gateway
         */
        public function is_hosted_gateway()
        {
        }
        /**
         * Returns true if this gateway uses a form-post from the pay
         * page to "redirect" to a hosted payment page
         *
         * @since 2.1.0
         * @return boolean true if this gateway uses a form post, false if it
         *         redirects directly to the hosted pay page from checkout
         */
        public function use_form_post()
        {
        }
        /**
         * Returns true if this gateway uses an automatic form-post from the pay
         * page to "redirect" to the hosted payment page where payment information
         * is securely entered.  Return false if payment information is collected
         * on the pay page and then posted to a remote server.
         *
         * This method has no effect if use_form_post() returns false
         *
         * @since 2.2.0
         * @see SV_WC_Payment_Gateway_Hosted::use_form_post()
         * @return boolean true if this gateway automatically posts to the remote
         *         processor server from the pay page
         */
        public function use_auto_form_post()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout {
    /**
     * Base class to set up a Payments settings screen, used by external checkout integrations.
     *
     * @since 5.10.0
     */
    abstract class Admin
    {
        /** @var string settings section ID */
        protected $section_id;
        /**
         * Construct the class.
         *
         * @since 5.10.0
         */
        public function __construct()
        {
        }
        /**
         * Sets up the necessary hooks.
         *
         * @since 5.10.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Adds the checkout settings section.
         *
         * @internal
         *
         * @since 5.10.0
         *
         * @param array $sections the existing sections
         * @return array
         */
        public function add_settings_section($sections)
        {
        }
        /**
         * Gets the name of the settings section.
         *
         * @since 5.10.0
         *
         * @return string
         */
        protected abstract function get_settings_section_name();
        /**
         * Gets all of the combined settings.
         *
         * @since 5.10.0
         *
         * @return array $settings combined settings.
         */
        public abstract function get_settings();
        /**
         * Adds the definition for a Processing Gateway setting.
         *
         * @since 5.10.0
         *
         * @param array $settings setting definitions
         * @return array
         */
        protected function add_processing_gateway_settings($settings)
        {
        }
        /**
         * Gets the ID for the Processing Gateway setting.
         *
         * @since 5.10.0
         *
         * @return string
         */
        protected function get_processing_gateway_setting_id()
        {
        }
        /**
         * Gets an array IDs and names of payment gateways that declare support.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_processing_gateway_options()
        {
        }
        /**
         * Gets the gateways that declare support.
         *
         * @since 5.10.0
         *
         * @return array the supporting gateways as `$gateway_id => \SV_WC_Payment_Gateway`
         */
        protected abstract function get_supporting_gateways();
        /**
         * Outputs the settings fields.
         *
         * @internal
         *
         * @since 5.10.0
         *
         * @global string $current_section current settings section.
         */
        public function add_settings()
        {
        }
        /**
         * Saves the settings.
         *
         * @internal
         *
         * @since 5.10.0
         *
         * @global string $current_section current settings section.
         */
        public function save_settings()
        {
        }
        /**
         * Renders a static setting.
         *
         * This "setting" just displays simple text instead of a <select> with only one option.
         *
         * @since 5.10.0
         *
         * @param array $setting
         */
        public function render_static_setting($setting)
        {
        }
        /**
         * Determines if the user is currently on the settings screen.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        protected function is_settings_screen()
        {
        }
        /**
         * Gets the available display location options.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_display_location_options()
        {
        }
        /**
         * Adds admin notices for configuration issues.
         *
         * @since 5.10.0
         */
        public function add_admin_notices()
        {
        }
        /**
         * Adds one error notice for all configuration options that need attention.
         *
         * @since 5.10.0
         */
        protected function add_configuration_errors_notice()
        {
        }
        /**
         * Adds warning notices for each configuration option that may need attention.
         *
         * @since 5.10.0
         */
        protected function add_configuration_warnings_notices()
        {
        }
        /**
         * Gets the error messages for configuration issues that need attention.
         *
         * @since 5.10.0
         *
         * @return string[] error messages
         */
        protected function get_configuration_errors()
        {
        }
        /**
         * Checks if the shipping based tax notice should be displayed.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        protected function should_display_shipping_based_tax_notice()
        {
        }
        /**
         * Gets the shipping based tax notice text.
         *
         * @since 5.10.0
         *
         * @return string
         */
        protected function get_shipping_based_tax_notice()
        {
        }
        /**
         * Checks if the billing based tax notice should be displayed.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        protected function should_display_billing_based_tax_notice()
        {
        }
        /**
         * Gets the billing based tax notice text.
         *
         * @since 5.10.0
         *
         * @return string
         */
        protected function get_billing_based_tax_notice()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Sets up the Apple Pay settings screen.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_Admin extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Admin
    {
        /** @var SV_WC_Payment_Gateway_Apple_Pay the Apple Pay handler instance */
        protected $handler;
        /**
         * Construct the class.
         *
         * @since 4.7.0
         *
         * @param SV_WC_Payment_Gateway_Apple_Pay $handler main Apple Pay handler instance
         */
        public function __construct($handler)
        {
        }
        /**
         * Gets the name of the Apple Pay settings section.
         *
         * @since 5.10.0
         *
         * @return string
         */
        protected function get_settings_section_name()
        {
        }
        /**
         * Gets all of the combined settings.
         *
         * @since 4.7.0
         *
         * @return array $settings combined settings.
         */
        public function get_settings()
        {
        }
        /**
         * Gets the connection settings for Apple Pay.
         *
         * @since 5.10.0
         *
         * @return array $settings connection settings
         */
        protected function get_connection_settings()
        {
        }
        /**
         * Gets the gateways that declare support for Apple Pay.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_supporting_gateways()
        {
        }
        /**
         * Gets the error messages for configuration issues that need attention.
         *
         * @since 5.10.0
         *
         * @return string[] error messages
         */
        protected function get_configuration_errors()
        {
        }
    }
    /**
     * Base JSON API request class.
     *
     * @since 4.3.0
     */
    abstract class SV_WC_API_JSON_Request implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Request
    {
        /** @var string The request method, one of HEAD, GET, PUT, PATCH, POST, DELETE */
        protected $method;
        /** @var string The request path */
        protected $path;
        /** @var array The request parameters, if any */
        protected $params = array();
        /** @var array the request data */
        protected $data = array();
        /**
         * Get the request method.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::get_method()
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * Get the request path.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::get_path()
         * @return string
         */
        public function get_path()
        {
        }
        /**
         * Get the request parameters.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::get_params()
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * Get the request data.
         *
         * @since 4.5.0
         * @return array
         */
        public function get_data()
        {
        }
        /** API Helper Methods ******************************************************/
        /**
         * Get the string representation of this request.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::to_string()
         * @return string
         */
        public function to_string()
        {
        }
        /**
         * Get the string representation of this request with any and all sensitive elements masked
         * or removed.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::to_string_safe()
         * @return string
         */
        public function to_string_safe()
        {
        }
    }
    /**
     * The Apple Pay API request object.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_API_Request extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_JSON_Request
    {
        /** @var \SV_WC_Payment_Gateway $gateway the gateway instance */
        protected $gateway;
        /**
         * Constructs the request.
         *
         * @since 4.7.0
         *
         * @param \SV_WC_Payment_Gateway $gateway the gateway instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Sets the data for merchant validation.
         *
         * @since 4.7.0
         *
         * @param string $merchant_id the merchant ID to validate
         * @param string $domain_name the verified domain name
         * @param string $display_name the merchant display name
         */
        public function set_merchant_data($merchant_id, $domain_name, $display_name)
        {
        }
        /**
         * Get the string representation of this response with any and all sensitive
         * elements masked or removed.
         *
         * @since 4.7.0
         * @see SV_WC_API_Response::to_string_safe()
         *
         * @return string
         */
        public function to_string_safe()
        {
        }
    }
    /**
     * Sets up the Apple Pay API.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_API extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Base
    {
        /** @var \SV_WC_Payment_Gateway the gateway instance */
        protected $gateway;
        /**
         * Constructs the class.
         *
         * @since 4.7.0
         *
         * @param \SV_WC_Payment_Gateway the gateway instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Validates the Apple Pay merchant.
         *
         * @since 4.7.0
         *
         * @param string $url the validation URL
         * @param string $merchant_id the merchant ID to validate
         * @param string $domain_name the verified domain name
         * @param string $display_name the merchant display name
         * @return SV_WC_Payment_Gateway_Apple_Pay_API_Response the response object
         * @throws SV_WC_API_Exception
         */
        public function validate_merchant($url, $merchant_id, $domain_name, $display_name)
        {
        }
        /**
         * Performs the request and return the parsed response.
         *
         * @since 4.7.0
         *
         * @param SV_WC_API_Request|object
         * @return SV_WC_API_Response|object
         * @throws SV_WC_API_Exception
         */
        protected function perform_request($request)
        {
        }
        /**
         * Sets the PEM file required for authentication.
         *
         * @internal
         *
         * @since 4.7.0
         *
         * @param resource $curl_handle
         */
        public function set_cert_file($curl_handle)
        {
        }
        /** Validation methods ****************************************************/
        /**
         * Validates the post-parsed response.
         *
         * @since 4.7.0
         *
         * @return bool
         *
         * @throws SV_WC_API_Exception
         */
        protected function do_post_parse_response_validation()
        {
        }
        /** Helper methods ********************************************************/
        /**
         * Gets a new request object.
         *
         * @since 4.7.0
         *
         * @param array $type Optional. The desired request type
         * @return SV_WC_Payment_Gateway_Apple_Pay_API_Request the request object
         */
        protected function get_new_request($type = array())
        {
        }
        /**
         * Gets the gateway instance.
         *
         * @since 4.7.0
         *
         * @return \SV_WC_Payment_Gateway
         */
        protected function get_gateway()
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 4.7.0
         *
         * @return \SV_WC_Payment_Gateway_Plugin
         */
        protected function get_plugin()
        {
        }
    }
    /**
     * The Apple Pay API response object.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_API_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_JSON_Response
    {
        /**
         * Gets the status code.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public function get_status_code()
        {
        }
        /**
         * Gets the status message.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public function get_status_message()
        {
        }
        /**
         * Gets the validated merchant session.
         *
         * @since 4.7.0
         *
         * @return string|array
         */
        public function get_merchant_session()
        {
        }
        /**
         * Get the string representation of this response with any and all sensitive
         * elements masked or removed.
         *
         * No strong indication from the Apple documentation that these _need_ to be
         * masked, but they don't provide any useful info and only make the debug
         * logs unnecessarily huge.
         *
         * @since 4.7.0
         * @see SV_WC_API_Response::to_string_safe()
         *
         * @return string
         */
        public function to_string_safe()
        {
        }
    }
    /**
     * The Apple Pay AJAX handler.
     *
     * @since 4.7.0
     */
    class SV_WC_Payment_Gateway_Apple_Pay_AJAX
    {
        /** @var SV_WC_Payment_Gateway_Apple_Pay $handler the Apple Pay handler instance */
        protected $handler;
        /**
         * Constructs the class.
         *
         * @since 4.7.0
         *
         * @param SV_WC_Payment_Gateway_Apple_Pay $handler the Apple Pay handler instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Apple_Pay $handler)
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.6.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Gets a payment request for the specified type.
         *
         * @internal
         *
         * @since 4.7.0
         */
        public function get_payment_request()
        {
        }
        /**
         * Validates the merchant.
         *
         * @internal
         *
         * @since 4.7.0
         */
        public function validate_merchant()
        {
        }
        /**
         * Recalculates the totals for the current payment request.
         *
         * @internal
         *
         * @since 4.7.0
         */
        public function recalculate_totals()
        {
        }
        /**
         * Processes the payment after the Apple Pay authorization.
         *
         * @internal
         *
         * @since 4.7.0
         */
        public function process_payment()
        {
        }
        /**
         * Gets the Apple Pay handler instance.
         *
         * @since 4.7.0
         *
         * @return SV_WC_Payment_Gateway_Apple_Pay
         */
        protected function get_handler()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Google_Pay {
    /**
     * Sets up the Google Pay settings screen.
     *
     * @since 5.10.0
     */
    class Admin extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Admin
    {
        /** @var Google_Pay the Google Pay handler instance */
        protected $handler;
        /**
         * Construct the class.
         *
         * @since 5.10.0
         *
         * @param Google_Pay $handler main Google Pay handler instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Google_Pay\Google_Pay $handler)
        {
        }
        /**
         * Gets the name of the Google Pay settings section.
         *
         * @since 5.10.0
         *
         * @return string
         */
        protected function get_settings_section_name()
        {
        }
        /**
         * Gets all of the combined settings.
         *
         * @since 5.10.0
         *
         * @return array $settings combined settings.
         */
        public function get_settings()
        {
        }
        /**
         * Gets the connection settings for Google Pay.
         *
         * @since 5.10.0
         *
         * @return array $settings connection settings
         */
        protected function get_connection_settings()
        {
        }
        /**
         * Gets the gateways that declare support for Google Pay.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_supporting_gateways()
        {
        }
    }
    /**
     * Sets up Google Pay support.
     *
     * @since 5.10.0
     */
    class Google_Pay extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\External_Checkout
    {
        /** @var Admin the admin instance */
        protected $admin;
        /** @var Frontend the frontend instance */
        protected $frontend;
        /** @var AJAX the AJAX instance */
        protected $ajax;
        /**
         * Constructs the class.
         *
         * @since 5.10.0
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin the plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin)
        {
        }
        /**
         * Initializes the admin handler.
         *
         * @since 5.10.0
         */
        protected function init_admin()
        {
        }
        /**
         * Initializes the AJAX handler.
         *
         * @since 5.10.0
         */
        protected function init_ajax()
        {
        }
        /**
         * Initializes the frontend handler.
         *
         * @since 5.10.0
         */
        protected function init_frontend()
        {
        }
        /**
         * Checks if the external checkout provides the customer billing address to WC before payment confirmation.
         *
         * @since 5.10.0
         *
         * @return bool
         */
        public function is_billing_address_available_before_payment()
        {
        }
        /**
         * Gets Google transaction info based on WooCommerce cart or product data.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart cart object
         * @param string $product_id product ID, if we are on a Product page
         * @return array
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function get_transaction_info(\WC_Cart $cart, $product_id = '')
        {
        }
        /**
         * Checks if all products in the cart can be purchased using Google Pay.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart cart object
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function validate_cart(\WC_Cart $cart)
        {
        }
        /**
         * Checks if a single product can be purchased using Google Pay.
         *
         * @since 5.10.0
         *
         * @param \WC_Product $product product object
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function validate_product(\WC_Product $product)
        {
        }
        /**
         * Gets Google transaction info based on WooCommerce cart data.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart cart object
         * @return array
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function get_cart_transaction_info(\WC_Cart $cart)
        {
        }
        /**
         * Gets Google transaction info based on product data.
         *
         * @since 5.10.0
         *
         * @param \WC_Product $product product object
         * @return array
         * @throws SV_WC_Payment_Gateway_Exception
         */
        public function get_product_transaction_info(\WC_Product $product)
        {
        }
        /**
         * Populates cart with a single product.
         *
         * @since 5.10.0
         *
         * @param string $product_id product ID, if we are on a Product page
         * @throws \Exception
         */
        public function add_product_to_cart($product_id)
        {
        }
        /**
         * Recalculates the lines and totals after selecting an address or shipping method.
         *
         * @since 5.10.0
         *
         * @param string $chosen_shipping_method chosen shipping method
         * @param string $product_id product ID, if we are on a Product page
         * @return array
         * @throws \Exception
         */
        public function recalculate_totals($chosen_shipping_method, $product_id)
        {
        }
        /**
         * Builds display items for the Google Pay JS.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart
         * @return array
         */
        public function build_display_items(\WC_Cart $cart)
        {
        }
        /**
         * Processes the payment after a Google Pay authorization.
         *
         * This method creates a new order and calls the gateway for processing.
         *
         * @since 5.10.0
         *
         * @param mixed $payment_data payment data returned by Google Pay
         * @param string $product_id product ID, if we are on a Product page
         * @return array
         * @throws \Exception
         */
        public function process_payment($payment_data, $product_id)
        {
        }
        /**
         * Gets the stored payment response data.
         *
         * @since 5.10.0
         *
         * @return mixed|array $data
         */
        public function get_stored_payment_response()
        {
        }
        /**
         * Stores payment response data for later use.
         *
         * @since 5.10.0
         *
         * @param mixed|array $data
         */
        public function store_payment_response($data)
        {
        }
        /**
         * Filters and sets the customer's taxable address.
         *
         * This is necessary because Google Pay doesn't ever provide a billing
         * address until after payment is complete. If the shop is set to calculate
         * tax based on the billing address, we need to use the shipping address
         * to at least get some rates for new customers.
         *
         * @internal
         *
         * @since 5.10.0
         *
         * @param array $address taxable address
         * @return array
         */
        public function set_customer_taxable_address($address)
        {
        }
        /**
         * Allows the processing gateway to add Google Pay details to the payment data.
         *
         * @internal
         *
         * @since 5.10.0
         *
         * @param \WC_Order $order the order object
         * @return \WC_Order
         */
        public function add_order_data($order)
        {
        }
        /**
         * Gets the currencies supported by the gateway and available for shipping.
         *
         * @since 5.10.0
         *
         * @return array
         */
        public function get_available_countries()
        {
        }
        /**
         * Gets the currencies accepted by the gateway's Google Pay integration.
         *
         * @since 5.10.0
         *
         * @return array
         */
        public function get_accepted_currencies()
        {
        }
        /**
         * Gets the supported networks for Google Pay.
         *
         * @since 5.10.0
         *
         * @return array
         */
        public function get_supported_networks()
        {
        }
        /**
         * Gets the gateway merchant ID.
         *
         * Each plugin can override this method to get the merchant ID from their own setting.
         *
         * @since 5.10.0
         *
         * @return string
         */
        public function get_merchant_id()
        {
        }
    }
    /**
     * Sets up the Google Pay front-end functionality.
     *
     * @since 5.10.0
     */
    class Frontend extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Frontend
    {
        /** @var string JS handler base class name, without the FW version */
        protected $js_handler_base_class_name = 'SV_WC_Google_Pay_Handler';
        /**
         * Constructs the class.
         *
         * @since 5.10.0
         *
         * @param SV_WC_Payment_Gateway_Plugin $plugin the gateway plugin instance
         * @param Google_Pay $handler the Google Pay handler instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Google_Pay\Google_Pay $handler)
        {
        }
        /**
         * Gets the script ID.
         *
         * @since 5.10.0
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Gets the script ID, dasherized.
         *
         * @since 5.10.0
         *
         * @return string
         */
        public function get_id_dasherized()
        {
        }
        /**
         * Enqueues the scripts.
         *
         * @since 5.10.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Gets the JS handler arguments.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_js_handler_args()
        {
        }
        /**
         * Renders a Google Pay button.
         *
         * @since 5.10.0
         */
        public function render_button()
        {
        }
        /**
         * Initializes Google Pay on the single product page.
         *
         * @since 5.10.0
         */
        public function init_product()
        {
        }
        /**
         * Gets the args passed to the product JS handler.
         *
         * @since 5.10.0
         *
         * @param \WC_Product $product product object
         * @return array
         */
        protected function get_product_js_handler_args(\WC_Product $product)
        {
        }
        /** Cart functionality ****************************************************/
        /**
         * Initializes Google Pay on the cart page.
         *
         * @since 5.10.0
         */
        public function init_cart()
        {
        }
        /**
         * Gets the args passed to the cart JS handler.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart cart object
         * @return array
         */
        protected function get_cart_js_handler_args(\WC_Cart $cart)
        {
        }
        /** Checkout functionality ************************************************/
        /**
         * Initializes Google Pay on the checkout page.
         *
         * @since 5.10.0
         */
        public function init_checkout()
        {
        }
        /**
         * Gets the args passed to the checkout JS handler.
         *
         * @since 5.10.0
         *
         * @return array
         */
        protected function get_checkout_js_handler_args()
        {
        }
    }
    /**
     * The Google Pay AJAX handler.
     *
     * @since 5.10.0
     */
    class AJAX
    {
        /** @var Google_Pay $handler the Google Pay handler instance */
        protected $handler;
        /**
         * Constructs the class.
         *
         * @since 5.10.0
         *
         * @param Google_Pay $handler the Google Pay handler instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout\Google_Pay\Google_Pay $handler)
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.10.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Gets Google transaction info based on WooCommerce cart data.
         *
         * @internal
         *
         * @since 5.10.0
         */
        public function get_transaction_info()
        {
        }
        /**
         * Recalculates the totals after selecting an address or shipping method.
         *
         * @internal
         *
         * @since 5.10.0
         */
        public function recalculate_totals()
        {
        }
        /**
         * Processes the payment after the Google Pay authorization.
         *
         * @internal
         *
         * @since 5.10.0
         */
        public function process_payment()
        {
        }
        /**
         * Gets the Google Pay handler instance.
         *
         * @since 5.10.0
         *
         * @return Google_Pay
         */
        protected function get_handler()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\External_Checkout {
    /**
     * A helper that handles order creation outside the regular WC checkout process.
     *
     * @see \WC_Checkout
     *
     * @since 5.10.0
     */
    class Orders
    {
        /**
         * Creates an order from a cart.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart cart object
         * @param array $order_data order data
         * @return \WC_Order
         * @throws Framework\SV_WC_Payment_Gateway_Exception
         * @throws \Exception
         */
        public static function create_order(\WC_Cart $cart, $order_data = [])
        {
        }
        /**
         * Gets the hash of the cart based on the cart contents.
         *
         * @since 5.10.0
         *
         * @param \WC_Cart $cart cart object
         * @return string
         */
        private static function get_cart_hash(\WC_Cart $cart)
        {
        }
        /**
         * Gets an order object for payment.
         *
         * @since 5.10.0
         *
         * @see \WC_Checkout::create_order()
         *
         * @param array $order_data the order data
         * @return \WC_Order
         * @throws Framework\SV_WC_Payment_Gateway_Exception
         */
        public static function get_order_object($order_data)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Subscriptions Integration
     *
     * @since 4.1.0
     */
    class SV_WC_Payment_Gateway_Integration_Subscriptions extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Integration
    {
        /** @var string|float renewal payment total for Subs 2.0.x renewals */
        protected $renewal_payment_total;
        /**
         * Bootstraps the class.
         *
         * @since 4.1.0
         *
         * @param SV_WC_Payment_Gateway|SV_WC_Payment_Gateway_Direct $gateway
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Adds support for subscriptions by hooking in some necessary actions
         *
         * @since 4.1.0
         */
        public function add_support()
        {
        }
        /**
         * Disables Subscription's default payment token change notice if wc_add_notice() is not defined
         *
         * This prevents an uncaught error from being triggered when tokens are retrieved and saved in the user profile page.
         *
         * @internal
         *
         * @see \WCS_My_Account_Payment_Methods::display_default_payment_token_change_notice()
         *
         * @since 5.8.0
         */
        public function disable_default_payment_token_change_notice()
        {
        }
        /**
         * Force tokenization for subscriptions, this can be forced either during checkout
         * or when the payment method for a subscription is being changed
         *
         * @since 4.1.0
         * @see SV_WC_Payment_Gateway::tokenization_forced()
         * @param bool $force_tokenization whether tokenization should be forced
         * @return bool true if tokenization should be forced, false otherwise
         */
        public function maybe_force_tokenization($force_tokenization)
        {
        }
        /**
         * Save payment meta to the Subscription object after a successful transaction,
         * this is primarily used for the payment token and customer ID which are then
         * copied over to a renewal order prior to payment processing.
         *
         * @since 4.1.0
         * @param \WC_Order $order order
         */
        public function save_payment_meta($order)
        {
        }
        /**
         * Adds subscription details to order base data.
         *
         * Details are added to a \WC_Order::$payment->subscriptions[] property.
         * @see SV_WC_Payment_Gateway_Integration_Subscriptions::add_subscription_details_to_order()
         * @internal
         *
         * @since 5.4.2
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway $gateway payment gateway
         * @return \WC_Order
         */
        public function add_subscriptions_details_to_order($order, $gateway)
        {
        }
        /**
         * Builds and returns a subscription's details data.
         *
         * @see SV_WC_Payment_Gateway_Integration_Subscriptions::add_subscriptions_details_to_order()
         *
         * \stdClass {
         *  int $id the subscription's ID
         *  bool $is_renewal whether the order is for a subscription renewal
         *  bool $is_installment whether the subscription is for an installment
         *  bool $is_first whether it is the first payment for an installment series
         *  bool $is_last whether it is the last payment for an installment series
         *}
         *
         * @since 5.4.2
         *
         * @param \WC_Subscription $subscription subscription object
         * @param bool $renewal whether the subscription is a renewal
         * @return \stdClass subscription details data
         */
        protected function add_subscription_details_to_order($subscription, $renewal)
        {
        }
        /**
         * Process a subscription renewal payment
         *
         * @since 4.1.0
         * @param float $amount_to_charge subscription amount to charge, could include multiple renewals if they've previously failed and the admin has enabled it
         * @param \WC_Order $order original order containing the subscription
         */
        public function process_renewal_payment($amount_to_charge, $order)
        {
        }
        /**
         * Adds subscriptions data to the order object, currently:
         *
         * + renewal order specific description
         * + renewal payment total
         * + token and associated data (last four, type, etc)
         *
         * @since 4.1.0
         * @see SV_WC_Payment_Gateway_Direct::get_order()
         * @param \WC_Order $order renewal order
         * @return \WC_Order renewal order with payment token data set
         */
        public function get_order($order)
        {
        }
        /**
         * Don't copy order-specific meta to renewal orders from the WC_Subscription
         * object. Generally the subscription object should not have any order-specific
         * meta (aside from `payment_token` and `customer_id`) as they are not
         * copied during the upgrade (see do_not_copy_order_meta_during_upgrade()), so
         * this method is more of a fallback in case meta accidentally is copied.
         *
         * @since 4.1.0
         * @param array $order_meta order meta to copy
         * @return array
         */
        public function do_not_copy_order_meta($order_meta)
        {
        }
        /**
         * Don't copy order-specific meta to the new WC_Subscription object during
         * upgrade to 2.0.x. This only allows the `payment_token` and `customer_id`
         * meta to be copied.
         *
         * @since 4.1.0
         * @param array $order_meta order meta to copy
         * @return array
         */
        public function do_not_copy_order_meta_during_upgrade($order_meta)
        {
        }
        /**
         * Processes a Change Payment transaction.
         *
         * This hooks in before standard payment processing to simply add or create
         * token data and avoid certain failure conditions affecting the subscription
         * object.
         *
         * @internal
         *
         * @since 4.6.4
         *
         * @param bool|array $result result from any others filtering this
         * @param int $order_id an order or subscription ID
         * @param SV_WC_Payment_Gateway_Direct $gateway gateway object
         * @return array $result change payment result
         */
        public function process_change_payment($result, $order_id, $gateway)
        {
        }
        /**
         * Remove order meta (like trans ID) that's added to a Subscription object
         * during the change payment method flow, which uses WC_Payment_Gateway::process_payment(),
         * thus some order-specific meta is added that is undesirable to have copied
         * over to renewal orders.
         *
         * @since 4.1.0
         *
         * @param array $result process_payment() result, unused
         * @param int|\WC_Subscription $subscription subscription object
         * @return array
         */
        public function remove_order_meta_from_change_payment($result, $subscription)
        {
        }
        /**
         * Update the payment token and optional customer ID for a subscription after a customer
         * uses this gateway to successfully complete the payment for an automatic
         * renewal payment which had previously failed.
         *
         * @since 4.1.0
         * @param \WC_Subscription $subscription subscription being updated
         * @param \WC_Order $renewal_order order which recorded the successful payment (to make up for the failed automatic payment).
         */
        public function update_failing_payment_method($subscription, $renewal_order)
        {
        }
        /**
         * Get the order-specific meta keys that should not be copied to the WC_Subscription
         * object during upgrade to 2.0.x or during change payment method actions
         *
         * @since 4.1.0
         * @return array
         */
        protected function get_order_specific_meta_keys()
        {
        }
        /**
         * Render the payment method used for a subscription in the "My Subscriptions" table
         *
         * @since 4.1.0
         * @param string $payment_method_to_display the default payment method text to display
         * @param \WC_Subscription $subscription
         * @return string the subscription payment method
         */
        public function maybe_render_payment_method($payment_method_to_display, $subscription)
        {
        }
        /**
         * Add a subscriptions header to the My Payment Methods table.
         *
         * @since 4.3.0
         * @param array $headers the table headers
         * @param \SV_WC_Payment_Gateway_My_Payment_Methods the my payment methods instance
         * @return array
         */
        public function add_my_payment_methods_table_header($headers, $handler)
        {
        }
        /**
         * Displays a list of subscriptions orders associated with the current token.
         *
         * This method only generates output for tokens created by the framework.
         *
         * TODO: Ask Subscriptions developers whether they would be interested in start adding the column to the payment methods table themselves {WV 2020-02-19}
         *
         * @internal
         *
         * @since 5.8.0
         *
         * @param array $method payment method
         */
        public function add_payment_method_subscriptions($method)
        {
        }
        /**
         * Gets the HTML code for the list of subscriptions orders associated with the given token.
         *
         * @since 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token $token the payment token
         * @return string
         */
        private function get_payment_method_subscriptions_html($token)
        {
        }
        /**
         * Add a subscriptions header to the My Payment Methods table.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-20 {WV 2020-02-20}
         *
         * @internal
         *
         * @since 4.3.0
         * @deprecated 5.8.0
         *
         * @param array $method the table row data
         * @param \SV_WC_Payment_Gateway_Payment_Token $token the payment token
         * @param \SV_WC_Payment_Gateway_My_Payment_Methods the my payment methods instance
         * @return array
         */
        public function add_my_payment_methods_table_body_row_data($method, $token, $handler)
        {
        }
        /**
         * Disables the "Delete" My Payment Methods method action button if there is an associated subscription.
         *
         * TODO: remove this method by version 6.0.0 or by 2021-02-20 {WV 2020-02-20}
         *
         * @internal
         *
         * @since 4.3.0
         * @deprecated 5.8.0
         *
         * @param array $actions the token actions
         * @param SV_WC_Payment_Gateway_Payment_Token the token object
         * @param SV_WC_Payment_Gateway_My_Payment_Methods the my payment methods instance
         * @return array
         */
        public function disable_my_payment_methods_table_method_delete($actions, $token, $handler)
        {
        }
        /**
         * Gets the subscriptions tied to a user payment token.
         *
         * @since 4.3.0
         *
         * @param int $user_id the user
         * @param SV_WC_Payment_Gateway_Payment_Token $token the token object
         * @return array the subscriptions or an empty array
         */
        protected function get_payment_token_subscriptions($user_id, $token)
        {
        }
        /**
         * Include the payment meta data required to process automatic recurring
         * payments so that store managers can manually set up automatic recurring
         * payments for a customer via the Edit Subscriptions screen in 2.0.x
         *
         * @since 4.1.0
         * @param array $meta associative array of meta data required for automatic payments
         * @param \WC_Subscription $subscription subscription object
         * @return array
         */
        public function admin_add_payment_meta($meta, $subscription)
        {
        }
        /**
         * Validate the payment meta data required to process automatic recurring
         * payments so that store managers can manually set up automatic recurring
         * payments for a customer via the Edit Subscriptions screen in 2.0.x
         *
         * @since 4.1.0
         *
         * @param array $meta associative array of meta data required for automatic payments
         * @throws \Exception if payment token or customer ID is missing or blank
         */
        public function admin_validate_payment_meta($meta)
        {
        }
    }
    /**
     * Handle the admin user profile settings.
     *
     * @since 4.3.0
     */
    class SV_WC_Payment_Gateway_Admin_User_Handler
    {
        /** @var \SV_WC_Payment_Gateway_Plugin the plugin instance **/
        protected $plugin;
        /** @var array the token editor for each gateway **/
        protected $token_editors = array();
        /**
         * Construct the user handler.
         *
         * @since 4.3.0
         * @param \SV_WC_Payment_Gateway_Plugin The plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin)
        {
        }
        /**
         * Set up a token editor for each gateway.
         *
         * @since 4.3.0
         */
        public function init_token_editors()
        {
        }
        /**
         * Display the customer profile settings markup.
         *
         * @since 4.3.0
         * @param \WP_User $user The user object
         */
        public function add_profile_section($user)
        {
        }
        /**
         * Display the token editor markup.
         *
         * @since 4.3.0
         * @param \WP_User $user The user object
         */
        public function display_token_editors($user)
        {
        }
        /**
         * Display the customer ID field(s).
         *
         * @since 4.3.0
         * @param \WP_User $user the user object
         */
        public function display_customer_id_fields($user)
        {
        }
        /**
         * Save the user profile section fields.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         */
        public function save_profile_fields($user_id)
        {
        }
        /**
         * Save the token data from each token editor.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         */
        protected function save_tokens($user_id)
        {
        }
        /**
         * Save the customer IDs.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         */
        protected function save_customer_ids($user_id)
        {
        }
        /** Getter methods ******************************************************/
        /**
         * Get the token editor section title.
         *
         * @since 4.3.0
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * Get the token editor section description.
         *
         * @since 4.3.0
         * @return string
         */
        protected function get_description()
        {
        }
        /**
         * Get the token editor objects.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_token_editors()
        {
        }
        /**
         * Get the customer ID fields for the plugin's gateways.
         *
         * In most cases, this will be a single field unless the plugin has multiple gateways and they
         * are set to different environments.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         * @return array {
         *     The fields data
         *
         *     @type string $label the field label
         *     @type string $name  the input name
         *     @type string $value the input value
         * }
         */
        protected function get_customer_id_fields($user_id)
        {
        }
        /**
         * Get the unique environments between the plugin's gateways.
         *
         * @since 4.3.0
         * @return array the environments in the format `$environment_id => $environment_name`
         */
        protected function get_unique_environments()
        {
        }
        /**
         * Get the gateways that support tokenization and are enabled.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_tokenized_gateways()
        {
        }
        /** Conditional methods ******************************************************/
        /**
         * Determine if the user profile section is supported by at least one gateway.
         *
         * @since 4.3.0
         * @return bool
         */
        protected function is_supported()
        {
        }
        /**
         * Determine if the plugin has varying environments between its gateways.
         *
         * @since 4.3.0
         * @return bool
         */
        public function has_multiple_environments()
        {
        }
        /**
         * Get the plugin instance.
         *
         * @since 4.3.0
         * @return \SV_WC_Payment_Gateway_Plugin the plugin instance
         */
        protected function get_plugin()
        {
        }
    }
    /**
     * The token editor.
     *
     * @since 4.3.0
     */
    class SV_WC_Payment_Gateway_Admin_Payment_Token_Editor
    {
        /** @var SV_WC_Payment_Gateway_Direct the gateway object **/
        protected $gateway;
        /**
         * Constructs the editor.
         *
         * @since 4.3.0
         *
         * @param SV_WC_Payment_Gateway_Direct the gateway object
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Direct $gateway)
        {
        }
        /**
         * Load the editor scripts and styles.
         *
         * @since 4.3.0
         */
        public function enqueue_scripts_styles()
        {
        }
        /**
         * Display the token editor.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         */
        public function display($user_id)
        {
        }
        /**
         * Display the tokens.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         */
        public function display_tokens($user_id)
        {
        }
        /**
         * Save the token editor.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         */
        public function save($user_id)
        {
        }
        /**
         * Add a token via AJAX.
         *
         * @since 4.3.0
         */
        public function ajax_get_blank_token()
        {
        }
        /**
         * Remove a token via AJAX.
         *
         * @since 4.3.0
         */
        public function ajax_remove_token()
        {
        }
        /**
         * Refresh the tokens list via AJAX.
         *
         * @since 4.3.0
         */
        public function ajax_refresh_tokens()
        {
        }
        /**
         * Builds a token object from data saved in the admin.
         *
         * This method allows concrete gateways to add special token data.
         * See Authorize.net CIM for an example.
         *
         * @since 4.3.0
         *
         * @param int $user_id the user ID
         * @param string $token_id the token ID
         * @param array $data the token data
         * @return SV_WC_Payment_Gateway_Payment_Token the payment token object
         */
        protected function build_token($user_id, $token_id, $data)
        {
        }
        /**
         * Updates a token object with data saved in the admin.
         *
         * @since 5.8.0
         *
         * @param SV_WC_Payment_Gateway_Payment_Token the payment token object to update
         * @param string $token_id the token ID
         * @param array $data the token data
         * @return SV_WC_Payment_Gateway_Payment_Token
         */
        protected function set_token_props($token, $token_id, $data)
        {
        }
        /**
         * Update the user's token data.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         * @param array the token objects
         */
        protected function update_tokens($user_id, $tokens)
        {
        }
        /**
         * Remove a specific token.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         * @param string $token_id the token ID
         * @return bool whether the token was successfully removed
         */
        protected function remove_token($user_id, $token_id)
        {
        }
        /**
         * Validate a token's data before saving.
         *
         * Concrete gateways can override this to provide their own validation.
         *
         * @since 4.3.0
         * @param array $data the token data
         * @return array|bool the validated token data or false if the token should not be saved
         */
        protected function validate_token_data($token_id, $data)
        {
        }
        /**
         * Correctly format a credit card expiration date for storage.
         *
         * @since 4.3.0
         * @param array $data
         * @return array
         */
        protected function prepare_expiry_date($data)
        {
        }
        /**
         * Get the stored tokens for a user.
         *
         * @since 4.3.0
         * @param int $user_id the user ID
         * @return array the tokens in db format
         */
        protected function get_tokens($user_id)
        {
        }
        /**
         * Get the editor title.
         *
         * @since 4.3.0
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * Get the editor columns.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_columns()
        {
        }
        /**
         * Get the editor fields.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_fields($type = '')
        {
        }
        /**
         * Get the token payment type.
         *
         * @since 4.3.0
         * @return string
         */
        protected function get_payment_type()
        {
        }
        /**
         * Get the credit card type field options.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_card_type_options()
        {
        }
        /**
         * Get the HTML name for the token fields.
         *
         * @since 4.3.0
         * @return string
         */
        protected function get_input_name()
        {
        }
        /**
         * Get the available editor actions.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_actions()
        {
        }
        /**
         * Get the available token actions.
         *
         * @since 4.3.0
         * @return array
         */
        protected function get_token_actions()
        {
        }
        /**
         * Gets the gateway object.
         *
         * @since 4.3.0
         *
         * @return SV_WC_Payment_Gateway_Direct the gateway object
         */
        protected function get_gateway()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\Admin {
    /**
     * The payment gateway plugin Setup Wizard class.
     *
     * Extends the base plugin class to add common gateway functionality.
     *
     * @since 5.2.2
     */
    abstract class Setup_Wizard extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Admin\Setup_Wizard
    {
        /**
         * Adds a 'Setup' link to the plugin action links if the wizard hasn't been completed.
         *
         * This will override the plugin's standard "Configure {gateway}" links with a link to
         * this setup wizard.
         *
         * @internal
         *
         * @since 5.2.2
         *
         * @param array $action_links plugin action links
         * @return array
         */
        public function add_setup_link($action_links)
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Handle the admin order screens.
     *
     * @since 5.0.0
     */
    class SV_WC_Payment_Gateway_Admin_Order
    {
        /** @var SV_WC_Payment_Gateway_Plugin the plugin instance **/
        protected $plugin;
        /**
         * Constructs the class.
         *
         * @since 5.0.0
         *
         * @param SV_WC_Payment_Gateway_Plugin The plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin)
        {
        }
        /**
         * Enqueues the scripts and styles.
         *
         * @internal
         *
         * @since 5.0.0
         *
         * @param string $hook_suffix page hook suffix
         */
        public function enqueue_scripts($hook_suffix)
        {
        }
        /**
         * Enqueues the assets for the Edit Order screen.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order order object
         */
        protected function enqueue_edit_order_assets(\WC_Order $order)
        {
        }
        /** Capture Charge Feature ******************************************************/
        /**
         * Adds 'Capture charge' to the Orders screen bulk action select.
         *
         * @since 5.0.0
         */
        public function maybe_add_capture_charge_bulk_order_action()
        {
        }
        /**
         * Processes the 'Capture Charge' custom bulk action.
         *
         * @since 5.0.0
         */
        public function process_capture_charge_bulk_order_action()
        {
        }
        /**
         * Adds a "Capture Charge" action to the admin Order Edit screen
         *
         * @since 5.0.0
         *
         * @param array $actions available order actions
         * @return array
         */
        public function add_order_action_charge_action($actions)
        {
        }
        /**
         * Adds the capture charge button to the order UI.
         *
         * @internal
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         */
        public function add_capture_button($order)
        {
        }
        /**
         * Outputs the partial capture UI HTML.
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         * @param SV_WC_Payment_Gateway $gateway gateway instance
         */
        protected function output_partial_capture_html(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Processes a capture via AJAX.
         *
         * @internal
         *
         * @since 5.0.0
         */
        public function ajax_process_capture()
        {
        }
        /**
         * Gets the gateway object from an order.
         *
         * @since 5.0.0
         *
         * @param \WC_Order $order order object
         * @return SV_WC_Payment_Gateway
         */
        protected function get_order_gateway(\WC_Order $order)
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 5.0.0
         *
         * @return SV_WC_Payment_Gateway_Plugin the plugin instance
         */
        protected function get_plugin()
        {
        }
        /** Deprecated Methods ********************************************************************************************/
        /**
         * Capture a credit card charge for a prior authorization if this payment
         * method was used for the given order, the charge hasn't already been
         * captured, and the gateway supports issuing a capture request
         *
         * @since 5.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order|int $order the order identifier or order object
         * @param float|null $amount capture amount
         */
        protected function maybe_capture_charge($order, $amount = null)
        {
        }
        /**
         * Captures an order on status change to a "paid" status.
         *
         * @internal
         *
         * @since 5.0.1
         * @deprecated 5.3.0
         *
         * @param int $order_id order ID
         * @param string $old_status status being changed
         * @param string $new_status new order status
         */
        public function maybe_capture_paid_order($order_id, $old_status, $new_status)
        {
        }
        /**
         * Determines if an order is ready for capture.
         *
         * @since 5.0.0
         * @deprecated 5.3.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        protected function is_order_ready_for_capture(\WC_Order $order)
        {
        }
    }
    /**
     * The payment gateway privacy handler class.
     *
     * @since 5.1.4
     */
    class SV_WC_Payment_Gateway_Privacy extends \WC_Abstract_Privacy
    {
        /** @var SV_WC_Payment_Gateway_Plugin payment gateway plugin instance */
        private $plugin;
        /**
         * Constructs the class.
         *
         * @since 5.1.4
         *
         * @param SV_WC_Payment_Gateway_Plugin payment gateway plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_Plugin $plugin)
        {
        }
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.1.4
         */
        protected function add_hooks()
        {
        }
        /** Customer methods ******************************************************/
        /**
         * Adds the gateway data to customer data exports.
         *
         * @internal
         *
         * @since 5.1.4
         *
         * @param array $data customer personal data to export
         * @param \WC_Customer $customer customer object
         * @return array
         */
        public function add_export_customer_data($data, $customer)
        {
        }
        /**
         * Removes the gateway data during an order data erasure.
         *
         * @since 5.1.4
         *
         * @param array $response customer data erasure response
         * @param \WC_Customer $customer customer object
         * @return array
         */
        public function remove_customer_personal_data($response, $customer)
        {
        }
        /**
         * Handles the customer token exporter.
         *
         * @internal
         *
         * @param string $email_address email address for the user to export
         * @param int $page page offset - unused as we don't page tokens
         * @return array token export data
         */
        public function customer_tokens_exporter($email_address, $page)
        {
        }
        /**
         * Handles the customer token eraser.
         *
         * @internal
         *
         * @param string $email_address email address for the user to erase
         * @param int $page page offset - unused as we don't page tokens
         * @return array token eraser data
         */
        public function customer_tokens_eraser($email_address, $page)
        {
        }
        /** Order methods *********************************************************/
        /**
         * Adds the gateway data to order data exports.
         *
         * @internal
         *
         * @since 5.1.4
         *
         * @param array $data order personal data to export
         * @param \WC_Order $order order object
         * @return array
         */
        public function add_export_order_data($data, $order)
        {
        }
        /**
         * Removes the gateway data during an order data erasure.
         *
         * @since 5.1.4
         *
         * @param \WC_Order $order order object
         */
        public function remove_order_personal_data($order)
        {
        }
        /**
         * Gets the payment gateway plugin instance.
         *
         * @since 5.1.4
         *
         * @return SV_WC_Payment_Gateway_Plugin
         */
        protected function get_plugin()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\Handlers {
    /**
     * The base payment handler class.
     *
     * This acts as an abstracted handler for processing payments, regardless of their front-end or API implementation.
     * Both direct and hosted gateways' transactions end up as the same response object, which this class handles for order
     * updating.
     *
     * @see Abstract_Hosted_Payment_Handler
     *
     * @since 5.4.0
     */
    abstract class Abstract_Payment_Handler
    {
        /** the success result code */
        const RESULT_CODE_SUCCESS = 'success';
        /** the failure result code */
        const RESULT_CODE_FAILURE = 'failure';
        /** @var FrameworkBase\SV_WC_Payment_Gateway gateway instance */
        protected $gateway;
        /**
         * Constructs the class.
         *
         * @since 5.4.0
         *
         * @param FrameworkBase\SV_WC_Payment_Gateway $gateway
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway $gateway)
        {
        }
        /**
         * Adds any action and filter hooks required by the handler.
         *
         * @since 5.4.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Renders a custom held order message if available.
         *
         * @since 5.4.0
         *
         * @param string $text default text
         * @param \WC_Order $order order object
         *
         * @return mixed
         */
        public function maybe_render_held_order_received_text($text, $order)
        {
        }
        /**
         * Processes payment for an order.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @return array
         * @throws FrameworkBase\SV_WC_Plugin_Exception
         */
        public abstract function process_order_payment(\WC_Order $order);
        /**
         * Processes a gateway API payment response and handles the order accordingly.
         *
         * @since 5.4.0
         *
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response $response
         * @param \WC_Order $order
         * @throws FrameworkBase\SV_WC_Payment_Gateway_Exception for payment failures
         * @throws FrameworkBase\SV_WC_Plugin_Exception for other validation errors
         */
        protected function process_transaction_response(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response, \WC_Order $order)
        {
        }
        /**
         * Validates a transaction response & its order.
         *
         * This ensures duplicate or fraudulent responses aren't processed. Implementations can add exceptions to this for
         * things like invalid hashes, etc...
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response $response API response object
         * @throws FrameworkBase\SV_WC_API_Exception
         */
        protected function validate_transaction_response(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Handles actions after an approved transaction.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response $response API response object
         */
        protected function process_order_transaction_approved(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Handles actions after a held transaction.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response $response API response object
         */
        protected function process_order_transaction_held(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response)
        {
        }
        /**
         * Handles actions after a failed transaction.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param string $message failure message
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response response object
         */
        protected function process_order_transaction_failed(\WC_Order $order, $message = '', \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /** Order marking methods *****************************************************************************************/
        /**
         * Marks an order as paid.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Customer_Response|FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response API response object
         */
        public function mark_order_as_paid(\WC_Order $order, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Marks an order as approved.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param string $message message for the order note
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response API response object
         */
        public function mark_order_as_approved(\WC_Order $order, $message = '', \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Marks an order as held for review.
         *
         * Adds an order note and transitions to a held status.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param string $message order note message
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response
         */
        public function mark_order_as_held(\WC_Order $order, $message = '', \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Gets the order status used for held orders.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response API response object
         *
         * @return string
         */
        public function get_held_order_status(\WC_Order $order, $response = null)
        {
        }
        /**
         * Marks an order as failed.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param string $message order note message
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response
         */
        public function mark_order_as_failed(\WC_Order $order, $message = '', \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Marks an order as cancelled.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @param string $message order note message
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response
         */
        public function mark_order_as_cancelled(\WC_Order $order, $message, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /** Conditional methods *******************************************************************************************/
        /** Getter methods ************************************************************************************************/
        /**
         * Gets the gateway object.
         *
         * @since 5.4.0
         *
         * @return FrameworkBase\SV_WC_Payment_Gateway
         */
        public function get_gateway()
        {
        }
        /** Setter methods ************************************************************************************************/
    }
    /**
     * The base hosted payment handler.
     *
     * Gateways can use this for common hosted response handling.
     *
     * @since 5.4.0
     */
    abstract class Abstract_Hosted_Payment_Handler extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway\Handlers\Abstract_Payment_Handler
    {
        /**
         * Adds the action & filter hooks.
         *
         * @since 5.4.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Processes a new order payment.
         *
         * This simply gets the URL for a redirect.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @return array
         * @throws FrameworkBase\SV_WC_Plugin_Exception
         */
        public function process_order_payment(\WC_Order $order)
        {
        }
        /**
         * Renders the payment page.
         *
         * @since 5.4.0
         *
         * @param int $order_id order ID
         */
        public function payment_page($order_id)
        {
        }
        /**
         * Gets payment params for the given order object.
         *
         * @since 5.4.0
         *
         * @param \WC_Order $order order object
         * @return array
         */
        public function get_order_payment_params(\WC_Order $order)
        {
        }
        /**
         * Gets the URL for the hosted payment page or form.
         *
         * @since 5.4.0
         *
         * @return string
         */
        protected abstract function get_hosted_payment_url();
        /**
         * Gets the response handler URL.
         *
         * @since 5.4.0
         *
         * @return string
         */
        public function get_response_handler_url()
        {
        }
        /**
         * Handles a transaction response request via the wc-api endpoint.
         *
         * @since 5.4.0
         */
        public function handle_transaction_response_request()
        {
        }
        /**
         * Handles the response when processing is complete.
         *
         * @since 5.4.0
         *
         * @param \WC_Order|null $order order object, if any
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response API response object, if any
         */
        protected function do_transaction_response_complete(\WC_Order $order = null, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Handles the response when processing has failed.
         *
         * @since 5.4.0
         *
         * @param \WC_Order|null $order order object, if any
         * @param string $message error message, for logging
         * @param string $user_message user-facing message
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response API response object, if any
         */
        protected function do_transaction_response_failed(\WC_Order $order = null, $message = '', $user_message = '', \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Handles the response when the response data is invalid.
         *
         * This will trigger when there is no way to salvage the payment, i.e. when the response data is invalid.
         *
         * @since 5.4.0
         *
         * @param \WC_Order|null $order order object, if any
         * @param string $message error message, for logging
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response API response object, if any
         */
        protected function do_transaction_response_invalid(\WC_Order $order = null, $message = '', \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null)
        {
        }
        /**
         * Handles the final payment request response.
         *
         * This is the final step after all payment verification and processing, and runs regardless of the transaction
         * result.
         *
         * @since 5.4.0
         *
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Response|null $response
         * @param string $url
         */
        protected function do_transaction_request_response(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response $response = null, $url = '')
        {
        }
        /**
         * Logs a transaction response request.
         *
         * @since 5.4.0
         *
         * @param string $request data to log
         * @param string $message prefix message, like Request: or Response:
         */
        protected function log_transaction_response_request($request, $message = '')
        {
        }
        /**
         * Gets an order object from an API response.
         *
         * @since 5.4.0
         *
         * @param FrameworkBase\SV_WC_Payment_Gateway_API_Payment_Notification_Response $response
         * @return \WC_Order
         * @throws \Exception
         */
        protected function get_order_from_response(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Payment_Notification_Response $response)
        {
        }
        /**
         * Gets an API response object for the given data.
         *
         * @since 5.4.0
         *
         * @param array $request_response_data the current request response data
         * @return FrameworkBase\SV_WC_Payment_Gateway_API_Payment_Notification_Response API response object
         * @throws FrameworkBase\SV_WC_API_Exception
         */
        protected abstract function get_transaction_response($request_response_data);
        /** Conditional methods *******************************************************************************************/
        /**
         * Determines whether the payment response is IPN.
         *
         * @since 5.4.0
         *
         * @return bool
         */
        public function is_ipn()
        {
        }
        /**
         * Determines whether this is a redirect hosted form.
         *
         * @since 5.4.0
         *
         * @return bool
         */
        public function is_redirect()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * The plugin REST API handler class.
     *
     * This is responsible for hooking in to the WC REST API to add data for existing
     * routes and/or register new routes.
     *
     * @since 5.2.0
     */
    class REST_API
    {
        /** @var SV_WC_Plugin plugin instance */
        private $plugin;
        /**
         * Constructs the class.
         *
         * @since 5.2.0
         *
         * @param SV_WC_Plugin $plugin plugin instance
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin $plugin)
        {
        }
        /**
         * Adds the action and filter hooks.
         *
         * @since 5.2.0
         */
        protected function add_hooks()
        {
        }
        /**
         * Adds plugin data to the system status.
         *
         * @internal
         *
         * @since 5.2.0
         *
         * @param \WP_REST_Response $response REST API response object
         * @param array $system_status system status data
         * @param \WP_REST_Request $request REST API request object
         * @return \WP_REST_Response
         */
        public function add_system_status_data($response, $system_status, $request)
        {
        }
        /**
         * Gets the data to add to the WooCommerce REST API System Status response.
         *
         * Plugins can override this to add their own data.
         *
         * @since 5.2.0
         *
         * @return array
         */
        protected function get_system_status_data()
        {
        }
        /**
         * Registers new WC REST API routes.
         *
         * @since 5.2.0
         */
        public function register_routes()
        {
        }
        /**
         * Gets the plugin instance.
         *
         * @since 5.2.0
         *
         * @return SV_WC_Plugin|SV_WC_Payment_Gateway_Plugin
         */
        protected function get_plugin()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Payment_Gateway {
    /**
     * The payment gateway plugin REST API handler class.
     *
     * @see \SkyVerge\WooCommerce\PluginFramework\v5_10_12\REST_API
     *
     * @since 5.2.0
     */
    class REST_API extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\REST_API
    {
        /**
         * Gets the data to add to the WooCommerce REST API System Status response.
         *
         * Plugins can override this to add their own data.
         *
         * @see \SkyVerge\WooCommerce\PluginFramework\v5_10_12\REST_API::get_system_status_data()
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_system_status_data()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce Payment Gateway API Payment Notification Response
     *
     * Represents an IPN or redirect-back request response
     *
     * @since 2.1.0
     */
    interface SV_WC_Payment_Gateway_API_Payment_Notification_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Response
    {
        /**
         * Returns the order id associated with this response.
         *
         * @since 2.1.0
         *
         * @return int|null the order id associated with this response, or null if it could not be determined
         * @throws \Exception if there was a serious error finding the order id
         */
        public function get_order_id();
        /**
         * Returns true if the transaction was cancelled, false otherwise.
         *
         * @since 2.1.0
         *
         * @return bool true if cancelled, false otherwise
         */
        public function transaction_cancelled();
        /**
         * Returns the card PAN or checking account number, if available.
         *
         * @since 2.2.0
         *
         * @return string|null PAN or account number or null if not available
         */
        public function get_account_number();
        /**
         * Determines if this is an IPN response.
         *
         * Intentionally commented out to prevent fatal errors in older plugins
         *
         * @since 4.3.0
         *
         * @return bool
         */
        public function is_ipn();
    }
    /**
     * WooCommerce Payment Gateway API Payment eCheck Notification Response
     *
     * Represents an IPN or redirect-back eCheck request response
     *
     * @since 2.2.0
     */
    interface SV_WC_Payment_Gateway_API_Payment_Notification_eCheck_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Payment_Notification_Response
    {
        /**
         * Returns the account type, one of 'checking' or 'savings', if available.
         *
         * @since 2.2.0
         *
         * @return string account type, one of 'checking' or 'savings'
         */
        public function get_account_type();
        /**
         * Returns the check number used, if available.
         *
         * @since 2.2.0
         *
         * @return int|null check number, or null
         */
        public function get_check_number();
    }
    /**
     * WooCommerce Payment Gateway API Payment Credit Card Notification Response
     *
     * Represents an IPN or redirect-back credit card request response
     *
     * @since 2.2.0
     */
    interface SV_WC_Payment_Gateway_API_Payment_Notification_Credit_Card_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Payment_Notification_Response, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Authorization_Response
    {
        /**
         * Returns the card type, if available, i.e., 'visa', 'mastercard', etc.
         *
         * @see SV_WC_Payment_Gateway_Helper::payment_type_to_name()
         *
         * @since 2.2.0
         *
         * @return string|null card type or null if not available
         */
        public function get_card_type();
        /**
         * Returns the card expiration month with leading zero, if available.
         *
         * @since 2.2.0
         *
         * @return string|null card expiration month or null if not available
         */
        public function get_exp_month();
        /**
         * Returns the card expiration year with four digits, if available.
         *
         * @since 2.2.0
         *
         * @return string|null card expiration year or null if not available
         */
        public function get_exp_year();
    }
    /**
     * WooCommerce Payment Gateway API Payment Credit Card Notification Response
     *
     * Represents an IPN or redirect-back credit card request response
     *
     * @since 2.2.0
     */
    interface SV_WC_Payment_Gateway_Payment_Notification_Tokenization_Response extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Payment_Gateway_API_Create_Payment_Token_Response
    {
        /** Response Message Methods **********************************************/
        /**
         * Gets the overall result message for a new payment method tokenization
         * and/or customer creation.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_tokenization_message();
        /**
         * Gets the result message for a new customer creation.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_customer_created_message();
        /**
         * Gets the result message for a new payment method tokenization.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_payment_method_tokenized_message();
        /** Response Code Methods *************************************************/
        /**
         * Gets the result code for a new customer creation.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_customer_created_code();
        /**
         * Gets the result code for a new payment method tokenization.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_payment_method_tokenized_code();
        /**
         * Determines whether a new customer was created.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function customer_created();
        /**
         * Determines whether a new payment method was tokenized.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function payment_method_tokenized();
        /**
         * Determines whether the overall payment tokenization was successful.
         *
         * Gateways can check that the payment method was tokenized, and if a new
         * customer was created, that was successful.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function tokenization_successful();
        /**
         * Determines whether the customer was successfully created.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function customer_creation_successful();
        /**
         * Determines whether the payment method was successfully tokenized.
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function payment_method_tokenization_successful();
        /**
         * Gets any payment tokens that were edited on the hosted pay page.
         *
         * @since 5.0.0
         *
         * @return array|SV_WC_Payment_Gateway_Payment_Token[]
         */
        public function get_edited_payment_tokens();
        /**
         * Gets any payment tokens that were deleted on the hosted pay page.
         *
         * @since 5.0.0
         *
         * @return array|SV_WC_Payment_Gateway_Payment_Token[]
         */
        public function get_deleted_payment_tokens();
    }
    /**
     * Payment Gateway Exception - generic payment failure Exception
     */
    class SV_WC_Payment_Gateway_Exception extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin_Exception
    {
    }
    /**
     * SkyVerge Payment Gateway Helper Class
     *
     * The purpose of this class is to centralize common utility functions that
     * are commonly used in SkyVerge payment gateway plugins
     *
     * @since 3.0.0
     */
    class SV_WC_Payment_Gateway_Helper
    {
        /** @var string the Visa card type ID **/
        const CARD_TYPE_VISA = 'visa';
        /** @var string the MasterCard card type ID **/
        const CARD_TYPE_MASTERCARD = 'mastercard';
        /** @var string the American Express card type ID **/
        const CARD_TYPE_AMEX = 'amex';
        /** @var string the Diners Club card type ID **/
        const CARD_TYPE_DINERSCLUB = 'dinersclub';
        /** @var string the Discover card type ID **/
        const CARD_TYPE_DISCOVER = 'discover';
        /** @var string the JCB card type ID **/
        const CARD_TYPE_JCB = 'jcb';
        /** @var string the CarteBleue card type ID **/
        const CARD_TYPE_CARTEBLEUE = 'cartebleue';
        /** @var string the Maestro card type ID **/
        const CARD_TYPE_MAESTRO = 'maestro';
        /** @var string the Laser card type ID **/
        const CARD_TYPE_LASER = 'laser';
        /**
         * Perform standard luhn check.  Algorithm:
         *
         * 1. Double the value of every second digit beginning with the second-last right-hand digit.
         * 2. Add the individual digits comprising the products obtained in step 1 to each of the other digits in the original number.
         * 3. Subtract the total obtained in step 2 from the next higher number ending in 0.
         * 4. This number should be the same as the last digit (the check digit). If the total obtained in step 2 is a number ending in zero (30, 40 etc.), the check digit is 0.
         *
         * @since 3.0.0
         * @param string $account_number the credit card number to check
         * @return bool true if $account_number passes the check, false otherwise
         */
        public static function luhn_check($account_number)
        {
        }
        /**
         * Normalize a card type to a standard type ID and account for variations.
         *
         * @since 4.5.0
         * @param string $card_type the card type to normalize
         * @return string
         */
        public static function normalize_card_type($card_type)
        {
        }
        /**
         * Determines the credit card type from a given account number (only first 4 required).
         *
         * @since 4.0.0
         *
         * @param string $account_number the credit card account number
         * @return string the credit card type
         */
        public static function card_type_from_account_number($account_number)
        {
        }
        /**
         * Translates a credit card type or bank account name to a full name,
         * e.g. 'mastercard' => 'MasterCard' or 'savings' => 'eCheck'
         *
         * @since 4.0.0
         * @param string $payment_type the credit card or bank type, ie 'mastercard', 'amex', 'checking'
         * @return string the credit card or bank account name, ie 'MasterCard', 'American Express', 'Checking Account'
         */
        public static function payment_type_to_name($payment_type)
        {
        }
        /**
         * Gets the known card types and their variations.
         *
         * Returns the card types in the format:
         *
         * 'mastercard' {
         *     'name'       => 'MasterCard',
         *     'variations' => array( 'mc' ),
         * }
         *
         * @since 4.5.0
         *
         * @return array
         */
        public static function get_card_types()
        {
        }
        /**
         * Formats the given expiration year to include the last two digits only.
         *
         * @since 5.9.0
         *
         * @param string $exp_year a credit card expiration year
         * @return string
         */
        public static function format_exp_year($exp_year)
        {
        }
    }
    /**
     * # WordPress Admin Message Handler Class
     *
     * This class provides a reusable wordpress admin messaging facility for setting
     * and displaying messages and error messages across admin page requests without
     * resorting to passing the messages as query vars.
     *
     * ## Usage
     *
     * To use simple instantiate the class then set one or more messages:
     *
     * `
     * $admin_message_handler = new WP_Admin_Message_Handler( __FILE__ );
     * $admin_message_handler->add_message( 'Hello World!' );
     * `
     *
     * Then show the messages wherever you need, either with the built-in method
     * or by writing your own:
     *
     * `$admin_message_handler->show_messages();`
     *
     * @version 1.0.1
     */
    class SV_WP_Admin_Message_Handler
    {
        /** transient message prefix */
        const MESSAGE_TRANSIENT_PREFIX = '_wp_admin_message_';
        /** the message id GET name */
        const MESSAGE_ID_GET_NAME = 'wpamhid';
        /** @var string unique message identifier, defaults to __FILE__ unless otherwise set */
        private $message_id;
        /** @var array array of messages */
        private $messages = array();
        /** @var array array of error messages */
        private $errors = array();
        /** @var array array of warning messages */
        private $warnings = array();
        /** @var array array of info messages */
        private $infos = array();
        /**
         * Construct and initialize the admin message handler class
         *
         * @since 1.0.0
         * @param string $message_id optional message id.  Best practice is to set
         *        this to a unique identifier based on the client plugin, such as __FILE__
         */
        public function __construct($message_id = null)
        {
        }
        /**
         * Persist messages
         *
         * @since 1.0.0
         * @return boolean true if any messages were set, false otherwise
         */
        public function set_messages()
        {
        }
        /**
         * Loads messages
         *
         * @since 1.0.0
         */
        public function load_messages()
        {
        }
        /**
         * Clear messages and errors
         *
         * @since 1.0.0
         * @param string $id the messages identifier
         */
        public function clear_messages($id)
        {
        }
        /**
         * Add an error message.
         *
         * @since 1.0.0
         * @param string $error error message
         */
        public function add_error($error)
        {
        }
        /**
         * Adds a warning message.
         *
         * @since 5.1.0
         *
         * @param string $message warning message to add
         */
        public function add_warning($message)
        {
        }
        /**
         * Adds a info message.
         *
         * @since 5.1.0
         *
         * @param string $message info message to add
         */
        public function add_info($message)
        {
        }
        /**
         * Add a message.
         *
         * @since 1.0.0
         * @param string $message the message to add
         */
        public function add_message($message)
        {
        }
        /**
         * Get error count.
         *
         * @since 1.0.0
         * @return int error message count
         */
        public function error_count()
        {
        }
        /**
         * Gets the warning message count.
         *
         * @since 5.1.0
         *
         * @return int warning message count
         */
        public function warning_count()
        {
        }
        /**
         * Gets the info message count.
         *
         * @since 5.1.0
         *
         * @return int info message count
         */
        public function info_count()
        {
        }
        /**
         * Get message count.
         *
         * @since 1.0.0
         * @return int message count
         */
        public function message_count()
        {
        }
        /**
         * Get error messages
         *
         * @since 1.0.0
         * @return array of error message strings
         */
        public function get_errors()
        {
        }
        /**
         * Get an error message
         *
         * @since 1.0.0
         * @param int $index the error index
         * @return string the error message
         */
        public function get_error($index)
        {
        }
        /**
         * Gets all warning messages.
         *
         * @since 5.1.0
         *
         * @return array
         */
        public function get_warnings()
        {
        }
        /**
         * Gets a specific warning message.
         *
         * @since 5.1.0
         *
         * @param int $index warning message index
         * @return string
         */
        public function get_warning($index)
        {
        }
        /**
         * Gets all info messages.
         *
         * @since 5.1.0
         *
         * @return array
         */
        public function get_infos()
        {
        }
        /**
         * Gets a specific info message.
         *
         * @since 5.0.0
         *
         * @param int $index info message index
         * @return string
         */
        public function get_info($index)
        {
        }
        /**
         * Get messages
         *
         * @since 1.0.0
         * @return array of message strings
         */
        public function get_messages()
        {
        }
        /**
         * Get a message
         *
         * @since 1.0.0
         * @param int $index the message index
         * @return string the message
         */
        public function get_message($index)
        {
        }
        /**
         * Render the errors and messages.
         *
         * @since 1.0.0
         * @param array $params {
         *     Optional parameters.
         *
         *     @type array $capabilities Any user capabilities to check if the user is allowed to view the messages,
         *                               default: `manage_woocommerce`
         * }
         */
        public function show_messages($params = array())
        {
        }
        /**
         * Redirection hook which persists messages into session data.
         *
         * @since 1.0.0
         * @param string $location the URL to redirect to
         * @param int $status the http status
         * @return string the URL to redirect to
         */
        public function redirect($location, $status)
        {
        }
        /**
         * Generate a unique id to identify the messages
         *
         * @since 1.0.0
         * @return string unique identifier
         */
        protected function get_message_id()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Settings_API {
    /**
     * The base setting object.
     *
     * @since 5.7.0
     */
    class Setting
    {
        /** @var string the string setting type */
        const TYPE_STRING = 'string';
        /** @var string the URL setting type */
        const TYPE_URL = 'url';
        /** @var string the email setting type */
        const TYPE_EMAIL = 'email';
        /** @var string the integer setting type */
        const TYPE_INTEGER = 'integer';
        /** @var string the float setting type */
        const TYPE_FLOAT = 'float';
        /** @var string the boolean setting type */
        const TYPE_BOOLEAN = 'boolean';
        /** @var string unique setting ID */
        protected $id;
        /** @var string setting type */
        protected $type;
        /** @var string setting name */
        protected $name;
        /** @var string setting description */
        protected $description;
        /** @var bool whether the setting holds an array of multiple values */
        protected $is_multi = false;
        /** @var array valid setting options */
        protected $options = [];
        /** @var int|float|string|bool|array setting default value */
        protected $default;
        /** @var int|float|string|bool|array setting current value */
        protected $value;
        /** @var Control control object */
        protected $control;
        /** Getter Methods ************************************************************************************************/
        /**
         * Gets the setting ID.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Gets the setting type.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * Gets the setting name.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Gets the setting description.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * Returns whether the setting holds an array of multiple values.
         *
         * @since 5.7.0
         *
         * @return bool
         */
        public function is_is_multi()
        {
        }
        /**
         * Gets the setting options.
         *
         * @since 5.7.0
         *
         * @return array
         */
        public function get_options()
        {
        }
        /**
         * Gets the setting default value.
         *
         * @since 5.7.0
         *
         * @return array|bool|float|int|string|null
         */
        public function get_default()
        {
        }
        /**
         * Gets the setting current value.
         *
         * @since 5.7.0
         *
         * @return array|bool|float|int|string
         */
        public function get_value()
        {
        }
        /**
         * Gets the setting control.
         *
         * @since 5.7.0
         *
         * @return Control
         */
        public function get_control()
        {
        }
        /** Setter Methods ************************************************************************************************/
        /**
         * Sets the setting ID.
         *
         * @since 5.7.0
         *
         * @param string $id
         */
        public function set_id($id)
        {
        }
        /**
         * Sets the setting type.
         *
         * @since 5.7.0
         *
         * @param string $type
         */
        public function set_type($type)
        {
        }
        /**
         * Sets the setting name.
         *
         * @since 5.7.0
         *
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * Sets the setting description.
         *
         * @since 5.7.0
         *
         * @param string $description
         */
        public function set_description($description)
        {
        }
        /**
         * Sets whether the setting holds an array of multiple values.
         *
         * @since 5.7.0
         *
         * @param bool $is_multi
         */
        public function set_is_multi($is_multi)
        {
        }
        /**
         * Sets the setting options.
         *
         * @since 5.7.0
         *
         * @param array $options
         */
        public function set_options($options)
        {
        }
        /**
         * Sets the setting default value.
         *
         * @since 5.7.0
         *
         * @param array|bool|float|int|string|null $value default value to set
         */
        public function set_default($value)
        {
        }
        /**
         * Sets the setting current value.
         *
         * @since 5.7.0
         *
         * @param array|bool|float|int|string $value
         */
        public function set_value($value)
        {
        }
        /**
         * Sets the setting control.
         *
         * @since 5.7.0
         *
         * @param Control $control
         */
        public function set_control($control)
        {
        }
        /**
         * Sets the setting current value, after validating it against the type and, if set, options.
         *
         * @since 5.7.0
         *
         * @param array|bool|float|int|string $value
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function update_value($value)
        {
        }
        /**
         * Validates the setting value.
         *
         * @since 5.7.0
         *
         * @param array|bool|float|int|string $value
         * @return bool
         */
        public function validate_value($value)
        {
        }
        /**
         * Validates a string value.
         *
         * @since 5.7.0
         *
         * @param array|bool|float|int|string $value value to validate
         * @return bool
         */
        protected function validate_string_value($value)
        {
        }
        /**
         * Validates a URL value.
         *
         * @since 5.7.0
         *
         * @param array|bool|float|int|string $value value to validate
         * @return bool
         */
        protected function validate_url_value($value)
        {
        }
        /**
         * Validates an email value.
         *
         * @since 5.7.0
         *
         * @param mixed $value value to validate
         * @return bool
         */
        protected function validate_email_value($value)
        {
        }
        /**
         * Validates an integer value.
         *
         * @since 5.7.0
         *
         * @param mixed $value value to validate
         * @return bool
         */
        public function validate_integer_value($value)
        {
        }
        /**
         * Validates a float value.
         *
         * @since 5.7.0
         *
         * @param mixed $value value to validate
         * @return bool
         */
        protected function validate_float_value($value)
        {
        }
        /**
         * Validates a boolean value.
         *
         * @since 5.7.0
         *
         * @param mixed $value value to validate
         * @return bool
         */
        protected function validate_boolean_value($value)
        {
        }
    }
    /**
     * The base settings handler.
     *
     * @since 5.7.0
     */
    abstract class Abstract_Settings
    {
        /** @var string settings ID */
        public $id;
        /** @var Setting[] registered settings */
        protected $settings = [];
        /**
         * Constructs the class.
         *
         * @since 5.7.0
         *
         * @param string $id the ID of plugin or payment gateway that owns these settings
         */
        public function __construct($id)
        {
        }
        /**
         * Registers the settings.
         *
         * Plugins or payment gateways should overwrite this method to register their settings.
         *
         * @since 5.7.0
         */
        protected abstract function register_settings();
        /**
         * Loads the values for all registered settings.
         *
         * @since 5.7.0
         */
        protected function load_settings()
        {
        }
        /**
         * Registers a setting.
         *
         * @param string $id unique setting ID
         * @param string $type setting type
         * @param array $args setting arguments
         * @return bool
         */
        public function register_setting($id, $type, array $args = [])
        {
        }
        /**
         * Unregisters a setting.
         *
         * @since 5.7.0
         *
         * @param string $id setting ID to unregister
         */
        public function unregister_setting($id)
        {
        }
        /**
         * Registers a control for a setting.
         *
         * @since 5.7.0
         *
         * @param string $setting_id the setting ID
         * @param string $type the control type
         * @param array $args optional args for the control
         * @return bool
         */
        public function register_control($setting_id, $type, array $args = [])
        {
        }
        /**
         * Gets the settings ID.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Gets registered settings.
         *
         * It returns all settings by default, but you can pass an array of IDs to filter the results.
         *
         * @param string[] $ids setting IDs to get
         * @return Setting[]
         */
        public function get_settings(array $ids = [])
        {
        }
        /**
         * Gets a setting object.
         *
         * @since 5.7.0
         *
         * @param string $id setting ID to get
         * @return Setting|null
         */
        public function get_setting($id)
        {
        }
        /**
         * Gets the stored value for a setting.
         *
         * Optionally, will return the setting's default value if nothing is stored.
         *
         * @since 5.7.0
         *
         * @param string $setting_id setting ID
         * @param bool $with_default whether to return the default value if nothing is stored
         * @return array|bool|float|int|string
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function get_value($setting_id, $with_default = true)
        {
        }
        /**
         * Updates the stored value for a setting.
         *
         * @since 5.7.0
         *
         * @param string $setting_id setting ID
         * @param array|bool|float|int|string $value
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function update_value($setting_id, $value)
        {
        }
        /**
         * Deletes the stored value for a setting.
         *
         * @since 5.7.0
         *
         * @param string $setting_id setting ID
         * @return bool
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function delete_value($setting_id)
        {
        }
        /**
         * Saves registered settings in their current state.
         *
         * It saves all settings by default, but you can pass a setting ID to save a specific setting.
         *
         * @since 5.7.0
         *
         * @param string $setting_id setting ID
         */
        public function save($setting_id = '')
        {
        }
        /**
         * Converts the value of a setting to be stored in an option.
         *
         * @since 5.7.0
         *
         * @param Setting $setting
         * @return mixed
         */
        protected function get_value_for_database(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\Settings_API\Setting $setting)
        {
        }
        /**
         * Converts the stored value of a setting to the proper setting type.
         *
         * @since 5.7.0
         *
         * @param mixed $value the value stored in an option
         * @param Setting $setting
         * @return mixed
         */
        protected function get_value_from_database($value, \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Settings_API\Setting $setting)
        {
        }
        /**
         * Gets the list of valid setting types.
         *
         * @since 5.7.0
         *
         * @return string[]
         */
        public function get_setting_types()
        {
        }
        /**
         * Gets the list of valid control types.
         *
         * @since 5.7.0
         *
         * @return string[]
         */
        public function get_control_types()
        {
        }
        /**
         * Returns the valid control types for a setting.
         *
         * @since 5.7.0
         *
         * @param Setting $setting setting object
         * @return string[]
         */
        public function get_setting_control_types($setting)
        {
        }
        /**
         * Gets the prefix for db option names.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_option_name_prefix()
        {
        }
    }
    /**
     * The base control object.
     *
     * @since 5.7.0
     */
    class Control
    {
        /** @var string the text control type */
        const TYPE_TEXT = 'text';
        /** @var string the textarea control type */
        const TYPE_TEXTAREA = 'textarea';
        /** @var string the number control type */
        const TYPE_NUMBER = 'number';
        /** @var string the email control type */
        const TYPE_EMAIL = 'email';
        /** @var string the password control type */
        const TYPE_PASSWORD = 'password';
        /** @var string the date control type */
        const TYPE_DATE = 'date';
        /** @var string the checkbox control type */
        const TYPE_CHECKBOX = 'checkbox';
        /** @var string the radio control type */
        const TYPE_RADIO = 'radio';
        /** @var string the select control type */
        const TYPE_SELECT = 'select';
        /** @var string the file control type */
        const TYPE_FILE = 'file';
        /** @var string the color control type */
        const TYPE_COLOR = 'color';
        /** @var string the range control type */
        const TYPE_RANGE = 'range';
        /** @var string|null the setting ID to which this control belongs */
        protected $setting_id;
        /** @var string|null the control type */
        protected $type;
        /** @var string the control name */
        protected $name = '';
        /** @var string the control description */
        protected $description = '';
        /** @var array the control options, as $option => $label  */
        protected $options = [];
        /** Getter methods ************************************************************************************************/
        /**
         * The setting ID to which this control belongs.
         *
         * @since 5.7.0
         *
         * @return null|string
         */
        public function get_setting_id()
        {
        }
        /**
         * Gets the control type.
         *
         * @since 5.7.0
         *
         * @return null|string
         */
        public function get_type()
        {
        }
        /**
         * Gets the control name.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Gets the control description.
         *
         * @since 5.7.0
         *
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * Gets the control options.
         *
         * As $option => $label for display.
         *
         * @since 5.7.0
         *
         * @return array
         */
        public function get_options()
        {
        }
        /** Setter methods ************************************************************************************************/
        /**
         * Sets the setting ID.
         *
         * @since 5.7.0
         *
         * @param string $value setting ID to set
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function set_setting_id($value)
        {
        }
        /**
         * Sets the type.
         *
         * @since 5.7.0
         *
         * @param string $value setting ID to set
         * @param string[] $valid_types allowed control types
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function set_type($value, array $valid_types = [])
        {
        }
        /**
         * Sets the name.
         *
         * @since 5.7.0
         *
         * @param string $value control name to set
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function set_name($value)
        {
        }
        /**
         * Sets the description.
         *
         * @since 5.7.0
         *
         * @param string $value control description to set
         * @throws Framework\SV_WC_Plugin_Exception
         */
        public function set_description($value)
        {
        }
        /**
         * Sets the options.
         *
         * @since 5.7.0
         *
         * @param array $options options to set
         * @param array $valid_options valid option keys to check against
         */
        public function set_options(array $options, array $valid_options = [])
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\Addresses {
    /**
     * The base address data class.
     *
     * This serves as a standard address object to be passed around by plugins whenever dealing with address data.
     * Eliminates the need to rely on WooCommerce's address arrays.
     *
     * @since 5.3.0
     */
    class Address
    {
        /** @var string line 1 of the street address */
        protected $line_1 = '';
        /** @var string line 2 of the street address */
        protected $line_2 = '';
        /** @var string line 3 of the street address */
        protected $line_3 = '';
        /** @var string address locality (city) */
        protected $locality = '';
        /** @var string address region (state) */
        protected $region = '';
        /** @var string address country */
        protected $country = '';
        /** @var string address postcode */
        protected $postcode = '';
        /** Getter methods ************************************************************************************************/
        /**
         * Gets line 1 of the street address.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_line_1()
        {
        }
        /**
         * Gets line 2 of the street address.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_line_2()
        {
        }
        /**
         * Gets line 3 of the street address.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_line_3()
        {
        }
        /**
         * Gets the locality or city.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_locality()
        {
        }
        /**
         * Gets the region or state.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_region()
        {
        }
        /**
         * Gets the country.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_country()
        {
        }
        /**
         * Gets the postcode.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_postcode()
        {
        }
        /**
         * Gets the hash representation of this address.
         *
         * @see Address::get_hash_data()
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_hash()
        {
        }
        /**
         * Gets the data used to generate a hash for the address.
         *
         * @since 5.3.0
         *
         * @return string[]
         */
        protected function get_hash_data()
        {
        }
        /** Setter methods ************************************************************************************************/
        /**
         * Sets line 1 of the street address.
         *
         * @since 5.3.0
         *
         * @param string $value line 1 value
         */
        public function set_line_1($value)
        {
        }
        /**
         * Sets line 2 of the street address.
         *
         * @since 5.3.0
         *
         * @param string $value line 2 value
         */
        public function set_line_2($value)
        {
        }
        /**
         * Gets line 3 of the street address.
         *
         * @since 5.3.0
         *
         * @param string $value line 3 value
         */
        public function set_line_3($value)
        {
        }
        /**
         * Gets the locality or city.
         *
         * @since 5.3.0
         *
         * @param string $value locality value
         */
        public function set_locality($value)
        {
        }
        /**
         * Gets the region or state.
         *
         * @since 5.3.0
         *
         * @param string $value region value
         */
        public function set_region($value)
        {
        }
        /**
         * Sets the country.
         *
         * @since 5.3.0
         *
         * @param string $value country value
         */
        public function set_country($value)
        {
        }
        /**
         * Sets the postcode.
         *
         * @since 5.3.0
         *
         * @param string $value postcode value
         */
        public function set_postcode($value)
        {
        }
    }
    /**
     * The customer address data class.
     *
     * Adds customer-specific data to a base address, as used for a billing or shipping address that can include first and last name.
     *
     * @since 5.3.0
     */
    class Customer_Address extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\Addresses\Address
    {
        /** @var string customer first name */
        protected $first_name = '';
        /** @var string customer last name */
        protected $last_name = '';
        /** Getter Methods ************************************************************************************************/
        /**
         * Gets the customer first name.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_first_name()
        {
        }
        /**
         * Gets the customer first name.
         *
         * @since 5.3.0
         *
         * @return string
         */
        public function get_last_name()
        {
        }
        /**
         * Gets the data used to generate a hash for the address.
         *
         * @see Address::get_hash_data()
         *
         * @since 5.3.0
         *
         * @return string[]
         */
        protected function get_hash_data()
        {
        }
        /** Setter Methods ************************************************************************************************/
        /**
         * Sets the customer first name.
         *
         * @since 5.3.0
         *
         * @param string $value first name value
         */
        public function set_first_name($value)
        {
        }
        /**
         * Sets the customer last name.
         *
         * @since 5.3.0
         *
         * @param string $value first name value
         */
        public function set_last_name($value)
        {
        }
        /**
         * Sets the full address based on a WooCommerce order.
         *
         * @since 5.3.0
         *
         * @param \WC_Order $order WooCommerce order object
         * @param string $type address type, like billing or shipping
         */
        public function set_from_order(\WC_Order $order, $type = 'billing')
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * WooCommerce data compatibility class.
     *
     * @since 4.6.0
     * @deprecated 5.5.0
     */
    abstract class SV_WC_Data_Compatibility
    {
        /** @deprecated 5.5.0 backwards compatibility property map */
        protected static $compat_props = [];
        /**
         * Gets an object property.
         *
         * @see \WC_Data::get_prop()
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Data $object the data object, likely \WC_Order or \WC_Product
         * @param string $prop the property name
         * @param string $context if 'view' then the value will be filtered
         * @param array $compat_props compatibility properties unused since 5.5.0
         * @return null|mixed
         */
        public static function get_prop($object, $prop, $context = 'edit', $compat_props = [])
        {
        }
        /**
         * Sets an object's properties.
         *
         * Note that this does not save any data to the database.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Data $object the data object, likely \WC_Order or \WC_Product
         * @param array $props the new properties as $key => $value
         * @param array $compat_props compatibility properties, unused since 5.5.0
         * @return bool|\WP_Error
         */
        public static function set_props($object, $props, $compat_props = [])
        {
        }
        /**
         * Gets an object's stored meta value.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Data $object the data object, likely \WC_Order or \WC_Product
         * @param string $key the meta key
         * @param bool $single whether to get the meta as a single item. Defaults to `true`
         * @param string $context if 'view' then the value will be filtered
         * @return mixed
         */
        public static function get_meta($object, $key = '', $single = true, $context = 'edit')
        {
        }
        /**
         * Stores an object meta value.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Data $object the data object, likely \WC_Order or \WC_Product
         * @param string $key the meta key
         * @param string $value the meta value
         * @param bool $unique optional: whether the meta should be unique
         */
        public static function add_meta_data($object, $key, $value, $unique = false)
        {
        }
        /**
         * Updates an object's stored meta value.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Data $object the data object, likely \WC_Order or \WC_Product
         * @param string $key the meta key
         * @param string $value the meta value
         * @param int|string $meta_id optional: the specific meta ID to update
         */
        public static function update_meta_data($object, $key, $value, $meta_id = '')
        {
        }
        /**
         * Deletes an object's stored meta value.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Data $object the data object, likely \WC_Order or \WC_Product
         * @param string $key the meta key
         */
        public static function delete_meta_data($object, $key)
        {
        }
    }
    /**
     * WooCommerce product compatibility class.
     *
     * @since 4.6.0
     */
    class SV_WC_Product_Compatibility extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Data_Compatibility
    {
        /**
         * Gets a product property.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $object the product object
         * @param string $prop the property name
         * @param string $context if 'view' then the value will be filtered
         * @param array $compat_props compatibility arguments, unused since 5.5.0
         * @return mixed
         */
        public static function get_prop($object, $prop, $context = 'edit', $compat_props = [])
        {
        }
        /**
         * Sets an products's properties.
         *
         * Note that this does not save any data to the database.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $object the product object
         * @param array $props the new properties as $key => $value
         * @param array $compat_props compatibility arguments, unused since 5.5.0
         * @return bool|\WP_Error
         */
        public static function set_props($object, $props, $compat_props = [])
        {
        }
        /**
         * Gets a product's parent product.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object
         * @return \WC_Product|bool
         */
        public static function get_parent(\WC_Product $product)
        {
        }
        /**
         * Updates product stock.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object
         * @param null|int $amount optional: the new stock quantity
         * @param string $mode optional: can be set (default), add, or subtract
         * @return int
         */
        public static function wc_update_product_stock(\WC_Product $product, $amount = null, $mode = 'set')
        {
        }
        /**
         * Gets the product price HTML from text.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object
         * @return string
         */
        public static function wc_get_price_html_from_text(\WC_Product $product)
        {
        }
        /**
         * Gets the product price including tax.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object
         * @param int $qty optional: the quantity
         * @param string $price optional: the product price
         * @return string
         */
        public static function wc_get_price_including_tax(\WC_Product $product, $qty = 1, $price = '')
        {
        }
        /**
         * Gets the product price excluding tax.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object
         * @param int $qty optional: The quantity
         * @param string $price optional: the product price
         * @return string
         */
        public static function wc_get_price_excluding_tax(\WC_Product $product, $qty = 1, $price = '')
        {
        }
        /**
         * Gets the product price to display.
         *
         * @since 4.6.0
         *
         * @param \WC_Product $product the product object
         * @param string $price optional: the product price
         * @param int $qty optional: the quantity
         * @return string
         */
        public static function wc_get_price_to_display(\WC_Product $product, $price = '', $qty = 1)
        {
        }
        /**
         * Gets the product category list.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object
         * @param string $sep optional: the list separator
         * @param string $before optional: to display before the list
         * @param string $after optional: to display after the list
         * @return string
         */
        public static function wc_get_product_category_list(\WC_Product $product, $sep = ', ', $before = '', $after = '')
        {
        }
        /**
         * Formats the product rating HTML.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Product $product the product object, unused since 5.5.0
         * @param null|string $rating optional: the product rating
         * @return string
         */
        public static function wc_get_rating_html(\WC_Product $product, $rating = null)
        {
        }
    }
    /**
     * WooCommerce order compatibility class.
     *
     * @since 4.6.0
     */
    class SV_WC_Order_Compatibility extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Data_Compatibility
    {
        /**
         * Gets an order's created date.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param string $context if 'view' then the value will be filtered
         *
         * @return \WC_DateTime|null
         */
        public static function get_date_created(\WC_Order $order, $context = 'edit')
        {
        }
        /**
         * Gets an order's last modified date.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param string $context if 'view' then the value will be filtered
         *
         * @return \WC_DateTime|null
         */
        public static function get_date_modified(\WC_Order $order, $context = 'edit')
        {
        }
        /**
         * Gets an order's paid date.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param string $context if 'view' then the value will be filtered
         *
         * @return \WC_DateTime|null
         */
        public static function get_date_paid(\WC_Order $order, $context = 'edit')
        {
        }
        /**
         * Gets an order's completed date.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param string $context if 'view' then the value will be filtered
         *
         * @return \WC_DateTime|null
         */
        public static function get_date_completed(\WC_Order $order, $context = 'edit')
        {
        }
        /**
         * Gets an order date.
         *
         * This should only be used to retrieve WC core date properties.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param string $type type of date to get
         * @param string $context if 'view' then the value will be filtered
         *
         * @return \WC_DateTime|null
         */
        public static function get_date_prop(\WC_Order $order, $type, $context = 'edit')
        {
        }
        /**
         * Gets an order property.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $object the order object
         * @param string $prop the property name
         * @param string $context if 'view' then the value will be filtered
         * @param array $compat_props compatibility arguments, unused since 5.5.0
         * @return mixed
         */
        public static function get_prop($object, $prop, $context = 'edit', $compat_props = [])
        {
        }
        /**
         * Sets an order's properties.
         *
         * Note that this does not save any data to the database.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $object the order object
         * @param array $props the new properties as $key => $value
         * @param array $compat_props compatibility arguments, unused since 5.5.0
         * @return bool|\WP_Error
         */
        public static function set_props($object, $props, $compat_props = [])
        {
        }
        /**
         * Adds a coupon to an order item.
         *
         * Order item CRUD compatibility method to add a coupon to an order.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order the order object
         * @param array $code the coupon code
         * @param int $discount the discount amount.
         * @param int $discount_tax the discount tax amount.
         * @return int the order item ID
         */
        public static function add_coupon(\WC_Order $order, $code = [], $discount = 0, $discount_tax = 0)
        {
        }
        /**
         * Adds a fee to an order.
         *
         * Order item CRUD compatibility method to add a fee to an order.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order the order object
         * @param object $fee the fee to add
         * @return int the order item ID
         */
        public static function add_fee(\WC_Order $order, $fee)
        {
        }
        /**
         * Adds shipping line to order.
         *
         * Order item CRUD compatibility method to add a shipping line to an order.
         *
         * @since 4.7.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param \WC_Shipping_Rate $shipping_rate shipping rate to add
         * @return int the order item ID
         */
        public static function add_shipping(\WC_Order $order, $shipping_rate)
        {
        }
        /**
         * Adds tax line to an order.
         *
         * Order item CRUD compatibility method to add a tax line to an order.
         *
         * @since 4.7.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @param int $tax_rate_id tax rate ID
         * @param int|float $tax_amount cart tax amount
         * @param int|float $shipping_tax_amount shipping tax amount
         * @return int order item ID
         * @throws \WC_Data_Exception
         *
         */
        public static function add_tax(\WC_Order $order, $tax_rate_id, $tax_amount = 0, $shipping_tax_amount = 0)
        {
        }
        /**
         * Updates an order coupon.
         *
         * Order item CRUD compatibility method to update an order coupon.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order the order object
         * @param int|\WC_Order_Item $item the order item ID
         * @param array $args {
         *     The coupon item args.
         *
         *     @type string $code         the coupon code
         *     @type float  $discount     the coupon discount amount
         *     @type float  $discount_tax the coupon discount tax amount
         * }
         * @return int|bool the order item ID or false on failure
         * @throws \WC_Data_Exception
         */
        public static function update_coupon(\WC_Order $order, $item, $args)
        {
        }
        /**
         * Updates an order fee.
         *
         * Order item CRUD compatibility method to update an order fee.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order the order object
         * @param int|\WC_Order_Item $item the order item ID
         * @param array $args {
         *     The fee item args.
         *
         *     @type string $name       the fee name
         *     @type string $tax_class  the fee's tax class
         *     @type float  $line_total the fee total amount
         *     @type float  $line_tax   the fee tax amount
         * }
         * @return int|bool the order item ID or false on failure
         * @throws \WC_Data_Exception
         */
        public static function update_fee(\WC_Order $order, $item, $args)
        {
        }
        /**
         * Reduces stock levels for products in order.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order the order object
         */
        public static function reduce_stock_levels(\WC_Order $order)
        {
        }
        /**
         * Updates total product sales count for a given order.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order the order object
         */
        public static function update_total_sales_counts(\WC_Order $order)
        {
        }
        /**
         * Determines if an order has an available shipping address.
         *
         * @since 4.6.1
         * @deprecated 5.5.0
         *
         * @param \WC_Order $order order object
         * @return bool
         */
        public static function has_shipping_address(\WC_Order $order)
        {
        }
        /**
         * Gets the formatted meta data for an order item.
         *
         * @since 4.6.5
         *
         * @param \WC_Order_Item $item order item object
         * @param string $hide_prefix prefix for meta that is considered hidden
         * @param bool $include_all whether to include all meta (attributes, etc...), or just custom fields
         * @return array $item_meta {
         *     @type string $label meta field label
         *     @type mixed $value meta value
         * }
         */
        public static function get_item_formatted_meta_data($item, $hide_prefix = '_', $include_all = false)
        {
        }
        /**
         * Gets the admin Edit screen URL for an order.
         *
         * @since 5.0.1
         *
         * @param \WC_Order $order order object
         * @return string
         */
        public static function get_edit_order_url(\WC_Order $order)
        {
        }
    }
    /**
     * Extends the DateTime object for backwards compatibility.
     *
     * @since 4.6.0
     * @deprecated 5.5.0
     */
    class SV_WC_DateTime extends \DateTime
    {
        /**
         * SV_WC_DateTime constructor.
         *
         * @since 5.5.0
         * @deprecated 5.5.0
         *
         * @param string $time
         * @param \DateTimeZone|null $timezone
         * @throws \Exception
         */
        public function __construct($time = 'now', \DateTimeZone $timezone = null)
        {
        }
        /**
         * Outputs an ISO 8601 date string in local timezone.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Gets the UTC timestamp.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @return int
         */
        public function getTimestamp()
        {
        }
        /**
         * Gets the timestamp with the WordPress timezone offset added or subtracted.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @return int
         */
        public function getOffsetTimestamp()
        {
        }
        /**
         * Gets a date based on the offset timestamp.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param string $format date format
         * @return string
         */
        public function date($format)
        {
        }
        /**
         * Gets a localised date based on offset timestamp.
         *
         * @since 4.6.0
         * @deprecated 5.5.0
         *
         * @param string $format date format
         * @return string
         */
        public function date_i18n($format = 'Y-m-d')
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\REST_API\Controllers {
    /**
     * The settings controller class.
     *
     * @since 5.7.0
     */
    class Settings extends \WP_REST_Controller
    {
        /** @var Abstract_Settings settings handler */
        protected $settings;
        /**
         * Settings constructor.
         *
         * @since 5.7.0
         *
         * @param Abstract_Settings $settings settings handler
         */
        public function __construct(\SkyVerge\WooCommerce\PluginFramework\v5_10_12\Settings_API\Abstract_Settings $settings)
        {
        }
        /**
         * Registers the API routes.
         *
         * @since 5.7.0
         */
        public function register_routes()
        {
        }
        /** Read methods **************************************************************************************************/
        /**
         * Checks whether the user has permissions to get settings.
         *
         * @since 5.7.0
         *
         * @param \WP_REST_Request $request request object
         * @return bool|\WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Gets all registered settings.
         *
         * @since 5.7.0
         *
         * @param \WP_REST_Request $request request object
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * Gets a single setting.
         *
         * @since 5.7.0
         *
         * @param \WP_REST_Request $request request object
         * @return \WP_REST_Response|\WP_Error
         */
        public function get_item($request)
        {
        }
        /** Update methods ************************************************************************************************/
        /**
         * Checks whether the user has permissions to update a setting.
         *
         * @since 5.7.0
         *
         * @param \WP_REST_Request $request request object
         * @return bool|\WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a single setting.
         *
         * @since 5.7.0
         *
         * @param \WP_REST_Request $request request object
         * @return WP_Error|WP_REST_Response
         */
        public function update_item($request)
        {
        }
        /** Utility methods ***********************************************************************************************/
        /**
         * Prepares the item for the REST response.
         *
         * @since 5.7.0
         *
         * @param Setting $setting a setting object
         * @param \WP_REST_Request $request request object
         * @return array
         */
        public function prepare_setting_item($setting, $request)
        {
        }
        /**
         * Retrieves the item's schema, conforming to JSON Schema.
         *
         * @since 5.7.0
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Plugin Framework API Exception - generic API Exception
     */
    class SV_WC_API_Exception extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_Plugin_Exception
    {
    }
    /**
     * Base XML API response class.
     *
     * @since 4.3.0
     */
    abstract class SV_WC_API_XML_Response implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Response
    {
        /** @var string string representation of this response */
        protected $raw_response_xml;
        /** @var \SimpleXMLElement XML object */
        protected $response_xml;
        /** @var array|mixed|object XML data after conversion into an usable object */
        protected $response_data;
        /**
         * Build an XML object from the raw response.
         *
         * @since 4.3.0
         * @param string $raw_response_xml The raw response XML
         */
        public function __construct($raw_response_xml)
        {
        }
        /**
         * Magic method for getting XML element data. Note the response data has
         * already been casted into simple data types (string,int,array) and does not
         * require further casting in order to use.
         *
         * @since 4.3.0
         * @param string $key
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * Get the string representation of this response.
         *
         * @since 4.3.0
         * @return string
         */
        public function to_string()
        {
        }
        /**
         * Get the string representation of this response with any and all sensitive elements masked
         * or removed.
         *
         * @since 4.3.0
         * @see SV_WC_API_Response::to_string_safe()
         * @return string
         */
        public function to_string_safe()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\API\Traits {
    /**
     * This trait can be used to add response caching support to API requests.
     *
     * It is intended to be used by a class implementing the SV_WC_API_Request interface. Caching itself is handled
     * by the Abstract_Cacheable_API_Base class, which the API handler should abstract in order to support caching.
     *
     * Adding `use Cacheable_Request_Trait;` to a request class will declare caching support for that request class.
     * It's also possible to customize the cache lifetime by setting it in the request constructor.
     */
    trait Cacheable_Request_Trait
    {
        /** @var int the cache lifetime for the request, in seconds, defaults to 86400 (24 hours) */
        protected $cache_lifetime = 86400;
        /** @var bool whether to force a fresh request regardless if a cached response is available */
        protected $force_refresh = false;
        /** @var bool whether to the current request should be cached or not */
        protected $should_cache = true;
        /**
         * Sets the cache lifetime for this request.
         *
         * @since 5.10.10
         *
         * @param int $lifetime cache lifetime, in seconds. Set to 0 for unlimited
         * @return self
         */
        public function set_cache_lifetime(int $lifetime)
        {
        }
        /**
         * Gets the cache lifetime for this request.
         *
         * @since 5.10.10
         *
         * @return int
         */
        public function get_cache_lifetime() : int
        {
        }
        /**
         * Sets whether a fresh request should be attempted, regardless if a cached response is available.
         *
         * @since 5.10.10
         *
         * @param bool $value whether to force a fresh request, or not
         * @return self
         */
        public function set_force_refresh(bool $value)
        {
        }
        /**
         * Determines whether a fresh request should be attempted.
         *
         * @since 5.10.10
         *
         * @return bool
         */
        public function should_refresh() : bool
        {
        }
        /**
         * Sets whether the request's response should be stored in cache.
         *
         * @since 5.10.10
         *
         * @param bool $value whether to cache the request, or not
         * @return self
         */
        public function set_should_cache(bool $value)
        {
        }
        /**
         * Determines whether the request's response should be stored in cache.
         *
         * @since 5.10.10
         *
         * @return bool
         */
        public function should_cache() : bool
        {
        }
        /**
         * Bypasses caching for this request completely.
         *
         * When called, sets the `force_refresh` flag to true and `should_cache` flag to false
         *
         * @since 5.10.10
         *
         * @return self
         */
        public function bypass_cache()
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12\API {
    /**
     * Abstract API base class with caching support.
     *
     * Plugins which need to use API request caching should use extend this API base class rather than SV_WC_API_Base.
     * In addition, each request class which needs caching, should use the Cacheable_Request_Trait.
     *
     * @since 5.10.10
     */
    abstract class Abstract_Cacheable_API_Base extends \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Base
    {
        /** @var bool whether the response was loaded from cache */
        protected $response_loaded_from_cache = false;
        /**
         * Simple wrapper for wp_remote_request() so child classes can override this
         * and provide their own transport mechanism if needed, e.g. a custom
         * cURL implementation
         *
         * @since 5.10.10
         *
         * @param string $request_uri
         * @param string $request_args
         * @return array|\WP_Error
         */
        protected function do_remote_request($request_uri, $request_args)
        {
        }
        /**
         * Handle and parse the response
         *
         * @since 5.10.10
         *
         * @param array|\WP_Error $response response data
         * @throws SV_WC_API_Exception network issues, timeouts, API errors, etc
         * @return SV_WC_API_Request|object request class instance that implements SV_WC_API_Request
         */
        protected function handle_response($response)
        {
        }
        /**
         * Resets the API response members to their default values.
         *
         * @since 5.10.10
         */
        protected function reset_response()
        {
        }
        /**
         * Gets the request transient key for the current plugin and request data.
         *
         * Request transients can be disabled by using the filter below.
         *
         * @since 5.10.10
         *
         * @return string transient key
         */
        protected function get_request_transient_key() : string
        {
        }
        /**
         * Checks whether the current request is cacheable.
         *
         * @since 5.10.10
         *
         * @return bool
         */
        protected function is_request_cacheable() : bool
        {
        }
        /**
         * Gets the cache lifetime for the current request.
         *
         * @since 5.10.10
         *
         * @return int
         */
        protected function get_request_cache_lifetime() : int
        {
        }
        /**
         * Determine whether the response was loaded from cache or not.
         *
         * @since 5.10.10
         *
         * @return bool
         */
        protected function is_response_loaded_from_cache() : bool
        {
        }
        /**
         * Loads the response for the current request from the cache, if available.
         *
         * @since 5.10.10
         *
         * @return array|null
         */
        protected function load_response_from_cache()
        {
        }
        /**
         * Saves the response to cache.
         *
         * @since 5.10.10
         *
         * @param array $response
         */
        protected function save_response_to_cache(array $response)
        {
        }
        /**
         * Gets the response data for broadcasting the request.
         *
         * Adds a flag to the response data indicating whether the response was loaded from cache.
         *
         * @since 5.10.10
         *
         * @return array
         */
        protected function get_request_data_for_broadcast() : array
        {
        }
        /**
         * Gets the response data for broadcasting the request.
         *
         * Adds a flag to the response data indicating whether the response was loaded from cache.
         *
         * @since 5.10.10
         *
         * @return array
         */
        protected function get_response_data_for_broadcast() : array
        {
        }
    }
}
namespace SkyVerge\WooCommerce\PluginFramework\v5_10_12 {
    /**
     * Base XML API request class.
     *
     * @since 4.3.0
     */
    abstract class SV_WC_API_XML_Request implements \SkyVerge\WooCommerce\PluginFramework\v5_10_12\SV_WC_API_Request
    {
        /** @var string the request method, one of HEAD, GET, PUT, PATCH, POST, DELETE */
        protected $method;
        /** @var string the request path */
        protected $path = '';
        /** @var array the request parameters */
        protected $params = array();
        /** @var array request data */
        protected $request_data;
        /** @var string root element for XML */
        protected $root_element;
        /** @var \XMLWriter $xml object */
        protected $xml;
        /** @var string complete request XML */
        protected $request_xml;
        /**
         * Get the method for this request.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::get_method()
         * @return null|string
         */
        public function get_method()
        {
        }
        /**
         * Get the path for this request.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::get_path()
         * @return string
         */
        public function get_path()
        {
        }
        /**
         * Get the request parameters.
         *
         * @since 4.5.0
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * Convert the request data into XML.
         *
         * @since 4.3.0
         * @return string
         */
        protected function to_xml()
        {
        }
        /**
         * Gets the request data to be converted to XML.
         *
         * @since 4.3.0
         * @deprecated 5.0.0
         *
         * @return array
         */
        public function get_request_data()
        {
        }
        /**
         * Gets the request data to be converted to XML.
         *
         * @since 5.0.0
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Get the string representation of this request
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::to_string()
         * @return string
         */
        public function to_string()
        {
        }
        /**
         * Get the string representation of this request with any and all sensitive elements masked
         * or removed.
         *
         * @since 4.3.0
         * @see SV_WC_API_Request::to_string_safe()
         * @return string
         */
        public function to_string_safe()
        {
        }
        /**
         * Helper method for making XML pretty, suitable for logging or rendering
         *
         * @since 4.3.0
         * @param string $xml_string ugly XML string
         * @return string
         */
        public function prettify_xml($xml_string)
        {
        }
        /**
         * Concrete classes must implement this method to return the root element
         * for the XML document
         *
         * @since 4.3.0
         * @return string
         */
        protected abstract function get_root_element();
    }
}
namespace Braintree {
    /**
     * Braintree PHP Library.
     *
     * Braintree base class and initialization
     * Provides methods to child classes. This class cannot be instantiated.
     */
    abstract class Base implements \JsonSerializable
    {
        protected $_attributes = [];
        /**
         * don't permit an explicit call of the constructor!
         * (like $t = new Transaction())
         */
        protected function __construct()
        {
        }
        /**
         * Disable cloning of objects
         */
        protected function __clone()
        {
        }
        /**
         * Accessor for instance properties stored in the private $_attributes property
         *
         * @param string $name of the key whose value is to be returned
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * Checks for the existence of a property stored in the private $_attributes property
         *
         * @param string $name of the key
         *
         * @return boolean
         */
        public function __isset($name)
        {
        }
        /**
         * Mutator for instance properties stored in the private $_attributes property
         *
         * @param string $key   to be set
         * @param mixed  $value to be set
         *
         * @return mixed
         */
        public function _set($key, $value)
        {
        }
        /**
         * Implementation of JsonSerializable
         *
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
        /**
         * Implementation of to an Array
         *
         * @return array
         */
        public function toArray()
        {
        }
    }
    /**
     * Connected Merchant PayPal Status Changed Payload
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/webhooks/braintree-auth/php#notification-type-connected_merchant_paypal_status_changed developer docs} for information on attributes
     */
    class ConnectedMerchantPayPalStatusChanged extends \Braintree\Base
    {
        protected $_attributes = [];
        /**
         * Creates an instance of a ConnectedMerchantPayPalStatusChanged from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return ConnectedMerchantPayPalStatusChanged
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * Braintree LocalPaymentFunded module
     */
    class LocalPaymentFunded extends \Braintree\Base
    {
        /**
         *  factory method: returns an instance of LocalPaymentFunded
         *  to the requesting method, with populated properties
         *
         * @param array $attributes used to create the object
         *
         * @return LocalPaymentFunded
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($localPaymentFundedAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree Class Instance template
     *
     * @abstract
     */
    abstract class Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
        /**
         * returns private/nonexistent instance properties
         *
         * @param string $name property name
         *
         * @return mixed contents of instance properties
         */
        public function __get($name)
        {
        }
        /**
         * used by isset() and empty()
         *
         * @param string $name property name
         *
         * @return boolean
         */
        public function __isset($name)
        {
        }
        /**
         * create a printable representation of the object as:
         * ClassName[property=value, property=value]
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * initializes instance properties from the keys/values of an array
         *
         * @param <type> $aAttribs array of properties to set - single level
         *
         * @return void
         */
        private function _initializeFromArray($attributes)
        {
        }
        /**
         * Implementation of JsonSerializable
         *
         * @return array
         */
        public function jsonSerialize()
        {
        }
        /**
         * Implementation of to an Array
         *
         * @return array
         */
        public function toArray()
        {
        }
    }
    /**
     * Line item associated with a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction-line-item developer docs} for information on attributes
     */
    class TransactionLineItem extends \Braintree\Instance
    {
        // TransactionLineItem Kinds
        const CREDIT = 'credit';
        const DEBIT = 'debit';
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId of the Transaction to search for line items
         *
         * @see TransactionLineItemGateway::findAll()
         *
         * @return TransactionLineItem|Exception
         */
        public static function findAll($transactionId)
        {
        }
    }
    /**
     * Braintree CreditCardVerificationGateway module
     * Creates and manages CreditCardVerifications
     */
    class CreditCardVerificationGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Creates a credit card verification  using the given +attributes+.
         *
         * @param array $attributes containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function create($attributes)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
        /**
         * Retrieve a credit card verification
         *
         * @param array $query search parameters
         * @param array $ids   of verifications to search
         *
         * @return Array of CreditCardVerification objects
         */
        public function fetch($query, $ids)
        {
        }
        /**
         * Returns a ResourceCollection of customers matching the search query.
         *
         * @param mixed $query search query
         *
         * @return ResourceCollection
         */
        public function search($query)
        {
        }
    }
    /**
     * Braintree RangeNode
     * RangeNode is an object for numerical elements returned from the Braintree API
     */
    class RangeNode
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($name)
        {
        }
        /**
         * Sets the "min" value for search terms.
         *
         * @param string $value to be set for search terms
         *
         * @return object
         */
        public function greaterThanOrEqualTo($value)
        {
        }
        /**
         * Sets the "mixn" value for search terms.
         *
         * @param string $value to be set for search terms
         *
         * @return object
         */
        public function lessThanOrEqualTo($value)
        {
        }
        /**
         * Sets the "is" value for search terms.
         *
         * @param string $value to be set for search terms
         *
         * @return object
         */
        public function is($value)
        {
        }
        /**
         * Sets the "min" and "max" value for search terms.
         *
         * @param string $min minimum value to be set for search terms
         * @param string $max maximum value to be set for search terms
         *
         * @return object
         */
        public function between($min, $max)
        {
        }
        /**
         * To be used as a parameter
         *
         * @return object search terms
         */
        public function toParam()
        {
        }
    }
    /**
     * Braintree Xml parser and generator
     * superclass for Braintree XML parsing and generation
     */
    class Xml
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        protected function __construct()
        {
        }
        /**
         * Create an array from XML element(s)
         *
         * @param string $xml elements(s)
         *
         * @return array
         */
        public static function buildArrayFromXml($xml)
        {
        }
        /**
         * Create an XML string from an Array object
         *
         * @param array $array object
         *
         * @return string
         */
        public static function buildXmlFromArray($array)
        {
        }
    }
    /**
     * Braintree SubscriptionGateway module
     *
     * // phpcs:ignore Generic.Files.LineLength
     * For more detailed information on Subscriptions, see {@link https://developer.paypal.com/braintree/docs/reference/response/subscription/php our developer docs}
     */
    class SubscriptionGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /*
         * Request a new subscription be created
         *
         * @param array $attributes containing request params
         *
         * @return Result\Sucessful|Result\Error
         */
        public function create($attributes)
        {
        }
        /*
         * Look up a single subscription
         *
         * @param string $id of the subscription to find
         *
         * @return Subscription|Exception\NotFound
         */
        public function find($id)
        {
        }
        /*
         * Search for subscriptions using a variety of criteria
         *
         * @param mixed $query of search fields
         *
         * @return ResourceCollection of Subscription objects
         */
        public function search($query)
        {
        }
        /*
         * Fetch subscriptions using a variety of criteria
         *
         * @param mixed $query of search fields
         * @param array $ids to be fetched
         *
         * @return ResourceCollection of Subscription objects
         */
        public function fetch($query, $ids)
        {
        }
        /*
         * Updates a specific subscription with given details
         *
         * @param string $subscriptionId the ID of the subscription to be updated
         * @param mixed $attributes
         *
         * @return Subscription|Exception\NotFound
         */
        public function update($subscriptionId, $attributes)
        {
        }
        /*
         * Manually retry charging a past due subscription
         *
         * @param string $subscriptionId the ID of the subscription with a charge being retried
         * @param string $amount optional
         * @param bool $submitForSettlement defaults to false unless specified true
         *
         * @return Transaction
         */
        public function retryCharge($subscriptionId, $amount = null, $submitForSettlement = false)
        {
        }
        /*
         * Stops billing a payment method for a subscription. Cannot be reactivated
         *
         * @param string $subscriptionId to be canceled
         *
         * @return Subscription|Exception\NotFound
         */
        public function cancel($subscriptionId)
        {
        }
        private static function _createSignature()
        {
        }
        private static function _updateSignature()
        {
        }
        private static function _addOnDiscountSignature()
        {
        }
        private function _validateId($id = null)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
    }
}
namespace Braintree\Subscription {
    /**
     * Status details from a subscription
     * Creates an instance of StatusDetails, as part of a subscription response
     *
     * For more detailed information on Subscriptions, see {@link https://developer.paypal.com/braintree/docs/reference/response/subscription#subscription-history our developer docs}
     */
    class StatusDetails extends \Braintree\Instance
    {
    }
}
namespace Braintree {
    /**
     * Braintree ClientTokenGateway module
     *
     * Manages Braintree ClientTokens
     * For more detailed information on ClientTokens, see {@link https://developer.paypal.com/braintree/docsreference/response/client-token/php our developer docs}. <br />
     */
    class ClientTokenGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Generate a client token for client-side authorization
         *
         * @param Optional $params containing request parameters
         *
         * @return string client token
         */
        public function generate($params = [])
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doGenerate($subPath, $params)
        {
        }
        /*
         * Checks if customer id is provided prior to verifying keys provided in params
         *
         * @param array $params to be verified
         *
         * @return array
         */
        public function conditionallyVerifyKeys($params)
        {
        }
        /*
         * returns an array of keys including customer id
         *
         * @return array
         *
         */
        public function generateWithCustomerIdSignature()
        {
        }
        /*
         * returns an array of keys without customer id
         *
         * @return array
         */
        public function generateWithoutCustomerIdSignature()
        {
        }
        /**
         * generic method for validating incoming gateway responses
         *
         * If the request is successful, returns a client token string.
         * Otherwise, throws an InvalidArgumentException with the error
         * response from the Gateway or an HTTP status code exception.
         *
         * @param array $response gateway response values
         *
         * @throws InvalidArgumentException | HTTP status code exception
         *
         * @return string client token
         */
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * WebhookTestingGateway module
     * Creates and manages test webhooks
     */
    class WebhookTestingGateway
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Build a sample Webhook
         *
         * @param string $kind             the kind of Webhook you want to generate
         * @param string $id               unique identifier
         * @param string $sourceMerchantId optional
         *
         * @return Webhook
         */
        public function sampleNotification($kind, $id, $sourceMerchantId = null)
        {
        }
        private static function _sampleXml($kind, $id, $sourceMerchantId)
        {
        }
        private static function _merchantAccountApprovedSampleXml($id)
        {
        }
        private static function _merchantAccountDeclinedSampleXml($id)
        {
        }
        private static function _transactionDisbursedSampleXml($id)
        {
        }
        private static function _transactionReviewedSampleXml($id)
        {
        }
        private static function _transactionSettledSampleXml($id)
        {
        }
        private static function _transactionSettlementDeclinedSampleXml($id)
        {
        }
        private static function _disbursementExceptionSampleXml($id)
        {
        }
        private static function _disbursementSampleXml($id)
        {
        }
        private static function _disputeOpenedSampleXml($id)
        {
        }
        private static function _disputeLostSampleXml($id)
        {
        }
        private static function _disputeWonSampleXml($id)
        {
        }
        private static function _disputeAcceptedSampleXml($id)
        {
        }
        private static function _disputeDisputedSampleXml($id)
        {
        }
        private static function _disputeExpiredSampleXml($id)
        {
        }
        private static function _subscriptionSampleXml($id)
        {
        }
        private static function _subscriptionChargedSuccessfullySampleXml($id)
        {
        }
        private static function _subscriptionChargedUnsuccessfullySampleXml($id)
        {
        }
        private static function _subscriptionExpiredSampleXml($id)
        {
        }
        private static function _subscriptionCanceledSampleXml($id)
        {
        }
        private static function _subscriptionWentPastDueSampleXml($id)
        {
        }
        private static function _checkSampleXml()
        {
        }
        private static function _partnerMerchantConnectedSampleXml($id)
        {
        }
        private static function _partnerMerchantDisconnectedSampleXml($id)
        {
        }
        private static function _partnerMerchantDeclinedSampleXml($id)
        {
        }
        private static function _oauthAccessRevocationSampleXml($id)
        {
        }
        private static function _accountUpdaterDailyReportSampleXml($id)
        {
        }
        private static function _connectedMerchantStatusTransitionedSampleXml($id)
        {
        }
        private static function _connectedMerchantPayPalStatusChangedSampleXml($id)
        {
        }
        private static function _grantedPaymentInstrumentUpdateSampleXml()
        {
        }
        private static function _paymentMethodRevokedByCustomerSampleXml($id)
        {
        }
        private static function _localPaymentCompletedSampleXml()
        {
        }
        private static function _localPaymentExpiredSampleXml()
        {
        }
        private static function _localPaymentFundedSampleXml()
        {
        }
        private static function _localPaymentReversedSampleXml()
        {
        }
        private static function _paymentMethodCustomerDataUpdatedSampleXml($id)
        {
        }
        private static function _venmoAccountXml($id)
        {
        }
        private static function _timestamp()
        {
        }
    }
    /**
     * Braintree PaginatedCollection
     * PaginatedCollection is a container object for paginated data
     *
     * Retrieves and pages through large collections of results
     *
     * example:
     * <code>
     * $result = MerchantAccount::all();
     *
     * foreach($result as $merchantAccount) {
     *   print_r($merchantAccount->status);
     * }
     * </code>
     */
    class PaginatedCollection implements \Iterator
    {
        private $_pager;
        private $_pageSize;
        private $_currentPage;
        private $_index;
        private $_totalItems;
        private $_items;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($pager)
        {
        }
        /**
         * Returns the current item when iterating with foreach
         *
         * @return object of the current item
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * Returns null
         *
         * @return null
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        /**
         * Advances to the next item in the collection when iterating with foreach
         *
         * @return object of the next item in the collection
         */
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        /**
         * Rewinds the collection to the first item when iterating with foreach
         *
         * @return mixed collection with index set to 0
         */
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * Returns whether the current item is valid when iterating with foreach
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        private function _getNextPage()
        {
        }
    }
    /**
     * super class for all Braintree exceptions
     */
    class Exception extends \Exception
    {
    }
    /**
     * Braintree GooglePayCard module
     * Creates and manages Braintree Google Pay cards
     *
     * <b>== More information ==</b>
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/google-pay-card developer docs} for information on attributes
     */
    class GooglePayCard extends \Braintree\Base
    {
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * Creates an instance of a GooglePayCard from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return GooglePayCard
         */
        public static function factory($attributes)
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $googlePayCardAttribs array of Google Pay card properties
         *
         * @return void
         */
        protected function _initialize($googlePayCardAttribs)
        {
        }
    }
    /**
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/merchant-account developer docs} for information on attributes
     */
    class MerchantAccount extends \Braintree\Base
    {
        const STATUS_ACTIVE = 'active';
        const STATUS_PENDING = 'pending';
        const STATUS_SUSPENDED = 'suspended';
        const FUNDING_DESTINATION_BANK = 'bank';
        const FUNDING_DESTINATION_EMAIL = 'email';
        const FUNDING_DESTINATION_MOBILE_PHONE = 'mobile_phone';
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return MerchantAccount
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($merchantAccountAttribs)
        {
        }
        // static methods redirecting to gateway
        public static function create($attribs)
        {
        }
        public static function find($merchant_account_id)
        {
        }
        public static function update($merchant_account_id, $attributes)
        {
        }
    }
    /**
     * Braintree MultipleValueNode
     * MultipleValueNode is an object for elements with possible values returned from the Braintree API
     */
    class MultipleValueNode
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($name, $allowedValues = [])
        {
        }
        /**
         * Sets the value of the object's items key to $values
         *
         * @param array $values to be set
         *
         * @throws InvalidArgumentException
         *
         * @return object
         */
        public function in($values)
        {
        }
        /**
         * Sets the value of the object's items key to [$value]
         *
         * @param object $value to be set
         *
         * @return object
         */
        public function is($value)
        {
        }
        /**
         * Retrieves items(params) from the object
         *
         * @return object
         */
        public function toParam()
        {
        }
    }
    /**
     * Braintree TransactionLineItemGateway processor
     * Creates and manages transaction line items
     */
    class TransactionLineItemGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Find all Transaction Line Items or return an error
         *
         * @param string $id of the Transaction to search for line items
         *
         * @return TransactionLineItem|Exception
         */
        public function findAll($id)
        {
        }
        /**
         * verifies that a valid transaction id is being used
         *
         * @param string transaction id
         *
         * @throws InvalidArgumentException
         */
        private function _validateId($id = null)
        {
        }
    }
    /**
     * Braintree LocalPaymentExpired module
     */
    class LocalPaymentExpired extends \Braintree\Base
    {
        /**
         *  factory method: returns an instance of LocalPaymentExpired
         *  to the requesting method, with populated properties
         *
         * @param array $attributes to be used in creating the object
         *
         * @return LocalPaymentExpired
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($localPaymentExpiredAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Creates an instance of AccountUpdaterDailyReport
     *
     * For attributes see our {@link https://developer.paypal.com/braintree/docs/reference/general/webhooks/account-updater/php#notification-kinds developer documentation}
     */
    class AccountUpdaterDailyReport extends \Braintree\Base
    {
        protected $_attributes = [];
        protected function _initialize($disputeAttribs)
        {
        }
        /**
         * Creates an instance of an AccountUpdaterDailyReport from given attributes
         *
         * @param array $attributes to generate new AccountUpdaterDailyReport
         *
         * @return AccountUpdaterDailyReport
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Creates and manages Braintree PaymentMethods
     *
     * For more detailed information on PaymentMethods, see {@link https://developer.paypal.com/braintree/docs/reference/response/payment-method/php our developer docs}. <br />
     */
    class PaymentMethodGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Attempts the create operation
         * returns a Result on success or an Error on failure
         *
         * @param array $attribs containing request parameterss
         *
         * @throws Exception\ValidationError
         *
         * @return Result\Successful|Result\Error
         */
        public function create($attribs)
        {
        }
        /**
         * Find a PaymentMethod by token
         *
         * @param string $token payment method unique id
         *
         * @throws Exception\NotFound
         *
         * @return CreditCard|PayPalAccount
         */
        public function find($token)
        {
        }
        /**
         * Updates the payment method's record
         *
         * @param string $token   payment method identifier
         * @param array  $attribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function update($token, $attribs)
        {
        }
        /**
         * Delete a payment method record
         *
         * @param string $token   payment method identifier
         * @param mixed  $options containing optional parameters
         *
         * @return Result
         */
        public function delete($token, $options = [])
        {
        }
        /**
         * Grant a payment method record
         *
         * See our {@link https://developer.paypal.com/braintree/docs/reference/request/payment-method/grant developer docs} for more info on the Grant API.
         *
         * @param string $sharedPaymentMethodToken payment method identifier
         * @param mixed  $attribs                  containing request parameters
         *
         * @return Result
         */
        public function grant($sharedPaymentMethodToken, $attribs = [])
        {
        }
        /**
         * Deletes the version of a granted payment method from the receiving merchant's vault.
         *
         * See our {@link https://developer.paypal.com/braintree/docs/reference/request/payment-method/revoke developer docs} for more info on the Grant API.
         *
         * @param string $sharedPaymentMethodToken payment method identifier
         *
         * @return Result
         */
        public function revoke($sharedPaymentMethodToken)
        {
        }
        private static function baseSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function createSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function updateSignature()
        {
        }
        private static function deleteSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doCreate($subPath, $params)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doGrant($subPath, $params)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doRevoke($subPath, $params)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doUpdate($subPath, $params)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doDelete($subPath)
        {
        }
        /**
         * Generic method for validating incoming gateway responses
         *
         * Creates a new CreditCard or PayPalAccount object
         * and encapsulates it inside a Result\Successful object, or
         * encapsulates a Errors object inside a Result\Error
         * alternatively, throws an Unexpected exception if the response is invalid.
         */
        private function _verifyGatewayResponse($response)
        {
        }
        private function _verifyGrantResponse($response)
        {
        }
        private function _verifyRevokeResponse($response)
        {
        }
        /**
         * Verifies that a valid payment method identifier is being used
         */
        private function _validateId($identifier = null, $identifierType = 'token')
        {
        }
    }
    class MerchantAccountGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        public function create($attribs)
        {
        }
        public function find($merchant_account_id)
        {
        }
        public function update($merchant_account_id, $attributes)
        {
        }
        public static function updateSignature()
        {
        }
        public function createForCurrency($attribs)
        {
        }
        public function all()
        {
        }
        public function fetchMerchantAccounts($page)
        {
        }
        public static function createSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doCreate($subPath, $params)
        {
        }
        private function _doUpdate($subPath, $params)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Braintree CreditCardGateway module
     * Creates and manages Braintree CreditCards
     *
     * For more detailed information on CreditCards, see {@link https://developer.paypal.com/braintree/docs/reference/response/credit-card/php our developer docs}<br />
     * For more detailed information on CreditCard verifications, see {@link https://developer.paypal.com/braintree/docs/reference/response/credit-card-verification/php our reference documentation}
     */
    class CreditCardGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Attempts the create operation
         * returns a Result on success or an Error on failure
         *
         * @param array $attribs containing request parameterss
         *
         * @throws Exception\ValidationError
         *
         * @return Result\Successful|Result\Error
         */
        public function create($attribs)
        {
        }
        /**
         * Attempts the create operation assuming all data will validate
         * returns a CreditCard object instead of a Result
         *
         * @param array $attribs containing request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return CreditCard
         */
        public function createNoValidate($attribs)
        {
        }
        /**
         * Returns a ResourceCollection of expired credit cards
         *
         * @return ResourceCollection
         */
        public function expired()
        {
        }
        /**
         * Returns a ResourceCollection of expired credit cards
         *
         * @param string $ids containing credit card IDs
         *
         * @return ResourceCollection
         */
        public function fetchExpired($ids)
        {
        }
        /**
         * Returns a ResourceCollection of credit cards expiring between start/end
         *
         * @param string $startDate the start date of search
         * @param string $endDate   the end date of search
         *
         * @return ResourceCollection
         */
        public function expiringBetween($startDate, $endDate)
        {
        }
        /**
         * Returns a ResourceCollection of credit cards expiring between start/end given a set of IDs
         *
         * @param string $startDate the start date of search
         * @param string $endDate   the end date of search
         * @param string $ids       containing ids to search
         *
         * @return ResourceCollection
         */
        public function fetchExpiring($startDate, $endDate, $ids)
        {
        }
        /**
         * Find a creditcard by token
         *
         * @param string $token credit card unique id
         *
         * @throws Exception\NotFound
         *
         * @return CreditCard
         */
        public function find($token)
        {
        }
        /**
         * Convert a payment method nonce to a credit card
         *
         * @param string $nonce payment method nonce
         *
         * @throws Exception\NotFound
         *
         * @return CreditCard
         */
        public function fromNonce($nonce)
        {
        }
        /**
         * Create a credit on the card for the passed transaction
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function credit($token, $transactionAttribs)
        {
        }
        /**
         * Create a credit on this card, assuming validations will pass
         *
         * Returns a Transaction object on success
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return Transaction
         */
        public function creditNoValidate($token, $transactionAttribs)
        {
        }
        /**
         * Create a new sale for the current card
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function sale($token, $transactionAttribs)
        {
        }
        /**
         * Create a new sale using this card, assuming validations will pass
         *
         * Returns a Transaction object on success
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Transaction
         */
        public function saleNoValidate($token, $transactionAttribs)
        {
        }
        /**
         * Updates the creditcard record
         *
         * If calling this method in context, $token
         * is the 2nd attribute. $token is not sent in object context.
         *
         * @param string $token      (optional)
         * @param array  $attributes containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function update($token, $attributes)
        {
        }
        /**
         * Update a creditcard record, assuming validations will pass
         *
         * If calling this method in context, $token
         * is the 2nd attribute. $token is not sent in object context.
         * returns a CreditCard object on success
         *
         * @param string $token      (optional)
         * @param array  $attributes containing request parameters
         *
         * @return CreditCard
         *
         * @throws Exception\ValidationsFailed
         */
        public function updateNoValidate($token, $attributes)
        {
        }
        /**
         * Delete a credit card record
         *
         * @param string $token credit card identifier
         *
         * @return Result
         */
        public function delete($token)
        {
        }
        private static function baseOptions()
        {
        }
        private static function baseSignature($options)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function billingAddressSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function createSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function threeDSecurePassThruSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function updateSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doCreate($subPath, $params)
        {
        }
        private function _validateId($identifier = null, $identifierType = "token")
        {
        }
        private function _doUpdate($httpVerb, $subPath, $params)
        {
        }
        /**
         * Generic method for validating incoming gateway responses
         *
         * Creates a new CreditCard object and encapsulates
         * it inside a Result\Successful object, or
         * encapsulates a Errors object inside a Result\Error
         * alternatively, throws an Unexpected exception if the response is invalid
         */
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Braintree Address module
     * Creates and manages Braintree Addresses
     *
     * An Address belongs to a Customer. It can be associated to a
     * CreditCard as the billing address. It can also be used
     * as the shipping address when creating a Transaction.
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/address developer docs} for information on attributes
     */
    class Address extends \Braintree\Base
    {
        /**
         * returns false if comparing object is not a Address,
         * or is a Address with a different id
         *
         * @param object $other address to compare against
         *
         * @return boolean
         */
        public function isEqual($other)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        protected function _initialize($addressAttribs)
        {
        }
        /**
         * Creates an instance of an Address from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Address
         */
        public static function factory($attributes)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param array $attribs containing request parameters
         *
         * @see AddressGateway::create()
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($attribs)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param array $attribs containing request parameters
         *
         * @see AddressGateway::createNoValidate()
         *
         * @throws Exception\ValidationError
         *
         * @return Address
         */
        public static function createNoValidate($attribs)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param mixed  $customerOrId either a customer object or string ID of customer
         * @param string $addressId    optional unique identifier
         *
         * @see AddressGateway::delete()
         *
         * @return Result\Successful|Result\Error
         */
        public static function delete($customerOrId = null, $addressId = null)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param mixed  $customerOrId either a customer object or string ID of customer
         * @param string $addressId    optional unique identifier
         *
         * @see AddressGateway::find()
         *
         * @throws Exception\NotFound
         *
         * @return Address
         */
        public static function find($customerOrId, $addressId)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param mixed  $customerOrId (only used in call)
         * @param string $addressId    (only used in call)
         * @param array  $attributes   containing request parameters
         *
         * @see AddressGateway::update()
         *
         * @return Result\Successful|Result\Error
         */
        public static function update($customerOrId, $addressId, $attributes)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param mixed  $customerOrId (only used in call)
         * @param string $addressId    (only used in call)
         * @param array  $attributes   containing request parameters
         *
         * @see AddressGateway::updateNoValidate()
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Address
         */
        public static function updateNoValidate($customerOrId, $addressId, $attributes)
        {
        }
    }
    /**
     * Braintree UsBankAccountGateway module
     *
     * Manages Braintree UsBankAccounts
     */
    class UsBankAccountGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * find a usBankAccount by token
         *
         * @param string $token paypal accountunique id
         *
         * @throws Exception\NotFound
         *
         * @return UsBankAccount
         */
        public function find($token)
        {
        }
        /**
         * create a new sale for the current UsBank account
         *
         * @param string $token              payment method identifier
         * @param array  $transactionAttribs request parameters
         *
         * @see Transaction::sale()
         *
         * @return Result\Successful|Result\Error
         */
        public function sale($token, $transactionAttribs)
        {
        }
        /**
         * generic method for validating incoming gateway responses
         *
         * creates a new UsBankAccount object and encapsulates
         * it inside a Result\Successful object, or
         * encapsulates a Errors object inside a Result\Error
         * alternatively, throws an Unexpected exception if the response is invalid.
         *
         * @param array $response gateway response values
         *
         * @throws Exception\Unexpected
         *
         * @return Result\Successful|Result\Error
         */
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Create and Manage 3D Secure Info type objects
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/payment-method-nonce/php#three_d_secure_info developer docs} for information on attributes
     */
    class ThreeDSecureInfo extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return ThreeDSecureInfo
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
}
namespace Braintree\Test {
    /**
     * Merchant Account constants used for testing purposes
     */
    class MerchantAccount
    {
        public static $approve = "approve_me";
        public static $insufficientFundsContactUs = "insufficient_funds__contact";
        public static $accountNotAuthorizedContactUs = "account_not_authorized__contact";
        public static $bankRejectedUpdateFundingInformation = "bank_rejected__update";
        public static $bankRejectedNone = "bank_rejected__none";
    }
    /**
     * Transaction amounts used for testing purposes
     *
     * The constants in this class can be used to create transactions with
     * the desired status in the sandbox environment.
     */
    class Transaction
    {
        /**
         * settle a transaction by id in sandbox
         *
         * @param string        $id     transaction id
         * @param Configuration $config gateway config
         *
         * @return Transaction
         */
        public static function settle($transactionId)
        {
        }
        /**
         * settlement confirm a transaction by id in sandbox
         *
         * @param string        $id     transaction id
         * @param Configuration $config gateway config
         *
         * @return Transaction
         */
        public static function settlementConfirm($transactionId)
        {
        }
        /**
         * settlement decline a transaction by id in sandbox
         *
         * @param string        $id     transaction id
         * @param Configuration $config gateway config
         *
         * @return Transaction
         */
        public static function settlementDecline($transactionId)
        {
        }
        /**
         * settlement pending a transaction by id in sandbox
         *
         * @param string        $id     transaction id
         * @param Configuration $config gateway config
         *
         * @return Transaction
         */
        public static function settlementPending($transactionId)
        {
        }
    }
    /**
     * VenmoSdk payment method codes used for testing purposes
     */
    class VenmoSdk
    {
        public static $visaPaymentMethodCode = "stub-4111111111111111";
        public static function generateTestPaymentMethodCode($number)
        {
        }
        public static function getInvalidPaymentMethodCode()
        {
        }
        public static function getTestSession()
        {
        }
        public static function getInvalidTestSession()
        {
        }
    }
    /**
     * Nonces used for testing purposes
     */
    /**
     * Nonces used for testing purposes
     *
     * The constants in this class can be used to perform nonce operations
     * with the desired status in the sandbox environment.
     */
    class Nonces
    {
        // phpcs:disable Generic.Files.LineLength
        public static $transactable = "fake-valid-nonce";
        public static $consumed = "fake-consumed-nonce";
        public static $paypalOneTimePayment = "fake-paypal-one-time-nonce";
        public static $paypalFuturePayment = "fake-paypal-future-nonce";
        public static $paypalBillingAgreement = "fake-paypal-billing-agreement-nonce";
        public static $applePayVisa = "fake-apple-pay-visa-nonce";
        public static $applePayMasterCard = "fake-apple-pay-visa-nonce";
        public static $applePayAmEx = "fake-apple-pay-amex-nonce";
        public static $googlePay = "fake-android-pay-nonce";
        public static $googlePayDiscover = "fake-android-pay-discover-nonce";
        public static $googlePayVisa = "fake-android-pay-visa-nonce";
        public static $googlePayMasterCard = "fake-android-pay-mastercard-nonce";
        public static $googlePayAmEx = "fake-android-pay-amex-nonce";
        public static $abstractTransactable = "fake-abstract-transactable-nonce";
        public static $europe = "fake-europe-bank-account-nonce";
        public static $transactableVisa = "fake-valid-visa-nonce";
        public static $transactableAmEx = "fake-valid-amex-nonce";
        public static $transactableMasterCard = "fake-valid-mastercard-nonce";
        public static $transactableDiscover = "fake-valid-discover-nonce";
        public static $transactableJCB = "fake-valid-jcb-nonce";
        public static $transactableMaestro = "fake-valid-maestro-nonce";
        public static $transactableDinersClub = "fake-valid-dinersclub-nonce";
        public static $transactablePrepaid = "fake-valid-prepaid-nonce";
        public static $transactableCommercial = "fake-valid-commercial-nonce";
        public static $transactableDurbinRegulated = "fake-valid-durbin-regulated-nonce";
        public static $transactableHealthcare = "fake-valid-healthcare-nonce";
        public static $transactableDebit = "fake-valid-debit-nonce";
        public static $transactablePayroll = "fake-valid-payroll-nonce";
        public static $threeDSecureVisaFullAuthenticationNonce = "fake-three-d-secure-visa-full-authentication-nonce";
        public static $threeDSecureVisaLookupTimeout = "fake-three-d-secure-visa-lookup-timeout-nonce";
        public static $threeDSecureVisaFailedSignature = "fake-three-d-secure-visa-failed-signature-nonce";
        public static $threeDSecureVisaFailedAuthentication = "fake-three-d-secure-visa-failed-authentication-nonce";
        public static $threeDSecureVisaAttemptsNonParticipating = "fake-three-d-secure-visa-attempts-non-participating-nonce";
        public static $threeDSecureVisaNoteEnrolled = "fake-three-d-secure-visa-not-enrolled-nonce";
        public static $threeDSecureVisaUnavailable = "fake-three-d-secure-visa-unavailable-nonce";
        public static $threeDSecureVisaMPILookupError = "fake-three-d-secure-visa-mpi-lookup-error-nonce";
        public static $threeDSecureVisaMPIAuthenticateError = "fake-three-d-secure-visa-mpi-authenticate-error-nonce";
        public static $threeDSecureVisaAuthenticationUnavailable = "fake-three-d-secure-visa-authentication-unavailable-nonce";
        public static $threeDSecureVisaBypassedAuthentication = "fake-three-d-secure-visa-bypassed-authentication-nonce";
        public static $threeDSecureTwoVisaSuccessfulFrictionlessAuthentication = "fake-three-d-secure-two-visa-successful-frictionless-authentication-nonce";
        public static $threeDSecureTwoVisaSuccessfulStepUpAuthentication = "fake-three-d-secure-two-visa-successful-step-up-authentication-nonce";
        public static $threeDSecureTwoVisaErrorOnLookup = "fake-three-d-secure-two-visa-error-on-lookup-nonce";
        public static $threeDSecureTwoVisaTimeoutOnLookup = "fake-three-d-secure-two-visa-timeout-on-lookup-nonce";
        public static $transactableNoIndicators = "fake-valid-no-indicators-nonce";
        public static $transactableUnknownIndicators = "fake-valid-unknown-indicators-nonce";
        public static $transactableCountryOfIssuanceUSA = "fake-valid-country-of-issuance-usa-nonce";
        public static $transactableCountryOfIssuanceCAD = "fake-valid-country-of-issuance-cad-nonce";
        public static $transactableIssuingBankNetworkOnly = "fake-valid-issuing-bank-network-only-nonce";
        public static $processorDeclinedVisa = "fake-processor-declined-visa-nonce";
        public static $processorDeclinedMasterCard = "fake-processor-declined-mastercard-nonce";
        public static $processorDeclinedAmEx = "fake-processor-declined-amex-nonce";
        public static $processorDeclinedDiscover = "fake-processor-declined-discover-nonce";
        public static $processorFailureJCB = "fake-processor-failure-jcb-nonce";
        public static $luhnInvalid = "fake-luhn-invalid-nonce";
        public static $localPayment = "fake-local-payment-method-nonce";
        public static $paypalFuturePaymentRefreshToken = "fake-paypal-future-refresh-token-nonce";
        public static $sepa = "fake-sepa-bank-account-nonce";
        public static $gatewayRejectedFraud = "fake-gateway-rejected-fraud-nonce";
        public static $gatewayRejectedTokenIssuance = "fake-token-issuance-error-venmo-account-nonce";
        public static $venmoAccount = "fake-venmo-account-nonce";
        public static $visaCheckoutAmEx = "fake-visa-checkout-amex-nonce";
        public static $visaCheckoutDiscover = "fake-visa-checkout-discover-nonce";
        public static $visaCheckoutMasterCard = "fake-visa-checkout-mastercard-nonce";
        public static $visaCheckoutVisa = "fake-visa-checkout-visa-nonce";
        public static $samsungPayAmEx = "tokensam_fake_american_express";
        public static $samsungPayDiscover = "tokensam_fake_discover";
        public static $samsungPayMasterCard = "tokensam_fake_mastercard";
        public static $samsungPayVisa = "tokensam_fake_visa";
        // phpcs:enable Generic.Files.LineLength
    }
    /**
     * Credit card information used for testing purposes
     *
     * The constants contained in the Test\CreditCardNumbers class provide
     * credit card numbers that should be used when working in the sandbox environment.
     * The sandbox will not accept any credit card numbers other than the ones listed below.
     */
    class CreditCardNumbers
    {
        public static $amExes = ['378282246310005', '371449635398431', '378734493671000'];
        public static $carteBlanches = ['30569309025904'];
        public static $dinersClubs = ['38520000023237'];
        public static $discoverCards = ['6011111111111117', '6011000990139424'];
        public static $hiper = '6370950000000005';
        public static $hiperCard = '6062820524845321';
        public static $elo = '5066991111111118';
        public static $eloCards = ['5066991111111118'];
        public static $JCBs = ['3530111333300000', '3566002020360505'];
        public static $masterCard = '5555555555554444';
        public static $masterCardInternational = '5105105105105100';
        public static $masterCards = ['5105105105105100', '5555555555554444'];
        public static $visa = '4012888888881881';
        public static $visaInternational = '4009348888881881';
        public static $visas = ['4009348888881881', '4012888888881881', '4111111111111111', '4000111111111115'];
        public static $unknowns = ['1000000000000008'];
        public static $failsSandboxVerification = ['AmEx' => '378734493671000', 'Discover' => '6011000990139424', 'MasterCard' => '5105105105105100', 'Visa' => '4000111111111115'];
        public static $amexPayWithPoints = ['Success' => "371260714673002", 'IneligibleCard' => "378267515471109", 'InsufficientPoints' => "371544868764018"];
        public static $disputes = ['Chargeback' => '4023898493988028'];
        /**
         * Get all test credit cards in one array
         *
         * @return array
         */
        public static function getAll()
        {
        }
    }
    /**
     * Authentication Ids used for testing purposes
     */
    /**
     * Authentication Ids used for testing purposes
     *
     * The constants in this class can be used to perform authentication id operations
     * with the desired status in the sandbox environment.
     */
    class AuthenticationIds
    {
        // phpcs:disable Generic.Files.LineLength
        public static $threeDSecureVisaFullAuthenticationNonce = "fake-three-d-secure-visa-full-authentication-nonce";
        public static $threeDSecureVisaLookupTimeout = "fake-three-d-secure-visa-lookup-timeout-nonce";
        public static $threeDSecureVisaFailedSignature = "fake-three-d-secure-visa-failed-signature-nonce";
        public static $threeDSecureVisaFailedAuthentication = "fake-three-d-secure-visa-failed-authentication-nonce";
        public static $threeDSecureVisaAttemptsNonParticipating = "fake-three-d-secure-visa-attempts-non-participating-nonce";
        public static $threeDSecureVisaNoteEnrolled = "fake-three-d-secure-visa-not-enrolled-nonce";
        public static $threeDSecureVisaUnavailable = "fake-three-d-secure-visa-unavailable-nonce";
        public static $threeDSecureVisaMPILookupError = "fake-three-d-secure-visa-mpi-lookup-error-nonce";
        public static $threeDSecureVisaMPIAuthenticateError = "fake-three-d-secure-visa-mpi-authenticate-error-nonce";
        public static $threeDSecureVisaAuthenticationUnavailable = "fake-three-d-secure-visa-authentication-unavailable-nonce";
        public static $threeDSecureVisaBypassedAuthentication = "fake-three-d-secure-visa-bypassed-authentication-nonce";
        public static $threeDSecureTwoVisaSuccessfulFrictionlessAuthentication = "fake-three-d-secure-two-visa-successful-frictionless-authentication-nonce";
        public static $threeDSecureTwoVisaSuccessfulStepUpAuthentication = "fake-three-d-secure-two-visa-successful-step-up-authentication-nonce";
        public static $threeDSecureTwoVisaErrorOnLookup = "fake-three-d-secure-two-visa-error-on-lookup-nonce";
        public static $threeDSecureTwoVisaTimeoutOnLookup = "fake-three-d-secure-two-visa-timeout-on-lookup-nonce";
        // phpcs:enable Generic.Files.LineLength
    }
    /**
     * Transaction amounts used for testing purposes
     *
     * The constants in this class can be used to create transactions with
     * the desired status in the sandbox environment.
     */
    class TransactionAmounts
    {
        public static $authorize = '1000.00';
        public static $decline = '2000.00';
        public static $hardDecline = '2015.00';
    }
}
namespace Braintree {
    /**
     * Paginated Results class
     */
    class PaginatedResult
    {
        private $_totalItems;
        private $_pageSize;
        private $_currentPage;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($totalItems, $pageSize, $currentPage)
        {
        }
        /*
         * Getter method for totalItems
         *
         * @return int
         */
        public function getTotalItems()
        {
        }
        /*
         * Getter method for page size
         *
         * @return int
         */
        public function getPageSize()
        {
        }
        /*
         * Getter method for the current page index
         *
         * @return int
         */
        public function getCurrentPage()
        {
        }
    }
    /**
     * Braintree CreditCard module
     * Creates and manages Braintree CreditCards
     *
     * For more detailed information on CreditCards, see {@link https://developer.paypal.com/braintree/docs/reference/response/credit-card our developer docs}<br />
     * For more detailed information on CreditCard verifications, see {@link https://developer.paypal.com/braintree/docs/reference/response/credit-card-verification our developer docs}
     */
    class CreditCard extends \Braintree\Base
    {
        // Card Type
        const AMEX = 'American Express';
        const CARTE_BLANCHE = 'Carte Blanche';
        const CHINA_UNION_PAY = 'China UnionPay';
        const DINERS_CLUB_INTERNATIONAL = 'Diners Club';
        const DISCOVER = 'Discover';
        const ELO = 'Elo';
        const JCB = 'JCB';
        const LASER = 'Laser';
        const MAESTRO = 'Maestro';
        const UK_MAESTRO = 'UK Maestro';
        const MASTER_CARD = 'MasterCard';
        const SOLO = 'Solo';
        const SWITCH_TYPE = 'Switch';
        const VISA = 'Visa';
        const UNKNOWN = 'Unknown';
        // Credit card origination location
        const INTERNATIONAL = "international";
        const US = "us";
        const PREPAID_YES = 'Yes';
        const PREPAID_NO = 'No';
        const PREPAID_UNKNOWN = 'Unknown';
        const PAYROLL_YES = 'Yes';
        const PAYROLL_NO = 'No';
        const PAYROLL_UNKNOWN = 'Unknown';
        const HEALTHCARE_YES = 'Yes';
        const HEALTHCARE_NO = 'No';
        const HEALTHCARE_UNKNOWN = 'Unknown';
        const DURBIN_REGULATED_YES = 'Yes';
        const DURBIN_REGULATED_NO = 'No';
        const DURBIN_REGULATED_UNKNOWN = 'Unknown';
        const DEBIT_YES = 'Yes';
        const DEBIT_NO = 'No';
        const DEBIT_UNKNOWN = 'Unknown';
        const COMMERCIAL_YES = 'Yes';
        const COMMERCIAL_NO = 'No';
        const COMMERCIAL_UNKNOWN = 'Unknown';
        const COUNTRY_OF_ISSUANCE_UNKNOWN = "Unknown";
        const ISSUING_BANK_UNKNOWN = "Unknown";
        const PRODUCT_ID_UNKNOWN = "Unknown";
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * checks whether the card is expired based on the current date
         *
         * @return boolean
         */
        public function isExpired()
        {
        }
        /**
         * checks whether the card is associated with venmo sdk
         *
         * @return boolean
         */
        public function isVenmoSdk()
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $creditCardAttribs array of creditcard data
         *
         * @return void
         */
        protected function _initialize($creditCardAttribs)
        {
        }
        private function _compareCreatedAtOnVerifications($verificationAttrib1, $verificationAttrib2)
        {
        }
        /**
         * returns false if comparing object is not a CreditCard,
         * or is a CreditCard with a different id
         *
         * @param object $otherCreditCard customer to compare against
         *
         * @return boolean
         */
        public function isEqual($otherCreditCard)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Creates an instance of an CreditCard from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return CreditCard
         */
        public static function factory($attributes)
        {
        }
        /**
         * static method redirecting to gateway class
         *
         * @param array $attribs containing request parameters
         *
         * @see CreditCardGateway::create()
         *
         * @throws Exception\ValidationError
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($attribs)
        {
        }
        /**
         * Attempts the create operation assuming all data will validate
         * returns a CreditCard object instead of a Result
         *
         * @param array $attribs containing request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return CreditCard
         */
        public static function createNoValidate($attribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function createCreditCardUrl()
        {
        }
        /**
         * Returns a ResourceCollection of expired credit cards
         *
         * @return ResourceCollection
         */
        public static function expired()
        {
        }
        /**
         * Returns a ResourceCollection of expired credit cards
         *
         * @param string $ids containing credit card IDs
         *
         * @return ResourceCollection
         */
        public static function fetchExpired($ids)
        {
        }
        /**
         * Returns a ResourceCollection of credit cards expiring between start/end
         *
         * @param string $startDate the start date of search
         * @param string $endDate   the end date of search
         *
         * @return ResourceCollection
         */
        public static function expiringBetween($startDate, $endDate)
        {
        }
        /**
         * Returns a ResourceCollection of credit cards expiring between start/end given a set of IDs
         *
         * @param string $startDate the start date of search
         * @param string $endDate   the end date of search
         * @param string $ids       containing ids to search
         *
         * @return ResourceCollection
         */
        public static function fetchExpiring($startDate, $endDate, $ids)
        {
        }
        /**
         * Find a creditcard by token
         *
         * @param string $token credit card unique id
         *
         * @throws Exception\NotFound
         *
         * @return CreditCard
         */
        public static function find($token)
        {
        }
        /**
         * Convert a payment method nonce to a credit card
         *
         * @param string $nonce payment method nonce
         *
         * @throws Exception\NotFound
         *
         * @return CreditCard
         */
        public static function fromNonce($nonce)
        {
        }
        /**
         * Create a credit on the card for the passed transaction
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public static function credit($token, $transactionAttribs)
        {
        }
        /**
         * Create a credit on this card, assuming validations will pass
         *
         * Returns a Transaction object on success
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return Transaction
         */
        public static function creditNoValidate($token, $transactionAttribs)
        {
        }
        /**
         * Create a new sale for the current card
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public static function sale($token, $transactionAttribs)
        {
        }
        /**
         * Create a new sale using this card, assuming validations will pass
         *
         * Returns a Transaction object on success
         *
         * @param string $token              belonging to the credit card
         * @param array  $transactionAttribs containing request parameters
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Transaction
         */
        public static function saleNoValidate($token, $transactionAttribs)
        {
        }
        /**
         * Updates the creditcard record
         *
         * If calling this method in context, $token
         * is the 2nd attribute. $token is not sent in object context.
         *
         * @param string $token      (optional)
         * @param array  $attributes containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public static function update($token, $attributes)
        {
        }
        /**
         * Update a creditcard record, assuming validations will pass
         *
         * If calling this method in context, $token
         * is the 2nd attribute. $token is not sent in object context.
         * returns a CreditCard object on success
         *
         * @param string $token      (optional)
         * @param array  $attributes containing request parameters
         *
         * @return CreditCard
         *
         * @throws Exception\ValidationsFailed
         */
        public static function updateNoValidate($token, $attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function updateCreditCardUrl()
        {
        }
        /**
         * Delete a credit card record
         *
         * @param string $token credit card identifier
         *
         * @return Result
         */
        public static function delete($token)
        {
        }
        /**
         * All credit card types in an array
         *
         * @return array
         */
        public static function allCardTypes()
        {
        }
    }
    /**
     * Braintree AddOnGateway module
     *
     * Manages subscription addons
     */
    class AddOnGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Retrieve all add ons
         *
         * @return AddOn[]
         */
        public function all()
        {
        }
    }
    /**
     * Braintree OAuthGateway module
     * Creates and manages Braintree Addresses
     */
    class OAuthGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /* Create an oAuth token from an authorization code
         *
         * @param mixed $params of request details
         *
         * @return Result\Successful|Result\Error
         */
        public function createTokenFromCode($params)
        {
        }
        /* Create an oAuth token from a refresh token
         *
         * @param mixed $params of request details
         *
         * @return Result\Successful|Result\Error
         */
        public function createTokenFromRefreshToken($params)
        {
        }
        /* Revoke an oAuth Access token
         *
         * @param mixed $params of request details
         *
         * @return Result\Successful|Result\Error
         */
        public function revokeAccessToken($accessToken)
        {
        }
        private function _createToken($params)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        private function _verifyGatewayResponse($response)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _mapError($result)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _mapAccessTokenRevokeSuccess($result)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _mapSuccess($result)
        {
        }
        /*
         * Create URL for oAuth connection
         *
         * @param array $params optional
         *
         * @return string
         */
        public function connectUrl($params = [])
        {
        }
    }
}
namespace Braintree\Result {
    /**
     * Braintree Credit Card Verification Result
     *
     * This object is returned as part of an Error Result; it provides
     * access to the credit card verification data from the gateway
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/credit-card-verification developer docs} for information on attributes
     */
    class CreditCardVerification extends \Braintree\Base
    {
        // Status
        const FAILED = 'failed';
        const GATEWAY_REJECTED = 'gateway_rejected';
        const PROCESSOR_DECLINED = 'processor_declined';
        const VERIFIED = 'verified';
        private $_amount;
        private $_avsErrorResponseCode;
        private $_avsPostalCodeResponseCode;
        private $_avsStreetAddressResponseCode;
        private $_currencyIsoCode;
        private $_cvvResponseCode;
        private $_gatewayRejectionReason;
        private $_status;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
        /**
         * initializes instance properties from the keys/values of an array
         *
         * @param <type> $aAttribs array of properties to set - single level
         *
         * @return void
         */
        private function _initializeFromArray($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __get($name)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * returns an array of all possible Credit Card Verification statuses
         *
         * @return array
         */
        public static function allStatuses()
        {
        }
    }
}
namespace Braintree {
    /**
     * {@inheritdoc}
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/credit-card-verification developer docs} for information on attributes
     */
    class CreditCardVerification extends \Braintree\Result\CreditCardVerification
    {
        /**
         * Creates an instance of a CreditCardVerification from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return CreditCardVerification
         */
        public static function factory($attributes)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param array $attributes containing request parameters
         *
         * @see CreditCardVerificationGateway::create()
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($attributes)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param array $query search parameters
         * @param array $ids   of verifications to search
         *
         * @see CreditCardVerificationGateway::fetch()
         *
         * @return Array of CreditCardVerification objects
         */
        public static function fetch($query, $ids)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param mixed $query search query
         *
         * @see CreditCardVerificationGateway::search()
         *
         * @return ResourceCollection
         */
        public static function search($query)
        {
        }
        /*
         * Returns keys that are acceptable for create requests
         */
        public static function createSignature()
        {
        }
    }
    /**
     * PaymentInstrumentType module
     *
     * Contains constants for all payment methods that are possible to integrate with Braintree
     */
    class PaymentInstrumentType
    {
        const GOOGLE_PAY_CARD = 'android_pay_card';
        const APPLE_PAY_CARD = 'apple_pay_card';
        const CREDIT_CARD = 'credit_card';
        const LOCAL_PAYMENT = 'local_payment';
        const PAYPAL_ACCOUNT = 'paypal_account';
        const PAYPAL_HERE = 'paypal_here';
        const SAMSUNG_PAY_CARD = 'samsung_pay_card';
        const US_BANK_ACCOUNT = 'us_bank_account';
        const VENMO_ACCOUNT = 'venmo_account';
        const VISA_CHECKOUT_CARD = 'visa_checkout_card';
    }
    /**
     * Braintree Subscription module
     *
     * // phpcs:ignore
     * For more detailed information on Subscriptions, see {@link https://developer.paypal.com/braintree/docs/reference/response/subscription our developer docs}
     */
    class Subscription extends \Braintree\Base
    {
        const ACTIVE = 'Active';
        const CANCELED = 'Canceled';
        const EXPIRED = 'Expired';
        const PAST_DUE = 'Past Due';
        const PENDING = 'Pending';
        // Subscription Sources
        const API = 'api';
        const CONTROL_PANEL = 'control_panel';
        const RECURRING = 'recurring';
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Subscription
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param array $attributes containing request params
         *
         * @see SubscriptionGateway::create()
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($attributes)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param string $id of the subscription to find
         *
         * @see SubscriptionGateway::find()
         *
         * @return Subscription|Exception\NotFound
         */
        public static function find($id)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param mixed $query of search fields
         *
         * @see SubscriptionGateway::search()
         *
         * @return ResourceCollection of Subscription objects
         */
        public static function search($query)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param mixed $query of search fields
         * @param array $ids to be fetched
         *
         * @see SubscriptionGateway::fetch()
         *
         * @return ResourceCollection of Subscription objects
         */
        public static function fetch($query, $ids)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param string $subscriptionId the ID of the subscription to be updated
         * @param mixed $attributes
         *
         * @see SubscriptionGateway::update()
         *
         * @return Subscription|Exception\NotFound
         */
        public static function update($subscriptionId, $attributes)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param string $subscriptionId the ID of the subscription with a charge being retried
         * @param string $amount optional
         * @param bool $submitForSettlement defaults to false unless specified true
         *
         * @see SubscriptionGateway::retryCharge()
         *
         * @return Transaction
         */
        public static function retryCharge($subscriptionId, $amount = null, $submitForSettlement = false)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param string $subscriptionId to be canceled
         *
         * @see SubscriptionGateway::cancel()
         *
         * @return Subscription|Exception\NotFound
         */
        public static function cancel($subscriptionId)
        {
        }
    }
    /**
     * Braintree IsNode
     * IsNode is an object for search elements sent to the Braintree API
     */
    class IsNode
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($name)
        {
        }
        /**
         * Sets the value of the object's "is" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function is($value)
        {
        }
        /**
         * The searchTerms
         *
         * @return array
         */
        public function toParam()
        {
        }
    }
    /**
     * Braintree Gateway module
     */
    class Gateway
    {
        /**
         *
         * @var Configuration
         */
        public $config;
        /**
         *
         * @var GraphQLClient
         */
        public $graphQLClient;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($config)
        {
        }
        /**
         *
         * @return AddOnGateway
         */
        public function addOn()
        {
        }
        /**
         *
         * @return AddressGateway
         */
        public function address()
        {
        }
        /**
         *
         * @return ApplePayGateway
         */
        public function applePay()
        {
        }
        /**
         *
         * @return ClientTokenGateway
         */
        public function clientToken()
        {
        }
        /**
         *
         * @return CreditCardGateway
         */
        public function creditCard()
        {
        }
        /**
         *
         * @return CreditCardVerificationGateway
         */
        public function creditCardVerification()
        {
        }
        /**
         *
         * @return CustomerGateway
         */
        public function customer()
        {
        }
        /**
         *
         * @return DiscountGateway
         */
        public function discount()
        {
        }
        /**
         *
         * @return DisputeGateway
         */
        public function dispute()
        {
        }
        /**
         *
         * @return DocumentUploadGateway
         */
        public function documentUpload()
        {
        }
        /**
         *
         * @return MerchantGateway
         */
        public function merchant()
        {
        }
        /**
         *
         * @return MerchantAccountGateway
         */
        public function merchantAccount()
        {
        }
        /**
         *
         * @return OAuthGateway
         */
        public function oauth()
        {
        }
        /**
         *
         * @return PaymentMethodGateway
         */
        public function paymentMethod()
        {
        }
        /**
         *
         * @return PaymentMethodNonceGateway
         */
        public function paymentMethodNonce()
        {
        }
        /**
         *
         * @return PayPalAccountGateway
         */
        public function payPalAccount()
        {
        }
        /**
         *
         * @return PlanGateway
         */
        public function plan()
        {
        }
        /**
         *
         * @return SettlementBatchSummaryGateway
         */
        public function settlementBatchSummary()
        {
        }
        /**
         *
         * @return SubscriptionGateway
         */
        public function subscription()
        {
        }
        /**
         *
         * @return TestingGateway
         */
        public function testing()
        {
        }
        /**
         *
         * @return TransactionGateway
         */
        public function transaction()
        {
        }
        /**
         *
         * @return TransactionLineItemGateway
         */
        public function transactionLineItem()
        {
        }
        /**
         *
         * @return UsBankAccountGateway
         */
        public function usBankAccount()
        {
        }
        /**
         *
         * @return UsBankAccountVerificationGateway
         */
        public function usBankAccountVerification()
        {
        }
        /**
         *
         * @return WebhookNotificationGateway
         */
        public function webhookNotification()
        {
        }
        /**
         *
         * @return WebhookTestingGateway
         */
        public function webhookTesting()
        {
        }
    }
    /**
     * Modification class
     * For changes to Subscriptions
     *
     * @see AddOn
     */
    class Modification extends \Braintree\Base
    {
        protected function _initialize($attributes)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Modification
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Discount class
     *
     * Object containing information on Discountss of a subscription
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/discount developer docs} for information on attributes
     */
    class Discount extends \Braintree\Modification
    {
        /**
         * Creates an instance of a Discount from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Discount
         */
        public static function factory($attributes)
        {
        }
        /**
         * static methods redirecting to gateway class
         *
         * @see DiscountGateway::all()
         *
         * @return Discount[]
         */
        public static function all()
        {
        }
    }
}
namespace Braintree\Transaction {
    /**
     * Status details from a transaction
     * Creates an instance of StatusDetails, as part of a transaction response
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#status_history developer docs} for information on attributes
     */
    class StatusDetails extends \Braintree\Instance
    {
    }
    /**
     * Google Pay card details from a transaction
     */
    /**
     * creates an instance of GooglePayCardDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#android_pay_details developer docs} for information on attributes
     */
    class GooglePayCardDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * Apple Pay card details from a transaction
     */
    /**
     * creates an instance of ApplePayCardDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#apple_pay_details developer docs} for information on attributes
     */
    class ApplePayCardDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * Customer details from a transaction
     * Creates an instance of customer details as returned from a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#subscription_details developer docs} for information on attributes
     */
    class SubscriptionDetails extends \Braintree\Instance
    {
    }
    /**
     * PayPal Here details from a transaction
     */
    /**
     * creates and instance of PayPalHereDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#paypal_here_details developer docs} for information on attributes
     */
    class PayPalHereDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * VisaCheckoutCard details from a transaction
     * creates an instance of VisaCheckoutCardDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#visa_checkout_card_details developer docs} for information on attributes
     */
    class VisaCheckoutCardDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * PayPal details from a transaction
     */
    /**
     * creates an instance of PayPalDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#paypal_details developer docs} for information on attributes
     */
    class PayPalDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * Venmo account details from a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#venmo_account_details developer docs} for information on attributes
     */
    class VenmoAccountDetails extends \Braintree\Instance
    {
        protected $_attributes = array();
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * SamsungPayCard details from a transaction
     * creates an instance of SamsungPayCardDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#samsung_pay_card_details developer docs} for information on attributes
     */
    class SamsungPayCardDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * US Bank Account details from a transaction
     * creates an instance of UsbankAccountDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/guides/ach/server-side developer docs} for more information
     */
    class UsBankAccountDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * CreditCard details from a transaction
     * creates an instance of CreditCardDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#credit_card_details developer docs} for information on attributes
     */
    class CreditCardDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * Customer details from a transaction
     * Creates an instance of customer details as returned from a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#customer_details developer docs} for information on attributes
     */
    class CustomerDetails extends \Braintree\Instance
    {
    }
    /**
     * Creates an instance of AddressDetails as returned from a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction developer docs} for information on attributes
     */
    class AddressDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
    }
    /**
     * Local payment details from a transaction
     */
    /**
     * creates an instance of LocalPaymentDetails
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction developer docs} for information on attributes
     */
    class LocalPaymentDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
}
namespace Braintree {
    /**
     * Braintree HTTP Client
     * processes Http requests using curl
     */
    class Http
    {
        protected $_config;
        private $_useClientCredentials = false;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($config)
        {
        }
        /*
         * DELETE request
         *
         * @param string $path URL path
         * @param object $params optional any addition request parameters
         *
         * @return array|Exception
         */
        public function delete($path, $params = null)
        {
        }
        /*
         * GET request
         *
         * @param string $path URL path
         *
         * @return array|Exception
         */
        public function get($path)
        {
        }
        /*
         * POST request
         *
         * @param string $path URL path
         * @param object $params optional any addition request parameters
         *
         * @return array|Exception
         */
        public function post($path, $params = null)
        {
        }
        /*
         * POST request for multi parts to be sent
         *
         * @param string $path URL path
         * @param object $params additional request parameters
         * @param object $file to be uploaded
         *
         * @return array|Exception
         */
        public function postMultipart($path, $params, $file)
        {
        }
        /*
         * PUT request
         *
         * @param string $path URL path
         * @param object $params optional any addition request parameters
         *
         * @return array|Exception
         */
        public function put($path, $params = null)
        {
        }
        private function _buildXml($params)
        {
        }
        /*
         * Sets internal variable to true
         */
        public function useClientCredentials()
        {
        }
        private function _doRequest($httpVerb, $path, $requestBody = null, $file = null, $headers = null)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doUrlRequest($httpVerb, $url, $requestBody = null, $file = null, $customHeaders = null)
        {
        }
    }
    /**
     * Braintree FacilitatorDetails class
     *
     * If a transaction request was performed using payment information from a third party via the Grant API, Shared Vault or Google Pay, thise object will have information about the third party. These fields are primarily useful for the merchant of record.
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction/#facilitator_details developer docs} for information on attributes
     */
    class FacilitatorDetails extends \Braintree\Base
    {
        /**
         * Creates an instance of an FacilitatorDetails from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return FacilitatorDetails
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
    * Braintree Transaction processor creates and manages transactions
    *
    * At minimum, an amount, credit card number, and
    * credit card expiration date are required.
    *
    * <b>Minimalistic example:</b>
    * <code>
    * Transaction::saleNoValidate(array(
    *   'amount' => '100.00',
    *   'creditCard' => array(
    *       'number' => '5105105105105100',
    *       'expirationDate' => '05/12',
    *       ),
    *   ));
    * </code>
    *
    * <b>Full example:</b>
    * <code>
    * Transaction::saleNoValidate(array(
    *    'amount'      => '100.00',
    *    'orderId'    => '123',
    *    'channel'    => 'MyShoppingCardProvider',
    *    'creditCard' => array(
    *         // if token is omitted, the gateway will generate a token
    *         'token' => 'credit_card_123',
    *         'number' => '5105105105105100',
    *         'expirationDate' => '05/2011',
    *         'cvv' => '123',
    *    ),
    *    'customer' => array(
    *     // if id is omitted, the gateway will generate an id
    *     'id'    => 'customer_123',
    *     'firstName' => 'Dan',
    *     'lastName' => 'Smith',
    *     'company' => 'Braintree',
    *     'email' => 'dan@example.com',
    *     'phone' => '419-555-1234',
    *     'fax' => '419-555-1235',
    *     'website' => 'http://braintreepayments.com'
    *    ),
    *    'billing'    => array(
    *      'firstName' => 'Carl',
    *      'lastName'  => 'Jones',
    *      'company'    => 'Braintree',
    *      'streetAddress' => '123 E Main St',
    *      'extendedAddress' => 'Suite 403',
    *      'locality' => 'Chicago',
    *      'region' => 'IL',
    *      'postalCode' => '60622',
    *      'countryName' => 'United States of America'
    *    ),
    *    'shipping' => array(
    *      'firstName'    => 'Andrew',
    *      'lastName'    => 'Mason',
    *      'company'    => 'Braintree',
    *      'streetAddress'    => '456 W Main St',
    *      'extendedAddress'    => 'Apt 2F',
    *      'locality'    => 'Bartlett',
    *      'region'    => 'IL',
    *      'postalCode'    => '60103',
    *      'countryName'    => 'United States of America'
    *    ),
    *    'customFields'    => array(
    *      'birthdate'    => '11/13/1954'
    *    )
    *  )
    * </code>
    *
    * <b>== Storing in the Vault ==</b>
    *
    * The customer and credit card information used for
    * a transaction can be stored in the vault by setting
    * <i>transaction[options][storeInVault]</i> to true.
    * <code>
    *   $transaction = Transaction::saleNoValidate(array(
    *     'customer' => array(
    *       'firstName'    => 'Adam',
    *       'lastName'    => 'Williams'
    *     ),
    *     'creditCard'    => array(
    *       'number'    => '5105105105105100',
    *       'expirationDate'    => '05/2012'
    *     ),
    *     'options'    => array(
    *       'storeInVault'    => true
    *     )
    *   ));
    *
    *  echo $transaction->customerDetails->id
    *  // '865534'
    *  echo $transaction->creditCardDetails->token
    *  // '6b6m'
    * </code>
    *
    * To also store the billing address in the vault, pass the
    * <b>addBillingAddressToPaymentMethod</b> option.
    * <code>
    *   Transaction.saleNoValidate(array(
    *    ...
    *     'options' => array(
    *       'storeInVault' => true
    *       'addBillingAddressToPaymentMethod' => true
    *     )
    *   ));
    * </code>
    *
    * <b>== Submitting for Settlement==</b>
    *
    * This can only be done when the transction's
    * status is <b>authorized</b>. If <b>amount</b> is not specified,
    * the full authorized amount will be settled. If you would like to settle
    * less than the full authorized amount, pass the desired amount.
    * You cannot settle more than the authorized amount.
    *
    * A transaction can be submitted for settlement when created by setting
    * $transaction[options][submitForSettlement] to true.
    *
    * <code>
    *   $transaction = Transaction::saleNoValidate(array(
    *     'amount'    => '100.00',
    *     'creditCard'    => array(
    *       'number'    => '5105105105105100',
    *       'expirationDate'    => '05/2012'
    *     ),
    *     'options'    => array(
    *       'submitForSettlement'    => true
    *     )
    *   ));
    * </code>
    *
    * For more detailed information on Transactions, see {@link https://developer.paypal.com/braintree/docs/reference/response/transaction our developer docs}
    // phpcs:enable Generic.Files.LineLength
    */
    class Transaction extends \Braintree\Base
    {
        // Transaction Status
        const AUTHORIZATION_EXPIRED = 'authorization_expired';
        const AUTHORIZING = 'authorizing';
        const AUTHORIZED = 'authorized';
        const GATEWAY_REJECTED = 'gateway_rejected';
        const FAILED = 'failed';
        const PROCESSOR_DECLINED = 'processor_declined';
        const SETTLED = 'settled';
        const SETTLING = 'settling';
        const SUBMITTED_FOR_SETTLEMENT = 'submitted_for_settlement';
        const VOIDED = 'voided';
        const UNRECOGNIZED = 'unrecognized';
        const SETTLEMENT_DECLINED = 'settlement_declined';
        const SETTLEMENT_PENDING = 'settlement_pending';
        const SETTLEMENT_CONFIRMED = 'settlement_confirmed';
        // Transaction Escrow Status
        const ESCROW_HOLD_PENDING = 'hold_pending';
        const ESCROW_HELD = 'held';
        const ESCROW_RELEASE_PENDING = 'release_pending';
        const ESCROW_RELEASED = 'released';
        const ESCROW_REFUNDED = 'refunded';
        // Transaction Types
        const SALE = 'sale';
        const CREDIT = 'credit';
        // Transaction Created Using
        const FULL_INFORMATION = 'full_information';
        const TOKEN = 'token';
        // Transaction Sources
        const API = 'api';
        const CONTROL_PANEL = 'control_panel';
        const RECURRING = 'recurring';
        // Gateway Rejection Reason
        const AVS = 'avs';
        const AVS_AND_CVV = 'avs_and_cvv';
        const CVV = 'cvv';
        const DUPLICATE = 'duplicate';
        const FRAUD = 'fraud';
        const RISK_THRESHOLD = 'risk_threshold';
        const THREE_D_SECURE = 'three_d_secure';
        const TOKEN_ISSUANCE = 'token_issuance';
        const APPLICATION_INCOMPLETE = 'application_incomplete';
        // Industry Types
        const LODGING_INDUSTRY = 'lodging';
        const TRAVEL_AND_CRUISE_INDUSTRY = 'travel_cruise';
        const TRAVEL_AND_FLIGHT_INDUSTRY = 'travel_flight';
        // Additional Charge Types
        const RESTAURANT = 'lodging';
        const GIFT_SHOP = 'gift_shop';
        const MINI_BAR = 'mini_bar';
        const TELEPHONE = 'telephone';
        const LAUNDRY = 'laundry';
        const OTHER = 'other';
        /**
         * sets instance properties from an array of values
         *
         * @param array $transactionAttribs array of transaction data
         *
         * @return void
         */
        protected function _initialize($transactionAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /*
         * Checks if one transaction's ID is the same as another transaction's Id.
         *
         * @param string $otherTx to be compared
         *
         * @return bool
         */
        public function isEqual($otherTx)
        {
        }
        //NEXT_MAJOR_VERSION this function is only used for tests, the assertions this function provides are obfuscated.
        //We should remove this function and update the tests to be more clear in what we're asserting.
        public function vaultCreditCard()
        {
        }
        //NEXT_MAJOR_VERSION this function is only used for tests, the assertions this function provides are obfuscated.
        //We should remove this function and update the tests to be more clear in what we're asserting.
        public function vaultCustomer()
        {
        }
        /**
         * Checks if transactions is disbursed
         *
         * @return boolean
         */
        public function isDisbursed()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @see TransactionLineItemGateway::findAll()
         *
         * @return ResourceCollection of TransactionLineItem objects
         */
        public function lineItems()
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Transaction
         */
        public static function factory($attributes)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unique identifier
         * @param string $amount        to be adjusted
         *
         * @see TransactionGateway::adjustAuthorization()
         *
         * @return Transction|Result\Error
         */
        public static function adjustAuthorization($transactionId, $amount)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId to be cloned
         * @param mixed  $attribs       containing any additional request parameters
         *
         * @see TransactionGateway::cloneTransaction()
         *
         * @return Transction|Result\Error
         */
        public static function cloneTransaction($transactionId, $attribs)
        {
        }
        //NEXT_MAJOR_VERSION remove this function, it was only used for a Transparent Redirect test that no longer exists
        public static function createTransactionUrl()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $attribs containing any request parameters
         *
         * @see TransactionGateway::credit()
         *
         * @return Result\Successful|Result\Error
         */
        public static function credit($attribs)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $attribs containing any request parameters
         *
         * @see TransactionGateway::creditNoValidate()
         *
         * @return Transaction|Result\Error
         */
        public static function creditNoValidate($attribs)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $id unique identifier of the transaction to find
         *
         * @see TransactionGateway::find()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function find($id)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $attribs containing any request parameters
         *
         * @see TransactionGateway::sale()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function sale($attribs)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $attribs containing any request parameters
         *
         * @see TransactionGateway::saleNoValidate()
         *
         * @return Transaction|Result\Error
         */
        public static function saleNoValidate($attribs)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $query containing search fields
         *
         * @see TransactionGateway::search()
         *
         * @return ResourceCollection of Transaction objects
         */
        public static function search($query)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param mixed $query of search fields
         * @param array $ids to be fetched
         *
         * @see TransactionGateway::fetch()
         *
         * @return ResourceCollection of Transaction objects
         */
        public static function fetch($query, $ids)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be voided
         *
         * @see TransactionGateway::void()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function void($transactionId)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be voided
         *
         * @see TransactionGateway::voidNoValidate()
         *
         * @return Transaction|Result\Error
         */
        public static function voidNoValidate($transactionId)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be submitted for settlement
         * @param string $amount        optional
         * @param mixed  $attribs       any additional request parameters
         *
         * @see TransactionGateway::submitForSettlement()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function submitForSettlement($transactionId, $amount = null, $attribs = [])
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be submitted for settlement
         * @param string $amount        optional
         * @param mixed  $attribs       any additional request parameters
         *
         * @see TransactionGateway::submitForSettlement()
         *
         * @return Transaction|Result\Error
         */
        public static function submitForSettlementNoValidate($transactionId, $amount = null, $attribs = [])
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId to be updated
         * @param array  $attribs       attributes to be updated in the request
         *
         * @see TransactionGateway::updateDetails()
         *
         * @return Result\Successful|Result\Error
         */
        public static function updateDetails($transactionId, $attribs = [])
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be submitted for settlement
         * @param string $amount        optional
         * @param mixed  $attribs       any additional request parameters
         *
         * @see TransactionGateway::submitForPartialSettlement()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function submitForPartialSettlement($transactionId, $amount, $attribs = [])
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be held in escrow
         *
         * @see TransactionGateway::holdInEscrow()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function holdInEscrow($transactionId)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be released from escrow
         *
         * @see TransactionGateway::releaseFromEscrow()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function releaseFromEscrow($transactionId)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction whose escrow release is to be canceled
         *
         * @see TransactionGateway::cancelRelease()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function cancelRelease($transactionId)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $transactionId unque identifier of the transaction to be refunded
         * @param string $amount        to be refunded, optional
         *
         * @see TransactionGateway::refund()
         *
         * @return Result\Successful|Exception\NotFound
         */
        public static function refund($transactionId, $amount = null)
        {
        }
    }
    class WebhookTesting
    {
        public static function sampleNotification($kind, $id, $sourceMerchantId = null)
        {
        }
    }
    /**
     * Braintree PaymentMethodNonceGateway module
     */
    class PaymentMethodNonceGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Create a payment method nonce from an existing payment method's token
         *
         * @param string     $token  the identifier of the payment method
         * @param mixed|null $params additional parameters to be included in the request
         *
         * @return PaymentMethodNonce|Error
         */
        public function create($token, $params = [])
        {
        }
        /**
         * Find a Payment Method Nonce given the string value
         *
         * @param string $nonce to be found
         *
         * @throws NotFound
         *
         * @return PaymentMethodNonce
         */
        public function find($nonce)
        {
        }
    }
    /**
     * Braintree VenmoAccount module
     * Creates and manages Braintree Venmo accounts
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/venmo-account developer docs} for information on attributes
     */
    class VenmoAccount extends \Braintree\Base
    {
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return VenmoAccount
         */
        public static function factory($attributes)
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $venmoAccountAttribs array of Venmo account properties
         *
         * @return void
         */
        protected function _initialize($venmoAccountAttribs)
        {
        }
    }
    /**
     * Creates an instance of Dispute as returned from a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/dispute developer docs} for information on attributes
     */
    class Dispute extends \Braintree\Base
    {
        protected $_attributes = [];
        /* Dispute Status */
        const ACCEPTED = 'accepted';
        const DISPUTED = 'disputed';
        const EXPIRED = 'expired';
        const OPEN = 'open';
        const WON = 'won';
        const LOST = 'lost';
        /* Dispute Reason */
        const CANCELLED_RECURRING_TRANSACTION = "cancelled_recurring_transaction";
        const CREDIT_NOT_PROCESSED = "credit_not_processed";
        const DUPLICATE = "duplicate";
        const FRAUD = "fraud";
        const GENERAL = "general";
        const INVALID_ACCOUNT = "invalid_account";
        const NOT_RECOGNIZED = "not_recognized";
        const PRODUCT_NOT_RECEIVED = "product_not_received";
        const PRODUCT_UNSATISFACTORY = "product_unsatisfactory";
        const TRANSACTION_AMOUNT_DIFFERS = "transaction_amount_differs";
        const RETRIEVAL = "retrieval";
        /* Dispute ChargebackProtectionLevel */
        const EFFORTLESS = 'effortless';
        const STANDARD = 'standard';
        const NOT_PROTECTED = 'not_protected';
        /* Dispute Kind */
        const CHARGEBACK = 'chargeback';
        const PRE_ARBITRATION = 'pre_arbitration';
        // RETRIEVAL for kind already defined under Dispute Reason
        protected function _initialize($disputeAttribs)
        {
        }
        /**
         * Creates an instance of a Dispute from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Dispute
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $id unique identifier
         *
         * @see DisputeGateway::accept()
         *
         * @return Result\Successful|Result\Error
         */
        public static function accept($id)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string        $disputeId           unique identifier
         * @param string|object $documentIdOrRequest either a unique identifier string or request object
         *
         * @see DisputeGateway::addFileEvidence()
         *
         * @return Result\Successful|Result\Error
         */
        public static function addFileEvidence($disputeId, $documentIdOrRequest)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string       $id               unique identifier
         * @param string|mixed $contentOrRequest If a string, $contentOrRequest is the text-based content
         *                                       for the dispute evidence.
         *                                       Alternatively, the second argument can also be an array containing:
         *                                       - string $content The text-based content for the dispute evidence, and
         *                                       - string $category The category for this piece of evidence
         *                                       Note: (optional) string $tag parameter is deprecated, use $category instead.
         *
         * @see DisputeGateway::addTextEvidence()
         *
         * @return Result\Successful|Result\Error
         */
        public static function addTextEvidence($id, $contentOrRequest)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $id unique identifier
         *
         * @see DisputeGateway::finalize()
         *
         * @return Result\Successful|Result\Error
         */
        public static function finalize($id)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $id unique identifier
         *
         * @see DisputeGateway::find()
         *
         * @return Result\Successful|Result\Error
         */
        public static function find($id)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $disputeId  unique identifier
         * @param string $evidenceId unique identifier
         *
         * @see DisputeGateway::removeEvidence()
         *
         * @return Result\Successful|Result\Error
         */
        public static function removeEvidence($disputeId, $evidenceId)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param DisputeSearch $query
         *
         * @see DisputeGateway::search()
         *
         * @return ResourceCollection|Result\Error
         */
        public static function search($query)
        {
        }
        /*
         * Retrive all types of chargeback protection level types
         *
         * @return array
         */
        public static function allChargebackProtectionLevelTypes()
        {
        }
    }
    /**
     * Class for running dispute searches
     */
    class DisputeSearch
    {
        /*
         * Create a new range node for amount disputed
         *
         * @return RangeNode
         */
        public static function amountDisputed()
        {
        }
        /*
         * Create a new range node for amount won
         *
         * @return RangeNode
         */
        public static function amountWon()
        {
        }
        /*
         * Create a new text node for case number
         *
         * @return TextNode
         */
        public static function caseNumber()
        {
        }
        /*
         * Create a new text node for id
         *
         * @return TextNode
         */
        public static function id()
        {
        }
        /*
         * Create a new text node for customer id
         *
         * @return TextNode
         */
        public static function customerId()
        {
        }
        /*
         * Create a new multiple value node for kind
         *
         * @return MultipleValueNode
         */
        public static function kind()
        {
        }
        /*
         * Create a new multiple value node for merchant account id
         *
         * @return MultipleValueNode
         */
        public static function merchantAccountId()
        {
        }
        /*
         * Create a new multiple value node for reason
         *
         * @return MultipleValueNode
         */
        public static function reason()
        {
        }
        /*
         * Create a new multiple value node for reason code
         *
         * @return MultipleValueNode
         */
        public static function reasonCode()
        {
        }
        /*
         * Create a new range node for received date
         *
         * @return RangeNode
         */
        public static function receivedDate()
        {
        }
        /*
         * Create a new range node for disbursement date
         *
         * @return RangeNode
         */
        public static function disbursementDate()
        {
        }
        /*
         * Create a new range node for effective date
         *
         * @return RangeNode
         */
        public static function effectiveDate()
        {
        }
        /*
         * Create a new text node for reference number
         *
         * @return TextNode
         */
        public static function referenceNumber()
        {
        }
        /*
         * Create a new range node for reply by date
         *
         * @return RangeNode
         */
        public static function replyByDate()
        {
        }
        /*
         * Create a new multiple value node for status
         *
         * @return MultipleValueNode
         */
        public static function status()
        {
        }
        /*
         * Create a new multiple value node for chargeback protection level
         *
         * @return MultipleValueNode
         */
        public static function chargebackProtectionLevel()
        {
        }
        /*
         * Create a new text node for transaction id
         *
         * @return TextNode
         */
        public static function transactionId()
        {
        }
        /*
         * Create a new multiple value node for transaction source
         *
         * @return MultipleValueNode
         */
        public static function transactionSource()
        {
        }
    }
    /**
     * Braintree VenmoProfileData module
     */
    class VenmoProfileData extends \Braintree\Base
    {
        /**
         *  factory method: returns an instance of VenmoProfileData
         *  to the requesting method, with populated properties
         *
         * @param array $attributes to be used in creating the object
         *
         * @return VenmoProfileData
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($venmoProfileDataAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintre ClientToken create and manage client tokens for authorization
     */
    class ClientToken
    {
        const DEFAULT_VERSION = 2;
        /**
         * static method redirecting to gateway class
         *
         * @param array $params to be supplied in api request
         *
         * @see ClientTokenGateway::generate()
         *
         * @return string
         */
        public static function generate($params = [])
        {
        }
        /*
         * static method redirecting to gateway class
         *
         * @param array $params to be verified
         *
         * @see ClientTokenGateway::conditionallyVerifyKeys()
         *
         * @return array
         */
        public static function conditionallyVerifyKeys($params)
        {
        }
        /*
         * static method redirecting to gateway class
         *
         * @see ClientTokenGateway::generateWithCustomerIdSignature()
         *
         * @return array
         *
         */
        public static function generateWithCustomerIdSignature()
        {
        }
        /*
         * static method redirecting to gateway class
         *
         * @see ClientTokenGateway::generateWithoutCustomerIdSignature()
         *
         * @return array
         */
        public static function generateWithoutCustomerIdSignature()
        {
        }
    }
    /**
     * Braintree Generic collection
     *
     * Based on Generic Collection class from:
     * {@link http://codeutopia.net/code/library/CU/Collection.php}
     */
    class Collection implements \Countable, \IteratorAggregate, \ArrayAccess
    {
        protected $_collection = [];
        /**
         * Add a value into the collection
         *
         * @param string $value to be added
         *
         * @return mixed
         */
        public function add($value)
        {
        }
        /**
         * Set index's value
         *
         * @param integer $index thats being set
         * @param mixed   $value to set at the index
         *
         * @throws OutOfRangeException
         *
         * @return mixed
         */
        public function set($index, $value)
        {
        }
        /**
         * Remove a value from the collection
         *
         * @param integer $index index to remove
         *
         * @throws OutOfRangeException if index is out of range
         *
         * @return mixed
         */
        public function remove($index)
        {
        }
        /**
         * Return value at index
         *
         * @param integer $index of value to be retrieved
         *
         * @throws OutOfRangeException
         *
         * @return mixed
         */
        public function get($index)
        {
        }
        /**
         * Determine if index exists
         *
         * @param integer $index to check for existence
         *
         * @return boolean
         */
        public function exists($index)
        {
        }
        /**
         * Return count of items in collection
         * Implements countable
         *
         * @return integer
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * Return an iterator
         * Implements IteratorAggregate
         *
         * @return ArrayIterator
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        /**
         * Set offset to value
         * Implements ArrayAccess
         *
         * @param integer $offset
         * @param mixed   $value
         *
         * @see set
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Unset offset
         * Implements ArrayAccess
         *
         * @param integer $offset
         *
         * @see remove
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * get an offset's value
         * Implements ArrayAccess
         *
         * @param integer $offset
         *
         * @see get
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Determine if offset exists
         * Implements ArrayAccess
         *
         * @param integer $offset
         *
         * @see exists
         *
         * @return boolean
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
    }
    /**
     * Braintree AddressGateway module
     * Creates and manages Braintree Addresses
     *
     * An Address belongs to a Customer. It can be associated to a
     * CreditCard as the billing address. It can also be used
     * as the shipping address when creating a Transaction.
     */
    class AddressGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Create an Address
         *
         * @param array $attribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function create($attribs)
        {
        }
        /**
         * attempts the create operation assuming all data will validate
         * returns a Address object instead of a Result
         *
         * @param array $attribs containing request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return Address
         */
        public function createNoValidate($attribs)
        {
        }
        /**
         * delete an address by id
         *
         * @param mixed  $customerOrId either a customer object or string ID of customer
         * @param string $addressId    optional unique identifier
         *
         * @return Result\Successful|Result\Error
         */
        public function delete($customerOrId = null, $addressId = null)
        {
        }
        /**
         * find an address by id
         *
         * Finds the address with the given <b>addressId</b> that is associated
         * to the given <b>customerOrId</b>.
         * If the address cannot be found, a NotFound exception will be thrown.
         *
         * @param mixed  $customerOrId either a customer object or string ID of customer
         * @param string $addressId    optional unique identifier
         *
         * @throws Exception\NotFound
         *
         * @return Address
         */
        public function find($customerOrId, $addressId)
        {
        }
        /**
         * updates the address record
         *
         * if calling this method in context,
         * customerOrId is the 2nd attribute, addressId 3rd.
         * customerOrId & addressId are not sent in object context.
         *
         * @param mixed  $customerOrId (only used in call)
         * @param string $addressId    (only used in call)
         * @param array  $attributes   containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function update($customerOrId, $addressId, $attributes)
        {
        }
        /**
         * update an address record, assuming validations will pass
         *
         * if calling this method in context,
         * customerOrId is the 2nd attribute, addressId 3rd.
         * customerOrId & addressId are not sent in object context.
         *
         * @param mixed  $customerOrId (only used in call)
         * @param string $addressId    (only used in call)
         * @param array  $attributes   containing request parameters
         *
         * @throws Exception\ValidationsFailed
         *
         * @see Address::update()
         *
         * @return Address
         */
        public function updateNoValidate($customerOrId, $addressId, $attributes)
        {
        }
        /**
         * creates a full array signature of a valid create request
         *
         * @return array gateway create request format
         */
        public static function createSignature()
        {
        }
        /**
         * creates a full array signature of a valid update request
         *
         * @return array gateway update request format
         */
        public static function updateSignature()
        {
        }
        /**
         * verifies that a valid address id is being used
         *
         * @param string $id address id
         *
         * @throws InvalidArgumentException
         *
         * @return self
         */
        private function _validateId($id = null)
        {
        }
        /**
         * verifies that a valid customer id is being used
         *
         * @param string $id customer id
         *
         * @throws InvalidArgumentException
         *
         * @return self
         */
        private function _validateCustomerId($id = null)
        {
        }
        /**
         * determines if a string id or Customer object was passed
         *
         * @param mixed $customerOrId either a customer object or string unique identifier
         *
         * @return string customerId
         */
        private function _determineCustomerId($customerOrId)
        {
        }
        private function _doCreate($subPath, $params)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Braintree OAuthCredentials module
     */
    class OAuthResult extends \Braintree\Base
    {
        protected function _initialize($attribs)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return OAuthResult
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree VisaCheckoutCard module
     * Creates and manages Braintree VisaCheckoutCards
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/visa-checkout-card developer docs} for information on attributes
     */
    class VisaCheckoutCard extends \Braintree\Base
    {
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * checks whether the card is expired based on the current date
         *
         * @return boolean
         */
        public function isExpired()
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $creditCardAttribs array of creditcard data
         *
         * @return void
         */
        protected function _initialize($creditCardAttribs)
        {
        }
        private function _compareCreatedAtOnVerifications($verificationAttrib1, $verificationAttrib2)
        {
        }
        /**
         * returns false if comparing object is not a VisaCheckoutCard,
         * or is a VisaCheckoutCard with a different id
         *
         * @param object $otherVisaCheckoutCard customer to compare against
         *
         * @return boolean
         */
        public function isEqual($otherVisaCheckoutCard)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return VisaCheckoutCard
         */
        public static function factory($attributes)
        {
        }
    }
}
namespace Braintree\Error {
    /**
     * error object returned as part of a validation error collection
     * provides read-only access to $attribute, $code, and $message
     *
     * <b>== More information ==</b>
     *
     * // phpcs:ignore Generic.Files.LineLength
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/result-objects#error-results developer docs} for more information
     */
    class Validation
    {
        private $_attribute;
        private $_code;
        private $_message;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        private function _initializeFromArray($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __get($name)
        {
        }
    }
    /**
     * Validation Error codes and messages
     *
     * ErrorCodes class provides constants for validation errors.
     * The constants should be used to check for a specific validation
     * error in a ValidationErrorCollection.
     * The error messages returned from the server may change;
     * but the codes will remain the same.
     */
    class Codes
    {
        // phpcs:disable Generic.Files.LineLength
        const ADDRESS_CANNOT_BE_BLANK = '81801';
        const ADDRESS_COMPANY_IS_INVALID = '91821';
        const ADDRESS_COMPANY_IS_TOO_LONG = '81802';
        const ADDRESS_COUNTRY_CODE_ALPHA2_IS_NOT_ACCEPTED = '91814';
        const ADDRESS_COUNTRY_CODE_ALPHA3_IS_NOT_ACCEPTED = '91816';
        const ADDRESS_COUNTRY_CODE_NUMERIC_IS_NOT_ACCEPTED = '91817';
        const ADDRESS_COUNTRY_NAME_IS_NOT_ACCEPTED = '91803';
        const ADDRESS_EXTENDED_ADDRESS_IS_INVALID = '91823';
        const ADDRESS_EXTENDED_ADDRESS_IS_TOO_LONG = '81804';
        const ADDRESS_FIRST_NAME_IS_INVALID = '91819';
        const ADDRESS_FIRST_NAME_IS_TOO_LONG = '81805';
        const ADDRESS_INCONSISTENT_COUNTRY = '91815';
        const ADDRESS_LAST_NAME_IS_INVALID = '91820';
        const ADDRESS_LAST_NAME_IS_TOO_LONG = '81806';
        const ADDRESS_LOCALITY_IS_INVALID = '91824';
        const ADDRESS_LOCALITY_IS_TOO_LONG = '81807';
        const ADDRESS_POSTAL_CODE_INVALID_CHARACTERS = '81813';
        const ADDRESS_POSTAL_CODE_IS_INVALID = '91826';
        const ADDRESS_POSTAL_CODE_IS_REQUIRED = '81808';
        const ADDRESS_POSTAL_CODE_IS_REQUIRED_FOR_CARD_BRAND_AND_PROCESSOR = '81828';
        const ADDRESS_POSTAL_CODE_IS_TOO_LONG = '81809';
        const ADDRESS_REGION_IS_INVALID = '91825';
        const ADDRESS_REGION_IS_TOO_LONG = '81810';
        const ADDRESS_STATE_IS_INVALID_FOR_SELLER_PROTECTION = '81827';
        const ADDRESS_STREET_ADDRESS_IS_INVALID = '91822';
        const ADDRESS_STREET_ADDRESS_IS_REQUIRED = '81811';
        const ADDRESS_STREET_ADDRESS_IS_TOO_LONG = '81812';
        const ADDRESS_TOO_MANY_ADDRESSES_PER_CUSTOMER = '91818';
        const ADJUSTMENT_AMOUNT_MUST_BE_GREATER_THAN_ZERO = '95605';
        const APPLE_PAY_CARDS_ARE_NOT_ACCEPTED = '83501';
        const APPLE_PAY_CUSTOMER_ID_IS_REQUIRED_FOR_VAULTING = '83502';
        const APPLE_PAY_TOKEN_IS_IN_USE = '93503';
        const APPLE_PAY_PAYMENT_METHOD_NONCE_CONSUMED = '93504';
        const APPLE_PAY_PAYMENT_METHOD_NONCE_UNKNOWN = '93505';
        const APPLE_PAY_PAYMENT_METHOD_NONCE_UNLOCKED = '93506';
        const APPLE_PAY_PAYMENT_METHOD_NONCE_CARD_TYPE_IS_NOT_ACCEPTED = '83518';
        const APPLE_PAY_CANNOT_UPDATE_APPLE_PAY_CARD_USING_PAYMENT_METHOD_NONCE = '93507';
        const APPLE_PAY_NUMBER_IS_REQUIRED = '93508';
        const APPLE_PAY_EXPIRATION_MONTH_IS_REQUIRED = '93509';
        const APPLE_PAY_EXPIRATION_YEAR_IS_REQUIRED = '93510';
        const APPLE_PAY_CRYPTOGRAM_IS_REQUIRED = '93511';
        const APPLE_PAY_DECRYPTION_FAILED = '83512';
        const APPLE_PAY_DISABLED = '93513';
        const APPLE_PAY_MERCHANT_NOT_CONFIGURED = '93514';
        const APPLE_PAY_MERCHANT_KEYS_ALREADY_CONFIGURED = '93515';
        const APPLE_PAY_MERCHANT_KEYS_NOT_CONFIGURED = '93516';
        const APPLE_PAY_CERTIFICATE_INVALID = '93517';
        const APPLE_PAY_CERTIFICATE_MISMATCH = '93519';
        const APPLE_PAY_INVALID_TOKEN = '83520';
        const APPLE_PAY_PRIVATE_KEY_MISMATCH = '93521';
        const APPLE_PAY_KEY_MISMATCH_STORING_CERTIFICATE = '93522';
        const AUTHORIZATION_FINGERPRINT_INVALID_CREATED_AT = '93204';
        const AUTHORIZATION_FINGERPRINT_INVALID_FORMAT = '93202';
        const AUTHORIZATION_FINGERPRINT_INVALID_PUBLIC_KEY = '93205';
        const AUTHORIZATION_FINGERPRINT_INVALID_SIGNATURE = '93206';
        const AUTHORIZATION_FINGERPRINT_MISSING_FINGERPRINT = '93201';
        const AUTHORIZATION_FINGERPRINT_OPTIONS_NOT_ALLOWED_WITHOUT_CUSTOMER = '93207';
        const AUTHORIZATION_FINGERPRINT_SIGNATURE_REVOKED = '93203';
        const CLIENT_TOKEN_CUSTOMER_DOES_NOT_EXIST = '92804';
        const CLIENT_TOKEN_FAIL_ON_DUPLICATE_PAYMENT_METHOD_REQUIRES_CUSTOMER_ID = '92803';
        const CLIENT_TOKEN_MAKE_DEFAULT_REQUIRES_CUSTOMER_ID = '92801';
        const CLIENT_TOKEN_PROXY_MERCHANT_DOES_NOT_EXIST = '92805';
        const CLIENT_TOKEN_UNSUPPORTED_VERSION = '92806';
        const CLIENT_TOKEN_VERIFY_CARD_REQUIRES_CUSTOMER_ID = '92802';
        const CLIENT_TOKEN_MERCHANT_ACCOUNT_DOES_NOT_EXIST = '92807';
        const CREDIT_CARD_BILLING_ADDRESS_CONFLICT = '91701';
        const CREDIT_CARD_BILLING_ADDRESS_FORMAT_IS_INVALID = '91744';
        const CREDIT_CARD_BILLING_ADDRESS_ID_IS_INVALID = '91702';
        const CREDIT_CARD_CANNOT_UPDATE_CARD_USING_PAYMENT_METHOD_NONCE = '91735';
        const CREDIT_CARD_CARDHOLDER_NAME_IS_TOO_LONG = '81723';
        const CREDIT_CARD_CREDIT_CARD_TYPE_IS_NOT_ACCEPTED = '81703';
        const CREDIT_CARD_CREDIT_CARD_TYPE_IS_NOT_ACCEPTED_BY_SUBSCRIPTION_MERCHANT_ACCOUNT = '81718';
        const CREDIT_CARD_CUSTOMER_ID_IS_INVALID = '91705';
        const CREDIT_CARD_CUSTOMER_ID_IS_REQUIRED = '91704';
        const CREDIT_CARD_CVV_IS_INVALID = '81707';
        const CREDIT_CARD_CVV_IS_REQUIRED = '81706';
        const CREDIT_CARD_CVV_VERIFICATION_FAILED = '81736';
        const CREDIT_CARD_DUPLICATE_CARD_EXISTS = '81724';
        const CREDIT_CARD_EXPIRATION_DATE_CONFLICT = '91708';
        const CREDIT_CARD_EXPIRATION_DATE_IS_INVALID = '81710';
        const CREDIT_CARD_EXPIRATION_DATE_IS_REQUIRED = '81709';
        const CREDIT_CARD_EXPIRATION_DATE_YEAR_IS_INVALID = '81711';
        const CREDIT_CARD_EXPIRATION_MONTH_IS_INVALID = '81712';
        const CREDIT_CARD_EXPIRATION_YEAR_IS_INVALID = '81713';
        const CREDIT_CARD_INVALID_PARAMS_FOR_CREDIT_CARD_UPDATE = '91745';
        const CREDIT_CARD_INVALID_VENMO_SDK_PAYMENT_METHOD_CODE = '91727';
        const CREDIT_CARD_NUMBER_INVALID_LENGTH = '81716';
        const CREDIT_CARD_NUMBER_IS_INVALID = '81715';
        const CREDIT_CARD_NUMBER_IS_PROHIBITED = '81750';
        const CREDIT_CARD_NUMBER_IS_REQUIRED = '81714';
        const CREDIT_CARD_NUMBER_LENGTH_IS_INVALID = '81716';
        const CREDIT_CARD_NUMBER_MUST_BE_TEST_NUMBER = '81717';
        const CREDIT_CARD_OPTIONS_UPDATE_EXISTING_TOKEN_IS_INVALID = '91723';
        const CREDIT_CARD_OPTIONS_UPDATE_EXISTING_TOKEN_NOT_ALLOWED = '91729';
        const CREDIT_CARD_OPTIONS_VERIFICATION_AMOUNT_CANNOT_BE_NEGATIVE = '91739';
        const CREDIT_CARD_OPTIONS_VERIFICATION_AMOUNT_FORMAT_IS_INVALID = '91740';
        const CREDIT_CARD_OPTIONS_VERIFICATION_AMOUNT_IS_TOO_LARGE = '91752';
        const CREDIT_CARD_OPTIONS_VERIFICATION_AMOUNT_NOT_SUPPORTED_BY_PROCESSOR = '91741';
        const CREDIT_CARD_OPTIONS_VERIFICATION_MERCHANT_ACCOUNT_ID_IS_INVALID = '91728';
        const CREDIT_CARD_OPTIONS_VERIFICATION_MERCHANT_ACCOUNT_IS_FORBIDDEN = '91743';
        const CREDIT_CARD_OPTIONS_VERIFICATION_MERCHANT_ACCOUNT_IS_SUSPENDED = '91742';
        const CREDIT_CARD_OPTIONS_VERIFICATION_MERCHANT_ACCOUNT_CANNOT_BE_SUB_MERCHANT_ACCOUNT = '91755';
        const CREDIT_CARD_OPTIONS_VERIFICATION_ACCOUNT_TYPE_IS_INVALID = '91757';
        const CREDIT_CARD_OPTIONS_VERIFICATION_ACCOUNT_TYPE_NOT_SUPPORTED = '91758';
        const CREDIT_CARD_PAYMENT_METHOD_CONFLICT = '81725';
        const CREDIT_CARD_PAYMENT_METHOD_IS_NOT_A_CREDIT_CARD = '91738';
        const CREDIT_CARD_PAYMENT_METHOD_NONCE_CARD_TYPE_IS_NOT_ACCEPTED = '91734';
        const CREDIT_CARD_PAYMENT_METHOD_NONCE_CONSUMED = '91731';
        const CREDIT_CARD_PAYMENT_METHOD_NONCE_LOCKED = '91733';
        const CREDIT_CARD_PAYMENT_METHOD_NONCE_UNKNOWN = '91732';
        const CREDIT_CARD_POSTAL_CODE_VERIFICATION_FAILED = '81737';
        const CREDIT_CARD_TOKEN_FORMAT_IS_INVALID = '91718';
        const CREDIT_CARD_TOKEN_INVALID = '91718';
        const CREDIT_CARD_TOKEN_IS_IN_USE = '91719';
        const CREDIT_CARD_TOKEN_IS_NOT_ALLOWED = '91721';
        const CREDIT_CARD_TOKEN_IS_REQUIRED = '91722';
        const CREDIT_CARD_TOKEN_IS_TOO_LONG = '91720';
        const CREDIT_CARD_VENMO_SDK_PAYMENT_METHOD_CODE_CARD_TYPE_IS_NOT_ACCEPTED = '91726';
        const CREDIT_CARD_VERIFICATION_NOT_SUPPORTED_ON_THIS_MERCHANT_ACCOUNT = '91730';
        const CUSTOMER_COMPANY_IS_TOO_LONG = '81601';
        const CUSTOMER_CUSTOM_FIELD_IS_INVALID = '91602';
        const CUSTOMER_CUSTOM_FIELD_IS_TOO_LONG = '81603';
        const CUSTOMER_EMAIL_FORMAT_IS_INVALID = '81604';
        const CUSTOMER_EMAIL_IS_INVALID = '81604';
        const CUSTOMER_EMAIL_IS_REQUIRED = '81606';
        const CUSTOMER_EMAIL_IS_TOO_LONG = '81605';
        const CUSTOMER_FAX_IS_TOO_LONG = '81607';
        const CUSTOMER_FIRST_NAME_IS_TOO_LONG = '81608';
        const CUSTOMER_ID_IS_INVAILD = '91610';
        //Deprecated
        const CUSTOMER_ID_IS_INVALID = '91610';
        const CUSTOMER_ID_IS_IN_USE = '91609';
        const CUSTOMER_ID_IS_NOT_ALLOWED = '91611';
        const CUSTOMER_ID_IS_REQUIRED = '91613';
        const CUSTOMER_ID_IS_TOO_LONG = '91612';
        const CUSTOMER_LAST_NAME_IS_TOO_LONG = '81613';
        const CUSTOMER_PHONE_IS_TOO_LONG = '81614';
        const CUSTOMER_VAULTED_PAYMENT_INSTRUMENT_NONCE_BELONGS_TO_DIFFERENT_CUSTOMER = '91617';
        const CUSTOMER_WEBSITE_FORMAT_IS_INVALID = '81616';
        const CUSTOMER_WEBSITE_IS_INVALID = '81616';
        const CUSTOMER_WEBSITE_IS_TOO_LONG = '81615';
        const DESCRIPTOR_NAME_FORMAT_IS_INVALID = '92201';
        const DESCRIPTOR_PHONE_FORMAT_IS_INVALID = '92202';
        const DESCRIPTOR_INTERNATIONAL_NAME_FORMAT_IS_INVALID = '92204';
        const DESCRIPTOR_DYNAMIC_DESCRIPTORS_DISABLED = '92203';
        const DESCRIPTOR_INTERNATIONAL_PHONE_FORMAT_IS_INVALID = '92205';
        const DESCRIPTOR_URL_FORMAT_IS_INVALID = '92206';
        const DISPUTE_CAN_ONLY_ADD_EVIDENCE_TO_OPEN_DISPUTE = '95701';
        const DISPUTE_CAN_ONLY_REMOVE_EVIDENCE_FROM_OPEN_DISPUTE = '95702';
        const DISPUTE_CAN_ONLY_ADD_EVIDENCE_TO_DISPUTE = '95703';
        const DISPUTE_CAN_ONLY_ACCEPT_OPEN_DISPUTE = '95704';
        const DISPUTE_CAN_ONLY_FINALIZE_OPEN_DISPUTE = '95705';
        const DISPUTE_CAN_ONLY_CREATE_EVIDENCE_WITH_VALID_CATEGORY = '95706';
        const DISPUTE_EVIDENCE_CONTENT_DATE_INVALID = '95707';
        const DISPUTE_EVIDENCE_CONTENT_TOO_LONG = '95708';
        const DISPUTE_EVIDENCE_CONTENT_ARN_TOO_LONG = '95709';
        const DISPUTE_EVIDENCE_CONTENT_PHONE_TOO_LONG = '95710';
        const DISPUTE_EVIDENCE_CATEGORY_TEXT_ONLY = '95711';
        const DISPUTE_EVIDENCE_CATEGORY_DOCUMENT_ONLY = '95712';
        const DISPUTE_EVIDENCE_CATEGORY_NOT_FOR_REASON_CODE = '95713';
        const DISPUTE_EVIDENCE_CATEGORY_DUPLICATE = '95713';
        const DISPUTE_EVIDENCE_CATEGORY_EMAIL_INVALID = '95713';
        const DISPUTE_DIGITAL_GOODS_MISSING_EVIDENCE = '95720';
        const DISPUTE_DIGITAL_GOODS_MISSING_DOWNLOAD_DATE = '95721';
        const DISPUTE_PRIOR_NON_DISPUTED_TRANSACTION_MISSING_ARN = '95722';
        const DISPUTE_PRIOR_NON_DISPUTED_TRANSACTION_MISSING_DATE = '95723';
        const DISPUTE_RECURRING_TRANSACTION_MISSING_DATE = '95724';
        const DISPUTE_RECURRING_TRANSACTION_MISSING_ARN = '95725';
        const DISPUTE_VALID_EVIDENCE_REQUIRED_TO_FINALIZE = '95726';
        const DOCUMENT_UPLOAD_KIND_IS_INVALID = '84901';
        const DOCUMENT_UPLOAD_FILE_IS_TOO_LARGE = '84902';
        const DOCUMENT_UPLOAD_FILE_TYPE_IS_INVALID = '84903';
        const DOCUMENT_UPLOAD_FILE_IS_MALFORMED_OR_ENCRYPTED = '84904';
        const DOCUMENT_UPLOAD_FILE_IS_TOO_LONG = '84905';
        const DOCUMENT_UPLOAD_FILE_IS_EMPTY = '84906';
        const EXCHANGE_RATE_QUOTE_ID_IS_TOO_LONG = '915229';
        const FAILED_AUTH_ADJUSTMENT_ALLOW_RETRY = '95603';
        const FAILED_AUTH_ADJUSTMENT_HARD_DECLINE = '95602';
        const FINAL_AUTH_SUBMIT_FOR_SETTLEMENT_FOR_DIFFERENT_AMOUNT = '95601';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_ARRIVAL_AIRPORT_CODE_IS_TOO_LONG = '96301';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_ARRIVAL_TIME_FORMAT_IS_INVALID = '96302';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_CARRIER_CODE_IS_TOO_LONG = '96303';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_CONJUNCTION_TICKET_IS_TOO_LONG = '96304';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_COUPON_NUMBER_IS_TOO_LONG = '96305';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_DEPARTURE_AIRPORT_CODE_IS_TOO_LONG = '96306';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_DEPARTURE_TIME_FORMAT_IS_INVALID = '96307';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_EXCHANGE_TICKET_IS_TOO_LONG = '96308';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FARE_AMOUNT_CANNOT_BE_NEGATIVE = '96309';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FARE_AMOUNT_FORMAT_IS_INVALID = '96310';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FARE_AMOUNT_IS_TOO_LARGE = '96311';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FARE_BASIS_CODE_IS_TOO_LONG = '96312';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FEE_AMOUNT_CANNOT_BE_NEGATIVE = '96313';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FEE_AMOUNT_FORMAT_IS_INVALID = '96314';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_FEE_AMOUNT_IS_TOO_LARGE = '96315';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_SERVICE_CLASS_IS_TOO_LONG = '96316';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_TAX_AMOUNT_CANNOT_BE_NEGATIVE = '96317';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_TAX_AMOUNT_FORMAT_IS_INVALID = '96318';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_TAX_AMOUNT_IS_TOO_LARGE = '96319';
        const INDUSTRY_DATA_LEG_TRAVEL_FLIGHT_TICKET_NUMBER_IS_TOO_LONG = '96320';
        const INDUSTRY_DATA_INDUSTRY_TYPE_IS_INVALID = '93401';
        const INDUSTRY_DATA_LODGING_EMPTY_DATA = '93402';
        const INDUSTRY_DATA_LODGING_FOLIO_NUMBER_IS_INVALID = '93403';
        const INDUSTRY_DATA_LODGING_CHECK_IN_DATE_IS_INVALID = '93404';
        const INDUSTRY_DATA_LODGING_CHECK_OUT_DATE_IS_INVALID = '93405';
        const INDUSTRY_DATA_LODGING_CHECK_OUT_DATE_MUST_FOLLOW_CHECK_IN_DATE = '93406';
        const INDUSTRY_DATA_LODGING_UNKNOWN_DATA_FIELD = '93407';
        const INDUSTRY_DATA_LODGING_ROOM_RATE_MUST_BE_GREATER_THAN_ZERO = '93433';
        const INDUSTRY_DATA_LODGING_ROOM_RATE_FORMAT_IS_INVALID = '93434';
        const INDUSTRY_DATA_LODGING_ROOM_RATE_IS_TOO_LARGE = '93435';
        const INDUSTRY_DATA_LODGING_ROOM_TAX_MUST_BE_GREATER_THAN_ZERO = '93436';
        const INDUSTRY_DATA_LODGING_ROOM_TAX_FORMAT_IS_INVALID = '93437';
        const INDUSTRY_DATA_LODGING_ROOM_TAX_IS_TOO_LARGE = '93438';
        const INDUSTRY_DATA_LODGING_NO_SHOW_INDICATOR_IS_INVALID = '93439';
        const INDUSTRY_DATA_LODGING_ADVANCED_DEPOSIT_INDICATOR_IS_INVALID = '93440';
        const INDUSTRY_DATA_LODGING_FIRE_SAFETY_INDICATOR_IS_INVALID = '93441';
        const INDUSTRY_DATA_LODGING_PROPERTY_PHONE_IS_INVALID = '93442';
        const INDUSTRY_DATA_TRAVEL_CRUISE_EMPTY_DATA = '93408';
        const INDUSTRY_DATA_TRAVEL_CRUISE_UNKNOWN_DATA_FIELD = '93409';
        const INDUSTRY_DATA_TRAVEL_CRUISE_TRAVEL_PACKAGE_IS_INVALID = '93410';
        const INDUSTRY_DATA_TRAVEL_CRUISE_DEPARTURE_DATE_IS_INVALID = '93411';
        const INDUSTRY_DATA_TRAVEL_CRUISE_LODGING_CHECK_IN_DATE_IS_INVALID = '93412';
        const INDUSTRY_DATA_TRAVEL_CRUISE_LODGING_CHECK_OUT_DATE_IS_INVALID = '93413';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_EMPTY_DATA = '93414';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_UNKNOWN_DATA_FIELD = '93415';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_CUSTOMER_CODE_IS_TOO_LONG = '93416';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_FARE_AMOUNT_CANNOT_BE_NEGATIVE = '93417';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_FARE_AMOUNT_FORMAT_IS_INVALID = '93418';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_FARE_AMOUNT_IS_TOO_LARGE = '93419';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_FEE_AMOUNT_CANNOT_BE_NEGATIVE = '93420';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_FEE_AMOUNT_FORMAT_IS_INVALID = '93421';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_FEE_AMOUNT_IS_TOO_LARGE = '93422';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_ISSUED_DATE_FORMAT_IS_INVALID = '93423';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_ISSUING_CARRIER_CODE_IS_TOO_LONG = '93424';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_PASSENGER_MIDDLE_INITIAL_IS_TOO_LONG = '93425';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_RESTRICTED_TICKET_IS_REQUIRED = '93426';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_TAX_AMOUNT_CANNOT_BE_NEGATIVE = '93427';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_TAX_AMOUNT_FORMAT_IS_INVALID = '93428';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_TAX_AMOUNT_IS_TOO_LARGE = '93429';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_TICKET_NUMBER_IS_TOO_LONG = '93430';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_LEGS_EXPECTED = '93431';
        const INDUSTRY_DATA_TRAVEL_FLIGHT_TOO_MANY_LEGS = '93432';
        const INDUSTRY_DATA_ADDITIONAL_CHARGE_KIND_IS_INVALID = '96601';
        const INDUSTRY_DATA_ADDITIONAL_CHARGE_KIND_MUST_BE_UNIQUE = '96602';
        const INDUSTRY_DATA_ADDITIONAL_CHARGE_AMOUNT_MUST_BE_GREATER_THAN_ZERO = '96603';
        const INDUSTRY_DATA_ADDITIONAL_CHARGE_AMOUNT_FORMAT_IS_INVALID = '96604';
        const INDUSTRY_DATA_ADDITIONAL_CHARGE_AMOUNT_IS_TOO_LARGE = '96605';
        const INDUSTRY_DATA_ADDITIONAL_CHARGE_AMOUNT_IS_REQUIRED = '96606';
        const TRANSACTION_LINE_ITEM_COMMODITY_CODE_IS_TOO_LONG = '95801';
        const TRANSACTION_LINE_ITEM_DESCRIPTION_IS_TOO_LONG = '95803';
        const TRANSACTION_LINE_ITEM_DISCOUNT_AMOUNT_FORMAT_IS_INVALID = '95804';
        const TRANSACTION_LINE_ITEM_DISCOUNT_AMOUNT_IS_TOO_LARGE = '95805';
        const TRANSACTION_LINE_ITEM_DISCOUNT_AMOUNT_CANNOT_BE_NEGATIVE = '95806';
        const TRANSACTION_LINE_ITEM_KIND_IS_INVALID = '95807';
        const TRANSACTION_LINE_ITEM_KIND_IS_REQUIRED = '95808';
        const TRANSACTION_LINE_ITEM_NAME_IS_REQUIRED = '95822';
        const TRANSACTION_LINE_ITEM_NAME_IS_TOO_LONG = '95823';
        const TRANSACTION_LINE_ITEM_PRODUCT_CODE_IS_TOO_LONG = '95809';
        const TRANSACTION_LINE_ITEM_QUANTITY_FORMAT_IS_INVALID = '95810';
        const TRANSACTION_LINE_ITEM_QUANTITY_IS_REQUIRED = '95811';
        const TRANSACTION_LINE_ITEM_QUANTITY_IS_TOO_LARGE = '95812';
        const TRANSACTION_LINE_ITEM_TOTAL_AMOUNT_FORMAT_IS_INVALID = '95813';
        const TRANSACTION_LINE_ITEM_TOTAL_AMOUNT_IS_REQUIRED = '95814';
        const TRANSACTION_LINE_ITEM_TOTAL_AMOUNT_IS_TOO_LARGE = '95815';
        const TRANSACTION_LINE_ITEM_TOTAL_AMOUNT_MUST_BE_GREATER_THAN_ZERO = '95816';
        const TRANSACTION_LINE_ITEM_UNIT_AMOUNT_FORMAT_IS_INVALID = '95817';
        const TRANSACTION_LINE_ITEM_UNIT_AMOUNT_IS_REQUIRED = '95818';
        const TRANSACTION_LINE_ITEM_UNIT_AMOUNT_IS_TOO_LARGE = '95819';
        const TRANSACTION_LINE_ITEM_UNIT_AMOUNT_MUST_BE_GREATER_THAN_ZERO = '95820';
        const TRANSACTION_LINE_ITEM_UNIT_OF_MEASURE_IS_TOO_LONG = '95821';
        const TRANSACTION_LINE_ITEM_UNIT_TAX_AMOUNT_FORMAT_IS_INVALID = '95824';
        const TRANSACTION_LINE_ITEM_UNIT_TAX_AMOUNT_IS_TOO_LARGE = '95825';
        const TRANSACTION_LINE_ITEM_UNIT_TAX_AMOUNT_CANNOT_BE_NEGATIVE = '95826';
        const TRANSACTION_LINE_ITEM_TAX_AMOUNT_FORMAT_IS_INVALID = '95827';
        const TRANSACTION_LINE_ITEM_TAX_AMOUNT_IS_TOO_LARGE = '95828';
        const TRANSACTION_LINE_ITEM_TAX_AMOUNT_CANNOT_BE_NEGATIVE = '95829';
        const TRANSACTION_EXTERNAL_VAULT_STATUS_IS_INVALID = '915175';
        const TRANSACTION_EXTERNAL_VAULT_STATUS_WITH_PREVIOUS_NETWORK_TRANSACTION_ID_IS_INVALID = '915177';
        const TRANSACTION_EXTERNAL_VAULT_PREVIOUS_NETWORK_TRANSACTION_ID_IS_INVALID = '915179';
        const MERCHANT_COUNTRY_CANNOT_BE_BLANK = '83603';
        const MERCHANT_COUNTRY_CODE_ALPHA2_IS_INVALID = '93607';
        const MERCHANT_COUNTRY_CODE_ALPHA2_IS_NOT_ACCEPTED = '93606';
        const MERCHANT_COUNTRY_CODE_ALPHA3_IS_INVALID = '93605';
        const MERCHANT_COUNTRY_CODE_ALPHA3_IS_NOT_ACCEPTED = '93604';
        const MERCHANT_COUNTRY_CODE_NUMERIC_IS_INVALID = '93609';
        const MERCHANT_COUNTRY_CODE_NUMERIC_IS_NOT_ACCEPTED = '93608';
        const MERCHANT_COUNTRY_NAME_IS_INVALID = '93611';
        const MERCHANT_COUNTRY_NAME_IS_NOT_ACCEPTED = '93610';
        const MERCHANT_CURRENCIES_ARE_INVALID = '93614';
        const MERCHANT_EMAIL_FORMAT_IS_INVALID = '93602';
        const MERCHANT_EMAIL_IS_REQUIRED = '83601';
        const MERCHANT_INCONSISTENT_COUNTRY = '93612';
        const MERCHANT_ACCOUNT_PAYMENT_METHODS_ARE_INVALID = '93613';
        const MERCHANT_PAYMENT_METHODS_ARE_NOT_ALLOWED = '93615';
        const MERCHANT_MERCHANT_ACCOUNT_EXISTS_FOR_CURRENCY = '93616';
        const MERCHANT_CURRENCY_IS_REQUIRED = '93617';
        const MERCHANT_CURRENCY_IS_INVALID = '93618';
        const MERCHANT_NO_MERCHANT_ACCOUNTS = '93619';
        const MERCHANT_MERCHANT_ACCOUNT_EXISTS_FOR_ID = '93620';
        const MERCHANT_MERCHANT_ACCOUNT_NOT_AUTH_ONBOARDED = '93621';
        const MERCHANT_ACCOUNT_ID_FORMAT_IS_INVALID = '82603';
        const MERCHANT_ACCOUNT_ID_IS_IN_USE = '82604';
        const MERCHANT_ACCOUNT_ID_IS_NOT_ALLOWED = '82605';
        const MERCHANT_ACCOUNT_ID_IS_TOO_LONG = '82602';
        const MERCHANT_ACCOUNT_MASTER_MERCHANT_ACCOUNT_ID_IS_INVALID = '82607';
        const MERCHANT_ACCOUNT_MASTER_MERCHANT_ACCOUNT_ID_IS_REQUIRED = '82606';
        const MERCHANT_ACCOUNT_MASTER_MERCHANT_ACCOUNT_MUST_BE_ACTIVE = '82608';
        const MERCHANT_ACCOUNT_TOS_ACCEPTED_IS_REQUIRED = '82610';
        const MERCHANT_ACCOUNT_CANNOT_BE_UPDATED = '82674';
        const MERCHANT_ACCOUNT_DECLINED = '82626';
        const MERCHANT_ACCOUNT_DECLINED_MASTER_CARD_MATCH = '82622';
        const MERCHANT_ACCOUNT_DECLINED_OFAC = '82621';
        const MERCHANT_ACCOUNT_DECLINED_FAILED_KYC = '82623';
        const MERCHANT_ACCOUNT_DECLINED_SSN_INVALID = '82624';
        const MERCHANT_ACCOUNT_DECLINED_SSN_MATCHES_DECEASED = '82625';
        const MERCHANT_ACCOUNT_ID_CANNOT_BE_UPDATED = '82675';
        const MERCHANT_ACCOUNT_MASTER_MERCHANT_ACCOUNT_ID_CANNOT_BE_UPDATED = '82676';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ACCOUNT_NUMBER_IS_REQUIRED = '82614';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_COMPANY_NAME_IS_INVALID = '82631';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_COMPANY_NAME_IS_REQUIRED_WITH_TAX_ID = '82633';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DATE_OF_BIRTH_IS_REQUIRED = '82612';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DECLINED = '82626';
        // Keep for backwards compatibility
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DECLINED_MASTER_CARD_MATCH = '82622';
        // Keep for backwards compatibility
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DECLINED_OFAC = '82621';
        // Keep for backwards compatibility
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DECLINED_FAILED_KYC = '82623';
        // Keep for backwards compatibility
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DECLINED_SSN_INVALID = '82624';
        // Keep for backwards compatibility
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DECLINED_SSN_MATCHES_DECEASED = '82625';
        // Keep for backwards compatibility
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_EMAIL_ADDRESS_IS_INVALID = '82616';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_FIRST_NAME_IS_INVALID = '82627';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_FIRST_NAME_IS_REQUIRED = '82609';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_LAST_NAME_IS_INVALID = '82628';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_LAST_NAME_IS_REQUIRED = '82611';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_PHONE_IS_INVALID = '82636';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ROUTING_NUMBER_IS_INVALID = '82635';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ROUTING_NUMBER_IS_REQUIRED = '82613';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_SSN_IS_INVALID = '82615';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_TAX_ID_IS_INVALID = '82632';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_TAX_ID_IS_REQUIRED_WITH_COMPANY_NAME = '82634';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_DATE_OF_BIRTH_IS_INVALID = '82663';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_REGION_IS_INVALID = '82664';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_EMAIL_ADDRESS_IS_REQUIRED = '82665';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ACCOUNT_NUMBER_IS_INVALID = '82670';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_TAX_ID_MUST_BE_BLANK = '82673';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_LOCALITY_IS_REQUIRED = '82618';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_POSTAL_CODE_IS_INVALID = '82630';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_POSTAL_CODE_IS_REQUIRED = '82619';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_REGION_IS_REQUIRED = '82620';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_STREET_ADDRESS_IS_INVALID = '82629';
        const MERCHANT_ACCOUNT_APPLICANT_DETAILS_ADDRESS_STREET_ADDRESS_IS_REQUIRED = '82617';
        const MERCHANT_ACCOUNT_BUSINESS_DBA_NAME_IS_INVALID = '82646';
        const MERCHANT_ACCOUNT_BUSINESS_TAX_ID_IS_INVALID = '82647';
        const MERCHANT_ACCOUNT_BUSINESS_TAX_ID_IS_REQUIRED_WITH_LEGAL_NAME = '82648';
        const MERCHANT_ACCOUNT_BUSINESS_LEGAL_NAME_IS_REQUIRED_WITH_TAX_ID = '82669';
        const MERCHANT_ACCOUNT_BUSINESS_TAX_ID_MUST_BE_BLANK = '82672';
        const MERCHANT_ACCOUNT_BUSINESS_LEGAL_NAME_IS_INVALID = '82677';
        const MERCHANT_ACCOUNT_BUSINESS_ADDRESS_REGION_IS_INVALID = '82684';
        const MERCHANT_ACCOUNT_BUSINESS_ADDRESS_STREET_ADDRESS_IS_INVALID = '82685';
        const MERCHANT_ACCOUNT_BUSINESS_ADDRESS_POSTAL_CODE_IS_INVALID = '82686';
        const MERCHANT_ACCOUNT_INDIVIDUAL_FIRST_NAME_IS_REQUIRED = '82637';
        const MERCHANT_ACCOUNT_INDIVIDUAL_LAST_NAME_IS_REQUIRED = '82638';
        const MERCHANT_ACCOUNT_INDIVIDUAL_DATE_OF_BIRTH_IS_REQUIRED = '82639';
        const MERCHANT_ACCOUNT_INDIVIDUAL_SSN_IS_INVALID = '82642';
        const MERCHANT_ACCOUNT_INDIVIDUAL_EMAIL_IS_INVALID = '82643';
        const MERCHANT_ACCOUNT_INDIVIDUAL_FIRST_NAME_IS_INVALID = '82644';
        const MERCHANT_ACCOUNT_INDIVIDUAL_LAST_NAME_IS_INVALID = '82645';
        const MERCHANT_ACCOUNT_INDIVIDUAL_PHONE_IS_INVALID = '82656';
        const MERCHANT_ACCOUNT_INDIVIDUAL_DATE_OF_BIRTH_IS_INVALID = '82666';
        const MERCHANT_ACCOUNT_INDIVIDUAL_EMAIL_IS_REQUIRED = '82667';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_STREET_ADDRESS_IS_REQUIRED = '82657';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_LOCALITY_IS_REQUIRED = '82658';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_POSTAL_CODE_IS_REQUIRED = '82659';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_REGION_IS_REQUIRED = '82660';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_STREET_ADDRESS_IS_INVALID = '82661';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_POSTAL_CODE_IS_INVALID = '82662';
        const MERCHANT_ACCOUNT_INDIVIDUAL_ADDRESS_REGION_IS_INVALID = '82668';
        const MERCHANT_ACCOUNT_FUNDING_ROUTING_NUMBER_IS_REQUIRED = '82640';
        const MERCHANT_ACCOUNT_FUNDING_ACCOUNT_NUMBER_IS_REQUIRED = '82641';
        const MERCHANT_ACCOUNT_FUNDING_ROUTING_NUMBER_IS_INVALID = '82649';
        const MERCHANT_ACCOUNT_FUNDING_ACCOUNT_NUMBER_IS_INVALID = '82671';
        const MERCHANT_ACCOUNT_FUNDING_DESTINATION_IS_REQUIRED = '82678';
        const MERCHANT_ACCOUNT_FUNDING_DESTINATION_IS_INVALID = '82679';
        const MERCHANT_ACCOUNT_FUNDING_EMAIL_IS_REQUIRED = '82680';
        const MERCHANT_ACCOUNT_FUNDING_EMAIL_IS_INVALID = '82681';
        const MERCHANT_ACCOUNT_FUNDING_MOBILE_PHONE_IS_REQUIRED = '82682';
        const MERCHANT_ACCOUNT_FUNDING_MOBILE_PHONE_IS_INVALID = '82683';
        const NO_NET_AMOUNT_TO_PERFORM_AUTH_ADJUSTMENT = '95606';
        const OAUTH_INVALID_GRANT = '93801';
        const OAUTH_INVALID_CREDENTIALS = '93802';
        const OAUTH_INVALID_SCOPE = '93803';
        const OAUTH_INVALID_REQUEST = '93804';
        const OAUTH_UNSUPPORTED_GRANT_TYPE = '93805';
        const PAYMENT_METHOD_CANNOT_FORWARD_PAYMENT_METHOD_TYPE = '93106';
        const PAYMENT_METHOD_CUSTOMER_ID_IS_INVALID = '93105';
        const PAYMENT_METHOD_CUSTOMER_ID_IS_REQUIRED = '93104';
        const PAYMENT_METHOD_NONCE_IS_INVALID = '93102';
        const PAYMENT_METHOD_NONCE_IS_REQUIRED = '93103';
        const PAYMENT_METHOD_PAYMENT_METHOD_NONCE_CONSUMED = '93107';
        const PAYMENT_METHOD_PAYMENT_METHOD_NONCE_UNKNOWN = '93108';
        const PAYMENT_METHOD_PAYMENT_METHOD_NONCE_LOCKED = '93109';
        const PAYMENT_METHOD_PAYMENT_METHOD_PARAMS_ARE_REQUIRED = '93101';
        const PAYMENT_METHOD_NO_LONGER_SUPPORTED = '93117';
        const PAYMENT_METHOD_OPTIONS_US_BANK_ACCOUNT_VERIFICATION_METHOD_IS_INVALID = '93121';
        const PAYPAL_ACCOUNT_AUTH_EXPIRED = '92911';
        const PAYPAL_ACCOUNT_CANNOT_HAVE_BOTH_ACCESS_TOKEN_AND_CONSENT_CODE = '82903';
        const PAYPAL_ACCOUNT_CANNOT_HAVE_FUNDING_SOURCE_WITHOUT_ACCESS_TOKEN = '92912';
        const PAYPAL_ACCOUNT_CANNOT_UPDATE_PAYPAL_ACCOUNT_USING_PAYMENT_METHOD_NONCE = '92914';
        const PAYPAL_ACCOUNT_CANNOT_VAULT_ONE_TIME_USE_PAYPAL_ACCOUNT = '82902';
        const PAYPAL_ACCOUNT_CONSENT_CODE_OR_ACCESS_TOKEN_IS_REQUIRED = '82901';
        const PAYPAL_ACCOUNT_CUSTOMER_ID_IS_REQUIRED_FOR_VAULTING = '82905';
        const PAYPAL_ACCOUNT_INVALID_FUNDING_SOURCE_SELECTION = '92913';
        const PAYPAL_ACCOUNT_INVALID_PARAMS_FOR_PAYPAL_ACCOUNT_UPDATE = '92915';
        const PAYPAL_ACCOUNT_PAYMENT_METHOD_NONCE_CONSUMED = '92907';
        const PAYPAL_ACCOUNT_PAYMENT_METHOD_NONCE_LOCKED = '92909';
        const PAYPAL_ACCOUNT_PAYMENT_METHOD_NONCE_UNKNOWN = '92908';
        const PAYPAL_ACCOUNT_PAYPAL_ACCOUNTS_ARE_NOT_ACCEPTED = '82904';
        const PAYPAL_ACCOUNT_PAYPAL_COMMUNICATION_ERROR = '92910';
        const PAYPAL_ACCOUNT_TOKEN_IS_IN_USE = '92906';
        const PROCESSOR_DOES_NOT_SUPPORT_AUTH_ADJUSTMENT = '915222';
        const PROCESSOR_DOES_NOT_SUPPORT_INCREMENTAL_AUTH = '915220';
        const PROCESSOR_DOES_NOT_SUPPORT_PARTIAL_AUTH_REVERSAL = '915221';
        const SETTLEMENT_BATCH_SUMMARY_SETTLEMENT_DATE_IS_INVALID = '82302';
        const SETTLEMENT_BATCH_SUMMARY_SETTLEMENT_DATE_IS_REQUIRED = '82301';
        const SETTLEMENT_BATCH_SUMMARY_CUSTOM_FIELD_IS_INVALID = '82303';
        const SUBSCRIPTION_BILLING_DAY_OF_MONTH_CANNOT_BE_UPDATED = '91918';
        const SUBSCRIPTION_BILLING_DAY_OF_MONTH_IS_INVALID = '91914';
        const SUBSCRIPTION_BILLING_DAY_OF_MONTH_MUST_BE_NUMERIC = '91913';
        const SUBSCRIPTION_CANNOT_ADD_DUPLICATE_ADDON_OR_DISCOUNT = '91911';
        const SUBSCRIPTION_CANNOT_EDIT_CANCELED_SUBSCRIPTION = '81901';
        const SUBSCRIPTION_CANNOT_EDIT_EXPIRED_SUBSCRIPTION = '81910';
        const SUBSCRIPTION_CANNOT_EDIT_PRICE_CHANGING_FIELDS_ON_PAST_DUE_SUBSCRIPTION = '91920';
        const SUBSCRIPTION_FIRST_BILLING_DATE_CANNOT_BE_IN_THE_PAST = '91916';
        const SUBSCRIPTION_FIRST_BILLING_DATE_CANNOT_BE_UPDATED = '91919';
        const SUBSCRIPTION_FIRST_BILLING_DATE_IS_INVALID = '91915';
        const SUBSCRIPTION_ID_IS_IN_USE = '81902';
        const SUBSCRIPTION_INCONSISTENT_NUMBER_OF_BILLING_CYCLES = '91908';
        const SUBSCRIPTION_INCONSISTENT_START_DATE = '91917';
        const SUBSCRIPTION_INVALID_REQUEST_FORMAT = '91921';
        const SUBSCRIPTION_MERCHANT_ACCOUNT_ID_IS_INVALID = '91901';
        const SUBSCRIPTION_MISMATCH_CURRENCY_ISO_CODE = '91923';
        const SUBSCRIPTION_NUMBER_OF_BILLING_CYCLES_CANNOT_BE_BLANK = '91912';
        const SUBSCRIPTION_NUMBER_OF_BILLING_CYCLES_IS_TOO_SMALL = '91909';
        const SUBSCRIPTION_NUMBER_OF_BILLING_CYCLES_MUST_BE_GREATER_THAN_ZERO = '91907';
        const SUBSCRIPTION_NUMBER_OF_BILLING_CYCLES_MUST_BE_NUMERIC = '91906';
        const SUBSCRIPTION_PAYMENT_METHOD_NONCE_CARD_TYPE_IS_NOT_ACCEPTED = '91924';
        const SUBSCRIPTION_PAYMENT_METHOD_NONCE_IS_INVALID = '91925';
        const SUBSCRIPTION_PAYMENT_METHOD_NONCE_NOT_ASSOCIATED_WITH_CUSTOMER = '91926';
        const SUBSCRIPTION_PAYMENT_METHOD_NONCE_UNVAULTED_CARD_IS_NOT_ACCEPTED = '91927';
        const SUBSCRIPTION_PAYMENT_METHOD_TOKEN_CARD_TYPE_IS_NOT_ACCEPTED = '91902';
        const SUBSCRIPTION_PAYMENT_METHOD_TOKEN_IS_INVALID = '91903';
        const SUBSCRIPTION_PAYMENT_METHOD_TOKEN_NOT_ASSOCIATED_WITH_CUSTOMER = '91905';
        const SUBSCRIPTION_PLAN_BILLING_FREQUENCY_CANNOT_BE_UPDATED = '91922';
        const SUBSCRIPTION_PLAN_ID_IS_INVALID = '91904';
        const SUBSCRIPTION_PRICE_CANNOT_BE_BLANK = '81903';
        const SUBSCRIPTION_PRICE_FORMAT_IS_INVALID = '81904';
        const SUBSCRIPTION_PRICE_IS_TOO_LARGE = '81923';
        const SUBSCRIPTION_STATUS_IS_CANCELED = '81905';
        const SUBSCRIPTION_TOKEN_FORMAT_IS_INVALID = '81906';
        const SUBSCRIPTION_TRIAL_DURATION_FORMAT_IS_INVALID = '81907';
        const SUBSCRIPTION_TRIAL_DURATION_IS_REQUIRED = '81908';
        const SUBSCRIPTION_TRIAL_DURATION_UNIT_IS_INVALID = '81909';
        const SUBSCRIPTION_MERCHANT_ACCOUNT_DOES_NOT_SUPPORT_INSTRUMENT_TYPE = '91930';
        const SUBSCRIPTION_PAYMENT_METHOD_NONCE_INSTRUMENT_TYPE_DOES_NOT_SUPPORT_SUBSCRIPTIONS = '91929';
        const SUBSCRIPTION_PAYMENT_METHOD_TOKEN_INSTRUMENT_TYPE_DOES_NOT_SUPPORT_SUBSCRIPTIONS = '91928';
        const SUBSCRIPTION_MODIFICATION_AMOUNT_CANNOT_BE_BLANK = '92003';
        const SUBSCRIPTION_MODIFICATION_AMOUNT_IS_INVALID = '92002';
        const SUBSCRIPTION_MODIFICATION_AMOUNT_IS_TOO_LARGE = '92023';
        const SUBSCRIPTION_MODIFICATION_CANNOT_EDIT_MODIFICATIONS_ON_PAST_DUE_SUBSCRIPTION = '92022';
        const SUBSCRIPTION_MODIFICATION_CANNOT_UPDATE_AND_REMOVE = '92015';
        const SUBSCRIPTION_MODIFICATION_EXISTING_ID_IS_INCORRECT_KIND = '92020';
        const SUBSCRIPTION_MODIFICATION_EXISTING_ID_IS_INVALID = '92011';
        const SUBSCRIPTION_MODIFICATION_EXISTING_ID_IS_REQUIRED = '92012';
        const SUBSCRIPTION_MODIFICATION_ID_TO_REMOVE_IS_INCORRECT_KIND = '92021';
        const SUBSCRIPTION_MODIFICATION_ID_TO_REMOVE_IS_INVALID = '92025';
        const SUBSCRIPTION_MODIFICATION_ID_TO_REMOVE_IS_NOT_PRESENT = '92016';
        const SUBSCRIPTION_MODIFICATION_INCONSISTENT_NUMBER_OF_BILLING_CYCLES = '92018';
        const SUBSCRIPTION_MODIFICATION_INHERITED_FROM_ID_IS_INVALID = '92013';
        const SUBSCRIPTION_MODIFICATION_INHERITED_FROM_ID_IS_REQUIRED = '92014';
        const SUBSCRIPTION_MODIFICATION_MISSING = '92024';
        const SUBSCRIPTION_MODIFICATION_NUMBER_OF_BILLING_CYCLES_CANNOT_BE_BLANK = '92017';
        const SUBSCRIPTION_MODIFICATION_NUMBER_OF_BILLING_CYCLES_IS_INVALID = '92005';
        const SUBSCRIPTION_MODIFICATION_NUMBER_OF_BILLING_CYCLES_MUST_BE_GREATER_THAN_ZERO = '92019';
        const SUBSCRIPTION_MODIFICATION_QUANTITY_CANNOT_BE_BLANK = '92004';
        const SUBSCRIPTION_MODIFICATION_QUANTITY_IS_INVALID = '92001';
        const SUBSCRIPTION_MODIFICATION_QUANTITY_MUST_BE_GREATER_THAN_ZERO = '92010';
        const TRANSACTION_AMOUNT_CANNOT_BE_NEGATIVE = '81501';
        const TRANSACTION_AMOUNT_DOES_NOT_MATCH3_D_SECURE_AMOUNT = '91585';
        const TRANSACTION_AMOUNT_FORMAT_IS_INVALID = '81503';
        const TRANSACTION_AMOUNT_IS_INVALID = '81503';
        const TRANSACTION_AMOUNT_IS_REQUIRED = '81502';
        const TRANSACTION_AMOUNT_IS_TOO_LARGE = '81528';
        const TRANSACTION_AMOUNT_MUST_BE_GREATER_THAN_ZERO = '81531';
        const TRANSACTION_AMOUNT_NOT_SUPPORTED_BY_PROCESSOR = '815193';
        const TRANSACTION_BILLING_ADDRESS_CONFLICT = '91530';
        const TRANSACTION_BILLING_PHONE_NUMBER_IS_INVALID = '915206';
        const TRANSACTION_CANNOT_BE_VOIDED = '91504';
        const TRANSACTION_CANNOT_CANCEL_RELEASE = '91562';
        const TRANSACTION_CANNOT_CLONE_CREDIT = '91543';
        const TRANSACTION_CANNOT_CLONE_MARKETPLACE_TRANSACTION = '915137';
        const TRANSACTION_CANNOT_CLONE_TRANSACTION_WITH_PAYPAL_ACCOUNT = '91573';
        const TRANSACTION_CANNOT_CLONE_TRANSACTION_WITH_VAULT_CREDIT_CARD = '91540';
        const TRANSACTION_CANNOT_CLONE_UNSUCCESSFUL_TRANSACTION = '91542';
        const TRANSACTION_CANNOT_CLONE_VOICE_AUTHORIZATIONS = '91541';
        const TRANSACTION_CANNOT_HOLD_IN_ESCROW = '91560';
        const TRANSACTION_CANNOT_PARTIALLY_REFUND_ESCROWED_TRANSACTION = '91563';
        const TRANSACTION_CANNOT_REFUND_CREDIT = '91505';
        const TRANSACTION_CANNOT_REFUND_SETTLING_TRANSACTION = '91574';
        const TRANSACTION_CANNOT_REFUND_UNLESS_SETTLED = '91506';
        const TRANSACTION_CANNOT_REFUND_WITH_PENDING_MERCHANT_ACCOUNT = '91559';
        const TRANSACTION_CANNOT_REFUND_WITH_SUSPENDED_MERCHANT_ACCOUNT = '91538';
        const TRANSACTION_CANNOT_RELEASE_FROM_ESCROW = '91561';
        const TRANSACTION_CANNOT_SIMULATE_SETTLEMENT = '91575';
        const TRANSACTION_CANNOT_SUBMIT_FOR_PARTIAL_SETTLEMENT = '915103';
        const TRANSACTION_CANNOT_SUBMIT_FOR_SETTLEMENT = '91507';
        const TRANSACTION_CANNOT_UPDATE_DETAILS_NOT_SUBMITTED_FOR_SETTLEMENT = '915129';
        const TRANSACTION_CHANNEL_IS_TOO_LONG = '91550';
        const TRANSACTION_CREDIT_CARD_IS_REQUIRED = '91508';
        const TRANSACTION_CUSTOMER_DEFAULT_PAYMENT_METHOD_CARD_TYPE_IS_NOT_ACCEPTED = '81509';
        const TRANSACTION_CUSTOMER_DOES_NOT_HAVE_CREDIT_CARD = '91511';
        const TRANSACTION_CUSTOMER_ID_IS_INVALID = '91510';
        const TRANSACTION_CUSTOM_FIELD_IS_INVALID = '91526';
        const TRANSACTION_CUSTOM_FIELD_IS_TOO_LONG = '81527';
        const TRANSACTION_PAYMENT_INSTRUMENT_WITH_EXTERNAL_VAULT_IS_INVALID = '915176';
        const TRANSACTION_HAS_ALREADY_BEEN_REFUNDED = '91512';
        const TRANSACTION_IS_NOT_ELIGIBLE_FOR_ADJUSTMENT = '915219';
        const TRANSACTION_LINE_ITEMS_EXPECTED = '915158';
        const TRANSACTION_TOO_MANY_LINE_ITEMS = '915157';
        const TRANSACTION_DISCOUNT_AMOUNT_FORMAT_IS_INVALID = '915159';
        const TRANSACTION_DISCOUNT_AMOUNT_CANNOT_BE_NEGATIVE = '915160';
        const TRANSACTION_DISCOUNT_AMOUNT_IS_TOO_LARGE = '915161';
        const TRANSACTION_SHIPPING_AMOUNT_FORMAT_IS_INVALID = '915162';
        const TRANSACTION_SHIPPING_AMOUNT_CANNOT_BE_NEGATIVE = '915163';
        const TRANSACTION_SHIPPING_AMOUNT_IS_TOO_LARGE = '915164';
        const TRANSACTION_SHIPPING_METHOD_IS_INVALID = '915203';
        const TRANSACTION_SHIPPING_PHONE_NUMBER_IS_INVALID = '915204';
        const TRANSACTION_SHIPS_FROM_POSTAL_CODE_IS_TOO_LONG = '915165';
        const TRANSACTION_SHIPS_FROM_POSTAL_CODE_IS_INVALID = '915166';
        const TRANSACTION_SHIPS_FROM_POSTAL_CODE_INVALID_CHARACTERS = '915167';
        const TRANSACTION_MERCHANT_ACCOUNT_DOES_NOT_MATCH3_D_SECURE_MERCHANT_ACCOUNT = '91584';
        const TRANSACTION_MERCHANT_ACCOUNT_DOES_NOT_SUPPORT_MOTO = '91558';
        const TRANSACTION_MERCHANT_ACCOUNT_DOES_NOT_SUPPORT_REFUNDS = '91547';
        const TRANSACTION_MERCHANT_ACCOUNT_ID_DOES_NOT_MATCH_SUBSCRIPTION = '915180';
        const TRANSACTION_MERCHANT_ACCOUNT_ID_IS_INVALID = '91513';
        const TRANSACTION_MERCHANT_ACCOUNT_IS_SUSPENDED = '91514';
        const TRANSACTION_MERCHANT_ACCOUNT_NAME_IS_INVALID = '91513';
        //Deprecated
        const TRANSACTION_MUST_BE_IN_STATE_AUTHORIZED = '915218';
        const TRANSACTION_OPTIONS_PAY_PAL_CUSTOM_FIELD_TOO_LONG = '91580';
        const TRANSACTION_OPTIONS_SUBMIT_FOR_SETTLEMENT_IS_REQUIRED_FOR_CLONING = '91544';
        const TRANSACTION_OPTIONS_SUBMIT_FOR_SETTLEMENT_IS_REQUIRED_FOR_PAYPAL_UNILATERAL = '91582';
        const TRANSACTION_OPTIONS_USE_BILLING_FOR_SHIPPING_DISABLED = '91572';
        const TRANSACTION_OPTIONS_VAULT_IS_DISABLED = '91525';
        const TRANSACTION_OPTIONS_CREDIT_CARD_ACCOUNT_TYPE_IS_INVALID = '915184';
        const TRANSACTION_OPTIONS_CREDIT_CARD_ACCOUNT_TYPE_NOT_SUPPORTED = '915185';
        const TRANSACTION_OPTIONS_CREDIT_CARD_ACCOUNT_TYPE_DEBIT_DOES_NOT_SUPPORT_AUTHS = '915186';
        const TRANSACTION_ORDER_ID_IS_TOO_LONG = '91501';
        const TRANSACTION_PAYMENT_INSTRUMENT_NOT_SUPPORTED_BY_MERCHANT_ACCOUNT = '91577';
        const TRANSACTION_PAYMENT_INSTRUMENT_TYPE_IS_NOT_ACCEPTED = '915101';
        const TRANSACTION_PAYMENT_METHOD_CONFLICT = '91515';
        const TRANSACTION_PAYMENT_METHOD_CONFLICT_WITH_VENMO_SDK = '91549';
        const TRANSACTION_PAYMENT_METHOD_DOES_NOT_BELONG_TO_CUSTOMER = '91516';
        const TRANSACTION_PAYMENT_METHOD_DOES_NOT_BELONG_TO_SUBSCRIPTION = '91527';
        const TRANSACTION_PAYMENT_METHOD_NONCE_CARD_TYPE_IS_NOT_ACCEPTED = '91567';
        const TRANSACTION_PAYMENT_METHOD_NONCE_CONSUMED = '91564';
        const TRANSACTION_PAYMENT_METHOD_NONCE_HAS_NO_VALID_PAYMENT_INSTRUMENT_TYPE = '91569';
        const TRANSACTION_PAYMENT_METHOD_NONCE_LOCKED = '91566';
        const TRANSACTION_PAYMENT_METHOD_NONCE_UNKNOWN = '91565';
        const TRANSACTION_PAYMENT_METHOD_TOKEN_CARD_TYPE_IS_NOT_ACCEPTED = '91517';
        const TRANSACTION_PAYMENT_METHOD_TOKEN_IS_INVALID = '91518';
        const TRANSACTION_PAYPAL_NOT_ENABLED = '91576';
        const TRANSACTION_PAY_PAL_AUTH_EXPIRED = '91579';
        const TRANSACTION_PAY_PAL_VAULT_RECORD_MISSING_DATA = '91583';
        const TRANSACTION_PROCESSOR_AUTHORIZATION_CODE_CANNOT_BE_SET = '91519';
        const TRANSACTION_PROCESSOR_AUTHORIZATION_CODE_IS_INVALID = '81520';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_AUTHS = '915104';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_CREDITS = '91546';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_MOTO_FOR_CARD_TYPE = '915195';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_PARTIAL_SETTLEMENT = '915102';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_UPDATING_ORDER_ID = '915107';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_UPDATING_DESCRIPTOR = '915108';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_UPDATING_DETAILS = '915130';
        const TRANSACTION_PROCESSOR_DOES_NOT_SUPPORT_VOICE_AUTHORIZATIONS = '91545';
        const TRANSACTION_PRODUCT_SKU_IS_INVALID = '915202';
        const TRANSACTION_PURCHASE_ORDER_NUMBER_IS_INVALID = '91548';
        const TRANSACTION_PURCHASE_ORDER_NUMBER_IS_TOO_LONG = '91537';
        const TRANSACTION_REFUND_AMOUNT_IS_TOO_LARGE = '91521';
        const TRANSACTION_REFUND_AUTH_HARD_DECLINED = '915200';
        const TRANSACTION_REFUND_AUTH_SOFT_DECLINED = '915201';
        const TRANSACTION_SCA_EXEMPTION_INVALID = '915213';
        const TRANSACTION_SERVICE_FEE_AMOUNT_CANNOT_BE_NEGATIVE = '91554';
        const TRANSACTION_SERVICE_FEE_AMOUNT_FORMAT_IS_INVALID = '91555';
        const TRANSACTION_SERVICE_FEE_AMOUNT_IS_TOO_LARGE = '91556';
        const TRANSACTION_SERVICE_FEE_AMOUNT_NOT_ALLOWED_ON_MASTER_MERCHANT_ACCOUNT = '91557';
        const TRANSACTION_SERVICE_FEE_IS_NOT_ALLOWED_ON_CREDITS = '91552';
        const TRANSACTION_SERVICE_FEE_NOT_ACCEPTED_FOR_PAYPAL = '91578';
        const TRANSACTION_SETTLEMENT_AMOUNT_IS_LESS_THAN_SERVICE_FEE_AMOUNT = '91551';
        const TRANSACTION_SETTLEMENT_AMOUNT_IS_TOO_LARGE = '91522';
        const TRANSACTION_SHIPPING_ADDRESS_DOESNT_MATCH_CUSTOMER = '91581';
        const TRANSACTION_SUBSCRIPTION_DOES_NOT_BELONG_TO_CUSTOMER = '91529';
        const TRANSACTION_SUBSCRIPTION_ID_IS_INVALID = '91528';
        const TRANSACTION_SUBSCRIPTION_STATUS_MUST_BE_PAST_DUE = '91531';
        const TRANSACTION_SUB_MERCHANT_ACCOUNT_REQUIRES_SERVICE_FEE_AMOUNT = '91553';
        const TRANSACTION_TAX_AMOUNT_CANNOT_BE_NEGATIVE = '81534';
        const TRANSACTION_TAX_AMOUNT_FORMAT_IS_INVALID = '81535';
        const TRANSACTION_TAX_AMOUNT_IS_REQUIRED_FOR_AIB_SWEDISH = '815224';
        const TRANSACTION_TAX_AMOUNT_IS_TOO_LARGE = '81536';
        const TRANSACTION_THREE_D_SECURE_AUTHENTICATION_FAILED = '81571';
        const TRANSACTION_THREE_D_SECURE_AUTHENTICATION_RESPONSE_IS_INVALID = '915120';
        const TRANSACTION_THREE_D_SECURE_CAVV_ALGORITHM_IS_INVALID = '915122';
        const TRANSACTION_THREE_D_SECURE_CAVV_IS_REQUIRED = '915116';
        const TRANSACTION_THREE_D_SECURE_DIRECTORY_RESPONSE_IS_INVALID = '915121';
        const TRANSACTION_THREE_D_SECURE_ECI_FLAG_IS_INVALID = '915114';
        const TRANSACTION_THREE_D_SECURE_ECI_FLAG_IS_REQUIRED = '915113';
        const TRANSACTION_THREE_D_SECURE_MERCHANT_ACCOUNT_DOES_NOT_SUPPORT_CARD_TYPE = '915131';
        const TRANSACTION_THREE_D_SECURE_THREE_D_SECURE_VERSION_IS_INVALID = '915119';
        const TRANSACTION_THREE_D_SECURE_TOKEN_IS_INVALID = '91568';
        const TRANSACTION_THREE_D_SECURE_TRANSACTION_DATA_DOESNT_MATCH_VERIFY = '91570';
        const TRANSACTION_THREE_D_SECURE_XID_IS_REQUIRED = '915115';
        const TRANSACTION_TYPE_IS_INVALID = '91523';
        const TRANSACTION_TYPE_IS_REQUIRED = '91524';
        const TRANSACTION_UNSUPPORTED_VOICE_AUTHORIZATION = '91539';
        const TRANSACTION_US_BANK_ACCOUNT_NONCE_MUST_BE_PLAID_VERIFIED = '915171';
        const TRANSACTION_US_BANK_ACCOUNT_NOT_VERIFIED = '915172';
        const TRANSACTION_TRANSACTION_SOURCE_IS_INVALID = '915133';
        const US_BANK_ACCOUNT_VERIFICATION_NOT_CONFIRMABLE = '96101';
        const US_BANK_ACCOUNT_VERIFICATION_MUST_BE_MICRO_TRANSFERS_VERIFICATION = '96102';
        const US_BANK_ACCOUNT_VERIFICATION_AMOUNTS_DO_NOT_MATCH = '96103';
        const US_BANK_ACCOUNT_VERIFICATION_TOO_MANY_CONFIRMATION_ATTEMPTS = '96104';
        const US_BANK_ACCOUNT_VERIFICATION_UNABLE_TO_CONFIRM_DEPOSIT_AMOUNTS = '96105';
        const US_BANK_ACCOUNT_VERIFICATION_INVALID_DEPOSIT_AMOUNTS = '96106';
        const VERIFICATION_OPTIONS_AMOUNT_CANNOT_BE_NEGATIVE = '94201';
        const VERIFICATION_OPTIONS_AMOUNT_FORMAT_IS_INVALID = '94202';
        const VERIFICATION_OPTIONS_AMOUNT_IS_TOO_LARGE = '94207';
        const VERIFICATION_OPTIONS_AMOUNT_NOT_SUPPORTED_BY_PROCESSOR = '94203';
        const VERIFICATION_OPTIONS_MERCHANT_ACCOUNT_ID_IS_INVALID = '94204';
        const VERIFICATION_OPTIONS_MERCHANT_ACCOUNT_IS_SUSPENDED = '94205';
        const VERIFICATION_OPTIONS_MERCHANT_ACCOUNT_IS_FORBIDDEN = '94206';
        const VERIFICATION_OPTIONS_MERCHANT_ACCOUNT_CANNOT_BE_SUB_MERCHANT_ACCOUNT = '94208';
        const VERIFICATION_OPTIONS_ACCOUNT_TYPE_IS_INVALID = '942184';
        const VERIFICATION_OPTIONS_ACCOUNT_TYPE_NOT_SUPPORTED = '942185';
        const VERIFICATION_THREE_D_SECURE_ECI_FLAG_IS_REQUIRED = "942113";
        const VERIFICATION_THREE_D_SECURE_ECI_FLAG_IS_INVALID = "942114";
        const VERIFICATION_THREE_D_SECURE_CAVV_IS_REQUIRED = "942116";
        const VERIFICATION_THREE_D_SECURE_THREE_D_SECURE_VERSION_IS_REQUIRED = '942117';
        const VERIFICATION_THREE_D_SECURE_THREE_D_SECURE_VERSION_IS_INVALID = "942119";
        const VERIFICATION_THREE_D_SECURE_AUTHENTICATION_RESPONSE_IS_INVALID = "942120";
        const VERIFICATION_THREE_D_SECURE_DIRECTORY_RESPONSE_IS_INVALID = "942121";
        const VERIFICATION_THREE_D_SECURE_CAVV_ALGORITHM_IS_INVALID = "942122";
        const THREE_D_SECURE_AUTHENTICATION_ID_IS_INVALID = "942196";
        const THREE_D_SECURE_AUTHENTICATION_ID_DOESNT_MATCH_NONCE_THREE_D_SECURE_AUTHENTICATION = "942198";
        const THREE_D_SECURE_TRANSACTION_PAYMENT_METHOD_DOESNT_MATCH_THREE_D_SECURE_AUTHENTICATION_PAYMENT_METHOD = "942197";
        const THREE_D_SECURE_AUTHENTICATION_ID_WITH_THREE_D_SECURE_PASS_THRU_IS_INVALID = "942199";
        const THREE_D_SECURE_AUTHENTICATION_FAILED = "94271";
        const THREE_D_SECURE_TOKEN_IS_INVALID = "94268";
        const THREE_D_SECURE_VERIFICATION_DATA_DOESNT_MATCH_VERIFY = "94270";
        const MERCHANT_ACCOUNT_DOES_NOT_SUPPORT3_D_SECURE = "942169";
        const MERCHANT_ACOUNT_DOES_NOT_MATCH3_D_SECURE_MERCHANT_ACCOUNT = "94284";
        const AMOUNT_DOES_NOT_MATCH3_D_SECURE_AMOUNT = "94285";
        const RISK_DATA_CUSTOMER_DEVICE_ID_IS_TOO_LONG = "94702";
        const RISK_DATA_CUSTOMER_LOCATION_ZIP_INVALID_CHARACTERS = "94703";
        const RISK_DATA_CUSTOMER_LOCATION_ZIP_IS_INVALID = "94704";
        const RISK_DATA_CUSTOMER_LOCATION_ZIP_IS_TOO_LONG = "94705";
        const RISK_DATA_CUSTOMER_TENURE_IS_TOO_LONG = "94706";
        const RISK_DATA_CUSTOMER_TENURE_IS_INVALID = "94707";
        // phpcs:enable Generic.Files.LineLength
    }
    /**
     * collection of errors enumerating all validation errors for a given request
     *
     * <b>== More information ==</b>
     *
     * // phpcs:ignore Generic.Files.LineLength
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/result-objects#error-results developer docs} for information on attributes
     */
    class ValidationErrorCollection extends \Braintree\Collection
    {
        private $_errors = [];
        private $_nested = [];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($data)
        {
        }
        /*
         * Deeply retrieve all validation errors
         *
         * @return array
         */
        public function deepAll()
        {
        }
        /*
         * Deeply retrieve a count of errors
         *
         * @return int
         */
        public function deepSize()
        {
        }
        /*
         * Checks if index if a set variable
         *
         * @return bool
         */
        public function forIndex($index)
        {
        }
        /*
         * Checks if the value for a given key is a set variable
         *
         * @return bool
         */
        public function forKey($key)
        {
        }
        /*
         * Returns any errors that match on a given attribute
         *
         * @param string $attribute to be checked for matching errors
         *
         * @return array
         */
        public function onAttribute($attribute)
        {
        }
        /*
         * Get all errors
         *
         * @return object
         */
        public function shallowAll()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __get($name)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        private function _inspect($errors, $scope = null)
        {
        }
    }
    /**
     * Error handler
     * Handles validation errors
     *
     * Contains a read-only property $error which is a ValidationErrorCollection
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/result-objects#error-results developer docs} for more information
     */
    class ErrorCollection implements \Countable, \JsonSerializable
    {
        private $_errors;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($errorData)
        {
        }
        /**
         * Return count of items in collection
         * Implements countable
         *
         * @return integer
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * Returns all of the validation errors at all levels of nesting in a single, flat array.
         *
         * @return array
         */
        public function deepAll()
        {
        }
        /**
         * Returns the total number of validation errors at all levels of nesting. For example,
         *if creating a customer with a credit card and a billing address, and each of the customer,
         * credit card, and billing address has 1 error, this method will return 3.
         *
         * @return integer size
         */
        public function deepSize()
        {
        }
        /**
         * return errors for the passed key name
         *
         * @param string $key name
         *
         * @return mixed
         */
        public function forKey($key)
        {
        }
        /**
         * return errors for the passed html field.
         * For example, $result->errors->onHtmlField("transaction[customer][last_name]")
         *
         * @param string $field html element
         *
         * @return array
         */
        public function onHtmlField($field)
        {
        }
        /**
         * Returns the errors at the given nesting level (see forKey) in a single, flat array:
         *
         * <code>
         *   $result = Customer::create(...);
         *   $customerErrors = $result->errors->forKey('customer')->shallowAll();
         * </code>
         *
         * @return array
         */
        public function shallowAll()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __get($name)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Implementation of JsonSerializable
         *
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
}
namespace Braintree {
    /**
     * Braintree MultipleValueOrTextNode
     * MultipleValueOrTextNode is an object that could be multiple values or a single string value returned from the Braintree API
     */
    class MultipleValueOrTextNode extends \Braintree\MultipleValueNode
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($name)
        {
        }
        /**
         * Sets the value of the object's "contains" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function contains($value)
        {
        }
        /**
         * Sets the value of the object's "ends_width" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function endsWith($value)
        {
        }
        /**
         * Sets the value of the object's "is" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function is($value)
        {
        }
        /**
         * Sets the value of the object's "is_not" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function isNot($value)
        {
        }
        /**
         * Sets the value of the object's "starts_with" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function startsWith($value)
        {
        }
        /**
         * Merges searchTerms into the parent element's params
         *
         * @return array
         */
        public function toParam()
        {
        }
    }
    /**
     * The total sales and credits for each batch for a particular date.
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/settlement-batch-summary developer docs} for information on attributes
     */
    class SettlementBatchSummary extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return SettlementBatchSummary
         */
        public static function factory($attributes)
        {
        }
        //phpcs:ignore Generic.Commenting
        protected function _initialize($attributes)
        {
        }
        /**
         * Returns the value for "records"
         *
         * @return mixed records
         */
        public function records()
        {
        }
        /**
         * static method redirecting to gateway
         *
         * @param string $settlement_date    Date YYYY-MM-DD
         * @param string $groupByCustomField optional
         *
         * @see SettlementBatchSummaryGateway::generate()
         *
         * @return Result\Successful|Result\Error
         */
        public static function generate($settlement_date, $groupByCustomField = null)
        {
        }
    }
    /**
     * Braintree PlanGateway module
     * Creates and manages Plans
     */
    class PlanGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /*
         * Retrieve all plans
         *
         * @return array of Plan objects
         */
        public function all()
        {
        }
        /*
         * Request a new plan be created
         *
         * @param array $attributes containing request params
         *
         * @return Result\Sucessful|Result\Error
         */
        public function create($attributes)
        {
        }
        /*
         * Look up a single plan
         *
         * @param string $id of the plan to find
         *
         * @return plan|Exception\NotFound
         */
        public function find($id)
        {
        }
        /*
         * Updates a specific plan with given details
         *
         * @param string $planId the ID of the plan to be updated
         * @param mixed $attributes
         *
         * @return plan|Exception\NotFound
         */
        public function update($planId, $attributes)
        {
        }
        private static function _createSignature()
        {
        }
        private static function _updateSignature()
        {
        }
        private static function _addOnDiscountSignature()
        {
        }
        /**
         * * @ignore
         * */
        private function _validateId($id = null)
        {
        }
        /**
         * * @ignore
         * */
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Braintree Library Version
     * stores version information about the Braintree library
     */
    class Version
    {
        const MAJOR = 6;
        const MINOR = 7;
        const TINY = 0;
        protected function __construct()
        {
        }
        /**
         * Get the version
         *
         * @return string the current library version
         */
        public static function get()
        {
        }
    }
    class TestingGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        public function __construct($gateway)
        {
        }
        public function settle($transactionId)
        {
        }
        public function settlementPending($transactionId)
        {
        }
        public function settlementConfirm($transactionId)
        {
        }
        public function settlementDecline($transactionId)
        {
        }
        private function _doTestRequest($testPath, $transactionId)
        {
        }
        private function _checkEnvironment()
        {
        }
    }
    /**
     * Disbursement details from a transaction
     *
     * Contains information about how and when the transaction was disbursed, including timing and currency information. This detail is only available if you have an eligible merchant account.
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction/php#disbursement_details developer docs} for information on attributes
     */
    class DisbursementDetails extends \Braintree\Instance
    {
        /**
         * Checks whether a Disbursement date is valid
         *
         * @return bool
         */
        public function isValid()
        {
        }
    }
    /**
     * Configuration registry
     */
    class Configuration
    {
        public static $global;
        private $_environment = null;
        private $_merchantId = null;
        private $_publicKey = null;
        private $_privateKey = null;
        private $_clientId = null;
        private $_clientSecret = null;
        private $_accessToken = null;
        private $_proxyHost = null;
        private $_proxyPort = null;
        private $_proxyType = null;
        private $_proxyUser = null;
        private $_proxyPassword = null;
        private $_timeout = 60;
        private $_sslVersion = null;
        private $_acceptGzipEncoding = true;
        /**
         * Braintree API version to use
         */
        const API_VERSION = 6;
        const GRAPHQL_API_VERSION = '2018-09-10';
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attribs = [])
        {
        }
        /**
         * resets configuration to default
         *
         * @return Configuration
         */
        public static function reset()
        {
        }
        /**
         * Create new gateway
         *
         * @return Gateway
         */
        public static function gateway()
        {
        }
        /**
         * Getter/Setter for configuration environment
         *
         * @param string $value If provided, sets the environment
         *
         * @return self
         */
        public static function environment($value = null)
        {
        }
        /**
         * Getter/Setter for configuration merchant ID
         *
         * @param string $value If provided, sets the merchantId
         *
         * @return self
         */
        public static function merchantId($value = null)
        {
        }
        /**
         * Getter/Setter for configuration public key
         *
         * @param string $value If provided, sets the public key
         *
         * @return self
         */
        public static function publicKey($value = null)
        {
        }
        /**
         * Getter/Setter for configuration private key
         *
         * @param string $value If provided, sets the private key
         *
         * @return self
         */
        public static function privateKey($value = null)
        {
        }
        /**
         * Sets or gets the read timeout to use for making requests.
         *
         * @param integer $value If provided, sets the read timeout
         *
         * @return integer The read timeout used for connecting to Braintree
         */
        public static function timeout($value = null)
        {
        }
        /**
         * Sets or gets the SSL version to use for making requests. See
         * https://php.net/manual/en/function.curl-setopt.php for possible
         * CURLOPT_SSLVERSION values.
         *
         * @param integer $value If provided, sets the SSL version
         *
         * @return integer The SSL version used for connecting to Braintree
         */
        public static function sslVersion($value = null)
        {
        }
        /**
         * Sets or gets the proxy host to use for connecting to Braintree
         *
         * @param string $value If provided, sets the proxy host
         *
         * @return string The proxy host used for connecting to Braintree
         */
        public static function proxyHost($value = null)
        {
        }
        /**
         * Sets or gets the port of the proxy to use for connecting to Braintree
         *
         * @param string $value If provided, sets the port of the proxy
         *
         * @return string The port of the proxy used for connecting to Braintree
         */
        public static function proxyPort($value = null)
        {
        }
        /**
         * Sets or gets the proxy type to use for connecting to Braintree. This value
         * can be any of the CURLOPT_PROXYTYPE options in PHP cURL.
         *
         * @param string $value If provided, sets the proxy type
         *
         * @return string The proxy type used for connecting to Braintree
         */
        public static function proxyType($value = null)
        {
        }
        /**
         * Sets or gets the proxy user to use for connecting to Braintree.
         *
         * @param string $value If provided, sets the proxy username
         *
         * @return string The proxy type used for connecting to Braintree
         */
        public static function proxyUser($value = null)
        {
        }
        /**
         * Sets or gets the proxy password to use for connecting to Braintree. This value
         * can be any of the CURLOPT_PROXYUSERPWD  options in PHP cURL.
         *
         * @param string $value If provided, sets the proxy password
         *
         * @return string The proxy type used for connecting to Braintree
         */
        public static function proxyPassword($value = null)
        {
        }
        /**
         * Specify if the HTTP client is able to decode gzipped responses.
         *
         * // phpcs:ignore Generic.Files.LineLength
         *
         * @param boolean $value If true, will send an Accept-Encoding header with a gzip value. If false, will not send an Accept-Encoding header with a gzip value.
         *
         * @return boolean true if an Accept-Encoding header with a gzip value will be sent, false if not
         */
        public static function acceptGzipEncoding($value = null)
        {
        }
        //phpcs:ignore
        public static function assertGlobalHasAccessTokenOrKeys()
        {
        }
        /*
         * Check if configuration has an access token, or api keys
         *
         * @throws Exception\Configuration
         *
         * @return self
         */
        public function assertHasAccessTokenOrKeys()
        {
        }
        /*
         * Check if configuration has a client id and secret
         *
         * @throws Exception\Configuration
         *
         * @return self
         */
        public function assertHasClientCredentials()
        {
        }
        /*
         * Check if configuration has a client id
         *
         * @throws Exception\Configuration
         *
         * @return self
         */
        public function assertHasClientId()
        {
        }
        /*
         * Check if configuration has a client secret
         *
         * @throws Exception\Configuration
         *
         * @return self
         */
        public function assertHasClientSecret()
        {
        }
        /*
         * Getter function
         *
         * @return string environment
         */
        public function getEnvironment()
        {
        }
        /*
         * Getter function
         *
         * @return string merchant id
         */
        public function getMerchantId()
        {
        }
        /*
         * Getter function
         *
         * @return string public key
         */
        public function getPublicKey()
        {
        }
        /*
         * Getter function
         *
         * @return string client id
         */
        public function getClientId()
        {
        }
        /*
         * Getter function
         *
         * @return string private key
         */
        public function getPrivateKey()
        {
        }
        /*
         * Getter function
         *
         * @return string client secret
         */
        public function getClientSecret()
        {
        }
        /*
         * Getter function
         *
         * @return string proxy host
         */
        public function getProxyHost()
        {
        }
        /*
         * Getter function
         *
         * @return string proxy port
         */
        public function getProxyPort()
        {
        }
        /*
         * Getter function
         *
         * @return string proxy type
         */
        public function getProxyType()
        {
        }
        /*
         * Getter function
         *
         * @return string proxy username
         */
        public function getProxyUser()
        {
        }
        /*
         * Getter function
         *
         * @return string proxy password
         */
        public function getProxyPassword()
        {
        }
        /*
         * Getter function
         *
         * @return int timeout
         */
        public function getTimeout()
        {
        }
        /*
         * Getter function
         *
         * @return string ssl version
         */
        public function getSslVersion()
        {
        }
        /*
         * Getter function
         *
         * @return bool
         */
        public function getAcceptGzipEncoding()
        {
        }
        //phpcs:disable PEAR.Commenting
        /**
         * Do not use this method directly. Pass in the environment to the constructor.
         */
        public function setEnvironment($value)
        {
        }
        /**
         * Do not use this method directly. Pass in the merchantId to the constructor.
         */
        public function setMerchantId($value)
        {
        }
        /**
         * Do not use this method directly. Pass in the publicKey to the constructor.
         */
        public function setPublicKey($value)
        {
        }
        /**
         * Do not use this method directly. Pass in the privateKey to the constructor.
         */
        public function setPrivateKey($value)
        {
        }
        private function setProxyHost($value)
        {
        }
        private function setProxyPort($value)
        {
        }
        private function setProxyType($value)
        {
        }
        private function setProxyUser($value)
        {
        }
        private function setProxyPassword($value)
        {
        }
        private function setTimeout($value)
        {
        }
        private function setSslVersion($value)
        {
        }
        private function setAcceptGzipEncoding($value)
        {
        }
        //phpcs:enable PEAR.Commenting
        /*
         * Getter function
         *
         * @return string access token
         */
        public function getAccessToken()
        {
        }
        /*
         * Checks for presence of access token
         *
         * @return bool
         */
        public function isAccessToken()
        {
        }
        /*
         * Checks for presence of client credentials
         *
         * @return bool
         */
        public function isClientCredentials()
        {
        }
        /**
         * returns the base braintree gateway URL based on config values
         *
         * @return string braintree gateway URL
         */
        public function baseUrl()
        {
        }
        /**
         * returns the base URL for Braintree's GraphQL endpoint based on config values
         *
         * @return string Braintree GraphQL URL
         */
        public function graphQLBaseUrl()
        {
        }
        /**
         * sets the merchant path based on merchant ID
         *
         * @return string merchant path uri
         */
        public function merchantPath()
        {
        }
        /**
         * sets the physical path for the location of the CA certs
         *
         * @param string $sslPath optional
         *
         * @return string filepath
         */
        public function caFile($sslPath = null)
        {
        }
        /**
         * returns the port number depending on environment
         *
         * @return int portnumber
         */
        public function portNumber()
        {
        }
        /**
         * returns the port number depending on environment
         *
         * @return integer graphql portnumber
         */
        public function graphQLPortNumber()
        {
        }
        /**
         * Specifies whether or not a proxy is properly configured
         *
         * @return boolean true if a proxy is configured properly, false if not
         */
        public function isUsingProxy()
        {
        }
        /**
         * Specified whether or not a username and password have been provided for
         * use with an authenticated proxy
         *
         * @return boolean true if both proxyUser and proxyPassword are present
         */
        public function isAuthenticatedProxy()
        {
        }
        /**
         * returns http protocol depending on environment
         *
         * @return string http || https
         */
        public function protocol()
        {
        }
        /**
         * returns gateway server name depending on environment
         *
         * @return string server domain name
         */
        public function serverName()
        {
        }
        /**
         * returns Braintree GraphQL server name depending on environment
         *
         * @return string graphql domain name
         */
        public function graphQLServerName()
        {
        }
        /**
         * returns boolean indicating SSL is on or off for this session,
         * depending on environment
         *
         * @return boolean
         */
        public function sslOn()
        {
        }
        /**
         * log message to default logger
         *
         * @param string $message to log
         *
         * @return string
         */
        public function logMessage($message)
        {
        }
    }
    /**
     * Braintree ApplePayCard module
     * Creates and manages Braintree Apple Pay cards
     *
     * See our reference docs for a complete list of properties {@link https://developer.paypal.com/braintree/docs/reference/response/apple-pay-card/php}<br />
     */
    class ApplePayCard extends \Braintree\Base
    {
        // Card Type
        const AMEX = 'Apple Pay - American Express';
        const MASTER_CARD = 'Apple Pay - MasterCard';
        const VISA = 'Apple Pay - Visa';
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * checks whether the card is expired based on the current date
         *
         * @return boolean
         */
        public function isExpired()
        {
        }
        /**
         *  factory method: returns an instance of ApplePayCard
         *  to the requesting method, with populated properties
         *
         * @param mixed $attributes of the ApplePayCard object
         *
         * @return ApplePayCard
         */
        public static function factory($attributes)
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $applePayCardAttribs array of Apple Pay card properties
         *
         * @return void
         */
        protected function _initialize($applePayCardAttribs)
        {
        }
    }
    /**
     * Braintree AchMandate module
     *
     * See our {link https://developer.paypal.com/braintree/docs/reference/response/us-bank-account/php#ach_mandate developer docs} for information on attributes
     */
    class AchMandate extends \Braintree\Base
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $achAttribs array of achMandate data
         *
         * @return void
         */
        protected function _initialize($achAttribs)
        {
        }
        /**
         *  factory method: returns an instance of AchMandate
         *  to the requesting method, with populated properties
         *
         * @param array $attributes response object attributes
         *
         * @return AchMandate
         */
        public static function factory($attributes)
        {
        }
    }
    /**
     * Braintree TransactionReview
     *
     * A class of information related to when a transaction is manually reviewed in the Fraud Protection Dashboard.
     *
     * For more information, see {@link https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/overview our developer docs}
     */
    class TransactionReview extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return TransactionReview
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * Braintree PaymentMethodCustomerDataUpdatedMetadata module
     */
    class PaymentMethodCustomerDataUpdatedMetadata extends \Braintree\Base
    {
        /**
         *  factory method: returns an instance of PaymentMethodCustomerDataUpdatedMetadata
         *  to the requesting method, with populated properties
         *
         * @param array $attributes used to create the object
         *
         * @return PaymentMethodCustomerDataUpdatedMetadata
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($metadataAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    class MerchantGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        public function create($attribs)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Braintree TransactionGateway processor
     * Creates and manages transactions
     *
     * // phpcs:ignore Generic.Files.LineLength
     * For more detailed information on Transactions, see {@link https://developer.paypal.com/braintree/docs/reference/response/transaction/php our developer docs}
     */
    class TransactionGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Create a new transaction by copying all the attributes, except amount, of the original transaction
         *
         * Instead of cloning transactions, a better practice in most cases is to use the Vault to save and reuse payment method or customer information
         *
         * @param string $transactionId to be cloned
         * @param mixed  $attribs       containing additional request parameters
         *
         * @see PaymentMethodGateway
         * @see CustomerGateway
         *
         * @return Result\Successful|Result\Error
         */
        public function cloneTransaction($transactionId, $attribs)
        {
        }
        private function create($attribs)
        {
        }
        private function createNoValidate($attribs)
        {
        }
        /**
         * creates a full array signature of a valid gateway request
         *
         * @return array gateway request signature format
         */
        public static function cloneSignature()
        {
        }
        /**
         * creates a full array signature of a valid gateway request
         *
         * @return array gateway request signature format
         */
        public static function createSignature()
        {
        }
        /**
         * creates a full array signature of a valid gateway request
         *
         * @return array gateway request signature format
         */
        public static function submitForSettlementSignature()
        {
        }
        /**
         * creates a full array signature of a valid gateway request
         *
         * @return array gateway request signature format
         */
        public static function updateDetailsSignature()
        {
        }
        /**
         * creates a full array signature of a valid gateway request
         *
         * @return array gateway request signature format
         */
        public static function refundSignature()
        {
        }
        /**
         * Request a credit to a payment method
         *
         * @param array $attribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function credit($attribs)
        {
        }
        /**
         * Request a credit to a payment method. Returns either a Transaction or error
         *
         * @param array $attribs containing request parameters
         *
         * @return Transaction|Result\Error
         */
        public function creditNoValidate($attribs)
        {
        }
        /**
         * Retrieve transaction information given its ID
         *
         * @param string $id unique identifier of the transaction
         *
         * @return Transaction|Exception\NotFound
         */
        public function find($id)
        {
        }
        /**
         * Request a new sale
         *
         * @param array $attribs (Note: $recurring param is deprecated. Use $transactionSource instead)
         *
         * @return Result\Successful|Result\Error
         */
        public function sale($attribs)
        {
        }
        /**
         * Request a new sale. Returns a Transaction object instead of a Result
         *
         * @param mixed $attribs containing any request parameters
         *
         * @return Transaction|Result\Error
         */
        public function saleNoValidate($attribs)
        {
        }
        /**
         * Returns a ResourceCollection of transactions matching the search query.
         *
         * If <b>query</b> is a string, the search will be a basic search.
         * If <b>query</b> is a hash, the search will be an advanced search.
         * // phpcs:ignore Generic.Files.LineLength
         * For more detailed information and examples, see {@link https://developer.paypal.com/braintree/docs/reference/request/transaction/search/php our developer docs}
         *
         * @param mixed $query search query
         *
         * @return ResourceCollection
         */
        public function search($query)
        {
        }
        /**
         * Function to fetch results in building paged reults
         *
         * @param mixed $query including method arguments
         * @param array $ids   to use in searching
         *
         * @return array
         */
        public function fetch($query, $ids)
        {
        }
        /**
         * Adjusts the authorization amount of a transaction
         *
         * @param string $transactionId unique identifier
         * @param string $amount        tp be adjusted
         *
         * @return Result\Successful|Result\Error
         */
        public function adjustAuthorization($transactionId, $amount)
        {
        }
        /**
         * void a transaction by id
         *
         * @param string $transactionId unique identifier
         *
         * @return Result\Successful|Result\Error
         */
        public function void($transactionId)
        {
        }
        /**
         * void a transaction by id. Returns a Transaction instead of Result\Successful
         *
         * @param string $transactionId unique identifier
         *
         * @return Transaction|Result\Error
         */
        public function voidNoValidate($transactionId)
        {
        }
        /**
         * Submits  an authorized transaction be captured and submitted for settlement.
         *
         * @param string      $transactionId uniquq identifier
         * @param string|null $amount        to be submitted for settlement
         * @param array       $attribs       containing any additional request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function submitForSettlement($transactionId, $amount = null, $attribs = [])
        {
        }
        /**
         * Submits  an authorized transaction be captured and submitted for settlement. Returns a Transaction object on success
         *
         * @param string      $transactionId uniquq identifier
         * @param string|null $amount        to be submitted for settlement
         * @param array       $attribs       containing any additional request parameters
         *
         * @return Transaction|Exception
         */
        public function submitForSettlementNoValidate($transactionId, $amount = null, $attribs = [])
        {
        }
        /**
         * Update certain details for a transaction that has been submitted for settlement
         *
         * @param string $transactionId to be updated
         * @param array  $attribs       attributes to be updated in the request
         *
         * @return Result\Successful|Result\Error
         */
        public function updateDetails($transactionId, $attribs = [])
        {
        }
        /**
         * Settle multiple partial amounts against the same authorization
         *
         * @param string $transactionId unque identifier of the transaction to be submitted for settlement
         * @param string $amount        optional
         * @param mixed  $attribs       any additional request parameters
         *
         * @return Result\Successful|Exception\NotFound
         */
        public function submitForPartialSettlement($transactionId, $amount, $attribs = [])
        {
        }
        /**
         * Specific to Marketplace merchants
         *
         * @param string $transactionId unque identifier of the transaction to be held in escrow
         *
         * @return Result\Successful|Exception\NotFound
         */
        public function holdInEscrow($transactionId)
        {
        }
        /**
         * Specific to Marketplace merchants
         *
         * @param string $transactionId unque identifier of the transaction to be released from escrow
         *
         * @return Result\Successful|Exception\NotFound
         */
        public function releaseFromEscrow($transactionId)
        {
        }
        /**
         * Specific to Marketplace merchants
         *
         * @param string $transactionId unque identifier of the transaction whose escrow release is to be canceled
         *
         * @return Result\Successful|Exception\NotFound
         */
        public function cancelRelease($transactionId)
        {
        }
        /**
         * Request a refund to a payment method
         *
         * @param string $transactionId     unque identifier of the transaction to be refunded
         * @param mixed  $amount_or_options if a string amount, the amount to be refunded, if array of options, additional request parameters
         *
         * @return Result\Successful|Exception\NotFound
         */
        public function refund($transactionId, $amount_or_options = null)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doCreate($subPath, $params)
        {
        }
        /**
         * verifies that a valid transaction id is being used
         *
         * @param string transaction id
         * @throws InvalidArgumentException
         *
         * @return null
         */
        private function _validateId($id = null)
        {
        }
        /**
         * generic method for validating incoming gateway responses
         *
         * creates a new Transaction object and encapsulates
         * it inside a Result\Successful object, or
         * encapsulates a Errors object inside a Result\Error
         * alternatively, throws an Unexpected exception if the response is invalid.
         *
         * @param array $response gateway response values
         *
         * @throws Exception\Unexpected
         *
         * @return Result\Successful|Result\Error
         */
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * KeyValueNode class
     *
     * @see TransactionSearch refund
     */
    class KeyValueNode
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($name)
        {
        }
        /*
         * Sets search term to a value
         *
         * @param string $value to be assigned
         *
         * @return object $this
         */
        public function is($value)
        {
        }
        /*
         * turns a search term into a param
         *
         * @return object searchTerm
         */
        public function toParam()
        {
        }
    }
    /**
     * Braintree EndsWithNode
     * EndsWithNode is an object for search elements to the Braintree API
     */
    class EndsWithNode
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($name)
        {
        }
        /*
         * sets search terms to include the value for key "ends_with"
         *
         * @param string $value to be sent
         *
         * @return self
         */
        public function endsWith($value)
        {
        }
        /*
         * Returns params
         *
         * @return object
         */
        public function toParam()
        {
        }
    }
    /**
     * Manages Braintree PaymentMethodParser module
     */
    class PaymentMethodParser
    {
        /**
         * Creates instances of the payment method in the response object
         *
         * @param mixed $response from Braintree API
         *
         * @return mixed|Exception
         */
        public static function parsePaymentMethod($response)
        {
        }
    }
    /**
     * Disbursement class
     * Module used in parsing Webhooks
     */
    class Disbursement extends \Braintree\Base
    {
        const TYPE_CREDIT = "credit";
        const TYPE_DEBIT = "debit";
        private $_merchantAccount;
        protected function _initialize($disbursementAttribs)
        {
        }
        /*
         * Retrieve the transactions associated with a disbursement
         *
         * @return ResourceCollection
         */
        public function transactions()
        {
        }
        /**
         * Creates an instance of a Disbursement from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Disbursement
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /*
         * Determines if a Disbursement is a debit
         *
         * @return bool
         */
        public function isDebit()
        {
        }
        /*
         * Determines if a Disbursement is a credit
         *
         * @return bool
         */
        public function isCredit()
        {
        }
    }
    /**
     * Braintree GraphQL service
     * process GraphQL requests using curl
     */
    class GraphQL extends \Braintree\Http
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($config)
        {
        }
        /**
         * Sets headers for requests via GraphQL
         *
         * @return array request headers
         */
        public function graphQLHeaders()
        {
        }
        /**
         * Makes the API request to GraphQL API
         *
         * @param mixed $definition containing GraphQL query
         * @param mixed $variables  optional, any variables to be included in GraphQL request
         *
         * @return object result
         */
        public function request($definition, $variables = null)
        {
        }
    }
}
namespace Braintree\Xml {
    /**
     * Braintree XML Parser
     */
    class Parser
    {
        /**
         * Converts an XML string into a multidimensional array
         *
         * @param string $xml string to be parsed
         *
         * @return array
         */
        public static function arrayFromXml($xml)
        {
        }
        /**
         * Converts a node to an array of values or nodes
         *
         * @param DOMNode @node
         *
         * @return mixed
         */
        private static function _nodeToArray($node)
        {
        }
        /**
         * Converts a node to a PHP value
         *
         * @param DOMNode $node
         *
         * @return mixed
         */
        private static function _nodeToValue($node)
        {
        }
        /**
         * Converts XML timestamps into DateTime instances
         *
         * @param string $timestamp
         *
         * @return DateTime
         */
        private static function _timestampToUTC($timestamp)
        {
        }
    }
    /**
     * Generates XML output from arrays using PHP's
     * built-in XMLWriter
     */
    class Generator
    {
        /**
         * arrays passed to this method should have a single root element
         * with an array as its value
         *
         * @param array $aData the array of data
         *
         * @return string XML string
         */
        public static function arrayToXml($aData)
        {
        }
        /**
         * Construct XML elements with attributes from an associative array.
         *
         * @param object $writer XMLWriter object
         * @param array  $aData  contains attributes and values
         *
         * @return void
         */
        private static function _createElementsFromArray(&$writer, $aData)
        {
        }
        /**
         * convert passed data into an array of attributeType, attributeName, and value
         * dates sent as DateTime objects will be converted to strings
         *
         * @param mixed $value
         *
         * @return array attributes and element value
         */
        private static function _generateXmlAttribute($value)
        {
        }
        /**
         * converts datetime back to xml schema format
         *
         * @param object $dateTime
         *
         * @return string XML schema formatted timestamp
         */
        private static function _convertDateTimeObjectToXmlTimestamp($dateTime)
        {
        }
        private static function _castDateTime($string)
        {
        }
    }
}
namespace Braintree {
    /**
     * Upload documents to Braintree in exchange for a DocumentUpload object.
     *
     * An example of creating a document upload with all available fields:
     *      $result = Braintree\DocumentUpload::create([
     *          "kind" => Braintree\DocumentUpload::EVIDENCE_DOCUMENT,
     *          "file" => $pngFile
     *      ]);
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/document-upload developer docs} for information on attributes
     */
    class DocumentUpload extends \Braintree\Base
    {
        /* DocumentUpload Kind */
        const EVIDENCE_DOCUMENT = "evidence_document";
        protected function _initialize($documentUploadAttribs)
        {
        }
        /**
         * Creates a DocumentUpload object
         *
         * @param mixed $params containing:
         *                      kind - The kind of document
         *                      file - The open file to upload
         *
         * @throws InvalidArgumentException if the params are not expected
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($params)
        {
        }
        /**
         * Creates an instance of a DocumentUpload from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return DocumentUpload
         */
        public static function factory($attributes)
        {
        }
    }
    /**
     * Bank Identification Number (BIN) Data Class
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/payment-method-nonce/php#bin_data developer docs} for information on attributes
     */
    class BinData extends \Braintree\Base
    {
        /**
         * Creates an instance of an BinData from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return BinData
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree SamsungPayCard module
     * Creates and manages Braintree SamsungPayCards
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/samsung-pay-card developer docs} for information on attributes
     */
    class SamsungPayCard extends \Braintree\Base
    {
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * checks whether the card is expired based on the current date
         *
         * @return boolean
         */
        public function isExpired()
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $creditCardAttribs array of creditcard data
         *
         * @return void
         */
        protected function _initialize($creditCardAttribs)
        {
        }
        /**
         * returns false if comparing object is not a SamsungPayCard,
         * or is a SamsungPayCard with a different id
         *
         * @param object $otherSamsungPayCard customer to compare against
         *
         * @return boolean
         */
        public function isEqual($otherSamsungPayCard)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return SamsungPayCard
         */
        public static function factory($attributes)
        {
        }
    }
    /**
     * Braintree DiscountGateway module
     *
     * Manages subscription discounts
     */
    class DiscountGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /*
         * Get all discounts
         *
         * @return array of discount objects
         */
        public function all()
        {
        }
    }
    /**
     * Braintree FacilitatedDetails class
     *
     * If the transaction request was performed using payment information from a third party via the Grant API or Shared Vault, these fields will capture information about the merchant of record. These fields are primarily useful for the third party.
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction/php#facilitated_details developer docs} for information on attributes
     */
    class FacilitatedDetails extends \Braintree\Base
    {
        /**
         * Creates an instance of a FacilitatedDetails from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return FacilitatedDetails
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree UsBankAccountVerificationGateway module
     */
    /**
     * Manages Braintree UsBankAccountVerifications
     *
     * <b>== More information ==</b>
     */
    class UsBankAccountVerificationGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * find a usBankAccountVerification by token
         *
         * @param string $token unique id
         *
         * @throws Exception\NotFound
         *
         * @return UsBankAccountVerification
         */
        public function find($token)
        {
        }
        /**
         * Returns a ResourceCollection of US bank account verifications matching the search query.
         *
         * @param mixed $query search query
         *
         * @return ResourceCollection
         */
        public function search($query)
        {
        }
        /**
         * complete micro transfer verification by confirming the transfer amounts
         *
         * @param string $token   unique id
         * @param array  $amounts amounts deposited in micro transfer
         *
         * @throws Exception\Unexpected
         *
         * @return UsBankAccountVerification
         */
        public function confirmMicroTransferAmounts($token, $amounts)
        {
        }
        /**
         * generic method for validating incoming gateway responses
         *
         * creates a new UsBankAccountVerification object and encapsulates
         * it inside a Result\Successful object, or
         * encapsulates a Errors object inside a Result\Error
         * alternatively, throws an Unexpected exception if the response is invalid.
         *
         * @param array $response gateway response values
         *
         * @throws Exception\Unexpected
         *
         * @return Result\Successful|Result\Error
         */
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Braintree UsBankAccount module
     * Manages Braintree UsBankAccounts
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/us-bank-account developer docs} for information on attributes
     */
    class UsBankAccount extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return UsBankAccount
         */
        public static function factory($attributes)
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $usBankAccountAttribs array of usBankAccount data
         *
         * @return mixed
         */
        protected function _initialize($usBankAccountAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $token the payment method identifier
         *
         * @see USBankAccountGateway::find()
         *
         * @return UsBankAccount|Error
         */
        public static function find($token)
        {
        }
        /**
         * DO NOT USE, Use Transaction#sale instead. If you do choose to use this function, note that the subsequent transaction (if successful) will be automatically submitted for settlement.
         *
         * @param string $token              the payment method identifier
         * @param array  $transactionAttribs all other transaction parameters
         *
         * @return UsBankAccount|Error
         */
        public static function sale($token, $transactionAttribs)
        {
        }
    }
    /**
     * CredentialsParser registry
     */
    class CredentialsParser
    {
        private $_clientId;
        private $_clientSecret;
        private $_accessToken;
        private $_environment;
        private $_merchantId;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attribs)
        {
        }
        private static $_validEnvironments = ['development', 'integration', 'sandbox', 'production', 'qa'];
        /*
         * Parses environment credentials and sets the _environment variable
         *
         * @return object|Exception\Configuration
         */
        public function parse()
        {
        }
        /*
         * Checks that the environment passed is valid
         *
         * @param string $environment
         *
         * @return self|Exception\Configuration
         */
        public static function assertValidEnvironment($environment)
        {
        }
        private function _parseClientCredential($credentialType, $value, $expectedValuePrefix)
        {
        }
        private function _parseAccessToken()
        {
        }
        /*
         * Getter methid to retrieve the ClientId
         *
         * @return string
         */
        public function getClientId()
        {
        }
        /*
         * Getter methid to retrieve the ClientSecret
         *
         * @return string
         */
        public function getClientSecret()
        {
        }
        /*
         * Getter methid to retrieve the AccessToken
         *
         * @return string
         */
        public function getAccessToken()
        {
        }
        /*
         * Getter methid to retrieve the Environment
         *
         * @return string
         */
        public function getEnvironment()
        {
        }
        /*
         * Getter methid to retrieve the Merchant Id
         *
         * @return string
         */
        public function getMerchantId()
        {
        }
    }
    /**
     * Braintree ResourceCollection
     * ResourceCollection is a container object for result data
     *
     * stores and retrieves search results and aggregate data
     *
     * example:
     * <code>
     * $result = Customer::all();
     *
     * foreach($result as $transaction) {
     *   print_r($transaction->id);
     * }
     * </code>
     */
    class ResourceCollection implements \Iterator
    {
        private $_batchIndex;
        private $_ids;
        private $_index;
        private $_items;
        private $_pageSize;
        private $_pager;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($response, $pager)
        {
        }
        /**
         * returns the current item when iterating with foreachi
         *
         * @return object
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * returns the first item in the collection
         *
         * @return mixed
         */
        public function firstItem()
        {
        }
        /*
         * returns null
         *
         * @return null
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        /**
         * advances to the next item in the collection when iterating with foreach
         *
         * @return object
         */
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        /**
         * rewinds the testIterateOverResults collection to the first item when iterating with foreach
         *
         * @return object
         */
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * returns whether the current item is valid when iterating with foreach
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        /*
         * returns a maximum count
         *
         * @return int
         */
        public function maximumCount()
        {
        }
        private function _getNextPage()
        {
        }
        private function _getPage($ids)
        {
        }
        /**
         * returns all IDs in the collection
         *
         * @return array
         */
        public function getIds()
        {
        }
    }
    /**
     * Braintree LocalPaymentReversed module
     */
    /**
     * Manages Braintree LocalPaymentReversed
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/webhooks/local-payment-methods developer docs} for more information
     */
    class LocalPaymentReversed extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return LocalPaymentReversed
         */
        public static function factory($attributes)
        {
        }
        /* instance methods */
        /**
         * sets instance properties from an array of values
         *
         * @param array $LocalPaymentReversedAttribs array of localPaymentReversed data
         *
         * @return void
         */
        protected function _initialize($localPaymentReversedAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree GraphQL Client
     * process GraphQL requests using curl
     */
    class GraphQLClient
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($config)
        {
        }
        /*
         * Make a GraphQL API request
         *
         * @param object $definition of the query
         * @param object $variables optional
         *
         * @return object result
         */
        public function query($definition, $variables = null)
        {
        }
    }
    /**
     * Class for setting transaction search queries
     */
    class TransactionSearch
    {
        /*
         * Create a new range node for amount
         *
         * @return RangeNode
         */
        public static function amount()
        {
        }
        /*
         * Create a new range node for authorization expired at
         *
         * @return RangeNode
         */
        public static function authorizationExpiredAt()
        {
        }
        /*
         * Create a new range node for authorization at
         *
         * @return RangeNode
         */
        public static function authorizedAt()
        {
        }
        /*
         * Create a new text node for billing company
         *
         * @return TextNode
         */
        public static function billingCompany()
        {
        }
        /*
         * Create a new text node for billing country name
         *
         * @return TextNode
         */
        public static function billingCountryName()
        {
        }
        /*
         * Create a new text node for billing extended address
         *
         * @return TextNode
         */
        public static function billingExtendedAddress()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Given name. First name is US ethnocentric
        /*
         * Create a new text node for billing first or given name
         *
         * @return TextNode
         */
        public static function billingFirstName()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Surname. Last name is US ethnocentric
        /*
         * Create a new text node for billing last or surname
         *
         * @return TextNode
         */
        public static function billingLastName()
        {
        }
        /*
         * Create a new text node for billing locality or city
         *
         * @return TextNode
         */
        public static function billingLocality()
        {
        }
        /*
         * Create a new text node for billing postal code
         *
         * @return TextNode
         */
        public static function billingPostalCode()
        {
        }
        /*
         * Create a new text node for billing region or state
         *
         * @return TextNode
         */
        public static function billingRegion()
        {
        }
        /*
         * Create a new text node for billing street address
         *
         * @return TextNode
         */
        public static function billingStreetAddress()
        {
        }
        /*
         * Create a new range node for created at
         *
         * @return RangeNode
         */
        public static function createdAt()
        {
        }
        // NEXT_MAJOR_VERSION we may want to rename this to just cardholder name
        /*
         * Create a new text node for cardholder name
         *
         * @return TextNode
         */
        public static function creditCardCardholderName()
        {
        }
        /*
         * Create a new equality node for card expiration date
         *
         * @return EqualityNode
         */
        public static function creditCardExpirationDate()
        {
        }
        /*
         * Create a new partial match node for credit card number
         *
         * @return PartialMatchNode
         */
        public static function creditCardNumber()
        {
        }
        /*
         * Create a new text node for card unigue identifier
         *
         * @return TextNode
         */
        public static function creditCardUniqueIdentifier()
        {
        }
        /*
         * Create a new text node for currency
         *
         * @return TextNode
         */
        public static function currency()
        {
        }
        /*
         * Create a new text node for customer company
         *
         * @return TextNode
         */
        public static function customerCompany()
        {
        }
        /*
         * Create a new text node for customer email
         *
         * @return TextNode
         */
        public static function customerEmail()
        {
        }
        /*
         * Create a new text node for customer fax
         *
         * @return TextNode
         */
        public static function customerFax()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Given name. First name is US ethnocentric
        /*
         * Create a new text node for billing first or given name
         *
         * @return TextNode
         */
        public static function customerFirstName()
        {
        }
        /*
         * Create a new text node for customer id
         *
         * @return TextNode
         */
        public static function customerId()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Surname. Last name is US ethnocentric
        /*
         * Create a new text node for billing last or surname
         *
         * @return TextNode
         */
        public static function customerLastName()
        {
        }
        /*
         * Create a new text node for customer phone
         *
         * @return TextNode
         */
        public static function customerPhone()
        {
        }
        /*
         * Create a new text node for customer website
         *
         * @return TextNode
         */
        public static function customerWebsite()
        {
        }
        /*
         * Create a new range node for disbursement date
         *
         * @return RangeNode
         */
        public static function disbursementDate()
        {
        }
        /*
         * Create a new range node for dispute date
         *
         * @return RangeNode
         */
        public static function disputeDate()
        {
        }
        /*
         * Create a new range node for failed at date
         *
         * @return RangeNode
         */
        public static function failedAt()
        {
        }
        /*
         * Create a new range node for gateway rejected at date
         *
         * @return RangeNode
         */
        public static function gatewayRejectedAt()
        {
        }
        /*
         * Create a new text node for id
         *
         * @return TextNode
         */
        public static function id()
        {
        }
        /*
         * Create a multiple value node for customer ids
         *
         * @return MultipleValueNode
         */
        public static function ids()
        {
        }
        /*
         * Create a multiple value node for merchant account id
         *
         * @return MultipleValueNode
         */
        public static function merchantAccountId()
        {
        }
        /*
         * Create a new text node for order id
         *
         * @return TextNode
         */
        public static function orderId()
        {
        }
        /*
         * Create a multiple value node for payment instrument type
         *
         * @return MultipleValueNode
         */
        public static function paymentInstrumentType()
        {
        }
        /*
         * Create a new text node for payment method token
         *
         * @return TextNode
         */
        public static function paymentMethodToken()
        {
        }
        /*
         * Create a new text node for paypal authorization id
         *
         * @return TextNode
         */
        public static function paypalAuthorizationId()
        {
        }
        /*
         * Create a new text node for paypal payer email
         *
         * @return TextNode
         */
        public static function paypalPayerEmail()
        {
        }
        /*
         * Create a new text node for paypal payment id
         *
         * @return TextNode
         */
        public static function paypalPaymentId()
        {
        }
        /*
         * Create a new text node for processor authorization code
         *
         * @return TextNode
         */
        public static function processorAuthorizationCode()
        {
        }
        /*
         * Create a new range node for processor declined at
         *
         * @return RangeNode
         */
        public static function processorDeclinedAt()
        {
        }
        /*
         * Create a new key value node for refund
         *
         * @return KeyValueNode
         */
        public static function refund()
        {
        }
        /*
         * Create a new range node for settled at
         *
         * @return RangeNode
         */
        public static function settledAt()
        {
        }
        /*
         * Create a new text node for settlement batch id
         *
         * @return TextNode
         */
        public static function settlementBatchId()
        {
        }
        /*
         * Create a new text node for shipping company
         *
         * @return TextNode
         */
        public static function shippingCompany()
        {
        }
        /*
         * Create a new text node for shipping country name
         *
         * @return TextNode
         */
        public static function shippingCountryName()
        {
        }
        /*
         * Create a new text node for shipping extended address
         *
         * @return TextNode
         */
        public static function shippingExtendedAddress()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Given name. First name is US ethnocentric
        /*
         * Create a new text node for shipping first or given name
         *
         * @return TextNode
         */
        public static function shippingFirstName()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Surname. Last name is US ethnocentric
        /*
         * Create a new text node for shipping last or surname
         *
         * @return TextNode
         */
        public static function shippingLastName()
        {
        }
        /*
         * Create a new text node for shipping locality or city
         *
         * @return TextNode
         */
        public static function shippingLocality()
        {
        }
        /*
         * Create a new text node for shipping postal code
         *
         * @return TextNode
         */
        public static function shippingPostalCode()
        {
        }
        /*
         * Create a new text node for shipping region or state
         *
         * @return TextNode
         */
        public static function shippingRegion()
        {
        }
        /*
         * Create a new text node for shipping street address
         *
         * @return TextNode
         */
        public static function shippingStreetAddress()
        {
        }
        /*
         * Create a new range node for submitted for settlement at date
         *
         * @return RangeNode
         */
        public static function submittedForSettlementAt()
        {
        }
        /*
         * Create a new text node for store id
         *
         * @return TextNode
         */
        public static function storeId()
        {
        }
        /*
         * Create a new multiple value node for store ids
         *
         * @return MultipleValueNode
         */
        public static function storeIds()
        {
        }
        /*
         * Create a new multiple value node for user
         *
         * @return MultipleValueNode
         */
        public static function user()
        {
        }
        /*
         * Create a new range node for submitted for voided at date
         *
         * @return RangeNode
         */
        public static function voidedAt()
        {
        }
        /*
         * Create a new multiple value node for created using
         *
         * @return MultipleValueNode
         */
        public static function createdUsing()
        {
        }
        /*
         * Create a new multiple value node for credit card type
         *
         * @return MultipleValueNode
         */
        public static function creditCardCardType()
        {
        }
        /*
         * Create a new multiple value node for credit card customer location
         *
         * @return MultipleValueNode
         */
        public static function creditCardCustomerLocation()
        {
        }
        /*
         * Create a new multiple value node for source
         *
         * @return MultipleValueNode
         */
        public static function source()
        {
        }
        /*
         * Create a new multiple value node for status
         *
         * @return MultipleValueNode
         */
        public static function status()
        {
        }
        /*
         * Create a new multiple value node for type
         *
         * @return MultipleValueNode
         */
        public static function type()
        {
        }
    }
    /**
     * Plan class object. A plan is a template for subscriptions.
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/plan developer docs} for information on attributes
     */
    class Plan extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Plan
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        /**
         * static methods redirecting to gateway class
         *
         * @see PlanGateway::all()
         *
         * @return Plan[]
         */
        public static function all()
        {
        }
        /**
         * static methods redirecting to gateway class
         *
         * @param array $attributes response object attributes
         *
         * @return Plan
         */
        public static function create($attributes)
        {
        }
        /**
         * static methods redirecting to gateway class
         *
         * @param $id int planId
         *
         * @return Plan
         */
        public static function find($id)
        {
        }
        /**
         * static methods redirecting to gateway class
         *
         * @param $planId     int planId
         * @param array $attributes response object attributes
         *
         * @return Plan
         */
        public static function update($planId, $attributes)
        {
        }
    }
    /**
     * Braintree SettlementBatchSummaryGateway module
     * Creates and manages SettlementBatchSummarys
     */
    class SettlementBatchSummaryGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Create a Settlement Batch Summary report.
         *
         * @param string $settlement_date    A string representing the date of the settlement batch
         * @param string $groupByCustomField A string representing a transaction's custom field that you wish to group by
         *
         * @return SettlementBatchSummary|Result\Error
         */
        public function generate($settlement_date, $groupByCustomField = null)
        {
        }
        private function _underscoreCustomField($groupByCustomField, $records)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
    }
    /**
     * Creates an instance of AuthorizationAdjustment as returned from a transaction
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/transaction#authorization-adjustments developer docs} for information on attributes
     */
    class AuthorizationAdjustment extends \Braintree\Base
    {
        /**
         * Creates an instance of an AuthorizationAdjustment from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return AuthorizationAdjustment
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($authorizationAdjustmentAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Shipping methods module
     * Shipping methods can be assigned to shipping addresses when
     * creating transactions.
     */
    class ShippingMethod
    {
        const SAME_DAY = 'same_day';
        const NEXT_DAY = 'next_day';
        const PRIORITY = 'priority';
        const GROUND = 'ground';
        const ELECTRONIC = 'electronic';
        const SHIP_TO_STORE = 'ship_to_store';
    }
}
namespace Braintree\Dispute {
    /**
     * Transaction details for a dispute
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/dispute#transaction developer docs} for information on attributes
     */
    class TransactionDetails extends \Braintree\Instance
    {
    }
    /**
     * Evidence details for a dispute
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/dispute#evidence developer docs} for information on attributes
     */
    class EvidenceDetails extends \Braintree\Instance
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
    }
    /**
     * Status History for a dispute
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/dispute#status_history developer docs} for information on attributes
     */
    class StatusHistoryDetails extends \Braintree\Instance
    {
    }
    /**
     * PayPal Message for a dispute
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/dispute#paypal_messages developer docs} for information on attributes
     */
    class PayPalMessageDetails extends \Braintree\Instance
    {
    }
}
namespace Braintree {
    /**
     * Braintree PayPalAccount module
     * Manages Braintree PayPalAccounts
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/paypal-account/php developer docs} for information on attributes
     */
    class PayPalAccount extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return PayPalAccount
         */
        public static function factory($attributes)
        {
        }
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $paypalAccountAttribs array of paypalAccount data
         *
         * @return void
         */
        protected function _initialize($paypalAccountAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $token paypal accountunique id
         *
         * @see PayPalGateway::find()
         *
         * @throws Exception\NotFound
         *
         * @return PayPalAccount
         */
        public static function find($token)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * if calling this method in context, $token
         * is the 2nd attribute. $token is not sent in object context.
         *
         * @param string $token      (optional)
         * @param array  $attributes including request parameters
         *
         * @see PayPalGateway::update()
         *
         * @return Result\Successful or Result\Error
         */
        public static function update($token, $attributes)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $token paypal account identifier
         *
         * @see PayPalGateway::delete()
         *
         * @return Result
         */
        public static function delete($token)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $token              paypal account identifier
         * @param array  $transactionAttribs containing request parameters
         *
         * @see PayPalGateway::sale()
         *
         * @return Result\Successful|Result\Error
         */
        public static function sale($token, $transactionAttribs)
        {
        }
    }
    /**
     * Braintree DisputeGateway module
     * Creates and manages Braintree Disputes
     */
    class DocumentUploadGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Accepts a dispute, given a dispute ID
         *
         * @param mixed $params containing:
         *                      kind - The kind of document
         *                      file - The open file to upload
         *
         * @throws InvalidArgumentException if the params are not expected
         *
         * @return Result\Successful|Result\Error
         */
        public function create($params)
        {
        }
        /*
         * Returns keys that are acceptable for create requests
         *
         * @see create
         */
        public static function createSignature()
        {
        }
    }
    /**
     * Class for setting subscription search queries
     */
    class SubscriptionSearch
    {
        /*
         * Create a new range node for billing cycles remaining
         *
         * @return RangeNode
         */
        public static function billingCyclesRemaining()
        {
        }
        /*
         * Create a new range node for days past due
         *
         * @return RangeNode
         */
        public static function daysPastDue()
        {
        }
        /*
         * Create a new text node for id
         *
         * @return TextNode
         */
        public static function id()
        {
        }
        /*
         * Create a multiple value node for in trial period
         *
         * @return MultipleValueNode
         */
        public static function inTrialPeriod()
        {
        }
        /*
         * Create a multiple value node for merchant account id
         *
         * @return MultipleValueNode
         */
        public static function merchantAccountId()
        {
        }
        /*
         * Create a new range node for next billing date
         *
         * @return RangeNode
         */
        public static function nextBillingDate()
        {
        }
        /*
         * Create a multiple value node for plan id
         *
         * @return MultipleValueNode
         */
        public static function planId()
        {
        }
        /*
         * Create a new range node for price
         *
         * @return RangeNode
         */
        public static function price()
        {
        }
        /*
         * Create a multiple value node for status
         *
         * @return MultipleValueNode
         */
        public static function status()
        {
        }
        /*
         * Create a new text node for transaction id
         *
         * @return TextNode
         */
        public static function transactionId()
        {
        }
        /*
         * Create a multiple value node for ids
         *
         * @return MultipleValueNode
         */
        public static function ids()
        {
        }
        /*
         * Create a new range node for created at
         *
         * @return RangeNode
         */
        public static function createdAt()
        {
        }
    }
}
namespace Braintree\Exception {
    /**
     * Raised when a Timeout occurs
     */
    class Timeout extends \Braintree\Exception
    {
    }
    /**
     * Raised when authentication fails.
     * This may be caused by an incorrect Configuration
     */
    class Authentication extends \Braintree\Exception
    {
    }
    /**
     * Raised when the webhook notification you attempt to parse has an invalid signature.
     *
     * @link https://developer.paypal.com/braintree/docs/reference/general/exceptions/php#invalid-signature
     */
    class InvalidSignature extends \Braintree\Exception
    {
    }
    /**
    * Raised when a test method is used in production.
    */
    class TestOperationPerformedInProduction extends \Braintree\Exception
    {
    }
    /**
     * Raised from non-validating methods when gateway validations fail.
     */
    class ValidationsFailed extends \Braintree\Exception
    {
    }
    /**
     * Raised when the connection fails
     *
     * @copyright 2015 Braintree, a division of PayPal, Inc.
     */
    class Connection extends \Braintree\Exception
    {
    }
    /**
     * Raised when a client request timeout occurs.
     */
    class RequestTimeout extends \Braintree\Exception
    {
    }
    /**
     * Raised when the Braintree library is not completely configured.
     *
     * @see Configuration
     */
    class Configuration extends \Braintree\Exception
    {
    }
    /**
     * Raised when the gateway service is unavailable.
     */
    class ServiceUnavailable extends \Braintree\Exception
    {
    }
    /**
     * Raised when the gateway request rate-limit is exceeded.
     */
    class TooManyRequests extends \Braintree\Exception
    {
    }
    /**
     * Raised when an error occurs that the client library is not built to handle.
     * This shouldn't happen.
     */
    class Unexpected extends \Braintree\Exception
    {
    }
    /**
     * Raised when the SSL certificate fails verification.
     */
    class SSLCertificate extends \Braintree\Exception
    {
    }
    /**
     * Raised when the SSL CaFile is not found.
     */
    class SSLCaFileNotFound extends \Braintree\Exception
    {
    }
    /**
     * Raised when the webhook challenge you attempt to verify is in an invalid format.
     *
     * @link https://developer.paypal.com/braintree/docs/reference/general/exceptions/php#invalid-challenge
     */
    class InvalidChallenge extends \Braintree\Exception
    {
    }
    /**
     * Raised when authorization fails
     * Raised when the API key being used is not authorized to perform
     * the attempted action according to the roles assigned to the user
     * who owns the API key.
     */
    class Authorization extends \Braintree\Exception
    {
    }
    /**
     * Raised when a client library must be upgraded.
     */
    class UpgradeRequired extends \Braintree\Exception
    {
    }
    /**
     * Raised when an unexpected server error occurs.
     */
    class ServerError extends \Braintree\Exception
    {
    }
    /**
     * Raised when a gateway response timeout occurs.
     */
    class GatewayTimeout extends \Braintree\Exception
    {
    }
    /**
     * Raised when a record could not be found.
     */
    class NotFound extends \Braintree\Exception
    {
    }
}
namespace Braintree {
    /**
     * Any applicable risk data associated with the transaction. For detailed reference information on properties, see the {@link developer docs https://developer.paypal.com/braintree/docs/reference/response/transaction#risk_data}.
     */
    class RiskData extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return RiskData
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
        /**
         * returns the rules triggered by the fraud provider when generating the decision.
         *
         * @return array of strings
         */
        public function decisionReasons()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    class SignatureService
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($key, $digest)
        {
        }
        public function sign($payload)
        {
        }
        public function hash($data)
        {
        }
    }
    /**
     * Braintree RevokedPaymentMethodMetadata module
     */
    /**
     * Manages Braintree RevokedPaymentMethodMetadata
     *
     * See our {@link https://developer.paypal.com/braintree/docs/guides/extend/grant-api/revocation developer docs} for more information
     */
    class RevokedPaymentMethodMetadata extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return RevokedPaymentMethodMetadata
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
}
namespace Braintree\Result {
    /**
     * Braintree US Bank Account Verification Result
     *
     * This object is returned as part of an Error Result; it provides
     * access to the credit card verification data from the gateway
     *
     * See our {@link https://developer.paypal.com/braintree/docs/guides/acv/server-side developer docs} for more information
     */
    class UsBankAccountVerification extends \Braintree\Base
    {
        // Status
        const FAILED = 'failed';
        const GATEWAY_REJECTED = 'gateway_rejected';
        const PROCESSOR_DECLINED = 'processor_declined';
        const VERIFIED = 'verified';
        const PENDING = 'pending';
        const TOKENIZED_CHECK = 'tokenized_check';
        const NETWORK_CHECK = 'network_check';
        const INDEPENDENT_CHECK = 'independent_check';
        const MICRO_TRANSFERS = 'micro_transfers';
        private $_gatewayRejectionReason;
        private $_status;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($attributes)
        {
        }
        /**
         * initializes instance properties from the keys/values of an array
         *
         * @param <type> $aAttribs array of properties to set - single level
         *
         * @return void
         */
        private function _initializeFromArray($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __get($name)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * returns an array of all possible US Bank Account Verification statuses
         *
         * @return array
         */
        public static function allStatuses()
        {
        }
        /**
         * returns an array of all possible US Bank Account Verification methods
         *
         * @return array
         */
        public static function allVerificationMethods()
        {
        }
    }
}
namespace Braintree {
    /**
     * Braintree UsBankAccountVerification module
     */
    /**
     * Manages Braintree UsBankAccountVerifications
     *
     * <b>== More information ==</b>
     */
    class UsBankAccountVerification extends \Braintree\Result\UsBankAccountVerification
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return UsBankAccountVerification
         */
        public static function factory($attributes)
        {
        }
        /* instance methods */
        /**
         * sets instance properties from an array of values
         *
         * @param array $usBankAccountVerificationAttribs array of usBankAccountVerification data
         *
         * @return void
         */
        protected function _initialize($usBankAccountVerificationAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $token unique id
         *
         * @see UsBankAccountVerificationGateway::find()
         *
         * @return UsBankAccountVerification
         */
        public static function find($token)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param mixed $query search query
         *
         * @see UsBankAccountVerificationGateway::search()
         *
         * @return ResourceCollection
         */
        public static function search($query)
        {
        }
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $token   unique id
         * @param array  $amounts micro transfer amounts
         *
         * @see UsBankAccountVerificationGateway::confirmMicroTransferAmounts()
         *
         * @return ResourceCollection
         */
        public static function confirmMicroTransferAmounts($token, $amounts)
        {
        }
    }
    /**
     * Class for setting credit card verification search queries
     */
    class CreditCardVerificationSearch
    {
        /*
         * Create a new text node for id
         *
         * @return TextNode
         */
        public static function id()
        {
        }
        // NEXT_MAJOR_VERSION can this just be cardholder name?
        /*
         * Create a new text node for credit card cardholder name
         *
         * @return TextNode
         */
        public static function creditCardCardholderName()
        {
        }
        /*
         * Create a new text node for billing address details postal code
         *
         * @return TextNode
         */
        public static function billingAddressDetailsPostalCode()
        {
        }
        /*
         * Create a new text node for customer email
         *
         * @return TextNode
         */
        public static function customerEmail()
        {
        }
        /*
         * Create a new text node for customer id
         *
         * @return TextNode
         */
        public static function customerId()
        {
        }
        /*
         * Create a new text node for payment method token
         *
         * @return TextNode
         */
        public static function paymentMethodToken()
        {
        }
        /*
         * Create a new equality node for credit card expiration date
         *
         * @return EqualityNode
         */
        public static function creditCardExpirationDate()
        {
        }
        /*
         * Create a new partial match node for credit card number
         *
         * @return PartialMatchNode
         */
        public static function creditCardNumber()
        {
        }
        /*
         * Create a new multiple value node for ids
         *
         * @return MultipleValueNode
         */
        public static function ids()
        {
        }
        /*
         * Create a new range node for created at
         *
         * @return RangeNode
         */
        public static function createdAt()
        {
        }
        //NEXT_MAJOR_VERSION can this just be card type?
        /*
         * Create a new multiple value node for credit card card type
         *
         * @return MultipleValueNode
         */
        public static function creditCardCardType()
        {
        }
        /*
         * Create a new multiple value node for status
         *
         * @return MultipleValueNode
         */
        public static function status()
        {
        }
    }
    /**
    * Braintree CustomerGateway module
    * Creates and manages Customers
    *
    // phpcs:ignore Generic.Files.LineLength
    * For more detailed information on Customers, see {@link https://developer.paypal.com/braintree/docs/reference/response/customer/php our developer docs}
    */
    class CustomerGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /*
         * Return all customers
         *
         * @return ResourceCollection
         */
        public function all()
        {
        }
        /**
         * Retrieve a customer
         *
         * @param array $query containing request params
         * @param int[] $ids   containing customer IDs
         *
         * @return Customer|Customer[]
         */
        public function fetch($query, $ids)
        {
        }
        /**
         * Creates a customer using the given +attributes+. If <tt>:id</tt> is not passed,
         * the gateway will generate it.
         *
         * <code>
         *   $result = Customer::create(array(
         *     'first_name' => 'John',
         *     'last_name' => 'Smith',
         *     'company' => 'Smith Co.',
         *     'email' => 'john@smith.com',
         *     'website' => 'www.smithco.com',
         *     'fax' => '419-555-1234',
         *     'phone' => '614-555-1234'
         *   ));
         *   if($result->success) {
         *     echo 'Created customer ' . $result->customer->id;
         *   } else {
         *     echo 'Could not create customer, see result->errors';
         *   }
         * </code>
         *
         * @param array $attribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function create($attribs = [])
        {
        }
        /**
         * attempts the create operation assuming all data will validate
         * returns a Customer object instead of a Result
         *
         * @param array $attribs of request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return Customer
         */
        public function createNoValidate($attribs = [])
        {
        }
        /**
         * creates a full array signature of a valid create request
         *
         * @return array gateway create request format
         */
        public static function createSignature()
        {
        }
        /**
         * creates a full array signature of a valid update request
         *
         * @return array update request format
         */
        public static function updateSignature()
        {
        }
        /**
         * find a customer by id
         *
         * @param string $id                  customer Id
         * @param string $associationFilterId association filter Id
         *
         * @throws Exception\NotFound
         *
         * @return Customer|boolean The customer object or false if the request fails.
         */
        public function find($id, $associationFilterId = null)
        {
        }
        /**
         * credit a customer for the passed transaction
         *
         * @param integer $customerId         unique identifier
         * @param array   $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function credit($customerId, $transactionAttribs)
        {
        }
        /**
         * credit a customer, assuming validations will pass
         *
         * returns a Transaction object on success
         *
         * @param integer $customerId         unique identifier
         * @param array   $transactionAttribs containing request parameters
         *
         * @throws Exception\ValidationError
         *
         * @return Transaction
         */
        public function creditNoValidate($customerId, $transactionAttribs)
        {
        }
        /**
         * delete a customer by id
         *
         * @param string $customerId unique identifier
         *
         * @return Result\Successful
         */
        public function delete($customerId)
        {
        }
        /**
         * create a new sale for a customer
         *
         * @param string $customerId         unique identifier
         * @param array  $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function sale($customerId, $transactionAttribs)
        {
        }
        /**
         * create a new sale for a customer, assuming validations will pass
         *
         * returns a Transaction object on success
         *
         * @param string $customerId         unique identifier
         * @param array  $transactionAttribs containing request parameters
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Transaction
         */
        public function saleNoValidate($customerId, $transactionAttribs)
        {
        }
        /**
        * Returns a ResourceCollection of customers matching the search query.
        *
        * If <b>query</b> is a string, the search will be a basic search.
        * If <b>query</b> is a hash, the search will be an advanced search.
        // phpcs:ignore Generic.Files.LineLength
        * For more detailed information and examples, see {@link https://developer.paypal.com/braintree/docs/reference/request/customer/search/php our developer docs}
        *
        * @param mixed $query search query
        *
        * @throws InvalidArgumentException
        *
        * @return ResourceCollection
        */
        public function search($query)
        {
        }
        /**
         * updates the customer record
         *
         * if calling this method in static context, customerId
         * is the 2nd attribute. customerId is not sent in object context.
         *
         * @param string $customerId to be updated
         * @param array  $attributes containing request params
         *
         * @return Result\Successful|Result\Error
         */
        public function update($customerId, $attributes)
        {
        }
        /**
         * update a customer record, assuming validations will pass
         *
         * if calling this method in static context, customerId
         * is the 2nd attribute. customerId is not sent in object context.
         * returns a Customer object on success
         *
         * @param string $customerId unique identifier
         * @param array  $attributes request parameters
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Customer
         */
        public function updateNoValidate($customerId, $attributes)
        {
        }
        protected function _initialize($customerAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * returns false if comparing object is not a Customer,
         * or is a Customer with a different id
         *
         * @param object $otherCust customer to compare against
         *
         * @return boolean
         */
        public function isEqual($otherCust)
        {
        }
        /**
         * returns an array containt all of the customer's payment methods
         *
         * @return array
         */
        public function paymentMethods()
        {
        }
        /**
         * returns the customer's default payment method
         *
         * @return CreditCard|PayPalAccount|ApplePayCard|GooglePayCard
         */
        public function defaultPaymentMethod()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function _defaultPaymentMethodFilter($paymentMethod)
        {
        }
        protected $_attributes = ['addresses' => '', 'company' => '', 'creditCards' => '', 'email' => '', 'fax' => '', 'firstName' => '', 'id' => '', 'lastName' => '', 'phone' => '', 'createdAt' => '', 'updatedAt' => '', 'website' => ''];
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function _doCreate($subPath, $params)
        {
        }
        private function _validateId($id = null)
        {
        }
        private function _doUpdate($httpVerb, $subPath, $params)
        {
        }
        private function _verifyGatewayResponse($response)
        {
        }
    }
}
namespace Braintree\MerchantAccount {
    /**
     * Braintree IndividualDetails class
     *
     * Object containing information on individual details of a merchant account
     */
    class IndividualDetails extends \Braintree\Base
    {
        protected function _initialize($individualAttribs)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return IndividualDetails
         */
        public static function factory($attributes)
        {
        }
    }
    /**
     * Braintree BusinessDetails class
     *
     * Object containing information on business details of a merchant account
     */
    class BusinessDetails extends \Braintree\Base
    {
        protected function _initialize($businessAttribs)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return BusinessDetails
         */
        public static function factory($attributes)
        {
        }
    }
    /**
     * Creates an instance of AddressDetails as returned from a merchant account
     */
    class AddressDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
    }
    /**
     * Braintree FundingDetails class
     *
     * Object containing information on funding details of a merchant account
     */
    class FundingDetails extends \Braintree\Instance
    {
        protected $_attributes = [];
    }
}
namespace Braintree {
    /**
     * Merchant class
     */
    class Merchant extends \Braintree\Base
    {
        protected function _initialize($attribs)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Merchant
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Processor response types.
     */
    class ProcessorResponseTypes
    {
        const APPROVED = 'approved';
        const SOFT_DECLINED = 'soft_declined';
        const HARD_DECLINED = 'hard_declined';
    }
    /**
     * Braintree DisputeGateway module
     * Creates and manages Braintree Disputes
     */
    class DisputeGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Accepts a dispute, given a dispute ID
         *
         * @param string $id of the dispute to be accepted
         *
         * @return Dispute|Exception\NotFound|Result\Error
         */
        public function accept($id)
        {
        }
        /**
         * Adds file evidence to a dispute, given a dispute ID and a document ID
         *
         * @param string $disputeId           to have evidence added
         * @param string $documentIdOrRequest either a string of the unique identifier for a DocumentUpload object or a set of request params including the DocumentUpload ID
         *
         * @return EvidenceDetails|Exception\NotFound
         */
        public function addFileEvidence($disputeId, $documentIdOrRequest)
        {
        }
        /**
         * Adds text evidence to a dispute, given a dispute ID and content
         *
         * @param string $id               of the dispute
         * @param mixed  $contentOrRequest text-based content for the dispute evidence
         *
         * @return EvidenceDetails|Exception\NotFound
         */
        public function addTextEvidence($id, $contentOrRequest)
        {
        }
        /**
         * Finalize a dispute, given a dispute ID
         *
         * @param string $id of the dispute
         *
         * @return Dispute|Result\Error
         */
        public function finalize($id)
        {
        }
        /**
         * Find a dispute, given a dispute ID
         *
         * @param string $id of the dispute
         *
         * @return Dispute|Exception\NotFound
         */
        public function find($id)
        {
        }
        /**
         * Remove evidence from a dispute, given a dispute ID and evidence ID
         *
         * @param string $disputeId  unique dispute identifier
         * @param string $evidenceId uniqye evidence identifier
         *
         * @return true|Result\Error|Exception\NotFound
         */
        public function removeEvidence($disputeId, $evidenceId)
        {
        }
        /**
         * Search for Disputes, given a DisputeSearch query
         *
         * @param array $query containing search fields
         *
         * @return ResourceCollection of Dispute objects
         */
        public function search($query)
        {
        }
        /**
         * Similar to search, with a paging object
         *
         * @param array  $query containing search fields
         * @param object $page  to iterate over results
         *
         * @return PaginatedResults
         */
        public function fetchDisputes($query, $page)
        {
        }
    }
    /**
     * Braintree IsNode
     * IsNode is an object for search elements to the Braintree API
     */
    class EqualityNode extends \Braintree\IsNode
    {
        /**
         * Sets the value of the object's "is_not" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function isNot($value)
        {
        }
    }
    /**
     * Braintree PartialMatchNode module
     *
     * PartialMatchNode is an object for partially matching node elements returned from the Braintree API
     */
    class PartialMatchNode extends \Braintree\EqualityNode
    {
        /**
         * Sets the value of the object's "starts_with" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function startsWith($value)
        {
        }
        /**
         * Sets the value of the object's "ends_width" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function endsWith($value)
        {
        }
    }
    /**
     * Braintree OAuth Revocation module
     *
     * A revoked OAuth access token
     *
     * For more information, see {@link https://developer.paypal.com/braintree/docs/guides/extend/oauth/access-tokens/php#managing-access-tokens our developer docs}
     */
    class OAuthAccessRevocation extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return OauthAccessRevocation
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * Braintree TextNode
     * TextNode is an object for text elements returned from the Braintree API
     */
    class TextNode extends \Braintree\PartialMatchNode
    {
        /**
         * Sets the value of the object's "contains" key to a string of $value
         *
         * @param object $value to have its string value set in $this
         *
         * @return object
         */
        public function contains($value)
        {
        }
    }
}
namespace Braintree\HttpHelpers {
    /**
     * Braintree HttpRequest module
     *
     * Facilitates web requests made by the SDK
     */
    interface HttpRequest
    {
        // phpcs:disable PEAR.Commenting.FunctionComment.Missing
        public function setOption($name, $value);
        public function execute();
        public function getInfo($name);
        public function getErrorCode();
        public function getError();
        public function close();
        // phpcs:enable PEAR.Commenting.FunctionComment.Missing
    }
    /**
     * Braintree Curl module
     *
     * Faciliates curl requests made by the SDK
     */
    class Curl
    {
        // phpcs:ignore Generic.Files.LineLength, PEAR.Commenting.FunctionComment.Missing
        public static function makeRequest($httpVerb, $url, $config, $httpRequest, $requestBody = null, $file = null, $customHeaders = null, $useClientCredentials = false)
        {
        }
        private static function _getAuthorization($config, $useClientCredentials)
        {
        }
        private static function _getCaFile($config)
        {
        }
        private static function _prepareMultipart($httpRequest, $requestBody, $file, $boundary)
        {
        }
    }
    //phpcs:ignore
    class CurlRequest implements \Braintree\HttpHelpers\HttpRequest
    {
        private $_handle = null;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($url)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function setOption($name, $value)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function execute()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function getInfo($name)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function getErrorCode()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function getError()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function close()
        {
        }
    }
}
namespace Braintree {
    /**
     * Braintree Customer module
     * Creates and manages Customers
     *
     * <b>== More information ==</b>
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/customer developer docs} for information on attributes
     */
    class Customer extends \Braintree\Base
    {
        /*
         * Static method redirecting to gateway class
         *
         * @see CustomerGateway::all()
         *
         * @return ResourceCollection
         */
        public static function all()
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param array $query containing request params
         * @param int[] $ids   containing customer IDs
         *
         * @see CustomerGateway::fetch()
         *
         * @return Customer|Customer[]
         */
        public static function fetch($query, $ids)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param array $attribs containing request parameters
         *
         * @see CustomerGateway::create()
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($attribs = [])
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param array $attribs of request parameters
         *
         * @see CustomerGateway::createNoValidate()
         *
         * @throws Exception\ValidationError
         *
         * @return Customer
         */
        public static function createNoValidate($attribs = [])
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param string $id                  customer Id
         * @param string $associationFilterId association filter Id
         *
         * @see CustomerGateway::find()
         *
         * @throws Exception\NotFound
         *
         * @return Customer|boolean The customer object or false if the request fails.
         */
        public static function find($id, $associationFilterId = null)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param integer $customerId         unique identifier
         * @param array   $transactionAttribs containing request parameters
         *
         * @see CustomerGateway::credit()
         *
         * @return Result\Successful|Result\Error
         */
        public static function credit($customerId, $transactionAttribs)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param integer $customerId         unique identifier
         * @param array   $transactionAttribs containing request parameters
         *
         * @see CustomerGateway::creditNoValidate()
         *
         * @throws Exception\ValidationError
         *
         * @return Transaction
         */
        public static function creditNoValidate($customerId, $transactionAttribs)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param string $customerId unique identifier
         *
         * @see CustomerGateway::delete()
         *
         * @return Result\Successful
         */
        public static function delete($customerId)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param string $customerId         unique identifier
         * @param array  $transactionAttribs containing request parameters
         *
         * @see CustomerGateway::sale()
         *
         * @return Result\Successful|Result\Error
         */
        public static function sale($customerId, $transactionAttribs)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param string $customerId         unique identifier
         * @param array  $transactionAttribs containing request parameters
         *
         * @see CustomerGateway::saleNoValidate()
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Transaction
         */
        public static function saleNoValidate($customerId, $transactionAttribs)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param mixed $query search query
         *
         * @see CustomerGateway::search()
         *
         * @throws InvalidArgumentException
         *
         * @return ResourceCollection
         */
        public static function search($query)
        {
        }
        /**
         * Static method redirecting to gateway class
         *
         * @param string $customerId to be updated
         * @param array  $attributes containing request params
         *
         * @see CustomerGateway::update()
         *
         * @return Result\Successful|Result\Error
         */
        public static function update($customerId, $attributes)
        {
        }
        /**
         * update a customer record, assuming validations will pass
         *
         * if calling this method in static context, customerId
         * is the 2nd attribute. customerId is not sent in object context.
         * returns a Customer object on success
         *
         * @param string $customerId unique identifier
         * @param array  $attributes request parameters
         *
         * @see CustomerGateway::updateNoValidate()
         *
         * @throws Exception\ValidationsFailed
         *
         * @return Customer
         */
        public static function updateNoValidate($customerId, $attributes)
        {
        }
        protected function _initialize($customerAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        /**
         * returns false if comparing object is not a Customer,
         * or is a Customer with a different id
         *
         * @param object $otherCust customer to compare against
         *
         * @return boolean
         */
        public function isEqual($otherCust)
        {
        }
        /**
         * returns the customer's default payment method
         *
         * @return CreditCard|PayPalAccount
         */
        public function defaultPaymentMethod()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function _defaultPaymentMethodFilter($paymentMethod)
        {
        }
        protected $_attributes = ['addresses' => '', 'company' => '', 'creditCards' => '', 'email' => '', 'fax' => '', 'firstName' => '', 'id' => '', 'lastName' => '', 'phone' => '', 'taxIdentifiers' => '', 'createdAt' => '', 'updatedAt' => '', 'website' => ''];
        /**
         * Creates an instance of a Customer from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return Customer
         */
        public static function factory($attributes)
        {
        }
    }
}
namespace Braintree\Result {
    /**
     * Braintree Successful Result
     *
     * A Successful Result will be returned from gateway methods when
     * validations pass. It will provide access to the created resource.
     *
     * For example, when creating a customer, Successful will
     * respond to <b>customer</b> like so:
     *
     * <code>
     * $result = Customer::create(array('first_name' => "John"));
     * if ($result->success) {
     *     // Successful
     *     echo "Created customer {$result->customer->id}";
     * } else {
     *     // Error
     * }
     * </code>
     */
    class Successful extends \Braintree\Instance
    {
        /**
         *
         * @var boolean always true
         */
        public $success = true;
        /**
         *
         * @var string stores the internal name of the object providing access to
         */
        private $_returnObjectNames;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($objsToReturn = [], $propertyNames = [])
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
        private function _mapPropertyNamesToObjsToReturn($propertyNames, $objsToReturn)
        {
        }
    }
    /**
     * Braintree Error Result
     *
     * An Error Result will be returned from gateway methods when
     * the gateway responds with an error. It will provide access
     * to the original request.
     * For example, when voiding a transaction, Error Result will
     * respond to the void request if it failed:
     *
     * <code>
     * $result = Transaction::void('abc123');
     * if ($result->success) {
     *     // Successful Result
     * } else {
     *     // Result\Error
     * }
     * </code>
     *
     * @property-read array $params original passed params
     * @property-read \Braintree\Error\ErrorCollection $errors
     * @property-read \Braintree\Result\CreditCardVerification $creditCardVerification credit card verification data
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/result-objects developer docs} for more information
     */
    class Error extends \Braintree\Base
    {
        /**
         * used to determine whether an API request was successful or not
         *
         * @var boolean always false
         */
        public $success = false;
        /**
         * return original value for a field
         * For example, if a user tried to submit 'invalid-email' in the html field transaction[customer][email],
         * $result->valueForHtmlField("transaction[customer][email]") would yield "invalid-email"
         *
         * @param string $field to check submitted value
         *
         * @return string
         */
        public function valueForHtmlField($field)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($response)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
}
namespace Braintree {
    /**
     * Braintree GrantedPaymentInstrumentUpdate module
     */
    /**
     * Manages Braintree GrantedPaymentInstrumentUpdate
     *
     * See our {@link https://developer.paypal.com/braintree/docs/guides/extend/grant-api/webhooks developer docs} for more information
     */
    class GrantedPaymentInstrumentUpdate extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return GrantedPaymentInstrumentUpdate
         */
        public static function factory($attributes)
        {
        }
        /* instance methods */
        /**
         * sets instance properties from an array of values
         *
         * @param array $GrantedPaymentInstrumentAttribs array of grantedPaymentInstrumentUpdate data
         *
         * @return void
         */
        protected function _initialize($grantedPaymentInstrumentUpdateAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree ApplePayOptions module
     * Manages configuration and options for Apple Pay
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/apple-pay-options developer docs} for information on attributes
     */
    class ApplePayOptions extends \Braintree\Base
    {
        /**
         * Creates an instance of an ApplePayOptions from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return ApplePayOptions
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * The descriptive value on bank statements. For detailed reference information on properties, see the {@link developer docs https://developer.paypal.com/braintree/docs/reference/response/subscription#descriptor}.
     */
    class Descriptor extends \Braintree\Instance
    {
    }
    /**
     * WebhookNotification class
     * module for webhook objects
     */
    class WebhookNotification extends \Braintree\Base
    {
        // phpcs:disable Generic.Files.LineLength
        const ACCOUNT_UPDATER_DAILY_REPORT = 'account_updater_daily_report';
        const CHECK = 'check';
        const CONNECTED_MERCHANT_PAYPAL_STATUS_CHANGED = 'connected_merchant_paypal_status_changed';
        const CONNECTED_MERCHANT_STATUS_TRANSITIONED = 'connected_merchant_status_transitioned';
        const DISBURSEMENT = 'disbursement';
        const DISBURSEMENT_EXCEPTION = 'disbursement_exception';
        const DISPUTE_ACCEPTED = 'dispute_accepted';
        const DISPUTE_DISPUTED = 'dispute_disputed';
        const DISPUTE_EXPIRED = 'dispute_expired';
        const DISPUTE_LOST = 'dispute_lost';
        const DISPUTE_OPENED = 'dispute_opened';
        const DISPUTE_WON = 'dispute_won';
        const GRANTED_PAYMENT_METHOD_REVOKED = 'granted_payment_method_revoked';
        const GRANTOR_UPDATED_GRANTED_PAYMENT_METHOD = 'grantor_updated_granted_payment_method';
        const LOCAL_PAYMENT_COMPLETED = "local_payment_completed";
        const LOCAL_PAYMENT_EXPIRED = "local_payment_expired";
        const LOCAL_PAYMENT_FUNDED = "local_payment_funded";
        const LOCAL_PAYMENT_REVERSED = "local_payment_reversed";
        const OAUTH_ACCESS_REVOKED = 'oauth_access_revoked';
        const PARTNER_MERCHANT_CONNECTED = 'partner_merchant_connected';
        const PARTNER_MERCHANT_DECLINED = 'partner_merchant_declined';
        const PARTNER_MERCHANT_DISCONNECTED = 'partner_merchant_disconnected';
        const PAYMENT_METHOD_CUSTOMER_DATA_UPDATED = 'payment_method_customer_data_updated';
        const PAYMENT_METHOD_REVOKED_BY_CUSTOMER = 'payment_method_revoked_by_customer';
        const RECIPIENT_UPDATED_GRANTED_PAYMENT_METHOD = 'recipient_updated_granted_payment_method';
        const SUBSCRIPTION_CANCELED = 'subscription_canceled';
        const SUBSCRIPTION_CHARGED_SUCCESSFULLY = 'subscription_charged_successfully';
        const SUBSCRIPTION_CHARGED_UNSUCCESSFULLY = 'subscription_charged_unsuccessfully';
        const SUBSCRIPTION_EXPIRED = 'subscription_expired';
        const SUBSCRIPTION_TRIAL_ENDED = 'subscription_trial_ended';
        const SUBSCRIPTION_WENT_ACTIVE = 'subscription_went_active';
        const SUBSCRIPTION_WENT_PAST_DUE = 'subscription_went_past_due';
        const SUB_MERCHANT_ACCOUNT_APPROVED = 'sub_merchant_account_approved';
        const SUB_MERCHANT_ACCOUNT_DECLINED = 'sub_merchant_account_declined';
        const TRANSACTION_DISBURSED = 'transaction_disbursed';
        const TRANSACTION_REVIEWED = 'transaction_reviewed';
        const TRANSACTION_SETTLED = 'transaction_settled';
        const TRANSACTION_SETTLEMENT_DECLINED = 'transaction_settlement_declined';
        // phpcs:enable Generic.Files.LineLength
        /**
         * Static methods redirecting to gateway class
         *
         * @param string $signature used to verify before parsing
         * @param mixed  $payload   to be parsed
         *
         * @see WebHookNotificationGateway::parse()
         *
         * @return WebhookNotification object|Exception
         */
        public static function parse($signature, $payload)
        {
        }
        /*
         * Static methods redirecting to gateway class
         *
         * @param object $challenge to be verified
         *
         * @see WebHookNotificationGateway::verify()
         *
         * @return string|Exception
         */
        public static function verify($challenge)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return WebhookNotification
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * Braintree EnrichedCustomerData module
     */
    class EnrichedCustomerData extends \Braintree\Base
    {
        /**
         *  factory method: returns an instance of EnrichedCustomerData
         *  to the requesting method, with populated properties
         *
         * @param array $attributes used to create the object
         *
         * @return EnrichedCustomerData
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($enrichedCustomerDataAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree UsBankAccountVerificationSearch
     * UsBankAccountVerificationSearch is used in searching US Bank Account verifications (ACH)
     */
    class UsBankAccountVerificationSearch
    {
        /**
         * Sets account holder name in search terms
         *
         * @return TextNode
         */
        public static function accountHolderName()
        {
        }
        /**
         * Sets customer email in search terms
         *
         * @return TextNode
         */
        public static function customerEmail()
        {
        }
        /**
         * Sets customer Id in search terms
         *
         * @return TextNode
         */
        public static function customerId()
        {
        }
        /**
         * Sets Id in search terms
         *
         * @return TextNode
         */
        public static function id()
        {
        }
        /**
         * Sets payment method token in search terms
         *
         * @return TextNode
         */
        public static function paymentMethodToken()
        {
        }
        /**
         * Sets routing number in search terms
         *
         * @return TextNode
         */
        public static function routingNumber()
        {
        }
        /**
         * Sets Ids in search terms
         *
         * @return TextNode
         */
        public static function ids()
        {
        }
        /**
         * Sets US bank account verification statuses in search terms
         *
         * @return MultipleValueNode
         */
        public static function status()
        {
        }
        /**
         * Sets US bank account verification methods in search terms
         *
         * @return MultipleValueNode
         */
        public static function verificationMethod()
        {
        }
        /**
         * Sets created at date range in search terms
         *
         * @return RangeNode
         */
        public static function createdAt()
        {
        }
        /**
         * Sets account type in search terms
         *
         * @return EqualityNode
         */
        public static function accountType()
        {
        }
        /**
         * Sets account number in search terms
         *
         * @return EndsWithNode
         */
        public static function accountNumber()
        {
        }
    }
    /**
     * Braintree PayPalAccountGateway module
     *
     * Manages Braintree PayPalAccounts
     *
     * For more detailed information on PayPal Accounts, see {@link https://developer.paypal.com/braintree/docs/reference/response/paypal-account our developer docs}<br />
     */
    class PayPalAccountGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Find a paypalAccount by token
         *
         * @param string $token paypal accountunique id
         *
         * @throws Exception\NotFound
         *
         * @return PayPalAccount
         */
        public function find($token)
        {
        }
        /**
         * updates the paypalAccount record
         *
         * if calling this method in context, $token
         * is the 2nd attribute. $token is not sent in object context.
         *
         * @param string $token      (optional)
         * @param array  $attributes including request parameters
         *
         * @return Result\Successful or Result\Error
         */
        public function update($token, $attributes)
        {
        }
        /**
         * Delete a PayPal Account record
         *
         * @param string $token paypal account identifier
         *
         * @return Result
         */
        public function delete($token)
        {
        }
        /**
         * create a new sale for the current PayPal account
         *
         * @param string $token              paypal account identifier
         * @param array  $transactionAttribs containing request parameters
         *
         * @return Result\Successful|Result\Error
         */
        public function sale($token, $transactionAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public static function updateSignature()
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        private function _doUpdate($httpVerb, $subPath, $params)
        {
        }
        /**
         * generic method for validating incoming gateway responses
         *
         * creates a new PayPalAccount object and encapsulates
         * it inside a Result\Successful object, or
         * encapsulates a Errors object inside a Result\Error
         * alternatively, throws an Unexpected exception if the response is invalid.
         *
         * @param array $response gateway response values
         *
         * @throws Exception\Unexpected
         *
         * @return Result\Successful|Result\Error
         */
        private function _verifyGatewayResponse($response)
        {
        }
        /**
         * verifies that a valid paypal account identifier is being used
         *
         * @param string   $identifier
         * @param Optional $string     $identifierType type of identifier supplied, default 'token'
         *
         * @throws InvalidArgumentException
         */
        private function _validateId($identifier = null, $identifierType = 'token')
        {
        }
    }
    /**
     * Class for running customer searches
     */
    class CustomerSearch
    {
        /*
         * Create a new text node for address country name
         *
         * @return TextNode
         */
        public static function addressCountryName()
        {
        }
        /*
         * Create a new text node for address extended address
         *
         * @return TextNode
         */
        public static function addressExtendedAddress()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Given name. First name is US ethnocentric
        /*
         * Create a new text node for address first or given name
         *
         * @return TextNode
         */
        public static function addressFirstName()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Surname. Last name is US ethnocentric
        /*
         * Create a new text node for address last or surname
         *
         * @return TextNode
         */
        public static function addressLastName()
        {
        }
        /*
         * Create a new text node for address locality or city
         *
         * @return TextNode
         */
        public static function addressLocality()
        {
        }
        /*
         * Create a new text node for address postal code
         *
         * @return TextNode
         */
        public static function addressPostalCode()
        {
        }
        /*
         * Create a new text node for address region or state
         *
         * @return TextNode
         */
        public static function addressRegion()
        {
        }
        /*
         * Create a new text node for address street address
         *
         * @return TextNode
         */
        public static function addressStreetAddress()
        {
        }
        /*
         * Create a new text node for cardholder name
         *
         * @return TextNode
         */
        public static function cardholderName()
        {
        }
        /*
         * Create a new text node for company
         *
         * @return TextNode
         */
        public static function company()
        {
        }
        /*
         * Create a new text node for email
         *
         * @return TextNode
         */
        public static function email()
        {
        }
        /*
         * Create a new text node for fax
         *
         * @return TextNode
         */
        public static function fax()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Given name. First name is US ethnocentric
        /*
         * Create a new text node for customer first or given name
         *
         * @return TextNode
         */
        public static function firstName()
        {
        }
        /*
         * Create a new text node for id
         *
         * @return TextNode
         */
        public static function id()
        {
        }
        // NEXT_MAJOR_VERSION this should be changed to Surname. Last name is US ethnocentric
        /*
         * Create a new text node for customer last or Surname
         *
         * @return TextNode
         */
        public static function lastName()
        {
        }
        /*
         * Create a new text node for payment method token
         *
         * @return TextNode
         */
        public static function paymentMethodToken()
        {
        }
        /*
         * Create a new is node for payment method token with duplicate
         *
         * @return IsNode
         */
        public static function paymentMethodTokenWithDuplicates()
        {
        }
        /*
         * Create a new is node for paypal account email
         *
         * @return IsNode
         */
        public static function paypalAccountEmail()
        {
        }
        /*
         * Create a new text node for phone
         *
         * @return TextNode
         */
        public static function phone()
        {
        }
        /*
         * Create a new text node for website
         *
         * @return TextNode
         */
        public static function website()
        {
        }
        /*
         * Create a new equality node for credit card expiration date
         *
         * @return EqualityNode
         */
        public static function creditCardExpirationDate()
        {
        }
        /*
         * Create a new equality node for credit card number
         *
         * @return EqualityNode
         */
        public static function creditCardNumber()
        {
        }
        /*
         * Create a new multiple value node for ids
         *
         * @return MultipleValueNode
         */
        public static function ids()
        {
        }
        /*
         * Create a new range node for created at
         *
         * @return RangeNode
         */
        public static function createdAt()
        {
        }
    }
    /**
     * Braintree PaymentMethodNonce module
     */
    /**
     * Creates and manages Braintree PaymentMethodNonces
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/payment-method-nonce developer docs} for information on attributes
     */
    class PaymentMethodNonce extends \Braintree\Base
    {
        /**
         * Static method from gateway class
         *
         * @param string     $token  the identifier of the payment method
         * @param array|null $params additional parameters to be included in the request
         *
         * @see PaymentMethodNonceGateway::create()
         *
         * @return PaymentMethodNonce|Error
         */
        public static function create($token, $params = [])
        {
        }
        /*
         * Static method from gateway class
         *
         * @param string $nonce the payment method nonce string to return information about
         *
         * @see PaymentMethodNonceGateway::find()
         *
         * @return PaymentMethodNonce
         */
        public static function find($nonce)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return PaymentMethodNonce
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($nonceAttributes)
        {
        }
    }
    /**
     * Connected Merchant Status Transitioned Payload
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/webhooks/braintree-auth/php#notification-type-connected_merchant_paypal_status_changed developer docs} for information on attributes
     */
    class ConnectedMerchantStatusTransitioned extends \Braintree\Base
    {
        protected $_attributes = [];
        /**
         * Creates an instance of a ConnectedMerchantStatusTransitioned from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return ConnectedMerchantStatusTransitioned
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * Partner Merchant information that is generated when a partner is connected
     * to or disconnected from a user.
     *
     * Creates an instance of PartnerMerchants
     *
     * @property-read string $merchantPublicId
     * @property-read string $publicKey
     * @property-read string $privateKey
     * @property-read string $clientSideEncryptionKey
     * @property-read string $partnerMerchantId
     */
    class PartnerMerchant extends \Braintree\Base
    {
        protected $_attributes = [];
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return PartnerMerchant
         */
        public static function factory($attributes)
        {
        }
        protected function _initialize($attributes)
        {
        }
    }
    /**
     * Digest encryption module
     * Digest creates an HMAC-SHA1 hash for encrypting messages
     */
    class Digest
    {
        public static function hexDigestSha1($key, $string)
        {
        }
        public static function hexDigestSha256($key, $string)
        {
        }
        public static function secureCompare($left, $right)
        {
        }
        public static function _builtInHmacSha1($message, $key)
        {
        }
        public static function _hmacSha1($message, $key)
        {
        }
    }
    /**
     * Braintree PaymentMethod module
     */
    /**
     * Creates and manages Braintree PaymentMethods
     *
     * <b>== More information ==</b>
     */
    class PaymentMethod extends \Braintree\Base
    {
        /**
         * Static method from gateway class
         *
         * @param array $attribs containing request parameterss
         *
         * @see PaymentMethodGateway::create()
         *
         * @throws Exception\ValidationError
         *
         * @return Result\Successful|Result\Error
         */
        public static function create($attribs)
        {
        }
        /**
         * Static method from gateway class
         *
         * @param string $token payment method unique id
         *
         * @see PaymentMethodGateway::find()
         *
         * @throws Exception\NotFound
         *
         * @return CreditCard|PayPalAccount
         */
        public static function find($token)
        {
        }
        /**
         * Static method from gateway class
         *
         * @param string $token   payment method identifier
         * @param array  $attribs containing request parameters
         *
         * @see PaymentMethodGateway::update()
         *
         * @return Result\Successful|Result\Error
         */
        public static function update($token, $attribs)
        {
        }
        /**
         * Static method from gateway class
         *
         * @param string $token   payment method identifier
         * @param mixed  $options containing optional parameters
         *
         * @see PaymentMethodGateway::delete()
         *
         * @return Result
         */
        public static function delete($token, $options = [])
        {
        }
    }
    /**
     * Braintree Utility methods
     */
    class Util
    {
        /**
         * extracts an attribute and returns an array of objects
         *
         * extracts the requested element from an array, and converts the contents
         * of its child arrays to objects of type $attributeName, or returns
         * an array with a single element containing the value of that array element
         *
         * @param array  $attribArray   attributes from a search response
         * @param string $attributeName indicates which element of the passed array to extract
         *
         * @return array array of $attributeName objects, or a single element array
         */
        public static function extractAttributeAsArray(&$attribArray, $attributeName)
        {
        }
        /**
         * throws an exception based on the type of error
         *
         * @param string      $statusCode HTTP status code to throw exception from
         * @param null|string $message    optional
         *
         * @throws Exception multiple types depending on the error
         *
         * @return void
         */
        public static function throwStatusCodeException($statusCode, $message = null)
        {
        }
        /**
         * throws an exception based on the type of error returned from graphql
         *
         * @param array $response complete graphql response
         *
         * @throws Exception multiple types depending on the error
         *
         * @return void
         */
        public static function throwGraphQLResponseException($response)
        {
        }
        /**
         * Returns a class object or throws an exception
         *
         * @param string $className to be used to determine if objects are present
         * @param object $resultObj the object returned from an API response
         *
         * @throws Exception\ValidationsFailed
         *
         * @return object returns the passed object if successful
         */
        public static function returnObjectOrThrowException($className, $resultObj)
        {
        }
        /**
         * removes the  header from a classname
         *
         * @param string $name ClassName
         *
         * @return camelCased classname minus  header
         */
        public static function cleanClassName($name)
        {
        }
        /**
         * Returns corresponding class name based on response keys
         *
         * @param string $name className
         *
         * @return string ClassName
         */
        public static function buildClassName($name)
        {
        }
        /**
         * convert alpha-beta-gamma to alphaBetaGamma
         *
         * @param string      $string    to be scrubbed for camelCase formatting
         * @param null|string $delimiter to be replaced
         *
         * @return string modified string
         */
        public static function delimiterToCamelCase($string, $delimiter = '[\\-\\_]')
        {
        }
        /**
         * convert alpha-beta-gamma to alpha_beta_gamma
         *
         * @param string $string to be modified
         *
         * @return string modified string
         */
        public static function delimiterToUnderscore($string)
        {
        }
        /**
         * find capitals and convert to delimiter + lowercase
         *
         * @param string      $string    to be scrubbed
         * @param null|string $delimiter to replace camelCase
         *
         * @return string modified string
         */
        public static function camelCaseToDelimiter($string, $delimiter = '-')
        {
        }
        /**
         * converts a-string-here to [aStringHere]
         *
         * @param array       $array     to be iterated over
         * @param null|string $delimiter to be replaced with camelCase
         *
         * @return array modified array
         */
        public static function delimiterToCamelCaseArray($array, $delimiter = '[\\-\\_]')
        {
        }
        /**
         * find capitals and convert to delimiter + lowercase
         *
         * @param array       $array     to be iterated over
         * @param null|string $delimiter to replace camelCase
         *
         * @return array modified array
         */
        public static function camelCaseToDelimiterArray($array, $delimiter = '-')
        {
        }
        /**
         * converts a-string-here to [a_string_here]
         *
         * @param array $array to be iterated over
         *
         * @return array modified array
         */
        public static function delimiterToUnderscoreArray($array)
        {
        }
        /**
         * Join arrays with string or return false
         *
         * @param array  $array     associative array to implode
         * @param string $separator (optional, defaults to =)
         * @param string $glue      (optional, defaults to ', ')
         *
         * @return string|false
         */
        public static function implodeAssociativeArray($array, $separator = '=', $glue = ', ')
        {
        }
        /*
         * Turn all attributes into a string
         *
         * @param array $attributes to be turned into a string
         *
         * @return string|false
         */
        public static function attributesToString($attributes)
        {
        }
        /**
         * verify user request structure
         *
         * compares the expected signature of a gateway request
         * against the actual structure sent by the user
         *
         * @param array $signature  expected signature
         * @param array $attributes actual structure sent by user
         *
         * @throws InvalidArgumentException
         *
         * @return self
         */
        public static function verifyKeys($signature, $attributes)
        {
        }
        /**
         * replaces the value of a key in an array
         *
         * @param array  $array  to have key replaced
         * @param string $oldKey to be replace
         * @param string $newKey to replace
         *
         * @return array
         */
        public static function replaceKey($array, $oldKey, $newKey)
        {
        }
        /**
         * flattens a numerically indexed nested array to a single level
         *
         * @param array  $keys
         * @param string $namespace
         *
         * @return array
         */
        private static function _flattenArray($keys, $namespace = null)
        {
        }
        private static function _flattenUserKeys($keys, $namespace = null)
        {
        }
        /**
         * removes wildcard entries from the invalid keys array
         *
         * @param array  $validKeys
         * @param <array $invalidKeys
         *
         * @return array
         */
        private static function _removeWildcardKeys($validKeys, $invalidKeys)
        {
        }
    }
    /**
     * Braintree OAuthCredentials module
     */
    class OAuthCredentials extends \Braintree\Base
    {
        protected function _initialize($attribs)
        {
        }
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return OauthCredentials
         */
        public static function factory($attributes)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree AddOn class
     *
     * Object containing information on AddOns of a subscription
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/add-on developer docs} for information on attributes
     */
    class AddOn extends \Braintree\Modification
    {
        /**
         * Creates an instance of an AddOn from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return AddOn
         */
        public static function factory($attributes)
        {
        }
        /**
         * static methods redirecting to gateway class
         *
         * @see AddOnGateway::all()
         *
         * @return AddOn[]
         */
        public static function all()
        {
        }
    }
    /**
     * Braintree WebhookNotificationGateway
     * Manages Webhooks
     */
    class WebhookNotificationGateway
    {
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /**
         * Parses a webhook from the Braintree API
         *
         * @param string $signature used to verify before parsing
         * @param mixed  $payload   to be parsed
         *
         * @throws Exception\InvalidSignature
         *
         * @return WebhookNotification object
         */
        public function parse($signature, $payload)
        {
        }
        /*
         * Verify a webhook challenge
         *
         * @param object $challenge to be verified
         *
         * @throws Exception\InvalidChallenge
         *
         * @return string
         */
        public function verify($challenge)
        {
        }
        private function _payloadMatches($signature, $payload)
        {
        }
        private function _validateSignature($signatureString, $payload)
        {
        }
        private function _matchingSignature($signaturePairs)
        {
        }
    }
    /**
     * Braintree UnknownPaymentMethod module
     * Manages Braintree UnknownPaymentMethod
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/response/payment-method developer docs} for information on attributes
     */
    class UnknownPaymentMethod extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return UnknownPaymentMethod
         */
        public static function factory($attributes)
        {
        }
        /* instance methods */
        /**
         * returns false if default is null or false
         *
         * @return boolean
         */
        public function isDefault()
        {
        }
        /**
         * sets instance properties from an array of values
         *
         * @param array $unknownPaymentMethodAttribs array of unknownPaymentMethod data
         *
         * @return void
         */
        protected function _initialize($unknownPaymentMethodAttribs)
        {
        }
    }
    /**
     * Braintree LocalPaymentCompleted module
     */
    /**
     * Manages Braintree LocalPaymentCompleted
     *
     * See our {@link https://developer.paypal.com/braintree/docs/reference/general/webhooks/local-payment-methods developer docs} for more information
     */
    class LocalPaymentCompleted extends \Braintree\Base
    {
        /**
         * Creates an instance from given attributes
         *
         * @param array $attributes response object attributes
         *
         * @return LocalPaymentCompleted
         */
        public static function factory($attributes)
        {
        }
        /* instance methods */
        /**
         * sets instance properties from an array of values
         *
         * @param array $LocalPaymentCompletedAttribs array of localPaymentCompleted data
         *
         * @return void
         */
        protected function _initialize($localPaymentCompletedAttribs)
        {
        }
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __toString()
        {
        }
    }
    /**
     * Braintree ApplePayGateway module
     * Manages Apple Pay for Web
     */
    class ApplePayGateway
    {
        private $_gateway;
        private $_config;
        private $_http;
        // phpcs:ignore PEAR.Commenting.FunctionComment.Missing
        public function __construct($gateway)
        {
        }
        /*
         * Register a domain for apple pay
         *
         * @see https://developer.paypal.com/braintree/docs/guides/apple-pay/configuration#domain-registration
         *
         * @param string $domain to be registered
         *
         * @return Result\Successful|Result\Error
         */
        public function registerDomain($domain)
        {
        }
        /*
         * Unregister a domain for apple pay
         *
         * @param string $domain to be unregistered
         *
         * @return Result\Successful
         */
        public function unregisterDomain($domain)
        {
        }
        /*
         * Retrieve a list of all registered domains for apple pay
         *
         * @return Result\Successful|Result\Error
         */
        public function registeredDomains()
        {
        }
    }
}
namespace {
    /**
     * Braintree PHP Library
     * Creates class_aliases for old class names replaced by PSR-4 Namespaces
     */
    class Braintree
    {
        /**
         * Checks for required dependencies
         *
         * @throws Braintree/Exception With the missing extension
         *
         * @return void
         */
        public static function requireDependencies()
        {
        }
    }
}
namespace {
    /**
     * Required minimums
     */
    \define('WC_PAYPAL_BRAINTREE_MIN_PHP_VER', '7.3.0');
    /**
     * Base plugin file
     */
    \define('WC_PAYPAL_BRAINTREE_FILE', __FILE__);
    // end \WC_Braintree
    /**
     * Returns the One True Instance of Braintree
     *
     * @since 2.2.0
     * @return WC_Braintree
     */
    function wc_braintree()
    {
    }
}