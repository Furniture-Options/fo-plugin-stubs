<?php

namespace AC\ListScreenRepository\Storage {
    interface ListScreenRepositoryFactory
    {
        /**
         * @param string     $path
         * @param bool       $writable
         * @param Rules|null $rules
         *
         * @return ListScreenRepository
         */
        public function create($path, $writable, \AC\ListScreenRepository\Rules $rules = null);
    }
}
namespace ACP\Storage {
    final class ListScreenRepositoryFactory implements \AC\ListScreenRepository\Storage\ListScreenRepositoryFactory
    {
        /**
         * @var FileFactory
         */
        private $file_factory;
        public function __construct(\ACP\ListScreenRepository\FileFactory $file_factory)
        {
        }
        /**
         * @param string     $path
         * @param bool       $writable
         * @param Rules|null $rules
         *
         * @return ListScreenRepository
         */
        public function create($path, $writable, \AC\ListScreenRepository\Rules $rules = null)
        {
        }
    }
    final class Directory
    {
        /**
         * @var SplFileInfo
         */
        private $directory;
        /**
         * @param string $path
         */
        public function __construct($path)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return bool
         */
        public function is_readable()
        {
        }
        /**
         * @return SplFileInfo
         */
        public function get_info()
        {
        }
        /**
         * @return void
         */
        public function create()
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        public function has_path($path)
        {
        }
        /**
         * Proxy method to get the (real) path from the directory
         * @return string
         */
        public function get_path()
        {
        }
        /**
         * Proxy method to get an iterator for the directory contents
         * @return DirectoryIterator
         */
        public function get_files()
        {
        }
    }
}
namespace ACP\Storage\ListScreen {
    interface LegacyCollectionDecoder
    {
        /**
         * @param array $data
         *
         * @return ListScreenCollection
         */
        public function decode(array $data);
        /**
         * @param array $data
         *
         * @return bool
         */
        public function can_decode(array $data);
    }
    class LegacyCollectionDecoderAggregate implements \ACP\Storage\ListScreen\LegacyCollectionDecoder
    {
        /**
         * @var LegacyCollectionDecoder[]
         */
        private $collection_decoders = [];
        public function __construct(array $collection_decoders)
        {
        }
        private function add(\ACP\Storage\ListScreen\LegacyCollectionDecoder $collection_decoder)
        {
        }
        public function decode(array $data)
        {
        }
        public function can_decode(array $data)
        {
        }
    }
    interface Unserializer
    {
        /**
         * @param string $serialized_list_screen
         *
         * @return array
         */
        public function unserialize($serialized_list_screen);
    }
}
namespace ACP\Storage\ListScreen\Unserializer {
    class JsonUnserializer implements \ACP\Storage\ListScreen\Unserializer
    {
        public function unserialize($serialized_list_screen)
        {
        }
    }
}
namespace ACP\Storage\ListScreen {
    interface Serializer
    {
        /**
         * @param array $encoded_list_screen
         *
         * @return string
         */
        public function serialize(array $encoded_list_screen);
    }
}
namespace ACP\Storage\ListScreen\Serializer {
    class JsonSerializer implements \ACP\Storage\ListScreen\Serializer
    {
        public function serialize(array $encoded_list_screen)
        {
        }
    }
    class PhpSerializer implements \ACP\Storage\ListScreen\Serializer
    {
        public function serialize(array $encoded_list_screen)
        {
        }
    }
}
namespace ACP\Storage\ListScreen\Serializer\PhpSerializer {
    class File extends \ACP\Storage\ListScreen\Serializer\PhpSerializer
    {
        public function serialize(array $encoded_list_screen)
        {
        }
    }
}
namespace ACP\Storage\ListScreen {
    interface Decoder
    {
        /**
         * @param array $encoded_list_screen
         *
         * @return ListScreen
         */
        public function decode(array $encoded_list_screen);
        /**
         * @param array $encoded_list_screen
         *
         * @return bool
         */
        public function can_decode(array $encoded_list_screen);
    }
}
namespace ACP\Storage\ListScreen\Decoder {
    final class Version510 implements \ACP\Storage\ListScreen\Decoder
    {
        /**
         * @var ListScreenTypes
         */
        private $list_screen_types;
        public function __construct(\AC\ListScreenTypes $list_screen_types)
        {
        }
        public function decode(array $encoded_list_screen)
        {
        }
        public function can_decode(array $encoded_list_screen)
        {
        }
    }
}
namespace ACP\Storage\ListScreen {
    interface SerializerTypes
    {
        const PHP = 'php';
        const JSON = 'json';
    }
    final class Encoder
    {
        /**
         * @var Version
         */
        private $version;
        /**
         * @param Version $version
         */
        public function __construct(\AC\Plugin\Version $version)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return array
         */
        public function encode(\AC\ListScreen $list_screen)
        {
        }
    }
    final class DecoderFactory
    {
        /**
         * @var ListScreenTypes
         */
        private $list_screen_types;
        public function __construct(\AC\ListScreenTypes $list_screen_types)
        {
        }
        /**
         * @param array $data
         *
         * @return Decoder
         */
        public function create(array $data)
        {
        }
    }
}
namespace ACP\Storage\ListScreen\LegacyCollectionDecoder {
    final class Version332 implements \ACP\Storage\ListScreen\LegacyCollectionDecoder
    {
        /**
         * @var ListScreenTypes
         */
        private $types;
        public function __construct(\AC\ListScreenTypes $types)
        {
        }
        public function decode(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        public function can_decode(array $data)
        {
        }
    }
    final class Version384 implements \ACP\Storage\ListScreen\LegacyCollectionDecoder
    {
        /**
         * @var ListScreenTypes
         */
        private $types;
        public function __construct(\AC\ListScreenTypes $types)
        {
        }
        public function decode(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        public function can_decode(array $data)
        {
        }
    }
    final class Version400 implements \ACP\Storage\ListScreen\LegacyCollectionDecoder
    {
        /**
         * @var ListScreenTypes
         */
        private $types;
        public function __construct(\AC\ListScreenTypes $types)
        {
        }
        public function decode(array $data)
        {
        }
        public function can_decode(array $data)
        {
        }
    }
}
namespace ACP\Storage\ListScreen {
    final class EncodedCollection implements \Iterator, \ACP\Storage\ListScreen\Decoder
    {
        /**
         * @var DecoderFactory
         */
        private $decoder_factory;
        /**
         * @var array
         */
        private $data;
        public function __construct(array $encoded_list_screens, \ACP\Storage\ListScreen\DecoderFactory $decoder_factory)
        {
        }
        public static function is_valid_collection(array $encoded_list_screens)
        {
        }
        private function validate(array $encoded_list_screens)
        {
        }
        /**
         * @param array $encoded_list_screen
         *
         * @return ListScreen
         */
        public function decode(array $encoded_list_screen)
        {
        }
        /**
         * @param array $encoded_list_screen
         *
         * @return bool
         */
        public function can_decode(array $encoded_list_screen)
        {
        }
        /**
         * @return array
         */
        public function current()
        {
        }
        public function next()
        {
        }
        public function key()
        {
        }
        public function valid()
        {
        }
        public function rewind()
        {
        }
    }
}
namespace AC\Storage {
    interface KeyValuePair
    {
        /**
         * @param array $args
         *
         * @return mixed
         */
        public function get(array $args = []);
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function save($value);
        /**
         * @return bool
         */
        public function delete();
    }
    class Option implements \AC\Storage\KeyValuePair
    {
        const OPTION_DEFAULT = 'default';
        /**
         * @var string
         */
        protected $key;
        /**
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * @param array $args
         *
         * @return mixed
         */
        public function get(array $args = [])
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function save($value)
        {
        }
        /**
         * @return bool
         */
        public function delete()
        {
        }
    }
}
namespace ACP\Storage {
    class PluginsData extends \AC\Storage\Option
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Editing {
    interface Storage
    {
        /**
         * @return mixed
         */
        public function get(int $id);
        /**
         * @param mixed $data
         *
         * @throws RuntimeException
         */
        public function update(int $id, $data) : bool;
    }
}
namespace ACP\Editing\Storage {
    abstract class Menu implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        protected $object_type;
        /**
         * @var string
         */
        protected $item_type;
        public function __construct($object_type, $item_type)
        {
        }
        protected abstract function get_title(int $id) : string;
        public function get($id)
        {
        }
        /**
         * Return list of menu items if the object ID is present
         */
        private function item_exists(int $menu_id, int $object_id) : bool
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACP\Editing\Storage\Post {
    class Menu extends \ACP\Editing\Storage\Menu
    {
        protected function get_title(int $id) : string
        {
        }
    }
    class Taxonomy implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var string
         */
        private $enable_term_creation;
        public function __construct(string $taxonomy, bool $enable_term_creation)
        {
        }
        public function get($id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        private function remove_terms(int $id, array $term_ids) : void
        {
        }
        /**
         * @param array $term_ids_or_names
         *
         * @return int[]
         */
        private function create_non_exisiting_terms(array $term_ids_or_names) : array
        {
        }
        private function add_terms(int $id, array $term_ids_or_names)
        {
        }
        public function replace_terms(int $id, array $term_ids_or_names)
        {
        }
        private function set_terms(int $id, array $term_ids, bool $append)
        {
        }
        private function santize_term_ids($term_ids) : array
        {
        }
        protected function sanitize_array(array $term_ids) : array
        {
        }
        private function term_exists($term_id) : bool
        {
        }
    }
    class Modified implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Date implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Sticky implements \ACP\Editing\Storage
    {
        /**
         * @var array
         */
        private $stickies;
        private function is_sticky(int $id) : bool
        {
        }
        public function get($id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Format implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACP\Editing\Storage {
    class Meta implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @var MetaType
         */
        private $meta_type;
        public function __construct($meta_key, \AC\MetaType $meta_type)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACP\Editing\Storage\Post {
    class Meta extends \ACP\Editing\Storage\Meta
    {
        public function __construct($meta_key)
        {
        }
    }
    class PostType implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Field implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $field;
        public function __construct($field)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class MetaWithModifiedDate extends \ACP\Editing\Storage\Post\Meta
    {
        public function update(int $id, $data) : bool
        {
        }
    }
    class Attachments extends \ACP\Editing\Storage\Post\Field
    {
        public function __construct()
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $attachment_ids) : bool
        {
        }
    }
    class FeaturedImage implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACP\Editing\Storage\User {
    class DisplayName implements \ACP\Editing\Storage
    {
        public function get($id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Meta extends \ACP\Editing\Storage\Meta
    {
        public function __construct($meta_key)
        {
        }
    }
    class FullName implements \ACP\Editing\Storage
    {
        const KEY_FIRST_NAME = 'first_name';
        const KEY_LAST_NAME = 'last_name';
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Field implements \ACP\Editing\Storage
    {
        const FIELD_REGISTERED = 'user_registered';
        const FIELD_EMAIL = 'user_email';
        const FIELD_NICENAME = 'user_nicename';
        const FIELD_URL = 'user_url';
        /**
         * @var string
         */
        private $field;
        public function __construct($field)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Role implements \ACP\Editing\Storage
    {
        /**
         * @var bool $allow_non_editable_rows
         */
        private $allow_non_editable_rows;
        public function __construct(bool $allow_non_editable_rows)
        {
        }
        public function get(int $id)
        {
        }
        private function is_editable_role(string $role) : bool
        {
        }
        private function is_not_editable_role(string $role) : bool
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        private function add_roles(\WP_User $user, $roles)
        {
        }
        private function remove_roles(\WP_User $user, $roles)
        {
        }
    }
}
namespace ACP\Editing\Storage\Comment {
    class Meta extends \ACP\Editing\Storage\Meta
    {
        public function __construct($meta_key)
        {
        }
    }
    class Field implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $field;
        public function __construct($field)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Status implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        private function set_comment_status($id, $status)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACP\Editing\Storage\Taxonomy {
    class Menu extends \ACP\Editing\Storage\Menu
    {
        protected function get_title(int $id) : string
        {
        }
    }
    class Field implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        protected $taxonomy;
        /**
         * @var string
         */
        protected $field;
        public function __construct($taxonomy, $field)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class TaxonomyParent extends \ACP\Editing\Storage\Taxonomy\Field
    {
        public function __construct($taxonomy)
        {
        }
        public function get(int $id)
        {
        }
    }
}
namespace ACP\Editing\Storage\Site {
    class Option implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $option_name;
        public function __construct($option_name)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        public function get(int $id)
        {
        }
    }
}
namespace AC {
    interface Registerable
    {
        public function register();
    }
}
namespace ACP\Editing {
    class Addon implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Request
         */
        private $request;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location\Absolute $location, \AC\Request $request)
        {
        }
        public function register()
        {
        }
        public function load_table(\AC\ListScreen $list_screen)
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
        public function handle_request_query()
        {
        }
        public function ajax_edit_request()
        {
        }
        public function handle_request_rows(\AC\ListScreen $list_screen)
        {
        }
        public function register_column_settings(\AC\Column $column)
        {
        }
    }
    interface RequestHandler
    {
        public function handle(\AC\Request $request);
    }
}
namespace ACP\Editing\RequestHandler {
    class BulkSave implements \ACP\Editing\RequestHandler
    {
        const SAVE_FAILED = 'failed';
        const SAVE_SUCCESS = 'success';
        const SAVE_NOTICE = 'not_editable';
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        /**
         * @param int      $id
         * @param mixed    $form_data
         * @param Strategy $strategy
         * @param Service  $service
         * @param Column   $column
         *
         * @return void
         */
        private function save($id, $form_data, \ACP\Editing\Strategy $strategy, \ACP\Editing\Service $service, \AC\Column $column)
        {
        }
    }
    class InlineValues implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         * @param array         $ids
         *
         * @return array
         */
        private function get_values_by_list_screen(\AC\ListScreen $list_screen, array $ids)
        {
        }
        /**
         * @param Column $column
         * @param array  $ids
         *
         * @return array
         */
        private function get_values_by_column(\AC\Column $column, array $ids)
        {
        }
    }
    class EditState implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Preference\EditState
         */
        private $edit_state;
        public function __construct(\ACP\Editing\Preference\EditState $edit_state)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class InlineSave implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Storage;
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class DeleteUserSelectValues implements \ACP\Editing\RequestHandler
    {
        public function handle(\AC\Request $request)
        {
        }
    }
    class SelectValues implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        /**
         * @param Request $request
         *
         * @return Service|null
         */
        private function get_service_from_request(\AC\Request $request)
        {
        }
    }
}
namespace ACP\Editing\RequestHandler\Exception {
    class NotEditableException extends \RuntimeException
    {
        public function __construct($message = null)
        {
        }
    }
    class InvalidUserPermissionException extends \RuntimeException
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Editing\RequestHandler\Query {
    final class Taxonomy implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Request
         */
        private $request;
        /**
         * @var AC\Ajax\Handler
         */
        private $handler;
        public function __construct()
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        public function send(\WP_Term_Query $query)
        {
        }
        /**
         * @return int
         */
        private function get_rows_per_iteration()
        {
        }
        /**
         * @return int
         */
        protected function get_offset()
        {
        }
    }
    final class Nullable implements \ACP\Editing\RequestHandler
    {
        public function handle(\AC\Request $request)
        {
        }
    }
    final class Post implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Request
         */
        private $request;
        public function handle(\AC\Request $request)
        {
        }
        private function register()
        {
        }
        /**
         * @return int
         */
        private function get_rows_per_iteration()
        {
        }
        /**
         * @return int
         */
        protected function get_offset()
        {
        }
        /**
         * @param WP_Post[] $posts
         * @param WP_Query  $query
         */
        public function send($posts, \WP_Query $query)
        {
        }
        /**
         * @param WP_Query $query
         */
        public function set_query_vars(\WP_Query $query)
        {
        }
    }
    final class Comment implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Request
         */
        private $request;
        /**
         * @var AC\Ajax\Handler
         */
        private $handler;
        public function __construct()
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        public function send(\WP_Comment_Query $query)
        {
        }
        /**
         * @return int
         */
        private function get_rows_per_iteration()
        {
        }
        /**
         * @return int
         */
        protected function get_offset()
        {
        }
    }
    final class User implements \ACP\Editing\RequestHandler
    {
        /**
         * @var Request
         */
        private $request;
        public function handle(\AC\Request $request)
        {
        }
        private function register()
        {
        }
        /**
         * @return int
         */
        private function get_rows_per_iteration()
        {
        }
        /**
         * @return int
         */
        protected function get_offset()
        {
        }
        public function send(array $args)
        {
        }
    }
}
namespace ACP\Editing\RequestHandler {
    class BulkDelete implements \ACP\Editing\RequestHandler
    {
        const STATUS_FAILED = 'failed';
        const STATUS_SUCCESS = 'success';
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACP\Editing {
    interface Service
    {
        const CONTEXT_SINGLE = 'single';
        const CONTEXT_BULK = 'bulk';
        public function get_view(string $context) : ?\ACP\Editing\View;
        /**
         * @param int $id
         *
         * @return mixed
         */
        public function get_value(int $id);
        /**
         * @param int   $id
         * @param mixed $data
         *
         * @return void
         */
        public function update(int $id, $data) : void;
    }
    interface PaginatedOptions
    {
        /**
         * @param string   $search
         * @param int      $page
         * @param int|null $id
         *
         * @return AC\Helper\Select\Options\Paginated
         */
        public function get_paginated_options($search, $page, $id = null);
    }
}
namespace ACP\Editing\Service {
    class Posts implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var View\AjaxSelect
         */
        protected $view;
        /**
         * @var Storage
         */
        protected $storage;
        /**
         * @var PaginatedOptionsFactory
         */
        protected $options_factory;
        public function __construct(\ACP\Editing\View\AjaxSelect $view, \ACP\Editing\Storage $storage, \ACP\Editing\PaginatedOptionsFactory $options_factory = null)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function get_post_title(int $id)
        {
        }
        public function get_value(int $id)
        {
        }
        /**
         * @param int $id
         *
         * @return int[]
         */
        private function get_current_post_ids(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        protected function sanitize_ids(array $ids) : array
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    interface Editability
    {
        public function is_editable(int $id) : bool;
        public function get_not_editable_reason(int $id) : string;
    }
    class User implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var View\AjaxSelect
         */
        private $view;
        /**
         * @var Storage
         */
        protected $storage;
        /**
         * @var string[]
         */
        protected $roles;
        /**
         * @var PaginatedOptionsFactory
         */
        protected $options_factory;
        public function __construct(\ACP\Editing\View\AjaxSelect $view, \ACP\Editing\Storage $storage, \ACP\Editing\PaginatedOptionsFactory $options_factory = null)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        private function sanitize_user_id($user_id) : ?int
        {
        }
        private function get_stored_user_id(int $id) : ?int
        {
        }
        public function get_value(int $id)
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
}
namespace ACP\Editing\Service\Post {
    class Author extends \ACP\Editing\Service\User implements \ACP\Editing\Service\Editability
    {
        public function __construct()
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
    }
}
namespace ACP\Editing\Service {
    abstract class BasicStorage implements \ACP\Editing\Service
    {
        protected $storage;
        public function __construct(\ACP\Editing\Storage $storage)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_value(int $id)
        {
        }
    }
}
namespace ACP\Editing\Service\Post {
    class Formats extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Slug extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_value(int $id)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Taxonomy implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        protected $taxonomy;
        /**
         * @var bool
         */
        private $enable_term_creation;
        /**
         * @var Storage\Post\Taxonomy
         */
        private $storage;
        public function __construct(string $taxonomy, bool $enable_term_creation)
        {
        }
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class Modified extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class PingStatus extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service {
    class DateTime implements \ACP\Editing\Service
    {
        const FORMAT = 'Y-m-d H:i:s';
        /**
         * @var View\DateTime
         */
        private $view;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var string
         */
        protected $date_format;
        public function __construct(\ACP\Editing\View\DateTime $view, \ACP\Editing\Storage $storage, $date_format = self::FORMAT)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_value(int $id)
        {
        }
    }
}
namespace ACP\Editing\Service\Post {
    class Date extends \ACP\Editing\Service\DateTime implements \ACP\Editing\Service\Editability
    {
        public function __construct()
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        protected function is_unsupported_status($status)
        {
        }
    }
    class Sticky extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Content extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var View
         */
        private $view;
        public function __construct(\ACP\Editing\View $view)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class PostParent extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        private $post_type;
        public function __construct($post_type)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
        public function get_value(int $id)
        {
        }
    }
    class PasswordProtected extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing {
    interface RemoteOptions
    {
        /**
         * @param int|null $id
         *
         * @return AC\Helper\Select\Options
         */
        public function get_remote_options($id = null);
    }
}
namespace ACP\Editing\Service\Post {
    class PostType extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\RemoteOptions
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_remote_options($id = null)
        {
        }
    }
    class PageTemplate extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var string
         */
        private $post_type;
        public function __construct(string $post_type)
        {
        }
        private function get_options()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Excerpt extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class CommentStatus extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Order extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class FeaturedImage extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Attachment extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class PostStatus extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var string
         */
        private $post_type;
        /**
         * @var ApplyFilter\PostStatus
         */
        private $filter_post_status;
        public function __construct($post_type, \ACP\Editing\ApplyFilter\PostStatus $filter_post_status)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        /**
         * @return array
         */
        private function get_stati_options()
        {
        }
    }
}
namespace ACP\Editing\Service {
    class Menu implements \ACP\Editing\Service
    {
        /**
         * @var Storage\Menu
         */
        private $storage;
        public function __construct(\ACP\Editing\Storage\Menu $storage)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACP\Editing\Service\User {
    class ShowToolbar extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Language extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var array
         */
        private $options;
        public function __construct(array $options)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service {
    class Basic extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var View
         */
        private $view;
        public function __construct(\ACP\Editing\View $view, \ACP\Editing\Storage $storage)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service\User {
    class Registered extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
    class DisplayName extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\RemoteOptions
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_remote_options($id = null)
        {
        }
    }
    class RichEditing extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class FullName extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Email extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var string
         */
        private $placeholder;
        public function __construct($placeholder)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Nicename extends \ACP\Editing\Service\Basic
    {
        public function __construct(\ACP\Editing\View\Text $view)
        {
        }
    }
    class LanguageRemote extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\RemoteOptions
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_remote_options($id = null)
        {
        }
    }
    class Url extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var string
         */
        private $placeholder;
        public function __construct($placeholder)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Role implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        /**
         * By default, WordPress does not allow you to edit certain (3rd party) roles
         * @var bool
         */
        private $allow_non_editable_roles;
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(bool $allow_non_editable_roles)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        private function get_translated_role_name(string $role)
        {
        }
        private function get_editable_roles()
        {
        }
    }
}
namespace ACP\Editing\Service {
    class ComputedNumber implements \ACP\Editing\Service
    {
        const ARG_COMPUTATION_TYPE = 'computation_type';
        const ARG_ALLOW_NEGATIVE = 'allow_negative';
        protected $storage;
        public function __construct(\ACP\Editing\Storage $storage)
        {
        }
        public function get_value(int $id)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function compute(float $current_value, float $compute_value, string $computation = null)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Date implements \ACP\Editing\Service
    {
        const FORMAT = 'Y-m-d';
        /**
         * @var View\Date
         */
        private $view;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var string
         */
        protected $date_format;
        public function __construct(\ACP\Editing\View\Date $view, \ACP\Editing\Storage $storage, $date_format = self::FORMAT)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACP\Editing\Service\Media {
    class Caption extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service {
    class SerializedMeta implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        /**
         * @var Storage\Meta
         */
        private $storage;
        /**
         * @var array
         */
        private $keys;
        public function __construct(\ACP\Editing\Storage\Meta $storage, array $keys)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_value(int $id)
        {
        }
        private function is_integer($string) : bool
        {
        }
        private function maybe_cast_value($value)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACP\Editing\Service\Media {
    class MetaData extends \ACP\Editing\Service\SerializedMeta
    {
        public function __construct($sub_key)
        {
        }
    }
    class MimeType extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Date extends \ACP\Editing\Service\Post\Date
    {
        protected function is_unsupported_status($status)
        {
        }
    }
}
namespace ACP\Editing\Service\Media\MetaData {
    class Audio extends \ACP\Editing\Service\Media\MetaData
    {
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
    }
}
namespace ACP\Editing\Service\Media {
    class AlternateText extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\Service\Editability
    {
        public function __construct()
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Title extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service {
    class Post implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var View\AjaxSelect
         */
        protected $view;
        /**
         * @var Storage
         */
        protected $storage;
        /**
         * @var Editing\PaginatedOptionsFactory
         */
        protected $options_factory;
        public function __construct(\ACP\Editing\View\AjaxSelect $view, \ACP\Editing\Storage $storage, \ACP\Editing\PaginatedOptionsFactory $options_factory = null)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function get_stored_post_id(int $id)
        {
        }
        public function get_value(int $id)
        {
        }
        private function sanitize_post_id($post_id) : ?int
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
}
namespace ACP\Editing\Service\Comment {
    class Content extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Approved extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class User extends \ACP\Editing\Service\User
    {
        public function __construct()
        {
        }
    }
    class Status extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service\Taxonomy {
    abstract class Field extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct($taxonomy, $field)
        {
        }
    }
    class Slug extends \ACP\Editing\Service\Taxonomy\Field
    {
        public function __construct($taxonomy)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Name extends \ACP\Editing\Service\Taxonomy\Field
    {
        public function __construct($taxonomy)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class TaxonomyParent extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACP\Editing\Service {
    class Users implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var Editing\View\AjaxSelect
         */
        private $view;
        /**
         * @var Storage
         */
        protected $storage;
        /**
         * @var PaginatedOptionsFactory
         */
        private $options_factory;
        public function __construct(\ACP\Editing\View\AjaxSelect $view, \ACP\Editing\Storage $storage, \ACP\Editing\PaginatedOptionsFactory $options_factory)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value(int $id)
        {
        }
        /**
         * @param int $id
         *
         * @return int[]
         */
        private function get_user_ids(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        protected function sanitize_ids(array $ids) : array
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
}
namespace ACP\Editing\Model\Post {
    /**
     * @deprecated 5.6
     */
    class Author extends \ACP\Editing\Service\Post\Author
    {
    }
    /**
     * @deprecated 5.6
     */
    class Formats extends \ACP\Editing\Service\Post\Formats
    {
    }
    /**
     * @deprecated 5.6
     */
    class Slug extends \ACP\Editing\Service\Post\Slug
    {
    }
    /**
     * @deprecated 5.6
     */
    class Menu extends \ACP\Editing\Service\Post\Menu
    {
    }
    /**
     * @deprecated 5.6
     */
    class Taxonomy extends \ACP\Editing\Service\Post\Taxonomy
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Modified extends \ACP\Editing\Service\Post\Modified
    {
    }
    /**
     * @deprecated 5.6
     */
    class PingStatus extends \ACP\Editing\Service\Post\PingStatus
    {
    }
    /**
     * @deprecated 5.6
     */
    class Date extends \ACP\Editing\Service\Post\Date
    {
    }
    /**
     * @deprecated 5.6
     */
    class Sticky extends \ACP\Editing\Service\Post\Sticky
    {
    }
    /**
     * @deprecated 5.6
     */
    class Content extends \ACP\Editing\Service\Post\Content
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class PostParent extends \ACP\Editing\Service\Post\PostParent
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class TitleRaw extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Password extends \ACP\Editing\Service\Post\PasswordProtected
    {
    }
    /**
     * @deprecated 5.6
     */
    class PageTemplate extends \ACP\Editing\Service\Post\PageTemplate
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Excerpt extends \ACP\Editing\Service\Post\Excerpt
    {
    }
    /**
     * @deprecated 5.6
     */
    class CommentStatus extends \ACP\Editing\Service\Post\CommentStatus
    {
    }
    /**
     * @deprecated 5.6
     */
    class Order extends \ACP\Editing\Service\Post\Order
    {
    }
    /**
     * @deprecated 5.6
     */
    class FeaturedImage extends \ACP\Editing\Service\Post\FeaturedImage
    {
    }
    /**
     * @deprecated 5.6
     */
    class Attachment extends \ACP\Editing\Service\Post\Attachment
    {
    }
    /**
     * @deprecated 5.6
     */
    class Status extends \ACP\Editing\Service\Post\PostStatus
    {
        public function __construct($column)
        {
        }
    }
}
namespace ACP\Editing\Model {
    /**
     * @deprecated 5.6
     */
    abstract class Menu extends \ACP\Editing\Service\Menu
    {
    }
}
namespace ACP\Editing\Model\User {
    /**
     * @deprecated 5.6
     */
    class ShowToolbar extends \ACP\Editing\Service\User\ShowToolbar
    {
    }
    /**
     * @deprecated 5.6
     */
    class Registered extends \ACP\Editing\Service\User\Registered
    {
    }
    /**
     * @deprecated 5.6
     */
    class DisplayName extends \ACP\Editing\Service\User\DisplayName
    {
    }
    /**
     * @deprecated 5.6
     */
    class RichEditing extends \ACP\Editing\Service\User\RichEditing
    {
    }
    /**
     * @deprecated 5.6
     */
    class Email extends \ACP\Editing\Service\User\Email
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Description extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Nicename extends \ACP\Editing\Service\User\Nicename
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Url extends \ACP\Editing\Service\User\Url
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Role extends \ACP\Editing\Service\User\Role
    {
    }
    /**
     * @deprecated 5.6
     */
    class Fullname extends \ACP\Editing\Service\User\FullName
    {
    }
}
namespace ACP\Editing\Model\Media {
    /**
     * @deprecated 5.6
     */
    class Caption extends \ACP\Editing\Service\Media\Caption
    {
    }
    /**
     * @deprecated 5.6
     */
    class MimeType extends \ACP\Editing\Service\Media\MimeType
    {
    }
    /**
     * @deprecated 5.6
     */
    class Date extends \ACP\Editing\Service\Post\Date
    {
    }
    /**
     * @deprecated 5.6
     */
    class AlternateText extends \ACP\Editing\Service\Media\AlternateText
    {
    }
    /**
     * @deprecated 5.6
     */
    class Title extends \ACP\Editing\Service\Media\Title
    {
    }
}
namespace ACP\Editing {
    /**
     * @deprecated 5.6
     */
    abstract class Model implements \ACP\Editing\Service
    {
        const VIEW_BULK_EDITABLE = 'bulk_editable';
        const VIEW_PLACEHOLDER = 'placeholder';
        const VIEW_REQUIRED = 'required';
        const VIEW_TYPE = 'type';
        /**
         * @var Column
         */
        protected $column;
        /**
         * @var WP_Error
         */
        protected $error;
        public function __construct(\AC\Column $column)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        /**
         * @param WP_Error $error
         */
        protected function set_error(\WP_Error $error)
        {
        }
        /**
         * @return bool
         */
        public function has_error()
        {
        }
        /**
         * @return WP_Error
         */
        public function get_error()
        {
        }
        /**
         * @return Column
         */
        public function get_column()
        {
        }
        /**
         * Get editing settings
         * @return array {
         * @type string     $type          Type of form field. Accepts: attachment, checkboxlist, checklist, color, float, email, media, number, password, select, select2_dropdown, select2_tags, text, textarea, togglable or url. Default is 'text.
         * @type string     $placeholder   Add a placeholder text. Only applies to type: text, url, number, password, email.
         * @type array      $options       Options for select form element. Only applies to type: togglable, select, select2_dropdown and select2_tags.
         * @type string     $js            If a selector is provided, editable will be delegated to the specified targets. Example: [ 'js' => [ 'selector' => 'a.my-class' ] ];
         * @type bool       $ajax_populate Populates the available select2 dropdown values through ajax. Only applies to the type: 'select2_dropdown'. Ajax callback used is 'get_editable_ajax_options()'.
         * @type string|int $range_step    Determines the number intervals for the 'number' type field. Default is 'any'.
         * @type string     $store_values  If a field can hold multiple values we store the key unless $store_values is set to (bool) true. Default is (bool) false.
         * @type bool       $bulk_editable If this model supports Bulk Edit
         *                                 }
         */
        public function get_view_settings()
        {
        }
        /**
         * DB value used for storing the edited data
         *
         * @param int $id
         *
         * @return array|object|string
         */
        public function get_edit_value($id)
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int          $id
         * @param string|array $value
         *
         * @return bool
         */
        protected abstract function save($id, $value);
        public function update(int $id, $data) : void
        {
        }
        /**
         * Register column field settings
         */
        public function register_settings()
        {
        }
    }
}
namespace ACP\Editing\Model {
    /**
     * @deprecated 5.6
     */
    abstract class Post extends \ACP\Editing\Model
    {
        /**
         * @param int   $id
         * @param array $args
         *
         * @return bool
         */
        protected function update_post($id, array $args = [])
        {
        }
    }
}
namespace ACP\Editing\Model\Comment {
    /**
     * @deprecated 5.6
     */
    class AuthorName extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class AuthorURL extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Type extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Approved extends \ACP\Editing\Service\Comment\Approved
    {
    }
    /**
     * @deprecated 5.6
     */
    class Comment extends \ACP\Editing\Service\Comment\Content
    {
    }
    /**
     * @deprecated 5.6
     */
    class User extends \ACP\Editing\Service\Comment\User
    {
    }
    /**
     * @deprecated 5.6
     */
    class Status extends \ACP\Editing\Service\Comment\Status
    {
    }
    /**
     * @deprecated 5.6
     */
    class AuthorEmail extends \ACP\Editing\Service\Basic
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Editing\Model\Taxonomy {
    /**
     * @deprecated 5.6
     */
    class Slug extends \ACP\Editing\Service\Taxonomy\Slug
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Menu extends \ACP\Editing\Service\Taxonomy\Menu
    {
    }
    /**
     * @deprecated 5.6
     */
    class Name extends \ACP\Editing\Service\Taxonomy\Name
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class Description extends \ACP\Editing\Service\Basic
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    class TaxonomyParent extends \ACP\Editing\Service\Taxonomy\TaxonomyParent
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
}
namespace ACP\Editing\Model {
    /**
     * @deprecated 5.6
     */
    class Meta extends \ACP\Editing\Model
    {
        /**
         * @var AC\Column\Meta
         */
        protected $column;
        public function __construct(\AC\Column\Meta $column)
        {
        }
        public function get_view_settings()
        {
        }
        /**
         * @param int          $id
         * @param string|array $value
         *
         * @return bool
         */
        public function save($id, $value)
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    abstract class Comment extends \ACP\Editing\Model
    {
        /**
         * @param int   $id
         * @param array $args
         *
         * @return bool
         */
        protected function update_comment($id, array $args = [])
        {
        }
    }
    /**
     * @deprecated 5.6
     */
    abstract class User extends \ACP\Editing\Model
    {
        /**
         * @param $id
         * @param $args
         *
         * @return bool
         */
        public function update_user($id, $args)
        {
        }
    }
    /**
     * @deprecated 5.6 use `false` instead
     */
    class Disabled
    {
    }
}
namespace ACP\Editing {
    interface ListScreen
    {
        /**
         * @return Strategy
         */
        public function editing();
    }
}
namespace ACP\Editing\View {
    trait MultipleTrait
    {
        /**
         * @param bool $multiple
         *
         * @return $this
         */
        public function set_multiple($multiple)
        {
        }
    }
}
namespace ACP\Editing {
    class View
    {
        /**
         * @var array
         */
        protected $args;
        public function __construct($type)
        {
        }
        protected function set($key, $value)
        {
        }
        public function get_arg($key)
        {
        }
        private function validate($value)
        {
        }
        /**
         * @param bool $enable
         */
        public function set_clear_button($enable)
        {
        }
        /**
         * @param bool $required
         *
         * @return $this
         */
        public function set_required($required)
        {
        }
        /**
         * @param bool $enable
         *
         * @return $this
         */
        public function set_revisioning($enable)
        {
        }
        /**
         * @param string $selector
         *
         * @return $this
         */
        public function set_js_selector($selector)
        {
        }
        /**
         * @return array
         */
        public function get_args()
        {
        }
    }
}
namespace ACP\Editing\View {
    class Wysiwyg extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
    }
    trait WeekstartTrait
    {
        public function set_week_start($week_start)
        {
        }
    }
    trait AttachmentTypeTrait
    {
        /**
         * @param string $type
         *
         * @return $this
         */
        public function set_attachment_type($type)
        {
        }
    }
    class Media extends \ACP\Editing\View
    {
        use \ACP\Editing\View\AttachmentTypeTrait, \ACP\Editing\View\MultipleTrait;
        public function __construct()
        {
        }
    }
    trait PlaceholderTrait
    {
        public function set_placeholder($placeholder)
        {
        }
    }
    trait MinMaxTrait
    {
        /**
         * @param float $min
         *
         * @return $this
         */
        public function set_min($min)
        {
        }
        /**
         * @param float $min
         *
         * @return $this
         */
        public function set_max($max)
        {
        }
    }
    trait StepTrait
    {
        /**
         * @param string $step
         *
         * @return $this
         */
        public function set_step($step)
        {
        }
    }
    class Number extends \ACP\Editing\View
    {
        use \ACP\Editing\View\MinMaxTrait, \ACP\Editing\View\StepTrait;
        public function __construct()
        {
        }
    }
    trait OptionsTrait
    {
        /**
         * @param array $options
         *
         * @return $this
         */
        public function set_options(array $options)
        {
        }
    }
    trait MethodTrait
    {
        public function has_methods($has_methods)
        {
        }
    }
    class AdvancedSelect extends \ACP\Editing\View
    {
        use \ACP\Editing\View\OptionsTrait, \ACP\Editing\View\MethodTrait, \ACP\Editing\View\MultipleTrait;
        public function __construct(array $options = [])
        {
        }
    }
    class Menu extends \ACP\Editing\View\AdvancedSelect
    {
        public function __construct()
        {
        }
        private function get_menus()
        {
        }
    }
    class Legacy extends \ACP\Editing\View
    {
        public function __construct(array $args)
        {
        }
    }
    trait AjaxTrait
    {
        /**
         * @param bool $use_ajax
         *
         * @return $this
         */
        public function set_ajax_populate($use_ajax)
        {
        }
    }
    trait TagsTrait
    {
        /**
         * @param bool $enable_tags
         *
         * @return $this
         */
        public function set_tags($enable_tags)
        {
        }
    }
    class Taxonomy extends \ACP\Editing\View
    {
        use \ACP\Editing\View\AjaxTrait, \ACP\Editing\View\MultipleTrait, \ACP\Editing\View\TagsTrait;
        public function __construct()
        {
        }
    }
    interface Placeholder
    {
        /**
         * @param string $placeholder
         *
         * @return View
         */
        public function set_placeholder($placeholder);
    }
    class ComputedNumber extends \ACP\Editing\View
    {
        use \ACP\Editing\View\MinMaxTrait, \ACP\Editing\View\StepTrait;
        public function __construct()
        {
        }
    }
    class Color extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
    }
    class Audio extends \ACP\Editing\View
    {
        use \ACP\Editing\View\AttachmentTypeTrait, \ACP\Editing\View\MultipleTrait;
        public function __construct()
        {
        }
    }
    class Date extends \ACP\Editing\View
    {
        use \ACP\Editing\View\WeekstartTrait;
        public function __construct()
        {
        }
    }
    interface MaxLength
    {
        /**
         * @param int $max_length
         *
         * @return View
         */
        public function set_max_length($max_length);
    }
    trait MaxlengthTrait
    {
        public function set_max_length($max_length)
        {
        }
    }
    class TextArea extends \ACP\Editing\View implements \ACP\Editing\View\Placeholder, \ACP\Editing\View\MaxLength
    {
        use \ACP\Editing\View\MaxlengthTrait, \ACP\Editing\View\PlaceholderTrait;
        public function __construct()
        {
        }
        /**
         * @param int $rows
         */
        public function set_rows($rows)
        {
        }
    }
    class FullName extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
        /**
         * @param string $placeholder_first_name
         *
         * @return $this
         */
        public function set_placeholder_first_name($placeholder_first_name)
        {
        }
        /**
         * @param string $placeholder_last_name
         *
         * @return $this
         */
        public function set_placeholder_last_name($placeholder_last_name)
        {
        }
    }
    class Password extends \ACP\Editing\View implements \ACP\Editing\View\Placeholder, \ACP\Editing\View\MaxLength
    {
        use \ACP\Editing\View\MaxlengthTrait, \ACP\Editing\View\PlaceholderTrait;
        public function __construct()
        {
        }
    }
    class AjaxSelect extends \ACP\Editing\View
    {
        use \ACP\Editing\View\AjaxTrait, \ACP\Editing\View\TagsTrait, \ACP\Editing\View\MethodTrait, \ACP\Editing\View\MultipleTrait;
        public function __construct()
        {
        }
        public function set_tags($enable)
        {
        }
    }
    class MultiInput extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
        public function set_sub_type($sub_type)
        {
        }
    }
    class Video extends \ACP\Editing\View
    {
        use \ACP\Editing\View\AttachmentTypeTrait, \ACP\Editing\View\MultipleTrait;
        public function __construct()
        {
        }
    }
    class Text extends \ACP\Editing\View implements \ACP\Editing\View\Placeholder, \ACP\Editing\View\MaxLength
    {
        use \ACP\Editing\View\MaxlengthTrait, \ACP\Editing\View\PlaceholderTrait;
        public function __construct()
        {
        }
    }
    class DateTime extends \ACP\Editing\View
    {
        use \ACP\Editing\View\WeekstartTrait;
        public function __construct()
        {
        }
    }
    class Email extends \ACP\Editing\View implements \ACP\Editing\View\Placeholder, \ACP\Editing\View\MaxLength
    {
        use \ACP\Editing\View\MaxlengthTrait, \ACP\Editing\View\PlaceholderTrait;
        public function __construct()
        {
        }
    }
    trait MediaUploadToTrait
    {
        public function set_upload_media_only($upload_only)
        {
        }
    }
    class CheckboxList extends \ACP\Editing\View
    {
        use \ACP\Editing\View\OptionsTrait;
        public function __construct(array $options = [])
        {
        }
    }
    class RemoteSelect extends \ACP\Editing\View
    {
        /**
         * Needs to be paired with RemoteOptions
         * @see \ACP\Editing\RemoteOptions
         */
        public function __construct()
        {
        }
    }
    class Image extends \ACP\Editing\View
    {
        use \ACP\Editing\View\AttachmentTypeTrait, \ACP\Editing\View\MultipleTrait, \ACP\Editing\View\MediaUploadToTrait;
        public function __construct()
        {
        }
    }
    class InternalLink extends \ACP\Editing\View implements \ACP\Editing\View\Placeholder, \ACP\Editing\View\MaxLength
    {
        use \ACP\Editing\View\MaxlengthTrait, \ACP\Editing\View\PlaceholderTrait;
        public function __construct()
        {
        }
    }
    class Url extends \ACP\Editing\View implements \ACP\Editing\View\Placeholder, \ACP\Editing\View\MaxLength
    {
        use \ACP\Editing\View\MaxlengthTrait, \ACP\Editing\View\PlaceholderTrait;
        public function __construct()
        {
        }
    }
    class Toggle extends \ACP\Editing\View
    {
        use \ACP\Editing\View\OptionsTrait;
        public function __construct(\AC\Type\ToggleOptions $options)
        {
        }
    }
    class Select extends \ACP\Editing\View
    {
        use \ACP\Editing\View\OptionsTrait;
        public function __construct(array $options = [])
        {
        }
    }
}
namespace ACP\Editing\Factory {
    class InlineEditFactory
    {
        /**
         * @var AC\ListScreen;
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return AC\Column[]
         */
        public function create()
        {
        }
        private function is_list_screen_editable()
        {
        }
        public function is_column_inline_editable(\AC\Column $column)
        {
        }
    }
    class BulkEditFactory
    {
        /**
         * @var AC\ListScreen;
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return AC\Column[]
         */
        public function create()
        {
        }
        private function is_list_screen_editable()
        {
        }
        public function is_column_bulk_editable(\AC\Column $column)
        {
        }
    }
}
namespace AC\Settings {
    interface Header
    {
        /**
         * @return View|false
         */
        public function create_header_view();
    }
    abstract class Column
    {
        /**
         * A (short) reference to this setting
         * @var string
         */
        protected $name;
        /**
         * The options this field manages (optionally with default values)
         * @var array
         */
        protected $options = [];
        /**
         * @var AC\Column
         */
        protected $column;
        /**
         * Options that are set by the user and should not be overwritten with defaults
         * @var array
         */
        private $user_set = [];
        /**
         * @param AC\Column $column
         */
        public function __construct(\AC\Column $column)
        {
        }
        /**
         * @return array
         * @see AC\Settings_Column::$options
         */
        protected abstract function define_options();
        /**
         * Create a string representation of this setting
         * @return View|false
         */
        public abstract function create_view();
        /**
         * Get settings that depend on this setting
         * @return Column[]
         */
        public function get_dependent_settings()
        {
        }
        private function set_options()
        {
        }
        /**
         * Set an option and set value afterwards
         *
         * @param string $option
         * @param mixed  $value
         */
        private function set_option($option, $value = null)
        {
        }
        public function has_option($option)
        {
        }
        /**
         * Get a managed option
         * @return false|string
         */
        protected function get_default_option()
        {
        }
        /**
         * Return the value of all options
         * @return array
         */
        public function get_values()
        {
        }
        /**
         * Get value of this setting, optionally specified with a key
         * Will return the value of the default option
         *
         * @param string|null $option
         *
         * @return string|array|int|bool
         */
        public function get_value($option = null)
        {
        }
        /**
         * Set the values of this setting
         *
         * @param array $values
         */
        public function set_values(array $values)
        {
        }
        /**
         * Invoke the setter of the setting
         *
         * @param string|array|int|bool $value
         * @param string                $option
         *
         * @return bool
         */
        private function invoke_option_setter($option, $value)
        {
        }
        /**
         * Set value of an option
         *
         * @param string|array|int|bool $value
         * @param string|null           $option
         *
         * @return bool
         */
        public function set_value($value, $option = null)
        {
        }
        /**
         * Set a default value unless option is loaded from settings
         *
         * @param string|array|int|bool $value
         * @param string|null           $option
         *
         * @return bool
         */
        public function set_default($value, $option = null)
        {
        }
        /**
         * Get the default value of an option if set
         *
         * @param string|null $option
         *
         * @return mixed
         */
        public function get_default($option = null)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Default to self::get_default_option()
         */
        protected function set_name()
        {
        }
        /**
         * Add an element to this setting
         *
         * @param string      $type
         * @param string|null $name
         *
         * @return Element\Select|Element\Input|Element\Radio
         */
        protected function create_element($type, $name = null)
        {
        }
        /**
         * Render the output of self::create_header()
         * @return false|string
         */
        public function render_header()
        {
        }
        /**
         * Render the output of self::create_view()
         * @return false|string
         */
        public function render()
        {
        }
        public function __toString()
        {
        }
        public function get_column()
        {
        }
    }
}
namespace ACP\Editing\Settings {
    class BulkEditing extends \AC\Settings\Column implements \AC\Settings\Header
    {
        const NAME = 'bulk_edit';
        /**
         * @var string
         */
        private $bulk_edit;
        /**
         * @return array
         */
        protected function define_options()
        {
        }
        /**
         * @return string
         */
        private function get_instructions()
        {
        }
        public function create_header_view()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return bool True when bulk_edit is selected
         */
        public function is_active()
        {
        }
        /**
         * @return string
         */
        public function get_bulk_edit()
        {
        }
        /**
         * @param string $bulk_edit
         *
         * @return $this
         */
        public function set_bulk_edit($bulk_edit)
        {
        }
    }
    interface SettingFactoryInterface
    {
        /**
         * @return Settings
         */
        public function create();
    }
}
namespace ACP\Editing\Settings\Factory {
    class Taxonomy implements \ACP\Editing\Settings\SettingFactoryInterface
    {
        /**
         * @var AC\Column
         */
        private $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function create()
        {
        }
    }
    class EditableType implements \ACP\Editing\Settings\SettingFactoryInterface
    {
        const TYPE_CONTENT = 'content';
        const TYPE_TEXT = 'text';
        const VALID_TYPES = [self::TYPE_CONTENT, self::TYPE_TEXT];
        /**
         * @var AC\Column
         */
        private $column;
        /**
         * @var string
         */
        private $type;
        public function __construct(\AC\Column $column, $type)
        {
        }
        public function create()
        {
        }
        /**
         * @return Editing\Settings\EditableType
         */
        private function create_section()
        {
        }
    }
}
namespace ACP\Editing\Settings {
    class CreateTerms extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $enable_term_creation;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_enable_term_creation()
        {
        }
        /**
         * @param string $enable_term_creation
         *
         * @return $this
         */
        public function set_enable_term_creation($enable_term_creation)
        {
        }
    }
}
namespace ACP\Editing {
    class Settings extends \AC\Settings\Column implements \AC\Settings\Header
    {
        const NAME = 'edit';
        private $edit;
        /**
         * @var AC\Settings\Column[]
         */
        protected $sections = [];
        /**
         * @var boolean
         */
        private $refresh_column;
        public function __construct(\AC\Column $column, $refresh_column = false)
        {
        }
        /**
         * @param boolean $enable
         */
        public function set_refresh($enable)
        {
        }
        /**
         * @param AC\Settings\Column $setting
         *
         * @return $this
         */
        public function add_section(\AC\Settings\Column $setting)
        {
        }
        /**
         * @param string $name
         *
         * @return AC\Settings\Column|null
         */
        public function get_section($name)
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return string
         */
        private function get_instruction()
        {
        }
        public function create_header_view()
        {
        }
        protected function create_toggle_element()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_edit()
        {
        }
        /**
         * @param string $edit
         *
         * @return $this
         */
        public function set_edit($edit)
        {
        }
        public function is_active()
        {
        }
    }
}
namespace ACP\Editing\Settings {
    class CustomField extends \ACP\Editing\Settings
    {
        protected function create_toggle_element()
        {
        }
    }
    class EditableType extends \AC\Settings\Column
    {
        const NAME = 'editable_type';
        /**
         * @var string
         */
        private $editable_type;
        /**
         * @var AC\Helper\Select\Options
         */
        private $editable_type_options;
        /**
         * @var string|null
         */
        private $default_option;
        public function __construct(\AC\Column $column, \AC\Helper\Select\Options $options, $default = null)
        {
        }
        protected function define_options()
        {
        }
        protected function get_formatted_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_editable_type()
        {
        }
        /**
         * @param string $editable_type
         *
         * @return $this
         */
        public function set_editable_type($editable_type)
        {
        }
    }
}
namespace ACP\Editing\Settings\EditableType {
    class Content extends \ACP\Editing\Settings\EditableType
    {
        const TYPE_TEXTAREA = 'textarea';
        const TYPE_WYSIWYG = 'wysiwyg';
        public function __construct(\AC\Column $column, $default = null)
        {
        }
    }
    class Text extends \ACP\Editing\Settings\EditableType
    {
        const TYPE_TEXTAREA = 'textarea';
        const TYPE_TEXT = 'text';
        public function __construct(\AC\Column $column, $default = self::TYPE_TEXTAREA)
        {
        }
    }
}
namespace ACP\Editing {
    interface PaginatedOptionsFactory
    {
        /**
         * @param string   $search
         * @param int      $page
         * @param int|null $id
         *
         * @return AC\Helper\Select\Options\Paginated
         */
        public function create($search, $page, $id = null);
    }
}
namespace ACP\Editing\PaginatedOptions {
    class Posts implements \ACP\Editing\PaginatedOptionsFactory
    {
        /**
         * @var string[]
         */
        private $post_types;
        /**
         * @var array
         */
        private $args;
        public function __construct($post_types = null, array $args = [])
        {
        }
        public function create($search, $page, $id = null)
        {
        }
    }
    class Users implements \ACP\Editing\PaginatedOptionsFactory
    {
        /**
         * @var array
         */
        private $args;
        public function __construct(array $args = [])
        {
        }
        public function create($search, $page, $id = null)
        {
        }
    }
}
namespace ACP\Settings\ListScreen {
    class HideOnScreen
    {
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string
         */
        protected $label;
        public function __construct($name, $label)
        {
        }
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return bool
         */
        public function is_hidden(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return array
         */
        public function get_dependent_on()
        {
        }
    }
}
namespace ACP\Editing\HideOnScreen {
    class BulkEdit extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class InlineEdit extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class BulkDelete extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Editing {
    interface Strategy
    {
        /**
         * @param int $id
         *
         * @return bool
         */
        public function user_can_edit_item($id);
        /**
         * @return bool
         */
        public function user_can_edit();
        /**
         * Fetch rows
         * @return RequestHandler
         */
        public function get_query_request_handler();
    }
}
namespace AC\Asset {
    abstract class Enqueueable
    {
        /**
         * @var string
         */
        protected $handle;
        /**
         * @var Location|null
         */
        protected $location;
        /**
         * @var string[]
         */
        protected $dependencies;
        /**
         * @param string   $handle
         * @param Location $location
         * @param array    $dependencies
         */
        public function __construct($handle, \AC\Asset\Location $location = null, array $dependencies = [])
        {
        }
        /**
         * @return string
         */
        public function get_handle()
        {
        }
        /**
         * @return int|null
         */
        protected function get_version()
        {
        }
        /**
         * @return void
         */
        public abstract function register();
        /**
         * @return void
         */
        public abstract function enqueue();
    }
    class Script extends \AC\Asset\Enqueueable
    {
        public function register()
        {
        }
        public function add_inline_variable($name, $variable, $before = true)
        {
        }
        public function enqueue()
        {
        }
    }
}
namespace ACP\Editing\Asset\Script {
    final class Table extends \AC\Asset\Script
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        /**
         * @var array
         */
        private $active_states;
        public function __construct($handle, \AC\Asset\Location $location, \AC\ListScreen $list_screen, \ACP\Editing\EditableDataFactory $editable_data_factory, \ACP\Editing\Preference\EditState $edit_state, array $active_states)
        {
        }
        public function register()
        {
        }
        private function get_bulk_selection_labels() : array
        {
        }
        private function get_reassign_user_name() : string
        {
        }
        private function get_reassign_user() : \WP_User
        {
        }
        /**
         * @return false|int
         */
        private function get_total_items()
        {
        }
        private function show_bulk_edit_confirmation() : bool
        {
        }
        private function get_bulk_delete_component() : string
        {
        }
        private function is_persistent_editing()
        {
        }
        private function get_updated_rows_per_iteration()
        {
        }
        private function get_deleted_rows_per_iteration()
        {
        }
    }
}
namespace ACP\Editing\BulkDelete {
    abstract class RequestHandler implements \ACP\Editing\RequestHandler
    {
        const STATUS_FAILED = 'failed';
        const STATUS_SUCCESS = 'success';
        protected abstract function delete($id, array $args = []) : void;
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACP\Editing\BulkDelete\RequestHandler {
    class Taxonomy extends \ACP\Editing\BulkDelete\RequestHandler
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(string $taxonomy)
        {
        }
        protected function delete($id, array $args = []) : void
        {
        }
    }
    class Post extends \ACP\Editing\BulkDelete\RequestHandler
    {
        /**
         * @var WP_Post_Type
         */
        protected $post_type;
        public function __construct(\WP_Post_Type $post_type)
        {
        }
        protected function delete($id, array $args = []) : void
        {
        }
        private function restore_post($id) : void
        {
        }
        private function delete_post(string $post_type, int $id, bool $force_delete) : void
        {
        }
        private function user_can_delete(int $post_id) : bool
        {
        }
        /**
         * @param int $id
         *
         * @return void
         */
        protected function validate_post_lock($id)
        {
        }
    }
    class Comment extends \ACP\Editing\BulkDelete\RequestHandler
    {
        protected function delete($id, array $args = []) : void
        {
        }
    }
    class User extends \ACP\Editing\BulkDelete\RequestHandler
    {
        protected function delete($id, array $args = []) : void
        {
        }
    }
}
namespace ACP\Editing\BulkDelete {
    interface Deletable
    {
        public function get_delete_request_handler() : \ACP\Editing\RequestHandler;
        public function get_query_request_handler() : \ACP\Editing\RequestHandler;
        public function user_can_delete() : bool;
    }
    interface ListScreen
    {
        /**
         * @return Deletable
         */
        public function deletable();
    }
}
namespace ACP\Editing\BulkDelete\Deletable {
    class Taxonomy implements \ACP\Editing\BulkDelete\Deletable
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function get_delete_request_handler() : \ACP\Editing\RequestHandler
        {
        }
        public function user_can_delete() : bool
        {
        }
        public function get_query_request_handler() : \ACP\Editing\RequestHandler
        {
        }
    }
    class Post implements \ACP\Editing\BulkDelete\Deletable
    {
        /**
         * @var WP_Post_Type
         */
        protected $post_type;
        public function __construct(\WP_Post_Type $post_type)
        {
        }
        public function user_can_delete() : bool
        {
        }
        public function get_delete_request_handler() : \ACP\Editing\RequestHandler
        {
        }
        public function get_query_request_handler() : \ACP\Editing\RequestHandler
        {
        }
    }
    class Comment implements \ACP\Editing\BulkDelete\Deletable
    {
        public function get_delete_request_handler() : \ACP\Editing\RequestHandler
        {
        }
        public function user_can_delete() : bool
        {
        }
        public function get_query_request_handler() : \ACP\Editing\RequestHandler
        {
        }
    }
    class User implements \ACP\Editing\BulkDelete\Deletable
    {
        public function get_delete_request_handler() : \ACP\Editing\RequestHandler
        {
        }
        public function user_can_delete() : bool
        {
        }
        public function get_query_request_handler() : \ACP\Editing\RequestHandler
        {
        }
    }
}
namespace ACP\Editing {
    class RequestHandlerFactory
    {
        const METHOD_BULK_DELETABLE_ROWS = 'bulk-deletable-rows';
        const METHOD_BULK_EDITABLE_ROWS = 'bulk-editable-rows';
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        /**
         * @param Request $request
         *
         * @return RequestHandler|null
         */
        public function create(\AC\Request $request)
        {
        }
    }
    class TableScreen implements \AC\Registerable
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var InlineEditFactory
         */
        private $inline_edit_factory;
        /**
         * @var BulkEditFactory
         */
        private $bulk_edit_factory;
        public function __construct(\AC\ListScreen $list_screen, \AC\Asset\Location\Absolute $location, \ACP\Editing\Factory\InlineEditFactory $inline_edit_factory, \ACP\Editing\Factory\BulkEditFactory $bulk_edit_factory)
        {
        }
        public function register()
        {
        }
        public function register_scripts()
        {
        }
        public function edit_button()
        {
        }
        private function is_edit_state_active()
        {
        }
        public function is_export_enabled() : bool
        {
        }
        public function is_bulk_delete_enabled() : bool
        {
        }
    }
}
namespace ACP\Editing\Strategy {
    class Taxonomy implements \ACP\Editing\Strategy
    {
        protected $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function user_can_edit()
        {
        }
        public function user_can_edit_item($id)
        {
        }
        public function get_query_request_handler()
        {
        }
    }
    class Post implements \ACP\Editing\Strategy
    {
        /**
         * @var string
         */
        protected $post_type;
        /**
         * @param string $post_type
         */
        public function __construct($post_type)
        {
        }
        public function user_can_edit()
        {
        }
        public function user_can_edit_item($id)
        {
        }
        public function get_query_request_handler()
        {
        }
    }
    class Site implements \ACP\Editing\Strategy
    {
        public function user_can_edit()
        {
        }
        public function user_can_edit_item($id)
        {
        }
        public function get_query_request_handler()
        {
        }
    }
    class Comment implements \ACP\Editing\Strategy
    {
        public function user_can_edit()
        {
        }
        public function user_can_edit_item($id)
        {
        }
        public function get_query_request_handler()
        {
        }
    }
    class User implements \ACP\Editing\Strategy
    {
        public function user_can_edit()
        {
        }
        public function user_can_edit_item($id)
        {
        }
        public function get_query_request_handler()
        {
        }
    }
}
namespace ACP\Editing {
    class ColumnBulkSettingsSetter
    {
        public function register(\AC\Column $column)
        {
        }
    }
}
namespace AC\Response {
    class Json
    {
        const MESSAGE = 'message';
        /**
         * @var array
         */
        protected $parameters = [];
        /**
         * @var int
         */
        protected $status_code;
        public function send()
        {
        }
        public function error()
        {
        }
        public function success()
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         *
         * @return $this
         */
        public function set_parameter($key, $value)
        {
        }
        /**
         * @param array $values
         *
         * @return $this
         */
        public function set_parameters(array $values)
        {
        }
        /**
         * @param string $message
         *
         * @return $this
         */
        public function set_message($message)
        {
        }
        /**
         * @param int $code
         *
         * @return $this
         */
        public function set_status_code($code)
        {
        }
    }
}
namespace ACP\Editing\Response {
    class QueryRows extends \AC\Response\Json
    {
        public function __construct(array $ids, $rows_per_iteration)
        {
        }
    }
}
namespace ACP\Editing {
    class ServiceFactory
    {
        /**
         * @param Column $column
         *
         * @return Service|false
         */
        public static function create(\AC\Column $column)
        {
        }
    }
    interface Editable
    {
        /**
         * @return Service|false
         */
        public function editing();
    }
    class ColumnInlineSettingsSetter
    {
        public function register(\AC\Column $column)
        {
        }
    }
}
namespace AC {
    interface ApplyFilter
    {
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        public function apply_filters($value);
    }
}
namespace ACP\Editing\ApplyFilter {
    class SaveValue implements \AC\ApplyFilter
    {
        /**
         * @var int
         */
        private $id;
        /**
         * @var Column
         */
        private $column;
        public function __construct($id, \AC\Column $column)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        public function apply_filters($value)
        {
        }
    }
    class RowsPerIteration implements \AC\ApplyFilter
    {
        /**
         * @var Request
         */
        private $request;
        public function __construct(\AC\Request $request)
        {
        }
        public function apply_filters($value)
        {
        }
    }
    class View implements \AC\ApplyFilter
    {
        /**
         * @var AC\Column
         */
        private $column;
        /**
         * @var string
         */
        private $context;
        /**
         * @var Service
         */
        private $service;
        public function __construct(\AC\Column $column, string $context, \ACP\Editing\Service $service)
        {
        }
        /**
         * @param Editing\View|null $value
         *
         * @return Editing\View|null
         */
        public function apply_filters($value)
        {
        }
    }
    class BulkEditActive implements \AC\ApplyFilter
    {
        /**
         * @var AC\Column
         */
        private $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function apply_filters($value)
        {
        }
    }
    class PostStatus implements \AC\ApplyFilter
    {
        /**
         * @var AC\Column
         */
        private $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function apply_filters($value)
        {
        }
    }
    class ReassignUser implements \AC\ApplyFilter
    {
        /**
         * Reassign posts and links to new User ID.
         *
         * @param int|null $value
         *
         * @return int|null
         */
        public function apply_filters($value) : ?int
        {
        }
    }
    class EditValue implements \AC\ApplyFilter
    {
        /**
         * @var int
         */
        private $id;
        /**
         * @var AC\Column
         */
        private $column;
        public function __construct($id, \AC\Column $column)
        {
        }
        public function apply_filters($value)
        {
        }
    }
}
namespace ACP\Editing {
    /**
     * Get all data settings needed to load editing for the WordPress list table
     */
    class EditableDataFactory
    {
        /**
         * @var InlineEditFactory
         */
        private $inline_edit_factory;
        /**
         * @var BulkEditFactory
         */
        private $bulk_edit_factory;
        public function __construct(\ACP\Editing\Factory\InlineEditFactory $inline_edit_factory, \ACP\Editing\Factory\BulkEditFactory $bulk_edit_factory)
        {
        }
        public function create()
        {
        }
        /**
         * @param Column $column
         * @param string $context
         *
         * @return array|null
         */
        private function create_data_by_column(\AC\Column $column, $context)
        {
        }
        /**
         * @param array $list
         *
         * @return array
         */
        private function format_js($list)
        {
        }
    }
}
namespace ACP\Editing\Ajax {
    final class TableRowsFactory
    {
        /**
         * @param Request       $request
         * @param AC\ListScreen $list_screen
         *
         * @return TableRows|false
         */
        public static function create(\AC\Request $request, \AC\ListScreen $list_screen)
        {
        }
    }
    abstract class TableRows implements \AC\Registerable
    {
        /**
         * @var AC\Request
         */
        protected $request;
        /**
         * @var AC\ListScreenWP
         */
        protected $list_screen;
        /**
         * @param AC\Request      $request
         * @param AC\ListScreenWP $list_screen
         */
        public function __construct(\AC\Request $request, \AC\ListScreenWP $list_screen)
        {
        }
        public function is_request()
        {
        }
        public function handle_request()
        {
        }
    }
}
namespace ACP\Editing\Ajax\TableRows {
    final class Media extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
        /**
         * @param WP_Query $query
         */
        public function pre_handle_request(\WP_Query $query)
        {
        }
    }
    final class Taxonomy extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
        public function handle_request()
        {
        }
    }
    final class Post extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
        public function handle_request()
        {
        }
    }
    final class Comment extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
        public function handle_request()
        {
        }
    }
    final class User extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
        public function handle_request()
        {
        }
    }
}
namespace AC {
    abstract class Preferences
    {
        /**
         * @var int
         */
        private $user_id;
        /**
         * The label for this set of preferences
         * @var string
         */
        private $label;
        /**
         * Preferences of this user
         * @var array
         */
        protected $data = [];
        /**
         * Retrieves data from DB
         * return array|false
         */
        protected abstract function load();
        /**
         * Stores data to DB
         * @return bool
         */
        public abstract function save();
        /**
         * @param string   $label
         * @param null|int $user_id
         */
        public function __construct($label, $user_id = null)
        {
        }
        /**
         * Return the key used to store and retrieve this preference
         * @return string
         */
        protected function get_key()
        {
        }
        /**
         * @return int
         */
        protected function get_user_id()
        {
        }
        public function exists($key) : bool
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null
         */
        public function get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed  $data
         * @param bool   $save Immediately save changes to database
         *
         * @return bool
         */
        public function set($key, $data, $save = true)
        {
        }
        /**
         * @param string $key
         * @param bool   $save Immediately save changes to database
         *
         * @return bool
         */
        public function delete($key, $save = true)
        {
        }
        /**
         * Reset site preferences for all users that match on the current label
         */
        public function reset_for_all_users()
        {
        }
    }
}
namespace AC\Preferences {
    class Site extends \AC\Preferences
    {
        /**
         * return array|false
         */
        protected function load()
        {
        }
        /**
         * @return bool
         */
        public function save()
        {
        }
    }
}
namespace ACP\Editing\Preference {
    class EditState extends \AC\Preferences\Site
    {
        public function __construct()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function is_active($key)
        {
        }
    }
}
namespace ACP\Editing {
    class RequestHandlerAjaxFactory
    {
        const METHOD_BULK_DELETE = 'bulk-delete';
        const METHOD_BULK_SAVE = 'bulk-save';
        const METHOD_INLINE_SAVE = 'inline-save';
        const METHOD_INLINE_VALUES = 'inline-values';
        const METHOD_EDIT_STATE = 'edit-state';
        const METHOD_INLINE_SELECT_VALUES = 'inline-select-values';
        const METHOD_BULK_SELECT_VALUES = 'bulk-select-values';
        const METHOD_USER_SELECT_VALUES = 'delete-user-select-values';
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        /**
         * @param Request $request
         *
         * @return RequestHandler
         */
        public function create(\AC\Request $request)
        {
        }
    }
}
namespace ACP\Editing\Value {
    class RowsPerIteration
    {
        /**
         * @var int
         */
        private $value;
        public function __construct($value)
        {
        }
        public function get_value()
        {
        }
        private function validate()
        {
        }
    }
}
namespace AC {
    class ArrayIterator implements \Iterator
    {
        /**
         * @var array
         */
        protected $array;
        public function __construct(array $array = [])
        {
        }
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * @param string $offset
         *
         * @return false|mixed
         */
        public function get_offset($offset)
        {
        }
        /**
         * @param string $offset
         *
         * @return bool
         */
        public function has_offset($offset)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function search($value)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array
         */
        public function get_copy()
        {
        }
    }
}
namespace ACP\Editing\Value {
    class Data extends \AC\ArrayIterator
    {
        //	public static function create_from_request( $data ): self {
        //		if ( is_scalar( $data ) ) {
        //			return new self( [ 'value' => $data ] );
        //		}
        //
        //		return new self( $data );
        //	}
        public function all()
        {
        }
        /**
         * @return mixed|null
         */
        public function get_value()
        {
        }
    }
}
namespace ACP {
    interface RequestHandler
    {
        /**
         * @param Request $request
         *
         * @return void
         */
        public function handle(\AC\Request $request);
    }
}
namespace ACP\RequestHandler {
    class ForcePluginUpdates implements \ACP\RequestHandler
    {
        /**
         * @var PluginDataUpdater
         */
        private $products_updater;
        /**
         * @var ActivationTokenFactory
         */
        private $token_factory;
        public function __construct(\ACP\Updates\PluginDataUpdater $products_updater, \ACP\ActivationTokenFactory $token_factory)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class LicenseUpdate implements \ACP\RequestHandler
    {
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var ActivationUpdater
         */
        private $activation_updater;
        public function __construct(\ACP\ActivationTokenFactory $activation_token_factory, \ACP\Access\ActivationUpdater $activation_updater)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        private function error_notice($message)
        {
        }
        private function success_notice($message)
        {
        }
    }
    class ListScreenDelete implements \ACP\RequestHandler
    {
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class LicenseDeactivate implements \ACP\RequestHandler
    {
        /**
         * @var LicenseKeyRepository
         */
        private $license_key_repository;
        /**
         * @var ActivationKeyStorage
         */
        private $activation_key_storage;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var RequestDispatcher
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var PluginDataUpdater
         */
        private $products_updater;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        public function __construct(\ACP\LicenseKeyRepository $license_key_repository, \ACP\Access\ActivationKeyStorage $activation_key_storage, \ACP\Access\ActivationStorage $activation_storage, \ACP\RequestDispatcher $api, \ACP\Type\SiteUrl $site_url, \ACP\ActivationTokenFactory $activation_token_factory, \ACP\Updates\PluginDataUpdater $products_updater, \ACP\Access\PermissionChecker $permission_checker)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        private function error_notice($message)
        {
        }
        private function success_notice($message)
        {
        }
    }
    class LicenseActivate implements \ACP\RequestHandler
    {
        /**
         * @var ActivationKeyStorage
         */
        private $activation_key_storage;
        /**
         * @var RequestDispatcher
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var PluginDataUpdater
         */
        private $products_updater;
        /**
         * @var ActivationUpdater
         */
        private $activation_updater;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        public function __construct(\ACP\Access\ActivationKeyStorage $activation_key_storage, \ACP\RequestDispatcher $api, \ACP\Type\SiteUrl $site_url, \ACP\Updates\PluginDataUpdater $products_updater, \ACP\Access\ActivationUpdater $activation_updater, \ACP\Access\PermissionChecker $permission_checker, \ACP\Access\PermissionsStorage $permission_storage)
        {
        }
        /**
         * @param Request $request
         *
         * @return void
         */
        public function handle(\AC\Request $request)
        {
        }
        private function info_notice(string $message) : void
        {
        }
        private function succes_notice(string $message) : void
        {
        }
        private function error_notice($message)
        {
        }
    }
    class ListScreenCreate implements \ACP\RequestHandler
    {
        const PARAM_ACTION = 'action';
        const PARAM_CREATE_LIST = 'create-layout';
        const PARAM_DELETE_LIST = 'delete-layout';
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var ListScreenOrder
         */
        private $order;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Storage\ListScreenOrder $order)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACP {
    interface RequestAjaxHandler
    {
        public function handle();
    }
}
namespace ACP\RequestHandler\Ajax {
    class ColumnWidthUserReset implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ColumnSize\UserStorage
         */
        private $user_storage;
        public function __construct(\AC\ColumnSize\UserStorage $user_storage)
        {
        }
        public function handle()
        {
        }
    }
    class ColumnWidthUser implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ColumnSize\UserStorage
         */
        private $user_storage;
        public function __construct(\AC\ColumnSize\UserStorage $user_storage)
        {
        }
        public function handle()
        {
        }
    }
    class ListScreenOrder implements \ACP\RequestAjaxHandler
    {
        /**
         * @var AC\Storage\ListScreenOrder
         */
        private $list_screen_order;
        public function __construct(\AC\Storage\ListScreenOrder $order)
        {
        }
        public function handle()
        {
        }
    }
    class LicenseActivate implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ActivationKeyStorage
         */
        private $activation_key_storage;
        /**
         * @var RequestDispatcher
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var PluginDataUpdater
         */
        private $plugin_updater;
        /**
         * @var ActivationUpdater
         */
        private $activation_updater;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        public function __construct(\ACP\Access\ActivationKeyStorage $activation_key_storage, \ACP\RequestDispatcher $api, \ACP\Type\SiteUrl $site_url, \ACP\Updates\PluginDataUpdater $plugins_updater, \ACP\Access\ActivationUpdater $activation_updater, \ACP\Access\PermissionChecker $permission_checker)
        {
        }
        public function handle()
        {
        }
        private function send_error_response($message, $permissions = [])
        {
        }
    }
    class ListScreenUsers implements \ACP\RequestAjaxHandler
    {
        public function handle()
        {
        }
    }
    class SubscriptionUpdate implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var ActivationKeyStorage
         */
        private $activation_key_storage;
        /**
         * @var LicenseKeyRepository
         */
        private $license_key_repository;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        /**
         * @var RequestDispatcher
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $activation_url;
        /**
         * @var ActivationTokenFactory
         */
        private $token_factory;
        /**
         * @var PluginRepository
         */
        private $plugin_repository;
        public function __construct(\ACP\Access\ActivationStorage $activation_storage, \ACP\Access\ActivationKeyStorage $activation_key_storage, \ACP\LicenseKeyRepository $license_key_repository, \ACP\Access\PermissionChecker $permission_checker, \ACP\RequestDispatcher $api, \ACP\Type\SiteUrl $activation_url, \ACP\ActivationTokenFactory $token_factory, \ACP\PluginRepository $plugin_repository)
        {
        }
        public function handle()
        {
        }
    }
    class ColumnReset implements \ACP\RequestAjaxHandler
    {
        /**
         * @var UserColumnOrder
         */
        private $storage_order;
        /**
         * @var UserStorage
         */
        private $storage_size;
        public function __construct(\AC\Storage\UserColumnOrder $storage_order, \AC\ColumnSize\UserStorage $storage_size)
        {
        }
        public function handle()
        {
        }
    }
    class Permalinks implements \ACP\RequestAjaxHandler
    {
        public function handle()
        {
        }
    }
    class UpdatePlugins implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var PluginDataUpdater
         */
        private $updater;
        /**
         * @var UpdateCheckTransient
         */
        private $cache;
        public function __construct(\ACP\ActivationTokenFactory $activation_token_factory, \ACP\Updates\PluginDataUpdater $updater, \ACP\Transient\UpdateCheckTransient $cache)
        {
        }
        public function handle()
        {
        }
    }
    class ColumnWidthList implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ColumnSize\ListStorage
         */
        private $list_storage;
        /**
         * @var ColumnSize\UserStorage
         */
        private $user_storage;
        public function __construct(\AC\ColumnSize\ListStorage $list_storage, \AC\ColumnSize\UserStorage $user_storage)
        {
        }
        public function handle()
        {
        }
    }
    class AddonInstaller implements \ACP\RequestAjaxHandler
    {
        /**
         * @var RequestDispatcher
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var IntegrationRepository
         */
        private $integrations;
        /**
         * @var bool
         */
        private $is_network_active;
        public function __construct(\ACP\RequestDispatcher $api, \ACP\Type\SiteUrl $site_url, \ACP\Access\ActivationStorage $activation_storage, \ACP\ActivationTokenFactory $activation_token_factory, \AC\IntegrationRepository $integrations, $is_network_active)
        {
        }
        public function handle()
        {
        }
        /**
         * @return Url
         */
        private function get_license_page_url()
        {
        }
        /**
         * @param string $package_url zip file
         *
         * @return string|WP_Error|false Plugin basename on success. False or WP_Error when failed.
         */
        private function install_plugin($package_url)
        {
        }
    }
    class ColumnOrderUser implements \ACP\RequestAjaxHandler
    {
        /**
         * @var UserColumnOrder
         */
        private $user_storage;
        public function __construct(\AC\Storage\UserColumnOrder $user_storage)
        {
        }
        public function handle()
        {
        }
    }
    class ColumnOrderList implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ListColumnOrder
         */
        private $storage;
        /**
         * @var UserColumnOrder
         */
        private $user_storage;
        public function __construct(\AC\Storage\ListColumnOrder $storage, \AC\Storage\UserColumnOrder $user_storage)
        {
        }
        public function handle()
        {
        }
    }
    class Feedback implements \ACP\RequestAjaxHandler
    {
        /**
         * @var Version
         */
        private $version;
        public function __construct(\AC\Plugin\Version $version)
        {
        }
        public function handle()
        {
        }
    }
}
namespace ACP\Service {
    class PluginNotice implements \AC\Registerable
    {
        /**
         * @var IntegrationRepository
         */
        private $integration_repository;
        public function __construct(\AC\IntegrationRepository $integration_repository)
        {
        }
        public function register()
        {
        }
    }
    class Templates implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $dir;
        public function __construct($dir)
        {
        }
        public function register()
        {
        }
        /**
         * @param array $templates
         *
         * @return array
         */
        public function templates($templates)
        {
        }
    }
    class PluginUpdater implements \AC\Registerable
    {
        /**
         * @var API
         */
        private $api;
        /**
         * @var PluginRepository
         */
        private $plugin_repository;
        /**
         * @var PluginsData
         */
        private $storage;
        public function __construct(\ACP\API $api, \ACP\PluginRepository $plugin_repository, \ACP\Storage\PluginsData $storage)
        {
        }
        public function register()
        {
        }
        private function register_update_plugin(\AC\PluginInformation $plugin)
        {
        }
        private function register_view_plugin_details(\AC\PluginInformation $plugin)
        {
        }
    }
    final class Storage implements \AC\Registerable
    {
        /**
         * @var AC\ListScreenRepository\Storage
         */
        private $storage;
        /**
         * @var FileFactory
         */
        private $file_factory;
        /**
         * @var AC\EncodedListScreenDataFactory
         */
        private $encoded_list_screen_data_factory;
        /**
         * @var LegacyCollectionDecoder
         */
        private $collection_decoder;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \ACP\ListScreenRepository\FileFactory $file_factory, \AC\EncodedListScreenDataFactory $encoded_list_screen_data_factory, \ACP\Storage\ListScreen\LegacyCollectionDecoder $collection_decoder)
        {
        }
        public function register()
        {
        }
        public function configure()
        {
        }
        private function configure_api_storage(array &$repositories)
        {
        }
        private function configure_file_storage(array &$repositories)
        {
        }
        private function run_migration(\AC\ListScreenRepository\Storage\ListScreenRepository $from, \AC\ListScreenRepository\Storage\ListScreenRepository $to)
        {
        }
        private function run_copy(\AC\ListScreenRepository\Storage\ListScreenRepository $from, \AC\ListScreenRepository\Storage\ListScreenRepository $to)
        {
        }
    }
    class Permissions implements \AC\Registerable
    {
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        public function __construct(\ACP\Access\PermissionsStorage $permission_storage, \ACP\Access\PermissionChecker $permission_checker)
        {
        }
        public function register()
        {
        }
        public function set_permissions()
        {
        }
    }
    class Banner implements \AC\Registerable
    {
        public function register()
        {
        }
    }
    class ForcePluginUpdate implements \AC\Registerable
    {
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var PluginDataUpdater
         */
        private $updater;
        public function __construct(\ACP\ActivationTokenFactory $activation_token_factory, \ACP\Updates\PluginDataUpdater $updater)
        {
        }
        public function register()
        {
        }
        /**
         * @return bool
         */
        private function is_force_check_request()
        {
        }
        /**
         * Forces to check for updates on a manual request
         * @return void
         */
        public function force_plugin_updates()
        {
        }
        /**
         * Forces to check for updates on plugins page
         * @return void
         */
        public function force_plugin_updates_cached()
        {
        }
    }
    class IntegrationStatus implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $slug;
        public function __construct(string $slug)
        {
        }
        public function register()
        {
        }
        public function is_active($active, \AC\Integration $integration)
        {
        }
    }
}
namespace AC {
    interface Expirable
    {
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function is_expired($value = null);
    }
}
namespace ACP\Transient {
    class UpdateCheckTransientHourly implements \AC\Expirable
    {
        /**
         * @var Storage\Timestamp
         */
        protected $timestamp;
        public function __construct()
        {
        }
        /**
         * @param int|null $time
         *
         * @return bool
         */
        public function is_expired($time = null)
        {
        }
        public function delete()
        {
        }
        /**
         * @return bool
         */
        public function save()
        {
        }
    }
    class UpdateCheckTransient implements \AC\Expirable
    {
        /**
         * @var Storage\Timestamp
         */
        protected $timestamp;
        public function __construct()
        {
        }
        /**
         * @param int|null $time
         *
         * @return bool
         */
        public function is_expired($time = null)
        {
        }
        public function delete()
        {
        }
        /**
         * @param int $expiration Time until expiration in seconds.
         *
         * @return bool
         */
        public function save($expiration)
        {
        }
    }
    class LicenseCheckTransient implements \AC\Expirable
    {
        const CACHE_KEY = 'acp_periodic_license_check';
        /**
         * @var Storage\Timestamp
         */
        protected $timestamp;
        public function __construct($network_only)
        {
        }
        /**
         * @param int|null $time
         *
         * @return bool
         */
        public function is_expired($time = null)
        {
        }
        public function delete()
        {
        }
        /**
         * @param int $expiration Time until expiration in seconds.
         *
         * @return bool
         */
        public function save($expiration)
        {
        }
    }
}
namespace AC {
    interface ListScreenRepository
    {
        const KEY = 'key';
        /**
         * @param ListScreenId $id
         *
         * @return ListScreen|null
         */
        public function find(\AC\Type\ListScreenId $id);
        /**
         * @param ListScreenId $id
         *
         * @return bool
         */
        public function exists(\AC\Type\ListScreenId $id);
        /**
         * @param array $args
         *
         * @return ListScreenCollection
         */
        public function find_all(array $args = []);
    }
}
namespace ACP\ListScreenRepository {
    final class Collection implements \AC\ListScreenRepository
    {
        /**
         * @var ListScreenCollection
         */
        private $list_screens;
        public function __construct(\AC\ListScreenCollection $list_screens)
        {
        }
        /**
         * @param array $args
         *
         * @return ListScreenCollection
         */
        public function find_all(array $args = [])
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return ListScreen|null
         */
        public function find(\AC\Type\ListScreenId $id)
        {
        }
        public function exists(\AC\Type\ListScreenId $id)
        {
        }
    }
    final class FileFactory
    {
        /**
         * @var Encoder
         */
        private $encoder;
        /**
         * @var DecoderFactory
         */
        private $decoder_factory;
        public function __construct(\ACP\Storage\ListScreen\Encoder $encoder, \ACP\Storage\ListScreen\DecoderFactory $decoder_factory)
        {
        }
        /**
         * @param string    $type
         * @param Directory $directory
         *
         * @return File
         */
        public function create($type, \ACP\Storage\Directory $directory)
        {
        }
    }
}
namespace AC {
    interface ListScreenRepositoryWritable extends \AC\ListScreenRepository
    {
        /**
         * @param ListScreen $list_screen
         */
        public function save(\AC\ListScreen $list_screen);
        /**
         * @param ListScreen $list_screen
         */
        public function delete(\AC\ListScreen $list_screen);
    }
}
namespace AC\ListScreenRepository {
    interface SourceAware
    {
        /**
         * @param ListScreenId $id
         *
         * @return string
         */
        public function get_source(\AC\Type\ListScreenId $id);
        /**
         * @param ListScreenId $id
         *
         * @return bool
         */
        public function has_source(\AC\Type\ListScreenId $id);
    }
}
namespace AC {
    trait OpCacheInvalidateTrait
    {
        /**
         * Check if the file exists, if opcache is enabled and invalidates the cache
         *
         * @param string $script
         * @param bool   $force
         */
        protected function opcache_invalidate($script, $force = false)
        {
        }
    }
}
namespace ACP\ListScreenRepository {
    final class File implements \AC\ListScreenRepositoryWritable, \AC\ListScreenRepository\SourceAware
    {
        use \AC\OpCacheInvalidateTrait;
        /**
         * @var Directory
         */
        private $directory;
        /**
         * @var null
         */
        private $extension;
        /**
         * @var DecoderFactory
         */
        private $decoder_factory;
        /**
         * @var Unserializer|null
         */
        private $unserializer;
        /**
         * @var Encoder
         */
        private $encoder;
        /**
         * @var Serializer
         */
        private $serializer;
        /**
         * @param Directory         $directory
         * @param string            $extension
         * @param Encoder           $encoder
         * @param DecoderFactory    $decoder_factory
         * @param Serializer        $serializer
         * @param Unserializer|null $unserializer
         */
        public function __construct(\ACP\Storage\Directory $directory, $extension, \ACP\Storage\ListScreen\Encoder $encoder, \ACP\Storage\ListScreen\DecoderFactory $decoder_factory, \ACP\Storage\ListScreen\Serializer $serializer, \ACP\Storage\ListScreen\Unserializer $unserializer = null)
        {
        }
        private function validate()
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return ListScreen|null
         */
        public function find(\AC\Type\ListScreenId $id)
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return bool
         */
        public function exists(\AC\Type\ListScreenId $id)
        {
        }
        public function find_all(array $args = [])
        {
        }
        /**
         * @param ListScreen $list_screen
         */
        public function save(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param ListScreen $list_screen
         */
        public function delete(\AC\ListScreen $list_screen)
        {
        }
        /**
         * Get all files and do superficial checks on them
         * @return SplFileInfo[]
         */
        private function get_files()
        {
        }
        /**
         * @param string       $path
         * @param ListScreenId $id
         *
         * @return string
         */
        private function create_file_name($path, \AC\Type\ListScreenId $id)
        {
        }
        /**
         * @return Directory
         */
        public function get_directory()
        {
        }
        public function get_source(\AC\Type\ListScreenId $id)
        {
        }
        public function has_source(\AC\Type\ListScreenId $id)
        {
        }
    }
}
namespace ACP {
    class NativeTaxonomies implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param ListScreen $list_screen
         */
        public function register_columns(\AC\ListScreen $list_screen)
        {
        }
        /**
         * Register Taxonomy columns that are set by WordPress. These native columns are registered
         * by setting 'show_admin_column' to 'true' as an argument in register_taxonomy();
         * Only supports Post Types.
         *
         * @param ListScreen $list_screen
         *
         * @see register_taxonomy
         */
        private function register_column_native_taxonomies(\AC\ListScreen $list_screen)
        {
        }
    }
    class RequestAjaxHandlers
    {
        /**
         * @var RequestAjaxHandler[]
         */
        private $request_handlers;
        public function add($action, \ACP\RequestAjaxHandler $request_handler)
        {
        }
        /**
         * @return RequestAjaxHandler[]
         */
        public function all()
        {
        }
    }
    class RolesFactory
    {
        public function create(bool $allow_non_editable_roles = false) : array
        {
        }
    }
    interface RequestDispatcher
    {
        /**
         * @param Request $request
         * @param array   $args
         *
         * @return Response
         */
        public function dispatch(\ACP\API\Request $request, array $args = []);
    }
    class API implements \ACP\RequestDispatcher
    {
        /**
         * @var string
         */
        protected $url;
        /**
         * @var string
         */
        protected $proxy;
        /**
         * @var bool
         */
        protected $use_proxy = true;
        /**
         * @var array
         */
        private $meta = [];
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @param string $url
         *
         * @return $this
         */
        public function set_url($url)
        {
        }
        /**
         * @return string
         */
        public function get_proxy()
        {
        }
        /**
         * @param string $proxy
         *
         * @return $this
         */
        public function set_proxy($proxy)
        {
        }
        /**
         * @return bool
         */
        public function is_use_proxy()
        {
        }
        /**
         * @param bool $use_proxy
         *
         * @return $this
         */
        public function set_use_proxy($use_proxy)
        {
        }
        /**
         * @param array $meta
         *
         * @return $this
         */
        public function set_request_meta(array $meta)
        {
        }
        /**
         * Get the URL to call
         * @return string
         */
        private function get_request_url()
        {
        }
        private function check_response_for_error($data)
        {
        }
        public function dispatch(\ACP\API\Request $request, array $args = [])
        {
        }
    }
}
namespace ACP\Type\Activation {
    class ExpiryDate
    {
        /**
         * @var DateTime `null` is lifetime
         */
        private $expiry_date;
        /**
         * @var DateTime
         */
        private $current_date;
        public function __construct(\DateTime $expiry_date = null)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return DateTime
         */
        public function get_value()
        {
        }
        /**
         * @return bool
         */
        public function is_expired()
        {
        }
        /**
         * @return bool
         */
        public function is_lifetime()
        {
        }
        /**
         * @return int
         */
        public function get_expired_seconds()
        {
        }
        /**
         * @return int
         */
        public function get_remaining_seconds()
        {
        }
        /**
         * @return float
         */
        public function get_remaining_days()
        {
        }
        /**
         * @param int $seconds
         *
         * @return bool
         */
        public function is_expiring_within_seconds($seconds)
        {
        }
        /**
         * @return string
         */
        public function get_human_time_diff()
        {
        }
    }
    class Products
    {
        /**
         * @var array e.g. `ac-addon-acf`
         */
        private $product_slugs;
        public function __construct(array $product_slugs)
        {
        }
        /**
         * @return array
         */
        public function get_value()
        {
        }
    }
    final class RenewalMethod
    {
        const METHOD_AUTO = 'auto';
        const METHOD_MANUAL = 'manual';
        /**
         * @var string
         */
        private $method;
        public function __construct($method)
        {
        }
        /**
         * @return bool
         */
        public function is_auto_renewal()
        {
        }
        /**
         * @return bool
         */
        public function is_manual_renewal()
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @param string $method
         *
         * @return bool
         */
        public static function is_valid($method)
        {
        }
    }
}
namespace ACP\Type {
    interface ActivationToken
    {
        /**
         * @return string
         */
        public function get_token();
        /**
         * @return string
         */
        public function get_type();
    }
}
namespace ACP\Type\Activation {
    final class Key implements \ACP\Type\ActivationToken
    {
        /**
         * @var string
         */
        private $token;
        public function __construct($token)
        {
        }
        /**
         * @return string
         */
        public function get_token()
        {
        }
        public function get_type()
        {
        }
        /**
         * @param string $token
         *
         * @return bool
         */
        public static function is_valid($token)
        {
        }
    }
    final class Status
    {
        const STATUS_ACTIVE = 'active';
        const STATUS_CANCELLED = 'cancelled';
        const STATUS_EXPIRED = 'expired';
        /**
         * @var string
         */
        private $status;
        public function __construct($status)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return bool
         */
        public function is_active()
        {
        }
        /**
         * @return bool
         */
        public function is_cancelled()
        {
        }
        public static function is_valid($status)
        {
        }
    }
}
namespace ACP\Type {
    class SetupStep
    {
        /**
         * @var string
         */
        private $step;
        public function __construct($step)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
    }
    class ApiStatus
    {
        const STATUS_OK = 1;
        const STATUS_FAIL = 2;
        /**
         * @var string
         */
        private $status;
        public function __construct($status)
        {
        }
        /**
         * @param string $status
         *
         * @return bool
         */
        public static function is_valid($status)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @param ApiStatus $status
         *
         * @return bool
         */
        public function equals(\ACP\Type\ApiStatus $status)
        {
        }
    }
}
namespace AC\Type {
    interface Url
    {
        /**
         * @return string
         */
        public function get_url();
    }
}
namespace ACP\Type {
    class SiteUrl implements \AC\Type\Url
    {
        /**
         * @var string
         */
        private $url;
        public function __construct($url)
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
    }
    final class LicenseKey implements \ACP\Type\ActivationToken
    {
        const SOURCE_DATABASE = 'database';
        const SOURCE_CODE = 'code';
        /**
         * @var string
         */
        private $key;
        /**
         * @var string
         */
        private $source;
        public function __construct($key, $source = null)
        {
        }
        public function get_token()
        {
        }
        public function get_type()
        {
        }
        public function get_source()
        {
        }
        public function equals(\ACP\Type\LicenseKey $key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public static function is_valid($key)
        {
        }
    }
}
namespace AC\Type {
    interface QueryAware extends \AC\Type\Url
    {
        /**
         * @param string $key
         * @param string $value
         *
         * @return void
         */
        public function add_one($key, $value);
        /**
         * @param array $params
         *
         * @return void
         */
        public function add(array $params = []);
        /**
         * @param string $key
         *
         * @return void
         */
        public function remove($key);
    }
    trait QueryAwareTrait
    {
        /**
         * @var string
         */
        protected $url;
        public function set_url(string $url) : void
        {
        }
        public function add_one($key, $value)
        {
        }
        public function add(array $params = [])
        {
        }
        public function remove($key)
        {
        }
        public function get_url()
        {
        }
    }
}
namespace ACP\Type\Url {
    class Changelog implements \AC\Type\QueryAware
    {
        use \AC\Type\QueryAwareTrait;
        public function __construct($network, $plugin_name)
        {
        }
    }
}
namespace ACP\Expression {
    interface Specification
    {
        public function is_satisfied_by(string $value) : bool;
        public function and_specification(\ACP\Expression\Specification $specification) : self;
        public function or_specification(\ACP\Expression\Specification $specification) : self;
        public function not() : self;
    }
    trait SpecificationTrait
    {
        public function and_specification(\ACP\Expression\Specification $specification) : \ACP\Expression\Specification
        {
        }
        public function or_specification(\ACP\Expression\Specification $specification) : \ACP\Expression\Specification
        {
        }
        public function not() : \ACP\Expression\Specification
        {
        }
    }
    trait OperatorTrait
    {
        /**
         * @var string
         */
        protected $operator;
        protected abstract function get_operators() : array;
        protected function validate_operator() : void
        {
        }
    }
    trait ComparisonTrait
    {
        use \ACP\Expression\OperatorTrait;
        protected function get_operators() : array
        {
        }
        protected function compare(string $operator, $fact, $value) : bool
        {
        }
    }
    class FloatComparisonSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        use \ACP\Expression\ComparisonTrait;
        protected $fact;
        public function __construct(float $fact, string $operator)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    abstract class DateSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        public const MYSQL_DATE = 'Y-m-d';
        public const MYSQL_DATE_TIME = 'Y-m-d H:i:s';
        private $format;
        private $timezone;
        public function __construct(string $format = null, \DateTimeZone $time_zone = null)
        {
        }
        /**
         * @throws InvalidDateFormatException
         */
        protected function create_date_from_value(string $value) : \DateTime
        {
        }
        protected function get_format() : string
        {
        }
        protected function get_current_date() : \DateTime
        {
        }
    }
    class IntegerComparisonSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        use \ACP\Expression\ComparisonTrait;
        protected $fact;
        public function __construct(int $fact, string $operator)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    final class AndSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        private $left;
        private $right;
        public function __construct(\ACP\Expression\Specification $left, \ACP\Expression\Specification $right)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    final class OrSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        private $left;
        private $right;
        public function __construct(\ACP\Expression\Specification $left, \ACP\Expression\Specification $right)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    class StartsWithSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        private $fact;
        public function __construct(string $fact)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    interface DateOperators
    {
        public const DATE_IS = 'date_is';
        public const DATE_IS_BEFORE = 'date_is_before';
        public const DATE_IS_AFTER = 'date_is_after';
        public const DATE_BETWEEN = 'date_between';
        public const FUTURE = 'future';
        public const PAST = 'past';
        public const TODAY = 'today';
    }
    interface StringOperators
    {
        public const CONTAINS = 'contains';
        public const NOT_CONTAINS = 'not_contains';
        public const STARTS_WITH = 'starts_with';
        public const ENDS_WITH = 'ends_with';
    }
    class ContainsSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        private $fact;
        public function __construct(string $fact)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    final class DateComparisonSpecification extends \ACP\Expression\DateSpecification
    {
        use \ACP\Expression\SpecificationTrait;
        use \ACP\Expression\ComparisonTrait;
        /**
         * @var DateTime
         */
        protected $fact;
        /**
         * @throws Exception\InvalidDateFormatException
         */
        public function __construct(string $fact, string $operator, string $format = null, \DateTimeZone $time_zone = null)
        {
        }
        private function map_operator($operator)
        {
        }
        /**
         * @throws Exception\InvalidDateFormatException
         */
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    interface ComparisonOperators
    {
        public const GREATER_THAN = 'greater_than';
        public const GREATER_THAN_EQUAL = 'greater_than_equal';
        public const LESS_THAN = 'less_than';
        public const LESS_THAN_EQUAL = 'less_than_equal';
        public const EQUAL = 'equal';
        public const NOT_EQUAL = 'not_equal';
        public const BETWEEN = 'between';
        public const NOT_BETWEEN = 'not_between';
    }
}
namespace ACP\Expression\Exception {
    final class InvalidDateFormatException extends \RuntimeException
    {
        public function __construct(string $date, string $format, $code = 0, \Throwable $previous = null)
        {
        }
    }
    final class OperatorNotFoundException extends \InvalidArgumentException
    {
        public function __construct(string $operator, $code = 0, \Throwable $previous = null)
        {
        }
    }
}
namespace ACP\Expression {
    class EndsWithSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        private $fact;
        public function __construct(string $fact)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    final class NotSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        private $specification;
        public function __construct(\ACP\Expression\Specification $specification)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    final class DateRelativeDeductedSpecification extends \ACP\Expression\DateSpecification
    {
        use \ACP\Expression\SpecificationTrait;
        use \ACP\Expression\OperatorTrait;
        public function __construct(string $operator, string $format = null, \DateTimeZone $time_zone = null)
        {
        }
        protected function get_operators() : array
        {
        }
        /**
         * @throws Exception\InvalidDateFormatException
         */
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
    class ComparisonSpecification implements \ACP\Expression\Specification
    {
        use \ACP\Expression\SpecificationTrait;
        use \ACP\Expression\ComparisonTrait;
        protected $fact;
        public function __construct(string $fact, string $operator)
        {
        }
        public function is_satisfied_by(string $value) : bool
        {
        }
    }
}
namespace AC\Settings {
    interface FormatValue
    {
        /**
         * @param mixed $value
         * @param mixed $original_value
         *
         * @return mixed
         */
        public function format($value, $original_value);
    }
}
namespace ACP\Settings\Column {
    class SerializedArray extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $array_keys;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function set_array_keys($keys)
        {
        }
        public function get_array_keys()
        {
        }
        public function get_keys()
        {
        }
        private function get_expanded_level()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings\Column {
    class CustomFieldType extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'field_type';
        const TYPE_DEFAULT = '';
        const TYPE_ARRAY = 'array';
        const TYPE_BOOLEAN = 'checkmark';
        const TYPE_COLOR = 'color';
        const TYPE_COUNT = 'count';
        const TYPE_DATE = 'date';
        const TYPE_IMAGE = 'image';
        const TYPE_MEDIA = 'library_id';
        const TYPE_NON_EMPTY = 'has_content';
        const TYPE_NUMERIC = 'numeric';
        const TYPE_POST = 'title_by_id';
        const TYPE_TEXT = 'excerpt';
        const TYPE_URL = 'link';
        const TYPE_USER = 'user_by_id';
        /**
         * @var string
         */
        private $field_type;
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        private function get_description_object_ids($input)
        {
        }
        public function get_description()
        {
        }
        /**
         * Get possible field types
         * @return array
         */
        protected function get_field_type_options()
        {
        }
        /**
         * @return array
         */
        private function get_grouped_options()
        {
        }
        /**
         * @param string|array $string
         *
         * @return array
         */
        private function get_values_from_array_or_string($string)
        {
        }
        /**
         * @param string|array $string
         *
         * @return array
         */
        private function get_ids_from_array_or_string($string)
        {
        }
        public function format($value, $original_value)
        {
        }
        /**
         * @return string
         */
        public function get_field_type()
        {
        }
        /**
         * @param string $field_type
         *
         * @return bool
         */
        public function set_field_type($field_type)
        {
        }
    }
}
namespace ACP\Settings\Column {
    class CustomFieldType extends \AC\Settings\Column\CustomFieldType
    {
        public function get_dependent_settings()
        {
        }
        public function format($value, $original_value)
        {
        }
        /**
         * Get possible field types
         * @return array
         */
        protected function get_field_type_options()
        {
        }
    }
    class Term extends \AC\Settings\Column
    {
        const NAME = 'term_id';
        /**
         * @var int
         */
        private $term_id;
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(\AC\Column $column, $taxonomy)
        {
        }
        /**
         * @return string
         */
        protected function get_taxonomy()
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_term_id()
        {
        }
        /**
         * @param int $term_id
         *
         * @return bool
         */
        public function set_term_id($term_id)
        {
        }
        private function get_term_for_post_type()
        {
        }
    }
}
namespace ACP\Settings\Column\Post {
    class TaxonomyTerm extends \AC\Settings\Column
    {
        const NAME = 'taxonomy';
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var string
         */
        private $post_type;
        public function __construct(\AC\Column $column, $post_type)
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @return string
         */
        protected function get_post_type()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        public function get_first_taxonomy()
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return bool
         */
        public function set_taxonomy($taxonomy)
        {
        }
        public function get_term_id()
        {
        }
    }
}
namespace ACP\Settings\Column {
    class FeaturedImageDisplay extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $featured_image_display;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_featured_image_display()
        {
        }
        /**
         * @param $featured_image_display
         *
         * @return bool
         */
        public function set_featured_image_display($featured_image_display)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class Shortcodes extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $shortcode;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return array
         */
        private function get_shortcode_options()
        {
        }
        /**
         * @return string
         */
        public function get_shortcode()
        {
        }
        /**
         * @param string $shortcode
         */
        public function set_shortcode($shortcode)
        {
        }
    }
    class Gutenberg extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $gutenberg_display;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function get_gutenberg_display()
        {
        }
        public function set_gutenberg_display($flex_display)
        {
        }
    }
    class LinkCount extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $link_count_type;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function set_link_count_type($type)
        {
        }
        public function get_link_count_type()
        {
        }
        private function trim_tooltip_url($url)
        {
        }
        private function remove_home_url_prefix($url)
        {
        }
        private function format_tooltip(array $urls)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings\Column {
    class CustomField extends \AC\Settings\Column
    {
        const NAME = 'custom_field';
        /**
         * @var string
         */
        private $field;
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        protected function set_name()
        {
        }
        private function use_text_field()
        {
        }
        /**
         * @return AC\Form\Element\Input
         */
        private function get_settings_field_text()
        {
        }
        /**
         * @return AC\Form\Element\Select
         */
        private function get_settings_field_select()
        {
        }
        /**
         * @return AC\Form\Element
         */
        protected function get_setting_field()
        {
        }
        public function get_dependent_settings()
        {
        }
        protected function get_meta_type()
        {
        }
        /**
         * @return string Post type
         */
        protected function get_post_type()
        {
        }
        /**
         * @return string
         */
        public function get_field()
        {
        }
        /**
         * @param string $field
         *
         * @return self
         */
        public function set_field($field)
        {
        }
    }
}
namespace ACP\Settings\Column {
    class CustomField extends \AC\Settings\Column\CustomField
    {
        public function get_dependent_settings()
        {
        }
    }
    class UserCustomField extends \ACP\Settings\Column\CustomField
    {
        protected function get_post_type()
        {
        }
        protected function get_meta_type()
        {
        }
    }
}
namespace AC\Settings\Column {
    class Label extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $label;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         */
        public function set_label($label)
        {
        }
    }
}
namespace ACP\Settings\Column {
    class Label extends \AC\Settings\Column\Label
    {
        public function create_view()
        {
        }
    }
    /**
     * @since 4.5.6
     */
    class TaxonomyPostType extends \AC\Settings\Column
    {
        /** @var string */
        private $post_type;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy_post_type()
        {
        }
        public function set_taxonomy_post_type($post_type)
        {
        }
        /**
         * @param $taxonomy
         *
         * @return array
         */
        private function get_post_types_for_taxonomy($taxonomy)
        {
        }
    }
}
namespace AC\Settings\Column {
    class User extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'user';
        const PROPERTY_DISPLAY_NAME = 'display_name';
        const PROPERTY_EMAIL = 'user_email';
        const PROPERTY_FULL_NAME = 'first_last_name';
        const PROPERTY_FIRST_NAME = 'first_name';
        const PROPERTY_ID = 'ID';
        const PROPERTY_LAST_NAME = 'last_name';
        const PROPERTY_LOGIN = 'user_login';
        const PROPERTY_NICENAME = 'user_nicename';
        const PROPERTY_URL = 'user_url';
        const PROPERTY_NICKNAME = 'nickname';
        const PROPERTY_ROLES = 'roles';
        /**
         * @var string
         */
        private $display_author_as;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @param int $user_id
         *
         * @return false|string
         */
        public function get_user_name($user_id)
        {
        }
        /**
         * @return array
         */
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_display_author_as()
        {
        }
        /**
         * @param string $display_author_as
         *
         * @return bool
         */
        public function set_display_author_as($display_author_as)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace ACP\Settings\Column {
    class User extends \AC\Settings\Column\User
    {
        const PROPERTY_META = 'custom_field';
        const PROPERTY_GRAVATAR = 'gravatar';
        protected function get_display_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function format($user_id, $original_value)
        {
        }
    }
    class FeaturedImage extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $featured_image_display;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @param string|int|false $value
         * @param mixed            $original_value
         *
         * @return string|int|false
         */
        public function format($value, $original_value)
        {
        }
        private function get_attachment_size($attachment_id)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_featured_image_display()
        {
        }
        /**
         * @param string $featured_image_display
         */
        public function set_featured_image_display($featured_image_display)
        {
        }
    }
}
namespace AC\Settings\Column {
    class Image extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $image_size;
        /**
         * @var integer
         */
        private $image_size_w;
        /**
         * @var integer
         */
        private $image_size_h;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return array
         * @since 1.0
         */
        private function get_grouped_image_sizes()
        {
        }
        /**
         * @return string
         */
        public function get_image_size()
        {
        }
        /**
         * @param string $image_size
         *
         * @return bool
         */
        public function set_image_size($image_size)
        {
        }
        /**
         * @return int
         */
        public function get_image_size_w()
        {
        }
        /**
         * @param int $image_size_w
         *
         * @return bool
         */
        public function set_image_size_w($image_size_w)
        {
        }
        /**
         * @return int
         */
        public function get_image_size_h()
        {
        }
        /**
         * @param int $image_size_h
         *
         * @return bool
         */
        public function set_image_size_h($image_size_h)
        {
        }
        protected function get_size_args()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace ACP\Settings\Column {
    class Gravatar extends \AC\Settings\Column\Image
    {
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings\Column {
    class CommentCount extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'comment_count';
        const STATUS_ALL = 'all';
        const STATUS_APPROVED = 'approved';
        const STATUS_PENDING = 'moderated';
        const STATUS_SPAM = 'spam';
        const STATUS_TRASH = 'trash';
        const STATUS_TOTAL_COMMENTS = 'total_comments';
        /**
         * @var string
         */
        private $comment_status;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return array
         */
        protected function get_comment_statuses()
        {
        }
        /**
         * @return int
         */
        public function get_comment_status()
        {
        }
        /**
         * @param string $comment_status
         *
         * @return bool
         */
        public function set_comment_status($comment_status)
        {
        }
        /**
         * @param int $post_id
         *
         * @return int
         */
        public function get_comment_count($post_id)
        {
        }
        /**
         * @param int $post_id
         * @param int $original_value
         *
         * @return false|string
         */
        public function format($post_id, $original_value)
        {
        }
    }
}
namespace ACP\Settings\Column\NetworkSite {
    class CommentCount extends \AC\Settings\Column\CommentCount
    {
        /**
         * @param int $blog_id
         * @param int $original_value
         *
         * @return string
         */
        public function format($blog_id, $original_value)
        {
        }
        /**
         * @param      $blog_id
         * @param null $comment_status
         *
         * @return string
         */
        private function get_comments_link($blog_id, $comment_status = null)
        {
        }
        /**
         * Display a comment count bubble
         *
         * @param int    $blog_id
         * @param object $comments
         *
         * @return string
         * @see WP_List_Table::comments_bubble()
         */
        protected function comments_bubble($blog_id, $comments)
        {
        }
    }
    class PostCount extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        private $post_type;
        private $post_status;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @param string $field
         * @param int    $expire
         *
         * @return array|bool|mixed
         */
        private function get_cached_distinct_db_values($field, $expire = 15)
        {
        }
        /**
         * @param $field
         *
         * @return array
         */
        private function get_distinct_db_values($field)
        {
        }
        /**
         * @return array
         */
        private function get_post_types()
        {
        }
        /**
         * @return array
         */
        private function get_post_statuses()
        {
        }
        /**
         * Excludes 'auto-draft' and 'inherit'
         * Or use 'show_in_admin_all_list' to also exclude 'trash'
         * @return array Post statuses
         */
        private function get_exludeded_post_statuses()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        public function set_post_type($post_type)
        {
        }
        /**
         * @return string
         */
        public function get_post_status()
        {
        }
        /**
         * @param string $post_status
         *
         * @return bool
         */
        public function set_post_status($post_status)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings\Column {
    abstract class Meta extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $field;
        protected abstract function get_meta_keys();
        protected function define_options()
        {
        }
        /**
         * @return Select
         */
        protected function get_setting_field()
        {
        }
        /**
         * @return array|false
         */
        protected function get_cached_keys()
        {
        }
        /**
         * @return string
         */
        protected function get_cache_key()
        {
        }
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        protected function get_cache_group()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_field()
        {
        }
        /**
         * @param string $field
         *
         * @return bool
         */
        public function set_field($field)
        {
        }
        private function get_cache()
        {
        }
        /**
         * @param array $data
         * @param int   $expire Seconds
         */
        private function set_cache($data, $expire = 15)
        {
        }
        /**
         * @return array
         */
        protected function get_meta_groups()
        {
        }
        /**
         * @param array $keys
         *
         * @return array
         */
        private function group_keys($keys)
        {
        }
    }
}
namespace ACP\Settings\Column\NetworkSite {
    class Options extends \AC\Settings\Column\Meta
    {
        public function __construct(\ACP\Column\NetworkSite\Options $column)
        {
        }
        public function create_view()
        {
        }
        protected function get_setting_field()
        {
        }
        public function get_cache_group()
        {
        }
        public function get_meta_keys()
        {
        }
    }
    class Theme extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        private $theme_status;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        private function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_theme_status()
        {
        }
        /**
         * @param string $theme_status
         *
         * @return bool
         */
        public function set_theme_status($theme_status)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class Plugins extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        private $plugin_display;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_plugin_display()
        {
        }
        /**
         * @param string $plugin_display
         *
         * @return bool
         */
        public function set_plugin_display($plugin_display)
        {
        }
        public function format($plugins, $blog_id)
        {
        }
    }
    class PluginsInclude extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var bool
         */
        private $include_network;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_include_network()
        {
        }
        /**
         * @param string $include_network
         *
         * @return bool
         */
        public function set_include_network($include_network)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace ACP\Settings\ListScreen\HideOnScreen {
    class SubMenu extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct($label)
        {
        }
    }
}
namespace ACP\Settings\ListScreen\HideOnScreen\SubMenu {
    class CommentStatus extends \ACP\Settings\ListScreen\HideOnScreen\SubMenu
    {
        public function __construct()
        {
        }
    }
    class PostStatus extends \ACP\Settings\ListScreen\HideOnScreen\SubMenu
    {
        public function __construct()
        {
        }
    }
    class Roles extends \ACP\Settings\ListScreen\HideOnScreen\SubMenu
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Settings\ListScreen\HideOnScreen {
    class ColumnResize extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class FilterPostDate extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_post_date';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterCommentType extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_comment_type';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterMediaItem extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_media_type';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class BulkActions extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class Search extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class ColumnOrder extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class RowActions extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class Filters extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filters';
        public function __construct()
        {
        }
    }
    class FilterCategory extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_category';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterPostFormat extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_post_format';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
}
namespace ACP\Settings\ListScreen {
    interface HideOnScreenFactory
    {
        public function create() : \ACP\Settings\ListScreen\HideOnScreen;
    }
    class HideOnScreenCollection
    {
        const SORT_PRIORITY = 1;
        const SORT_LABEL = 2;
        /**
         * @var HideOnScreen[]
         */
        private $items;
        public function __construct(array $items = [])
        {
        }
        public function add(\ACP\Settings\ListScreen\HideOnScreen $hide_on_screen, $priority = 10)
        {
        }
        public function remove(\ACP\Settings\ListScreen\HideOnScreen $hide_on_screen)
        {
        }
        public function all($sort_by = null)
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        private function sort_by_priority(array $items)
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        private function sort_by_label(array $items)
        {
        }
    }
}
namespace ACP\Sorting {
    interface Sortable
    {
        /**
         * @return AbstractModel
         */
        public function sorting();
    }
}
namespace ACP\Export {
    interface Exportable
    {
        /**
         * @return ACP\Export\Model|false
         */
        public function export();
    }
}
namespace ACP\Search {
    interface Searchable
    {
        /**
         * Return the search comparison for this column
         * @return Comparison|false
         */
        public function search();
    }
}
namespace AC {
    /**
     * @since 3.0
     */
    class Column
    {
        /**
         * @var string Unique Name
         */
        private $name;
        /**
         * @var string Unique type
         */
        private $type;
        /**
         * @var string Label which describes this column
         */
        private $label;
        /**
         * @var string Group name
         */
        private $group;
        /**
         * @var bool An original column will use the already defined column value and label.
         */
        private $original = false;
        /**
         * @var Settings\Column[]
         */
        private $settings;
        /**
         * @var Settings\FormatValue[]|Settings\FormatCollection[]
         */
        private $formatters;
        /**
         * @var ListScreen
         */
        protected $list_screen;
        /**
         * The options managed by the settings
         * @var array
         */
        protected $options = [];
        /**
         * Get the unique name of the column
         * @return string Column name
         * @since 2.3.4
         */
        public function get_name()
        {
        }
        /**
         * @param string $name
         *
         * @return $this
         */
        public function set_name($name)
        {
        }
        /**
         * Get the type of the column.
         * @return string Type
         * @since 2.3.4
         */
        public function get_type()
        {
        }
        /**
         * @param string $type
         *
         * @return $this
         */
        public function set_type($type)
        {
        }
        /**
         * @return ListScreen
         */
        public function get_list_screen()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return $this
         */
        public function set_list_screen(\AC\ListScreen $list_screen)
        {
        }
        /**
         * Get the type of the column.
         * @return string Label of column's type
         * @since 2.4.9
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         *
         * @return $this
         */
        public function set_label($label)
        {
        }
        /**
         * @return string Group
         * @since 3.0
         */
        public function get_group()
        {
        }
        /**
         * @param string $group Group label
         *
         * @return $this
         */
        public function set_group($group)
        {
        }
        /**
         * @return string Post type
         */
        public function get_post_type()
        {
        }
        /**
         * @return string Taxonomy
         */
        public function get_taxonomy()
        {
        }
        /**
         * Return true when a default column has been replaced by a custom column.
         * An original column will then use the original label and value.
         * @since 3.0
         */
        public function is_original()
        {
        }
        /**
         * @param bool $boolean
         *
         * @return $this
         */
        public function set_original($boolean)
        {
        }
        /**
         * Overwrite this function in child class.
         * Determine whether this column type should be available
         * @return bool Whether the column type should be available
         * @since 2.2
         */
        public function is_valid()
        {
        }
        /**
         * @param Settings\Column $setting
         *
         * @return $this
         */
        public function add_setting(\AC\Settings\Column $setting)
        {
        }
        /**
         * @param string $id Settings ID
         */
        public function remove_setting($id)
        {
        }
        /**
         * @param string $id
         *
         * @return Settings\Column|Settings\Column\User|Settings\Column\Separator|Settings\Column\Label
         */
        public function get_setting($id)
        {
        }
        public function get_formatters()
        {
        }
        /**
         * @return string
         * @since 3.2.5
         */
        public function get_custom_label()
        {
        }
        /**
         * @return Collection
         */
        public function get_settings()
        {
        }
        /**
         * Register settings
         */
        protected function register_settings()
        {
        }
        /**
         * @param string $key
         *
         * @return null|string|bool
         */
        public function get_option($key)
        {
        }
        /**
         * @param array $options
         *
         * @return $this
         */
        public function set_options(array $options)
        {
        }
        /**
         * Get the current options
         * @return array
         */
        public function get_options()
        {
        }
        /**
         * Enqueue CSS + JavaScript on the admin listings screen!
         * This action is called in the admin_head action on the listings screen where your column values are displayed.
         * Use this action to add CSS + JavaScript
         * @since 2.3.4
         */
        public function scripts()
        {
        }
        /**
         * Apply available formatters (recursive) on the value
         *
         * @param mixed $value
         * @param mixed $original_value
         * @param int   $current Current index of self::$formatters
         *
         * @return mixed
         */
        public function get_formatted_value($value, $original_value = null, $current = 0)
        {
        }
        /**
         * Get the raw, underlying value for the column
         * Not suitable for direct display, use get_value() for that
         *
         * @param int $id
         *
         * @return string|array
         * @since 2.0.3
         */
        public function get_raw_value($id)
        {
        }
        /**
         * Display value
         *
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
        /**
         * @return string
         */
        public function get_separator()
        {
        }
        /**
         * @return string
         */
        public function get_empty_char()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Author extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class Author extends \AC\Column\Post\Author implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACP\Filtering {
    interface Filterable
    {
        /**
         * Return the filtering model for this column
         * @return Model
         */
        public function filtering();
    }
}
namespace ACP\ConditionalFormat {
    interface Formattable
    {
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig;
    }
}
namespace AC\Column\Post {
    /**
     * Column displaying the number of comments for an item, displaying either the total
     * amount of comments, or the amount per status (e.g. "Approved", "Pending").
     * @since 2.0
     */
    class CommentCount extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function is_valid()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class CommentCount extends \AC\Column\Post\CommentCount implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Formats extends \AC\Column
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function get_taxonomy()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 2.0
     */
    class Formats extends \AC\Column\Post\Formats implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.4
     */
    class DatePublished extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 2.4
     */
    class DatePublished extends \AC\Column\Post\DatePublished implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class HasTerm extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        /**
         * @return bool True when post type has associated taxonomies
         */
        public function is_valid()
        {
        }
        /**
         * @return Settings\Column\Post\TaxonomyTerm|null
         */
        public function get_taxonomy_setting()
        {
        }
        protected function register_settings()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Slug extends \AC\Column
    {
        public function __construct()
        {
        }
        function get_value($post_id)
        {
        }
        function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    trait ConditionalFormatTrait
    {
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACP\Column\Post {
    class Slug extends \AC\Column\Post\Slug implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column {
    /**
     * Column displaying the menus the item is used in. Supported by all object types that
     * can be referenced in menus (i.e. posts).
     * @since 2.2.5
     */
    abstract class Menu extends \AC\Column
    {
        public function __construct()
        {
        }
        /**
         * @param $object_id
         *
         * @return array
         * @since 2.2.5
         */
        public function get_raw_value($object_id)
        {
        }
        /**
         * @return string
         */
        public abstract function get_object_type();
        /**
         * @return string
         */
        public abstract function get_item_type();
        /**
         * @param int $object_id
         *
         * @return array
         */
        public function get_menu_item_ids($object_id)
        {
        }
        /**
         * @param int   $object_id
         * @param array $args
         *
         * @return array
         */
        public function get_menus($object_id, array $args = [])
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace AC\Column\Post {
    class Menu extends \AC\Column\Menu
    {
        /**
         * @return string
         */
        public function get_object_type()
        {
        }
        /**
         * @return string
         */
        public function get_item_type()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Menu extends \AC\Column\Post\Menu implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function editing()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
    }
}
namespace AC\Column {
    /**
     * Taxonomy column, displaying terms from a taxonomy for any object type (i.e. posts)
     * supporting WordPress' native way of handling terms.
     * @since 2.0
     */
    class Taxonomy extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_value($post_id)
        {
        }
        /**
         * @return string
         */
        public function get_separator()
        {
        }
        /**
         * @return int
         */
        private function get_items_limit()
        {
        }
        /**
         * @param int $post_id
         *
         * @return array|false
         */
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Taxonomy extends \AC\Column\Taxonomy
    {
        /**
         * @return bool True when post type has associated taxonomies
         */
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Taxonomy extends \AC\Column\Post\Taxonomy implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        // Overwrite the Edit setting with a new dependent setting
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class ID extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    trait IntegerFormattableTrait
    {
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACP\Column\Post {
    class ID extends \AC\Column\Post\ID implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Modified extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Modified extends \AC\Column\Post\Modified implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Display used shortcodes
     * @since 2.3.5
     */
    class Shortcodes extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    class Shortcodes extends \AC\Column\Post\Shortcodes implements \ACP\Sorting\Sortable, \ACP\Export\Exportable
    {
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class PingStatus extends \AC\Column
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 2.0
     */
    class PingStatus extends \AC\Column\Post\PingStatus implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column {
    interface AjaxValue
    {
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_ajax_value($id);
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0.8
     */
    class Images extends \AC\Column implements \ACP\Sorting\Sortable, \AC\Column\AjaxValue, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        /**
         * Returns the file size and dimensions of the image with a link to the edit media page.
         *
         * @param int $id
         *
         * @return string
         */
        public function get_ajax_value($id)
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        public function get_raw_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        private function get_image_urls($id)
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class WordCount extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    class WordCount extends \AC\Column\Post\WordCount implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Column displaying information about the author of a post, such as the
     * author's display name, user ID and email address.
     * @since 2.0
     */
    class AuthorName extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        private function get_post_author($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class AuthorName extends \AC\Column\Post\AuthorName implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function register_settings()
        {
        }
        /**
         * @return AC\Settings\Column\User
         */
        private function get_user_setting()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Date extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Date extends \AC\Column\Post\Date implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Sticky extends \AC\Column
    {
        private $stickies;
        public function __construct()
        {
        }
        function is_valid()
        {
        }
        function get_value($post_id)
        {
        }
        function get_raw_value($post_id)
        {
        }
        // Helpers
        private function is_sticky($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class Sticky extends \AC\Column\Post\Sticky implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.4
     */
    class Content extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Content extends \AC\Column\Post\Content implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        private function get_inline_editable_type()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class PostParent extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    class PostParent extends \AC\Column\Post\PostParent implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.3.3
     */
    class EstimatedReadingTime extends \AC\Column
    {
        public function __construct()
        {
        }
        /**
         * Estimate read time in seconds
         *
         * @param $post_id
         *
         * @return string Raw Post Content
         * @since 2.3.3
         */
        public function get_raw_value($post_id)
        {
        }
        public function is_valid()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class EstimateReadingTime extends \AC\Column\Post\EstimatedReadingTime implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.2.4
     */
    class TitleRaw extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class TitleRaw extends \AC\Column\Post\TitleRaw implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class LinkCount extends \AC\Column implements \ACP\Export\Exportable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        private function get_internal_domains()
        {
        }
        public function register_settings()
        {
        }
        public function is_valid()
        {
        }
        public function export()
        {
        }
        private function get_link_count_type()
        {
        }
        public function sorting()
        {
        }
    }
    class PostVisibility extends \AC\Column implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function search()
        {
        }
    }
    class ChildPages extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        protected function register_settings()
        {
        }
        public function is_valid()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    class PasswordProtected extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    class PasswordProtected extends \AC\Column\Post\PasswordProtected implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable
    {
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 5.5.2
     */
    class PostType extends \AC\Column implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        private function get_post_type_label($post_type)
        {
        }
        public function editing()
        {
        }
    }
}
namespace AC\Column {
    abstract class Meta extends \AC\Column
    {
        /**
         * Return the meta_key of this column
         * @return string
         */
        public abstract function get_meta_key();
        /**
         * Is data stored serialized?
         * @var bool
         */
        private $serialized = false;
        /**
         * @return bool
         */
        public function is_serialized()
        {
        }
        /**
         * @param bool $serialized
         */
        public function set_serialized($serialized)
        {
        }
        /**
         * @param $id
         *
         * @return bool|mixed
         * @see   Column::get_raw_value()
         * @since 2.0.3
         */
        public function get_raw_value($id)
        {
        }
        /**
         * Retrieve metadata object type (e.g., comment, post, or user)
         * @return string
         * @since 3.0
         */
        public function get_meta_type()
        {
        }
        /**
         * Get meta value
         *
         * @param int    $id
         * @param string $meta_key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_meta_value($id, $meta_key, $single = true)
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class PageTemplate extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        function get_value($post_id)
        {
        }
        function is_valid()
        {
        }
        /**
         * @return array
         */
        public function get_page_templates()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 2.0
     */
    class PageTemplate extends \AC\Column\Post\PageTemplate implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Column displaying information about the author of a post, such as the
     * author's display name, user ID and email address.
     * @since 2.0
     */
    class LastModifiedAuthor extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        /**
         * @return string
         */
        protected function get_user_setting_display()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 2.0
     */
    class LastModifiedAuthor extends \AC\Column\Post\LastModifiedAuthor implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 4.2
     */
    class LatestComment extends \AC\Column implements \ACP\Export\Exportable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string|null
         */
        private function get_comment_date_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        private function get_comment_display_as()
        {
        }
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Column displaying path (without URL, e.g. "/my-category/sample-post/") to the front-end location of this item.
     * @since 2.2.3
     */
    class Path extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    class Path extends \AC\Column\Post\Path implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Title extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Title extends \AC\Column\Post\Title implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Depth of the current page (number of ancestors + 1)
     * @since 2.3.4
     */
    class Depth extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Depth extends \AC\Column\Post\Depth implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
    }
    /**
     * @since 4.0.12
     */
    class Revisions extends \AC\Column implements \AC\Column\AjaxValue
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function get_ajax_value($post_id)
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Categories extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        public function get_taxonomy()
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class Categories extends \AC\Column\Post\Categories implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        // Overwrite the Edit setting with a new dependent setting
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Tags extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        public function get_taxonomy()
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class Tags extends \AC\Column\Post\Tags implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class GutenbergBlocks extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param array $blocks
         *
         * @return string
         */
        private function get_structure_value($blocks)
        {
        }
        private function get_block_structure($blocks, $values = [], $prefix = '')
        {
        }
        /**
         * @param array $blocks
         *
         * @return string
         */
        private function get_count_value($blocks)
        {
        }
        private function count_blocks($blocks, $grouped_count = [])
        {
        }
        public function register_settings()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Comments extends \AC\Column
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Comments extends \AC\Column\Post\Comments implements \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Excerpt extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Excerpt extends \AC\Column\Post\Excerpt implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 4.2
     */
    class Ancestors extends \AC\Column implements \ACP\Export\Exportable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function get_separator()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array|false
         */
        public function get_ancestor_ids($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function is_valid()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Column displaying whether an item is open for comments, i.e. whether users can
     * comment on this item.
     * @since 2.0
     */
    class CommentStatus extends \AC\Column
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * Column displaying whether an item is open for comments, i.e. whether users can
     * comment on this item.
     * @since 2.0
     */
    class CommentStatus extends \AC\Column\Post\CommentStatus implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * Column displaying full item permalink (including URL).
     * @since 2.0
     */
    class Permalink extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Post {
    class Permalink extends \AC\Column\Post\Permalink implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class BeforeMoreTag extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class BeforeMoreTag extends \AC\Column\Post\BeforeMoreTag implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Order extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
    }
}
namespace ACP\Column\Post {
    class Order extends \AC\Column\Post\Order implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class FeaturedImage extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * Returns Attachment ID
         *
         * @param int $post_id
         *
         * @return int|false
         */
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 2.0
     */
    class FeaturedImage extends \AC\Column\Post\FeaturedImage implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function register_settings()
        {
        }
        /**
         * @return bool|string
         */
        private function get_display_value()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 2.0
     */
    class Attachment extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        /**
         * @param $post_id
         *
         * @return int[] Attachment ID's
         */
        private function get_attachment_ids($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    /**
     * @since 4.0
     */
    class Attachment extends \AC\Column\Post\Attachment implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Post {
    class Status extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Post {
    class Status extends \AC\Column\Post\Status implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Shortcode extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @return string|null
         */
        private function get_shortcode()
        {
        }
        /**
         * @param string $content
         * @param string $shortcode
         *
         * @return array
         */
        private function get_rendered_shortcodes($content, $shortcode)
        {
        }
        protected function register_settings()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACP\Column {
    class NativeTaxonomy extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        // Overwrite the Edit setting with a new dependent setting
        public function register_settings()
        {
        }
        public function get_taxonomy()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @deprecated 4.2.4
     */
    class Menu extends \AC\Column
    {
        // Deprecated. Should be removed at some point.
    }
}
namespace AC\Column\User {
    /**
     * @since 3.0
     */
    class Posts extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.0
     */
    class Posts extends \AC\Column\User\Posts implements \ACP\Sorting\Sortable, \ACP\Export\Exportable
    {
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class LastName extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class LastName extends \AC\Column\User\LastName implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class CommentCount extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function get_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 2.0
     */
    class CommentCount extends \AC\Column\User\CommentCount implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class Nickname extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class Nickname extends \AC\Column\User\Nickname implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class PostCount extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        protected function get_selected_post_type()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        /**
         * @return array
         */
        public function get_selected_post_status()
        {
        }
        protected function register_settings()
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.0
     */
    class PostCount extends \AC\Column\User\PostCount implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
        /**
         * @return array
         */
        private function get_post_types()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class ID extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.0
     */
    class ID extends \AC\Column\User\ID implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 3.0
     */
    class ShowToolbar extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        private function show_admin_bar_front($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.0
     */
    class ShowToolbar extends \AC\Column\User\ShowToolbar implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 4.2
     */
    class Language extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @return array
         */
        public function get_language_options()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class FirstName extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 2.0
     */
    class FirstName extends \AC\Column\User\FirstName implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class Registered extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\User {
    class Registered extends \AC\Column\User\Registered implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 3.0
     */
    class Name extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.0.7
     */
    class Name extends \AC\Column\User\Name implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class DisplayName extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class DisplayName extends \AC\Column\User\DisplayName implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
    }
}
namespace AC\Column\User {
    class RichEditing extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        private function has_rich_editing($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class RichEditing extends \AC\Column\User\RichEditing implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 4.2.6
     */
    class LastPost extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @return string
         */
        protected function get_related_post_type()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        /**
         * @return array
         */
        public function get_related_post_stati()
        {
        }
        protected function register_settings()
        {
        }
    }
}
namespace ACP\Column\User {
    class LastPost extends \AC\Column\User\LastPost implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\User {
    class FullName extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class FullName extends \AC\Column\User\FullName implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 3.0
     */
    class Email extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\User {
    class Email extends \AC\Column\User\Email implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    class Login extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class Login extends \AC\Column\User\Login implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class Description extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 2.0
     */
    class Description extends \AC\Column\User\Description implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    class Nicename extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    class Nicename extends \AC\Column\User\Nicename implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class UserPosts extends \AC\Column implements \ACP\Sorting\Sortable, \AC\Column\AjaxValue, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_ajax_value($user_id)
        {
        }
        private function get_selected_post_type()
        {
        }
        /**
         * @param int $user_id
         *
         * @return array
         */
        public function get_raw_value($user_id)
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
        /**
         * @return array
         */
        private function get_post_types()
        {
        }
        protected function register_settings()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 2.0
     */
    class Url extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 2.0
     */
    class Url extends \AC\Column\User\Url implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 4.2.6
     */
    class FirstPost extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        /**
         * @return array
         */
        public function get_related_post_stati()
        {
        }
        /**
         * @return string
         */
        protected function get_related_post_type()
        {
        }
        protected function register_settings()
        {
        }
    }
}
namespace ACP\Column\User {
    class FirstPost extends \AC\Column\User\FirstPost implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 3.0
     */
    class Username extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.1
     */
    class Username extends \AC\Column\User\Username implements \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\User {
    /**
     * @since 3.0
     */
    class Role extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\User {
    /**
     * @since 4.0
     */
    class Role extends \AC\Column\User\Role implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class Roles extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($user_id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Gravatar extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\CustomField {
    class ConditionalFormatableFactory
    {
        public static function create($field_type) : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class EditingModelFactory
    {
        public static function unsupported_field_types()
        {
        }
        /**
         * @param string             $field_type
         * @param Editing\Storage    $storage
         * @param Column\CustomField $column
         *
         * @return Service|false
         */
        public static function create($field_type, \ACP\Editing\Storage $storage, \ACP\Column\CustomField $column)
        {
        }
        private static function get_serialized_keys(\ACP\Column\CustomField $column)
        {
        }
        private static function get_editable_type(\ACP\Column\CustomField $column)
        {
        }
    }
    class ExportModelFactory
    {
        /**
         * @param string             $type
         * @param Column\CustomField $column
         *
         * @return Model
         */
        public static function create($type, \AC\Column\CustomField $column)
        {
        }
    }
    class FilteringModelFactory
    {
        /**
         * @param string             $type
         * @param Column\CustomField $column
         *
         * @return Model
         */
        public static function create($type, \AC\Column\CustomField $column)
        {
        }
    }
    class SearchComparisonFactory
    {
        /**
         * @param string $type
         * @param string $meta_key
         * @param string $meta_type
         * @param array  $args
         *
         * @return Meta|false
         */
        public static function create($type, $meta_key, $meta_type, array $args = [])
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 3.0
     */
    class Author extends \AC\Column\Post\Author
    {
    }
}
namespace ACP\Column\Media {
    /**
     * @since 4.0
     */
    class Author extends \AC\Column\Media\Author implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    class UsedAsFeaturedImage extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class Caption extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class Caption extends \AC\Column\Media\Caption implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class MimeType extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class MimeType extends \AC\Column\Media\MimeType implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Menu extends \ACP\Column\Post\Menu
    {
    }
    class Taxonomy extends \ACP\Column\Post\Taxonomy
    {
    }
}
namespace AC\Column\Media {
    abstract class FileMeta extends \AC\Column\Meta
    {
        public function get_meta_key()
        {
        }
        /**
         * @return Settings\Column\FileMeta
         */
        protected function get_media_setting()
        {
        }
        /**
         * @return array
         */
        public function get_sub_keys()
        {
        }
        protected function get_metadata_value(array $data, array $keys)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    class FileMetaAudio extends \AC\Column\Media\FileMeta
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    class FileMetaAudio extends \AC\Column\Media\FileMetaAudio implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class ID extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class ID extends \AC\Column\Media\ID implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    abstract class Meta extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 4.3.2
     */
    class Album extends \AC\Column\Media\Meta
    {
        public function __construct()
        {
        }
        protected function get_sub_key()
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class Album extends \AC\Column\Media\Album implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 4.0
     */
    class AuthorName extends \ACP\Column\Post\AuthorName
    {
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class FileName extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class FileName extends \AC\Column\Media\FileName implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 3.0
     */
    class Date extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    class Date extends \AC\Column\Media\Date implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class FileSize extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    /**
     * @since 4.0
     */
    class FileSize extends \AC\Column\Media\FileSize implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 4.0.8
     */
    abstract class MetaValue extends \AC\Column\Media\Meta
    {
        protected abstract function get_option_name();
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 2.0
     */
    class AvailableSizes extends \AC\Column\Media\MetaValue
    {
        public function __construct()
        {
        }
        protected function get_option_name()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param array $image_sizes
         *
         * @return array
         */
        public function get_available_sizes($image_sizes)
        {
        }
        /**
         * @param array $image_sizes
         *
         * @return array
         */
        public function get_missing_sizes($image_sizes)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    class AvailableSizes extends \AC\Column\Media\AvailableSizes implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Media {
    class FileMetaVideo extends \AC\Column\Media\FileMeta
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    class FileMetaVideo extends \AC\Column\Media\FileMetaVideo implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class ExifData extends \AC\Column\Media\MetaValue
    {
        public function __construct()
        {
        }
        protected function get_option_name()
        {
        }
        public function is_valid()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    class ExifData extends \AC\Column\Media\ExifData implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 4.3.8
     */
    class PostType extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class Dimensions extends \AC\Column\Media\Meta
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    class Dimensions extends \AC\Column\Media\Dimensions implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 3.0
     */
    class MediaParent extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Media {
    /**
     * @since 4.0
     */
    class MediaParent extends \AC\Column\Media\MediaParent implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class Height extends \AC\Column\Media\MetaValue
    {
        public function __construct()
        {
        }
        protected function get_option_name()
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * @since 2.0
     */
    class Width extends \AC\Column\Media\Height
    {
        public function __construct()
        {
        }
        protected function get_option_name()
        {
        }
    }
}
namespace ACP\Column\Media {
    /**
     * @since 4.0
     */
    class Width extends \AC\Column\Media\Width implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 2.0
     */
    class AlternateText extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class AlternateText extends \AC\Column\Media\AlternateText implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 3.0
     */
    class Title extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\Media {
    class Title extends \AC\Column\Media\Title implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 3.0
     */
    class Comments extends \AC\Column
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Media {
    /**
     * @since 4.0
     */
    class Comments extends \AC\Column\Media\Comments implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Media {
    class Description extends \AC\Column\Post\Content
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\Media {
    class Description extends \AC\Column\Media\Description implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        private function get_inline_editable_type()
        {
        }
    }
    class Permalink extends \ACP\Column\Post\Permalink
    {
    }
    /**
     * @since 4.0
     */
    class Height extends \AC\Column\Media\Height implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Media {
    /**
     * @since 4.3.2
     */
    class Artist extends \AC\Column\Media\Meta
    {
        public function __construct()
        {
        }
        protected function get_sub_key()
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Column\Media {
    class Artist extends \AC\Column\Media\Artist implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Author extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Author extends \AC\Column\Comment\Author implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class HasReplies extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class ReplyTo extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 2.0
     */
    class ReplyTo extends \AC\Column\Comment\ReplyTo implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Agent extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 2.0
     */
    class Agent extends \AC\Column\Comment\Agent implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    class AuthorIP extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class AuthorIP extends \AC\Column\Comment\AuthorIP implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class ID extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 2.0
     */
    class ID extends \AC\Column\Comment\ID implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class WordCount extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class WordCount extends \AC\Column\Comment\WordCount implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function sorting()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.4.2
     */
    class AuthorName extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class AuthorName extends \AC\Column\Comment\AuthorName implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Date extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Date extends \AC\Column\Comment\Date implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.4.7
     */
    class Post extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.1
     */
    class Post extends \AC\Column\Comment\Post implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 4.2
     */
    class PostType extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.4.2
     */
    class Type extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Type extends \AC\Column\Comment\Type implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Approved extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Approved extends \AC\Column\Comment\Approved implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class AuthorAvatar extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.1
     */
    class AuthorAvatar extends \AC\Column\Comment\AuthorAvatar implements \ACP\Export\Exportable
    {
        public function export()
        {
        }
    }
}
namespace AC\Column\Comment {
    class DateGmt extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 2.0
     */
    class DateGmt extends \AC\Column\Comment\DateGmt implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Comment extends \AC\Column
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Comment extends \AC\Column\Comment\Comment implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.4.2
     */
    class User extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $comment_id Comment ID
         *
         * @return int User ID
         */
        public function get_raw_value($comment_id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class User extends \AC\Column\Comment\User implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Excerpt extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Excerpt extends \AC\Column\Comment\Excerpt implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class AuthorUrl extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class AuthorUrl extends \AC\Column\Comment\AuthorUrl implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 3.0
     */
    class Response extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        /**
         * Response Column should not be displayed when viewing "Comments On".
         * The list table does this by checking if $post_id is set globally. We mimic this functionality here.
         * @see WP_Comments_List_Table::get_columns() for the WP implementation
         */
        public function is_valid()
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class Response extends \AC\Column\Comment\Response implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class Status extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_statuses()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    class Status extends \AC\Column\Comment\Status implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function editing()
        {
        }
    }
    class IsReply extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
    }
}
namespace AC\Column\Comment {
    /**
     * @since 2.0
     */
    class AuthorEmail extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACP\Column\Comment {
    /**
     * @since 4.0
     */
    class AuthorEmail extends \AC\Column\Comment\AuthorEmail implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACP\Column\Taxonomy {
    /**
     * @since 4.1
     */
    class Posts extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 4.5.6
     */
    class CountForPostType extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        /**
         * Get the correct param name based on the taxonomy
         *
         * @param string $taxonomy
         *
         * @return string
         */
        public function get_taxonomy_param($taxonomy)
        {
        }
        /**
         * @return string
         */
        private function get_post_type_setting()
        {
        }
    }
    /**
     * @since 4.0
     */
    class Slug extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    class Menu extends \AC\Column\Menu implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function get_item_type()
        {
        }
        public function get_object_type()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 2.0.0
     */
    class ID extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($term_id)
        {
        }
        public function get_raw_value($term_id)
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 4.0
     */
    class Count extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 4.0
     */
    class Name extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 2.0.0
     */
    class Excerpt extends \AC\Column implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($term_id)
        {
        }
        public function editing()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 4.0
     */
    class Description extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    class CustomDescription extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    class TaxonomyParent extends \AC\Column implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($term_id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function is_valid()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 4.1
     */
    class Links extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACP\Column {
    /**
     * @since 4.0
     */
    abstract class Meta extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable
    {
        /**
         * @return Sorting\AbstractModel
         */
        public function sorting()
        {
        }
        public function editing()
        {
        }
        /**
         * @return Filtering\Model\Meta|Filtering\Model\Disabled
         */
        public function filtering()
        {
        }
    }
}
namespace AC\Column {
    /**
     * Custom field column, displaying the contents of meta fields.
     * Suited for all list screens supporting WordPress' default way of handling meta data.
     * Supports different types of meta fields, including dates, serialized data, linked content,
     * and boolean values.
     * @since 1.0
     */
    class CustomField extends \AC\Column\Meta
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        private function is_acp_active() : bool
        {
        }
        public function register_settings()
        {
        }
        /**
         * @return string e.g. excerpt|color|date|numeric|image|has_content|link|checkmark|library_id|title_by_id|user_by_id|array|count
         * @see Settings\Column\CustomFieldType
         */
        public function get_field_type()
        {
        }
        /**
         * @since 3.2.1
         */
        public function get_field()
        {
        }
    }
}
namespace ACP\Column {
    class CustomField extends \AC\Column\CustomField implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function export()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace AC\Column {
    /**
     * Base class for columns containing action links for items.
     * @since 2.2.6
     */
    class Actions extends \AC\Column
    {
        /**
         * @since 2.2.6
         */
        public function __construct()
        {
        }
        /**
         * @param $id
         *
         * @return string
         * @since 2.2.6
         */
        public function get_value($id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Column {
    /**
     * @since 4.1
     */
    class Actions extends \AC\Column\Actions implements \ACP\Export\Exportable
    {
        public function export()
        {
        }
    }
}
namespace ACP\Column\NetworkSite {
    abstract class Property extends \AC\Column
    {
        public abstract function get_site_property();
        public function get_value($id)
        {
        }
    }
    class SiteID extends \ACP\Column\NetworkSite\Property implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_site_property()
        {
        }
    }
    class CommentCount extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($blog_id)
        {
        }
        public function register_settings()
        {
        }
    }
    class PostCount extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_raw_value($blog_id)
        {
        }
        public function register_settings()
        {
        }
    }
    class Registered extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
    abstract class Option extends \AC\Column implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        /**
         * @return string Site option name
         */
        public abstract function get_option_name();
        public function get_value($blog_id)
        {
        }
        public function get_site_option($blog_id)
        {
        }
        public function get_raw_value($blog_id)
        {
        }
        public function editing()
        {
        }
    }
    class Name extends \ACP\Column\NetworkSite\Option
    {
        public function __construct()
        {
        }
        public function get_option_name()
        {
        }
    }
    class BlogID extends \ACP\Column\NetworkSite\Property implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_site_property()
        {
        }
    }
    class Options extends \ACP\Column\NetworkSite\Option
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_option_name()
        {
        }
        public function register_settings()
        {
        }
    }
    class Path extends \ACP\Column\NetworkSite\Property implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_site_property()
        {
        }
    }
    class UploadSpace extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function upload_restrictions()
        {
        }
        private function trim_zeros($number)
        {
        }
    }
    class Theme extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($blog_id)
        {
        }
        public function register_settings()
        {
        }
    }
    class Plugins extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_option_name()
        {
        }
        public function get_raw_value($blog_id)
        {
        }
        public function register_settings()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class Domain extends \ACP\Column\NetworkSite\Property implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_site_property()
        {
        }
    }
    class Status extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function get_statuses()
        {
        }
    }
    class LastUpdated extends \AC\Column
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP {
    class PluginRepository
    {
        /**
         * @var string
         */
        private $basename;
        /**
         * @var IntegrationRepository
         */
        private $integration_repository;
        public function __construct($basename, \AC\IntegrationRepository $integration_repository)
        {
        }
        /**
         * @return Plugins
         */
        public function find_all()
        {
        }
    }
    final class TermQueryInformation implements \AC\Registerable
    {
        const KEY = 'ac_is_main_term_query';
        public function register()
        {
        }
        public function check_if_main_query(\WP_Term_Query $query)
        {
        }
        /**
         * @param WP_Term_Query $query
         */
        private function set_main_query(\WP_Term_Query $query)
        {
        }
        /**
         * @param WP_Term_Query $query
         *
         * @return bool
         */
        public function is_main_query(\WP_Term_Query $query)
        {
        }
        public function is_main_query_by_args($args)
        {
        }
    }
}
namespace ACP\Updates {
    class PluginDataUpdater
    {
        /**
         * @var API
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var Storage\PluginsData
         */
        private $storage;
        public function __construct(\ACP\API $api, \ACP\Type\SiteUrl $site_url, \ACP\Storage\PluginsData $storage)
        {
        }
        public function update(\ACP\Type\ActivationToken $token = null)
        {
        }
    }
    /**
     * Hooks into the WordPress update process for plugins
     */
    class UpdatePlugin implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $base_name;
        /**
         * @var string
         */
        private $version;
        /**
         * @var KeyValuePair
         */
        private $storage;
        public function __construct($base_name, $version, \AC\Storage\KeyValuePair $storage)
        {
        }
        public function register()
        {
        }
        public function check_update($transient)
        {
        }
    }
    class PeriodicUpdateCheck implements \AC\Registerable
    {
        /**
         * @var Asset\Location\Absolute
         */
        private $location;
        /**
         * @var UpdateCheckTransient
         */
        private $cache;
        public function __construct(\AC\Asset\Location\Absolute $location, \ACP\Transient\UpdateCheckTransient $cache)
        {
        }
        public function register()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * Show changelog when "click view details".
     */
    class ViewPluginDetails implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $slug;
        /**
         * @var RequestDispatcher
         */
        private $api;
        public function __construct($slug, \ACP\RequestDispatcher $api)
        {
        }
        public function register()
        {
        }
        /**
         * @param mixed  $result
         * @param string $action
         * @param object $args
         *
         * @return object|WP_Error
         */
        public function get_plugin_information($result, $action, $args)
        {
        }
    }
}
namespace ACP\Check {
    class Renewal implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $plugin_basename;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var array
         */
        private $intervals = [1, 7, 21];
        /**
         * @var SiteUrl
         */
        private $site_url;
        public function __construct($plugin_basename, \ACP\ActivationTokenFactory $activation_token_factory, \ACP\Access\ActivationStorage $activation_storage, \ACP\Type\SiteUrl $site_url)
        {
        }
        public function register()
        {
        }
        /**
         * @throws Exception
         */
        public function ajax_dismiss_notice()
        {
        }
        /**
         * @return Ajax\Handler
         */
        protected function get_ajax_handler()
        {
        }
        /**
         * @param int $interval
         *
         * @return Storage\Timestamp
         * @throws Exception
         */
        protected function get_dismiss_option($interval)
        {
        }
        private function get_activation()
        {
        }
        private function is_activation_up_for_renewal(\ACP\Entity\Activation $activation)
        {
        }
        /**
         * @param Screen $screen
         *
         * @throws Exception
         */
        public function display(\AC\Screen $screen)
        {
        }
        /**
         * @param int $interval
         *
         * @return Ajax\Handler
         */
        private function get_ajax_handler_interval($interval)
        {
        }
        /**
         * Get the current interval compared to the license state. Returns false when no interval matches
         *
         * @param int $remaining_days
         *
         * @return false|int
         */
        protected function get_current_interval($remaining_days)
        {
        }
        /**
         * @param DateTime $date
         *
         * @return string
         */
        private function localize_date(\DateTime $date)
        {
        }
        /**
         * @param ExpiryDate $expiry_date
         *
         * @return string
         */
        protected function get_message(\ACP\Type\Activation\ExpiryDate $expiry_date)
        {
        }
    }
    class Expired implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $plugin_basename;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var SiteUrl
         */
        private $site_url;
        public function __construct($plugin_basename, \ACP\ActivationTokenFactory $activation_token_factory, \ACP\Access\ActivationStorage $activation_storage, \ACP\Type\SiteUrl $site_url)
        {
        }
        public function register()
        {
        }
        private function is_activation_expired(\ACP\Entity\Activation $activation)
        {
        }
        private function get_activation()
        {
        }
        /**
         * @param Screen $screen
         *
         * @throws Exception
         */
        public function display(\AC\Screen $screen)
        {
        }
        private function register_notice(\AC\Message $notice)
        {
        }
        /**
         * @param DateTime $expiration_date
         *
         * @return string
         */
        private function get_message(\DateTime $expiration_date)
        {
        }
        /**
         * @return Ajax\Handler
         */
        protected function get_ajax_handler()
        {
        }
        /**
         * @return Storage\Timestamp
         */
        protected function get_dismiss_option()
        {
        }
        public function ajax_dismiss_notice()
        {
        }
    }
    class Activation implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $plugin_basename;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        /**
         * @var bool
         */
        private $is_network_active;
        public function __construct($plugin_basename, \ACP\ActivationTokenFactory $activation_token_factory, \ACP\Access\ActivationStorage $activation_storage, \ACP\Access\PermissionsStorage $permission_storage, $is_network_active)
        {
        }
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        private function get_ajax_handler()
        {
        }
        /**
         * @param Screen $screen
         */
        public function register_notice(\AC\Screen $screen)
        {
        }
        /**
         * @return bool
         */
        private function show_message()
        {
        }
        /**
         * @return Url
         */
        private function get_license_page_url()
        {
        }
        /**
         * @return Url
         */
        private function get_account_url()
        {
        }
        /**
         * @return string
         */
        private function get_message()
        {
        }
        /**
         * @return Storage\Timestamp
         */
        private function get_dismiss_option()
        {
        }
        public function ajax_dismiss_notice()
        {
        }
    }
    class LockedSettings implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $plugin_basename;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        /**
         * @var bool
         */
        private $is_network_active;
        public function __construct($plugin_basename, \ACP\Access\PermissionsStorage $permission_storage, $is_network_active)
        {
        }
        public function register()
        {
        }
        /**
         * @return Url
         */
        private function get_license_page_url()
        {
        }
        private function get_message()
        {
        }
        private function get_inline_plugin_message()
        {
        }
        private function missing_usage_permission()
        {
        }
        private function get_account_url()
        {
        }
        private function get_message_account_page()
        {
        }
        private function get_license_page_message()
        {
        }
        public function register_notice(\AC\Screen $screen)
        {
        }
    }
    class Beta implements \AC\Registerable
    {
        /**
         * @var Feedback
         */
        private $feedback;
        public function __construct(\ACP\Admin\Feedback $feedback)
        {
        }
        public function register()
        {
        }
        public function render()
        {
        }
        public function scripts()
        {
        }
        public function register_notice(\AC\Screen $screen)
        {
        }
        /**
         * @return string
         */
        protected function get_feedback_link()
        {
        }
        /**
         * @return string
         */
        protected function get_message()
        {
        }
    }
}
namespace ACP\Search {
    class TableScreenOptions
    {
        const INPUT_NAME = 'acp_enable_smart_filtering_button';
        /**
         * @var Enqueueable[] $assets
         */
        private $assets;
        /**
         * @var Preferences\SmartFiltering
         */
        private $preferences;
        /**
         * @var Settings\HideOnScreen\SmartFilters
         */
        private $hide_smart_filters;
        public function __construct(array $assets, \ACP\Search\Preferences\SmartFiltering $preferences, \ACP\Search\Settings\HideOnScreen\SmartFilters $hide_smart_filters)
        {
        }
        public function register()
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return bool
         */
        private function is_active(\AC\ListScreen $list_screen)
        {
        }
        public function update_smart_filtering_preference()
        {
        }
        /**
         * @param AC\Table\Screen $table
         */
        public function register_screen_option($table)
        {
        }
        public function scripts()
        {
        }
    }
    final class Addon implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Location
         */
        private $location;
        /**
         * @var SegmentRepository
         */
        private $segment_repository;
        /**
         * @var Preferences\SmartFiltering
         */
        private $table_preference;
        /**
         * @var Settings\HideOnScreen\SmartFilters
         */
        private $hide_smart_filters;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location $location, \ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return bool
         */
        private function is_active(\AC\ListScreen $list_screen)
        {
        }
        public function register()
        {
        }
        private function get_column_settings()
        {
        }
        private function get_table_screen_options()
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
        public function comparison_request()
        {
        }
        public function table_screen_request(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return array
         */
        private function get_filters(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\Column $column
         *
         * @return string
         */
        private function get_filter_label(\AC\Column $column)
        {
        }
        /**
         * Allow dashicons as label, all the rest is parsed by 'strip_tags'
         *
         * @param string $label
         *
         * @return string
         */
        private function sanitize_label($label)
        {
        }
    }
}
namespace ACP\Search\RequestHandler {
    /**
     * Handles rules request. Converts the request to a QueryBinding and registers it with WordPress.
     */
    class Rules
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACP {
    abstract class Controller
    {
        /**
         * @var Request
         */
        protected $request;
        public function __construct(\AC\Request $request)
        {
        }
        /**
         * @param string $action
         */
        public function dispatch($action)
        {
        }
    }
}
namespace ACP\Search\RequestHandler {
    class Comparison extends \ACP\Controller
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var AC\ListScreen;
         */
        protected $list_screen;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Request $request)
        {
        }
        public function get_options_action()
        {
        }
    }
}
namespace ACP\Search\Preferences {
    class SmartFiltering extends \AC\Preferences\Site
    {
        public function __construct()
        {
        }
        public function is_active(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP\Search {
    class Labels extends \AC\ArrayIterator
    {
        public function __construct(array $labels = [])
        {
        }
    }
}
namespace ACP\Search\Labels {
    class Date extends \ACP\Search\Labels
    {
        public function __construct(array $labels = [])
        {
        }
    }
}
namespace ACP\Search\Settings\HideOnScreen {
    class SavedFilters extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class SmartFilters extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_smart_filters';
        public function __construct()
        {
        }
    }
}
namespace ACP\Search\Settings {
    class Column extends \AC\Settings\Column implements \AC\Settings\Header
    {
        /**
         * @var string
         */
        private $search;
        /**
         * @return array
         */
        protected function define_options()
        {
        }
        public function create_header_view()
        {
        }
        private function get_instructions()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return bool True when search is selected
         */
        public function is_active()
        {
        }
        /**
         * @return string
         */
        public function get_search()
        {
        }
        /**
         * @param string $search
         *
         * @return $this
         */
        public function set_search($search)
        {
        }
    }
}
namespace AC {
    interface Middleware
    {
        public function handle(\AC\Request $request);
    }
}
namespace ACP\Search\Middleware {
    class Segment implements \AC\Middleware
    {
        /**
         * @var PreferredSegment
         */
        private $preferred_segment;
        public function __construct(\ACP\Bookmark\Setting\PreferredSegment $preferred_segment)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    abstract class Mapping
    {
        const RESPONSE = 'response';
        const REQUEST = 'request';
        /**
         * @var string
         */
        protected $direction;
        /**
         * @var array
         */
        protected $properties;
        /**
         * @param string|null $direction
         */
        public function __construct($direction = null)
        {
        }
        /**
         * @param array $array
         *
         * @return array
         */
        protected function apply_direction(array $array)
        {
        }
        /**
         * Return array of properties with the response side first
         * @return array
         */
        protected abstract function get_properties();
        /**
         * Get a property
         *
         * @param string $key
         *
         * @return false|string
         */
        public function __get($key)
        {
        }
    }
}
namespace ACP\Search\Middleware\Mapping {
    class Rule extends \ACP\Search\Middleware\Mapping
    {
        protected function get_properties()
        {
        }
    }
    class Operator extends \ACP\Search\Middleware\Mapping
    {
        protected function get_properties()
        {
        }
    }
    class ValueType extends \ACP\Search\Middleware\Mapping
    {
        protected function get_properties()
        {
        }
    }
}
namespace ACP\Search\Middleware {
    class Request implements \AC\Middleware
    {
        /**
         * @param AC\Request $request
         */
        public function handle(\AC\Request $request)
        {
        }
    }
    class Rules
    {
        /**
         * @param string $rules_raw
         *
         * @return array
         */
        public function __invoke(string $rules_raw)
        {
        }
    }
}
namespace ACP\Search {
    abstract class Filter
    {
        /**
         * @var string
         */
        protected $name;
        /** @var Comparison */
        protected $comparison;
        /** @var string */
        protected $label;
        /**
         * @param string     $name
         * @param Comparison $comparison
         * @param string     $label
         */
        public function __construct($name, \ACP\Search\Comparison $comparison, $label)
        {
        }
        public abstract function __invoke();
    }
}
namespace ACP\Search\Middleware {
    class Filter extends \ACP\Search\Filter
    {
        private function get_labels()
        {
        }
        private function get_value_type()
        {
        }
        public function __invoke()
        {
        }
    }
}
namespace ACP\Search\Asset\Script {
    final class Table extends \AC\Asset\Script
    {
        /**
         * @var array
         */
        protected $filters;
        /**
         * @var Request
         */
        protected $request;
        /**
         * @var Segment|null
         */
        protected $segment;
        public function __construct($handle, \AC\Asset\Location $location, array $filters, \AC\Request $request, \ACP\Bookmark\Entity\Segment $segment = null)
        {
        }
        /**
         * @return int|null
         */
        private function get_current_segment()
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\Search {
    abstract class TableScreen implements \AC\Registerable
    {
        /**
         * @var AC\ListScreen
         */
        protected $list_screen;
        /**
         * @var Enqueueable[]
         */
        protected $assets;
        public function __construct(\AC\ListScreen $list_screen, array $assets)
        {
        }
        public function register()
        {
        }
        public function scripts()
        {
        }
        /**
         * Display the markup on the current list screen
         */
        public function filters_markup()
        {
        }
        /**
         * @return bool
         */
        private function is_segment_hidden()
        {
        }
        public function hide_segments()
        {
        }
        public function add_segment_modal()
        {
        }
    }
}
namespace ACP\Search\TableScreen {
    class Taxonomy extends \ACP\Search\TableScreen
    {
        public function register()
        {
        }
    }
    class MSUser extends \ACP\Search\TableScreen
    {
        public function register()
        {
        }
        public function filters_markup()
        {
        }
    }
    class Post extends \ACP\Search\TableScreen
    {
        public function register()
        {
        }
    }
    class Comment extends \ACP\Search\TableScreen
    {
        public function register()
        {
        }
    }
    class User extends \ACP\Search\TableScreen
    {
        public function register()
        {
        }
        public function filters_markup()
        {
        }
    }
}
namespace ACP\Search {
    abstract class Query implements \AC\Registerable
    {
        /**
         * @var Bindings[]
         */
        protected $bindings;
        /**
         * @param Bindings[] $bindings
         */
        public function __construct(array $bindings)
        {
        }
        /**
         * @throws LogicException
         */
        private function validate_bindings()
        {
        }
        /**
         * @return array
         */
        protected function get_meta_query()
        {
        }
    }
}
namespace ACP\Search\Helper {
    class UserValueFactory
    {
        public function create_current_user($type = \ACP\Search\Value::INT)
        {
        }
    }
    class DateValueFactory
    {
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $format;
        /**
         * @param string $type
         * @param string $format
         */
        public function __construct($type, $format = null)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        protected function get_format_from_type($type)
        {
        }
        /**
         * @param DateTime $start
         * @param DateTime $end
         *
         * @return Value
         */
        public function create_range(\DateTime $start, \DateTime $end)
        {
        }
        /**
         * @return Value
         * @throws Exception
         */
        public function create_range_today()
        {
        }
        /**
         * @param DateTime $day
         *
         * @return Value
         */
        public function create_range_single_day(\DateTime $day)
        {
        }
        /**
         * @param int $days
         *
         * @return Value
         */
        public function create_less_than_days_ago($days)
        {
        }
        /**
         * @param DateTime $day
         *
         * @return Value
         */
        public function create_single_day(\DateTime $day)
        {
        }
        /**
         * @return Value
         * @throws Exception
         */
        public function create_today()
        {
        }
    }
}
namespace ACP\Search\Helper\TaxQuery {
    final class ComparisonFactory
    {
        /**
         * @param string $taxonomy
         * @param string $operator
         * @param Value  $terms
         * @param string $field
         *
         * @return Comparison
         */
        public static function create($taxonomy, $operator, \ACP\Search\Value $terms, $field = 'term_id')
        {
        }
    }
    class Comparison
    {
        /**
         * @var string
         */
        protected $taxonomy;
        /**
         * @var string
         */
        protected $operator;
        /**
         * @var string
         */
        private $field;
        /**
         * @var Value
         */
        private $terms;
        /**
         * @param string $taxonomy
         * @param string $operator
         * @param Value  $terms
         * @param string $field
         */
        public function __construct($taxonomy, $operator, \ACP\Search\Value $terms, $field = 'term_id')
        {
        }
        /**
         * @return array
         */
        public function get_expression()
        {
        }
    }
}
namespace ACP\Search\Helper\Sql {
    final class ComparisonFactory
    {
        /**
         * @param string $column
         * @param string $operator
         * @param Value  $value
         *
         * @return Comparison
         */
        public static function create($column, $operator, \ACP\Search\Value $value)
        {
        }
    }
    class Statement
    {
        /**
         * @var Value[]
         */
        protected $values = [];
        /**
         * @var string
         */
        protected $statement;
        /**
         * @var string
         */
        protected $value_type;
        /**
         * @param string $statement
         */
        public function __construct($statement)
        {
        }
        /**
         * @param Value $value
         *
         * @return $this
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
        /**
         * Prepare string for safe usage
         * @return string
         */
        public function prepare()
        {
        }
    }
}
namespace ACP\Search\Helper\Sql\Comparison {
    interface Negatable
    {
        /**
         * @return bool
         */
        public function is_negated();
    }
}
namespace ACP\Search\Helper\Sql {
    class Comparison extends \ACP\Search\Helper\Sql\Statement
    {
        /**
         * @var string
         */
        protected $column;
        /**
         * @var string
         */
        protected $operator;
        /**
         * @param string $column
         * @param string $operator
         * @param Value  $value
         */
        public function __construct($column, $operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @return string
         */
        protected function get_statement()
        {
        }
        /**
         * @return string
         */
        public function __invoke()
        {
        }
    }
}
namespace ACP\Search\Helper\Sql\Comparison {
    class In extends \ACP\Search\Helper\Sql\Comparison implements \ACP\Search\Helper\Sql\Comparison\Negatable
    {
        /**
         * @param string $column
         * @param Value  $value
         */
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        public function get_statement()
        {
        }
        public function is_negated()
        {
        }
        public function bind_value(\ACP\Search\Value $value)
        {
        }
        public function prepare()
        {
        }
    }
    class NotIn extends \ACP\Search\Helper\Sql\Comparison\In
    {
        public function is_negated()
        {
        }
    }
    class CurrentUser extends \ACP\Search\Helper\Sql\Comparison
    {
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        protected function get_statement()
        {
        }
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class Between extends \ACP\Search\Helper\Sql\Comparison
    {
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        protected function get_statement()
        {
        }
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class WithinDays extends \ACP\Search\Helper\Sql\Comparison\Between
    {
        /**
         * @param Value $value
         *
         * @return Comparison
         * @throws Exception
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class Like extends \ACP\Search\Helper\Sql\Comparison implements \ACP\Search\Helper\Sql\Comparison\Negatable
    {
        /**
         * @param string $column
         * @param Value  $value
         */
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        public function is_negated()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        protected function escape_value($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        protected function value_begins_with($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        protected function value_ends_with($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        protected function value_contains($value)
        {
        }
    }
    class BeginsWith extends \ACP\Search\Helper\Sql\Comparison\Like
    {
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class LtDaysAgo extends \ACP\Search\Helper\Sql\Comparison\Between
    {
        /**
         * @param Value $value
         *
         * @return Comparison
         * @throws Exception
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class Today extends \ACP\Search\Helper\Sql\Comparison\Between
    {
        /**
         * @param Value $value
         *
         * @return Between
         * @throws Exception
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class Past extends \ACP\Search\Helper\Sql\Comparison
    {
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        protected function get_statement()
        {
        }
        /**
         * @param Value $value
         *
         * @return Comparison
         * @throws Exception
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class GtDaysAgo extends \ACP\Search\Helper\Sql\Comparison
    {
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        /**
         * @param Value $value
         *
         * @return Comparison
         * @throws Exception
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class Future extends \ACP\Search\Helper\Sql\Comparison
    {
        public function __construct($column, \ACP\Search\Value $value)
        {
        }
        protected function get_statement()
        {
        }
        /**
         * @param Value $value
         *
         * @return Comparison
         * @throws Exception
         */
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class Contains extends \ACP\Search\Helper\Sql\Comparison\Like
    {
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class NotContains extends \ACP\Search\Helper\Sql\Comparison\Contains
    {
        public function is_negated()
        {
        }
    }
    class EndsWith extends \ACP\Search\Helper\Sql\Comparison\Like
    {
        public function bind_value(\ACP\Search\Value $value)
        {
        }
    }
    class NotLike extends \ACP\Search\Helper\Sql\Comparison\Like
    {
        public function is_negated()
        {
        }
    }
}
namespace ACP\Search\Helper\MetaQuery {
    final class ComparisonFactory
    {
        /**
         * @param string $key
         * @param string $operator
         * @param Value  $value
         *
         * @return Comparison
         */
        public static function create($key, $operator, \ACP\Search\Value $value)
        {
        }
    }
    final class SerializedComparisonFactory
    {
        /**
         * @param string $key
         * @param string $operator
         * @param Value  $value
         *
         * @return Comparison
         */
        public static function create($key, $operator, \ACP\Search\Value $value)
        {
        }
    }
    class Comparison
    {
        /**
         * @var string
         */
        protected $key;
        /**
         * @var string
         */
        protected $operator;
        /**
         * @var mixed
         */
        protected $value;
        /**
         * @param string $key
         * @param string $operator
         * @param Value  $value
         */
        public function __construct($key, $operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @return array
         */
        public function __invoke()
        {
        }
    }
    abstract class Date extends \ACP\Search\Helper\MetaQuery\Comparison
    {
        protected function get_date_format_from_type($type)
        {
        }
    }
}
namespace ACP\Search\Helper\MetaQuery\Comparison {
    class CurrentUser extends \ACP\Search\Helper\MetaQuery\Comparison
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class WithinDays extends \ACP\Search\Helper\MetaQuery\Date
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class BeginsWith extends \ACP\Search\Helper\MetaQuery\Comparison
    {
        /**
         * @param string $key
         * @param Value  $value
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class LtDaysAgo extends \ACP\Search\Helper\MetaQuery\Date
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class Today extends \ACP\Search\Helper\MetaQuery\Date
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class Past extends \ACP\Search\Helper\MetaQuery\Date
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class GtDaysAgo extends \ACP\Search\Helper\MetaQuery\Date
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class IsEmpty extends \ACP\Search\Helper\MetaQuery\Comparison
    {
        /**
         * @param string $key
         * @param Value  $value
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
        public function __invoke()
        {
        }
    }
    class Future extends \ACP\Search\Helper\MetaQuery\Date
    {
        /**
         * @param string $key
         * @param Value  $value
         *
         * @throws Exception
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class NotEmpty extends \ACP\Search\Helper\MetaQuery\Comparison
    {
        /**
         * @param string $key
         * @param Value  $value
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
    class EndsWith extends \ACP\Search\Helper\MetaQuery\Comparison
    {
        /**
         * @param string $key
         * @param Value  $value
         */
        public function __construct($key, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACP\Search {
    class TableScreenFactory
    {
        private static $list_screens = [\AC\ListScreen\Post::class => \ACP\Search\TableScreen\Post::class, \AC\ListScreen\Media::class => \ACP\Search\TableScreen\Post::class, \AC\ListScreen\Comment::class => \ACP\Search\TableScreen\Comment::class, \ACP\ListScreen\MSUser::class => \ACP\Search\TableScreen\MSUser::class, \AC\ListScreen\User::class => \ACP\Search\TableScreen\User::class, \ACP\ListScreen\Taxonomy::class => \ACP\Search\TableScreen\Taxonomy::class];
        /**
         * @param string $list_screen  ListScreen class (FQN)
         * @param string $table_screen TableScreen class (FQN)
         */
        public static function register($list_screen, $table_screen)
        {
        }
        /**
         * @param ListScreen $list_screen
         * @param array      $assets
         *
         * @return TableScreen|null
         */
        public static function create(\AC\ListScreen $list_screen, array $assets)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return string|null
         */
        public static function get_table_screen_reference(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace AC {
    abstract class TypedArrayIterator extends \AC\ArrayIterator
    {
        /**
         * @var string
         */
        protected $type;
        /**
         * @param array  $array
         * @param string $type Type to validate the collection against
         */
        public function __construct(array $array, $type)
        {
        }
        /**
         * Optional validation when a type was set
         * @throws LogicException
         */
        protected function validate()
        {
        }
        /**
         * @param $value
         */
        protected function validate_type($value)
        {
        }
    }
}
namespace ACP\Search {
    final class Rules extends \AC\TypedArrayIterator
    {
        public function __construct(array $array)
        {
        }
        /**
         * @return Rule
         */
        public function current()
        {
        }
    }
}
namespace ACP\Search\Comparison {
    interface SearchableValues
    {
        /**
         * @param string $search
         * @param int    $page
         *
         * @return Options\Paginated
         */
        public function get_values($search, $page);
    }
}
namespace ACP\Search {
    abstract class Comparison
    {
        /**
         * @var Operators
         */
        protected $operators;
        /**
         * @var string
         */
        protected $value_type;
        /**
         * @var Labels
         */
        protected $labels;
        /**
         * @param Operators $operators
         * @param string    $value_type
         * @param Labels    $labels
         */
        public function __construct(\ACP\Search\Operators $operators, $value_type = null, \ACP\Search\Labels $labels = null)
        {
        }
        private function validate_value_type()
        {
        }
        /**
         * @return Operators
         */
        public function get_operators()
        {
        }
        /**
         * @return string
         */
        public function get_value_type()
        {
        }
        /**
         * @return array
         */
        public function get_labels()
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return Bindings
         */
        public final function get_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return Bindings
         */
        protected abstract function create_query_bindings($operator, \ACP\Search\Value $value);
    }
}
namespace ACP\Search\Comparison\Post {
    abstract class PostField extends \ACP\Search\Comparison
    {
        /**
         * @return string
         */
        protected abstract function get_field();
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Author extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $post_type;
        public function __construct($post_type)
        {
        }
        protected function get_field()
        {
        }
        /**
         * @param string $post_type
         *
         * @return int[]
         */
        private function get_author_ids($post_type)
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class CommentCount extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
}
namespace ACP\Search\Comparison {
    interface Values
    {
        /**
         * @return AC\Helper\Select\Options
         */
        public function get_values();
    }
}
namespace ACP\Search\Comparison\Post {
    class Formats extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        /**
         * @var string
         */
        protected $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function get_values()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function create_non_existent_post_format_bindings()
        {
        }
    }
    class Taxonomy extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        protected $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function get_meta_type()
        {
        }
        public function get_values($search, $page)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class HasTerm extends \ACP\Search\Comparison\Post\Taxonomy
    {
        /**
         * @var int
         */
        protected $term_id;
        public function __construct($taxonomy, $term_id)
        {
        }
        public function get_operators()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class ID extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class CommentStatus extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
        protected function get_field()
        {
        }
    }
    class PingStatus extends \ACP\Search\Comparison\Post\CommentStatus
    {
        protected function get_field()
        {
        }
    }
}
namespace ACP\Search\Comparison {
    abstract class Date extends \ACP\Search\Comparison
    {
        /**
         * DB column for SQL clause
         * @return string
         */
        protected abstract function get_column();
        public function __construct()
        {
        }
        /**
         * @return Operators
         */
        public function operators()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACP\Search\Comparison\Post {
    abstract class Date extends \ACP\Search\Comparison\Date
    {
        /**
         * @return string
         */
        protected abstract function get_field();
        /**
         * @return string
         */
        protected function get_column()
        {
        }
    }
    class Sticky extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param Value $value
         *
         * @return false|string
         */
        private function get_where(\ACP\Search\Value $value)
        {
        }
    }
    class Content extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class PostParent extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\SearchableValues
    {
        /** @var string */
        private $post_type;
        public function __construct($post_type)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_field()
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class PostName extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class PostVisibility extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function create_where($field, $operator, $value)
        {
        }
        public function get_values()
        {
        }
    }
    class ChildPages extends \ACP\Search\Comparison
    {
        /** @var string */
        private $post_type;
        public function __construct($post_type)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class PasswordProtected extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
}
namespace ACP\Search\Comparison {
    abstract class Meta extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @var string
         */
        protected $meta_type;
        /**
         * Meta constructor.
         *
         * @param Operators $operators
         * @param string    $meta_key
         * @param string    $meta_type
         * @param string    $type
         * @param Labels    $labels
         */
        public function __construct($operators, $meta_key, $meta_type, $type = null, $labels = null)
        {
        }
        /**
         * @return string
         */
        protected function get_meta_key()
        {
        }
        /**
         * @return string
         */
        public function get_meta_type()
        {
        }
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * Template function that should work most of the cases
         *
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACP\Search\Comparison\Post {
    class PageTemplate extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array Key is the template name, value is the filename of the template
         */
        private $templates;
        public function __construct($templates)
        {
        }
        public function get_values()
        {
        }
    }
    class LastModifiedAuthor extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class Title extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Excerpt extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Ancestors extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class BeforeMoreTag extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Order extends \ACP\Search\Comparison\Post\PostField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
}
namespace ACP\Search\Comparison\Meta {
    class Media extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string|null
         */
        protected $post_type;
        public function __construct($meta_key, $meta_type, $post_type = null)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class Image extends \ACP\Search\Comparison\Meta\Media
    {
        public function get_values($s, $paged)
        {
        }
    }
}
namespace ACP\Search\Comparison\Post {
    class FeaturedImage extends \ACP\Search\Comparison\Meta\Image
    {
        public function __construct($post_type)
        {
        }
    }
    class Attachment extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACP\Search\Comparison {
    interface RemoteValues
    {
        /**
         * @return AC\Helper\Select\Options
         */
        public function get_values();
    }
}
namespace ACP\Search\Comparison\Post {
    class Status extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\RemoteValues
    {
        /** @var string */
        private $post_type;
        public function __construct($post_type)
        {
        }
        /**
         * @return string
         */
        protected function get_field()
        {
        }
        /**
         * @return AC\Helper\Select\Options
         */
        public function get_values()
        {
        }
    }
}
namespace ACP\Search\Comparison\Post\Date {
    class PostDate extends \ACP\Search\Comparison\Post\Date
    {
        public function operators()
        {
        }
        public function get_field()
        {
        }
    }
    class PostPublished extends \ACP\Search\Comparison\Post\Date\PostDate
    {
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class PostModified extends \ACP\Search\Comparison\Post\Date
    {
        public function operators()
        {
        }
        public function get_field()
        {
        }
    }
}
namespace ACP\Search\Comparison {
    interface FilterOptions
    {
        /**
         * @return AC\Helper\Select\Options
         */
        public function get_options();
    }
}
namespace ACP\Search\Comparison\User {
    abstract class UserField extends \ACP\Search\Comparison
    {
        public function get_meta_type()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_field();
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class UserName extends \ACP\Search\Comparison\User\UserField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class ID extends \ACP\Search\Comparison\User\UserField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Name extends \ACP\Search\Comparison
    {
        /**
         * @var array
         */
        private $meta_keys;
        /**
         * @param array $meta_keys
         */
        public function __construct(array $meta_keys)
        {
        }
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    abstract class Date extends \ACP\Search\Comparison\Date
    {
        /**
         * @return string
         */
        protected abstract function get_field();
        /**
         * @return string
         */
        protected function get_column()
        {
        }
    }
    class Languages extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $languages;
        public function __construct(array $languages)
        {
        }
        public function get_values()
        {
        }
    }
    class TrueFalse extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Email extends \ACP\Search\Comparison\User\UserField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Nicename extends \ACP\Search\Comparison\User\UserField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Url extends \ACP\Search\Comparison\User\UserField
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class MaxPostDate extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        private $post_type;
        /**
         * @var array
         */
        private $post_stati;
        /**
         * @var bool
         */
        private $oldest_post;
        /**
         * @param string $post_type ;
         */
        public function __construct($post_type, array $post_stati = [], $oldest_post = false)
        {
        }
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function esc_sql_array($array)
        {
        }
    }
    class Role extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct($meta_key, $meta_type)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACP\Search\Comparison\User\Date {
    class Registered extends \ACP\Search\Comparison\User\Date
    {
        protected function get_field()
        {
        }
        /**
         * @return Operators
         */
        public function operators()
        {
        }
    }
}
namespace ACP\Search\Comparison\Media {
    class UsedAsFeaturedImage extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class MetaData extends \ACP\Search\Comparison\Meta
    {
        /**
         * @var string
         */
        private $sub_key;
        public function __construct($sub_key)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class MimeType extends \ACP\Search\Comparison implements \ACP\Search\Comparison\RemoteValues
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class PostType extends \ACP\Search\Comparison implements \ACP\Search\Comparison\RemoteValues
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
        /**
         * Get values by post field
         * @return array
         */
        public function get_post_types()
        {
        }
    }
}
namespace ACP\Search\Comparison\Meta {
    class Post extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string|array
         */
        private $post_type = 'any';
        /**
         * @var WP_Term[]
         */
        private $terms = [];
        public function __construct($meta_key, $meta_type, $post_type = false, array $terms = [], $labels = null)
        {
        }
        protected function get_meta_operators()
        {
        }
        public function get_values($search, $page)
        {
        }
        /**
         * @param string|array $post_type
         */
        private function set_post_type($post_type)
        {
        }
        /**
         * @param WP_Term[] $terms
         */
        private function set_terms(array $terms)
        {
        }
        /**
         * @return array
         */
        protected function get_tax_query()
        {
        }
    }
    class Posts extends \ACP\Search\Comparison\Meta\Post
    {
        public function __construct($meta_key, $meta_type, $post_type = false, array $terms = [])
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Number extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $meta_type)
        {
        }
    }
    class DateFactory
    {
        const FORMAT_UNIX_TIMESTAMP = 'U';
        const FORMAT_DATETIME = 'Y-m-d H:i:s';
        const FORMAT_DATE = 'Y-m-d';
        /**
         * @param string $date_format
         * @param string $meta_key
         * @param string $meta_type
         *
         * @return Comparison
         */
        public static function create($date_format, $meta_key, $meta_type)
        {
        }
    }
}
namespace ACP\Search\Comparison\Meta\DateTime {
    class ISO extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Timestamp extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
        /**
         * @param Value $value
         * @param       $operator
         *
         * @return Value
         */
        protected function map_value(\ACP\Search\Value $value, $operator)
        {
        }
        /**
         * @param Value $value
         *
         * @return array|int
         */
        private function get_timestamp_value(\ACP\Search\Value $value)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param string $value
         *
         * @return int
         */
        private function to_time($value)
        {
        }
    }
}
namespace ACP\Search\Comparison\Meta {
    class Decimal extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $meta_type)
        {
        }
    }
    class EmptyNotEmpty extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $meta_type)
        {
        }
    }
    class MultiSelect extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $choices;
        public function __construct($meta_key, $meta_type, $choices)
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class Text extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $meta_type)
        {
        }
    }
    class User extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct($meta_key, $meta_type)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class Checkmark extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @param string $meta_key
         * @param string $meta_type
         */
        public function __construct($meta_key, $meta_type)
        {
        }
        public function get_values()
        {
        }
        public function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Serialized extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $meta_type)
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Select extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $choices;
        public function __construct($meta_key, $meta_type, $choices)
        {
        }
        public function get_values()
        {
        }
    }
    class Toggle extends \ACP\Search\Comparison\Meta\Select
    {
        public function __construct($meta_key, $meta_type, $choices)
        {
        }
    }
}
namespace ACP\Search\Comparison\Comment {
    abstract class Field extends \ACP\Search\Comparison
    {
        /**
         * @return string
         */
        protected abstract function get_field();
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Author extends \ACP\Search\Comparison\Comment\Field implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
        /**
         * @return array
         */
        private function get_user_ids()
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class HasReplies extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
        private function get_comments_with_replies()
        {
        }
    }
    class ReplyTo extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($search, $paged)
        {
        }
        /**
         * @return array|false
         */
        private function get_parents()
        {
        }
    }
    class Agent extends \ACP\Search\Comparison\Comment\Field
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class ID extends \ACP\Search\Comparison\Comment\Field
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    abstract class Date extends \ACP\Search\Comparison\Date
    {
        /**
         * @return string
         */
        protected abstract function get_field();
        /**
         * @return Operators
         */
        public function operators()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
    }
    class Content extends \ACP\Search\Comparison\Comment\Field
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Post extends \ACP\Search\Comparison\Comment\Field implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class PostType extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class Type extends \ACP\Search\Comparison\Comment\Field implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
        public function get_values()
        {
        }
        /**
         * @return array
         */
        private function get_comment_types()
        {
        }
    }
    class Approved extends \ACP\Search\Comparison\Comment\Field implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
        protected function get_field()
        {
        }
    }
    class User extends \ACP\Search\Comparison\Comment\Field implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        /**
         * @return string
         */
        protected function get_field()
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class Email extends \ACP\Search\Comparison\Comment\Field
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class Url extends \ACP\Search\Comparison\Comment\Field
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
    class IsReply extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class IP extends \ACP\Search\Comparison\Comment\Field
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
    }
}
namespace ACP\Search\Comparison\Comment\Date {
    class Date extends \ACP\Search\Comparison\Comment\Date
    {
        /**
         * @return string
         */
        protected function get_field()
        {
        }
    }
    class Gmt extends \ACP\Search\Comparison\Comment\Date
    {
        /**
         * @return string
         */
        protected function get_field()
        {
        }
    }
}
namespace ACP\Search {
    final class QueryFactory
    {
        private static $queries = [\AC\MetaType::POST => \ACP\Search\Query\Post::class, \AC\MetaType::USER => \ACP\Search\Query\User::class, \AC\MetaType::COMMENT => \ACP\Search\Query\Comment::class, \AC\MetaType::TERM => \ACP\Search\Query\Term::class];
        /**
         * @param string $meta_type
         * @param string $class Query class (FQN)
         */
        public static function register($meta_type, $class)
        {
        }
        /**
         * @param string $meta_type
         * @param array  $bindings
         *
         * @return Query
         */
        public static function create($meta_type, array $bindings)
        {
        }
    }
    final class Rule
    {
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $operator;
        /**
         * @var Value
         */
        private $value;
        /**
         * @param string $name
         * @param string $operator
         * @param Value  $value
         */
        public function __construct($name, $operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_operator()
        {
        }
        /**
         * @return Value
         */
        public function get_value()
        {
        }
    }
}
namespace ACP\Search\Query {
    class Term extends \ACP\Search\Query
    {
        public function register()
        {
        }
        public function callback_where($pieces, $taxonomies, $args)
        {
        }
        public function callback_join($pieces, $taxonomies, $args)
        {
        }
        /**
         * @param WP_Term_Query $query
         *
         * @return void
         */
        public function callback_meta_query(\WP_Term_Query $query)
        {
        }
        /**
         * @param WP_Term_Query $query
         *
         * @return bool
         */
        private function is_main_query(\WP_Term_Query $query)
        {
        }
    }
    class Post extends \ACP\Search\Query
    {
        /**
         * Register post callback functions
         */
        public function register()
        {
        }
        /**
         * Add precision parameters to DECIMAL query
         *
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        function cast_decimal_precision($where, \WP_Query $query)
        {
        }
        /**
         * Function to serve the template functions that need this hook
         *
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function callback_where($where, \WP_Query $query)
        {
        }
        /**
         * @param string   $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function callback_join($join, \WP_Query $query)
        {
        }
        public function callback_group_by($group_by, \WP_Query $query)
        {
        }
        /**
         * @param WP_Query $query
         */
        public function callback_meta_query(\WP_Query $query)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return void
         */
        public function callback_tax_query(\WP_Query $query)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return void
         */
        public function callback_mime_type_query(\WP_Query $query)
        {
        }
    }
    class Bindings
    {
        /**
         * @var int
         */
        private static $aliases = [];
        /**
         * @var string
         */
        protected $where = '';
        /**
         * @var string
         */
        protected $join = '';
        /**
         * @var string
         */
        protected $group_by = '';
        /**
         * @var array
         */
        protected $meta_query = [];
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_unique_alias($column)
        {
        }
        /**
         * @return string
         */
        public function get_where()
        {
        }
        /**
         * @param string $where
         *
         * @return $this
         */
        public function where($where)
        {
        }
        /**
         * @return string
         */
        public function get_join()
        {
        }
        /**
         * @param string $join
         *
         * @return $this
         */
        public function join($join)
        {
        }
        /**
         * @return string
         */
        public function get_group_by()
        {
        }
        /**
         * @param string $column
         *
         * @return $this
         */
        public function group_by($column)
        {
        }
        /**
         * @return array
         */
        public function get_meta_query()
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function meta_query(array $args)
        {
        }
    }
}
namespace ACP\Search\Query\Bindings {
    class Post extends \ACP\Search\Query\Bindings
    {
        /**
         * @var array
         */
        protected $tax_query = [];
        /**
         * @return array
         */
        public function get_tax_query()
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function tax_query(array $args)
        {
        }
    }
    class Media extends \ACP\Search\Query\Bindings\Post
    {
        /**
         * @var array
         */
        protected $mime_types = [];
        /**
         * @return array
         */
        public function get_mime_types()
        {
        }
        /**
         * @param array $mime_types
         *
         * @return $this
         */
        public function mime_types($mime_types)
        {
        }
    }
    class Comment extends \ACP\Search\Query\Bindings
    {
        /**
         * @var int
         */
        protected $parent;
        /**
         * @return int
         */
        public function get_parent()
        {
        }
        /**
         * @param int $id
         *
         * @return $this
         */
        public function parent($id)
        {
        }
    }
}
namespace ACP\Search\Query {
    class Comment extends \ACP\Search\Query
    {
        public function register()
        {
        }
        /**
         * @param WP_Comment_Query $query
         */
        public function callback_meta_query(\WP_Comment_Query $query)
        {
        }
        /**
         * @param WP_Comment_Query $query
         */
        public function callback_parent(\WP_Comment_Query $query)
        {
        }
        /**
         * @param array $comments_clauses
         *
         * @return array
         */
        public function callback_clauses(array $comments_clauses)
        {
        }
    }
    class User extends \ACP\Search\Query
    {
        public function register()
        {
        }
        /**
         * Marks the main list table query as such
         *
         * @param array $args
         *
         * @return array
         */
        public function mark_as_table_query($args)
        {
        }
        /**
         * @param WP_User_Query $query
         *
         * @return void
         */
        public function callback_meta_query(\WP_User_Query $query)
        {
        }
        /**
         * @param WP_User_Query $query
         *
         * @return void
         */
        public function callback_where(\WP_User_Query $query)
        {
        }
        /**
         * @param WP_User_Query $query
         *
         * @return void
         */
        public function callback_join(\WP_User_Query $query)
        {
        }
        /**
         * @param WP_User_Query $query
         *
         * @return bool
         */
        private function is_table_query(\WP_User_Query $query)
        {
        }
    }
}
namespace ACP\Search {
    class Settings implements \AC\Registerable
    {
        /**
         * @var Enqueueable
         */
        protected $assets;
        public function __construct(array $assets)
        {
        }
        public function register()
        {
        }
        public function column_settings(\AC\Column $column)
        {
        }
        public function admin_scripts()
        {
        }
    }
}
namespace AC {
    abstract class Config extends \AC\ArrayIterator
    {
        /**
         * @param array $config
         */
        public function __construct(array $config = [])
        {
        }
        /**
         * Assert this config is valid.
         */
        protected abstract function validate_config();
    }
}
namespace ACP\Search {
    final class Operators extends \AC\Config
    {
        const EQ = '=';
        const NEQ = '!=';
        const GT = '>';
        const GTE = '>=';
        const LT = '<';
        const LTE = '<=';
        const CONTAINS = 'CONTAINS';
        const NOT_CONTAINS = 'NOT CONTAINS';
        const BEGINS_WITH = 'BEGINS WITH';
        const ENDS_WITH = 'ENDS WITH';
        const IN = 'IN';
        const NOT_IN = 'NOT IN';
        const BETWEEN = 'BETWEEN';
        const IS_EMPTY = 'IS EMPTY';
        const NOT_IS_EMPTY = 'NOT IS EMPTY';
        const TODAY = 'TODAY';
        const PAST = 'PAST';
        const FUTURE = 'FUTURE';
        const LT_DAYS_AGO = 'LT_DAYS_AGO';
        const GT_DAYS_AGO = 'GT_DAYS_AGO';
        const WITHIN_DAYS = 'WITHIN_DAYS';
        const CURRENT_USER = 'CURRENT_USER';
        /**
         * @param array $operators
         * @param bool  $order
         */
        public function __construct(array $operators, $order = true)
        {
        }
        /**
         * @return array
         */
        protected function get_operators()
        {
        }
        protected function validate_config()
        {
        }
    }
    final class Value
    {
        const INT = 'int';
        const DECIMAL = 'decimal';
        const STRING = 'string';
        const DATE = 'date';
        /**
         * @var string
         */
        protected $type;
        /**
         * @var mixed
         */
        protected $value;
        /**
         * @param mixed       $value
         * @param null|string $type
         */
        public function __construct($value, $type = null)
        {
        }
        private function validate_type()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return mixed
         */
        public function get_value()
        {
        }
    }
}
namespace ACP\Capability {
    abstract class Capability
    {
        /**
         * @var WP_User
         */
        protected $user;
        public function __construct(\WP_User $user = null)
        {
        }
        /**
         * @return bool
         */
        public function is_administrator()
        {
        }
    }
}
namespace ACP {
    class ActivationTokenFactory
    {
        /**
         * @var ActivationKeyStorage
         */
        private $activation_key_storage;
        /**
         * @var LicenseKeyRepository
         */
        private $license_key_storage;
        public function __construct(\ACP\Access\ActivationKeyStorage $activation_key_storage, \ACP\LicenseKeyRepository $license_key_storage)
        {
        }
        /**
         * @return ActivationToken|null
         */
        public function create()
        {
        }
    }
}
namespace ACP\Sorting {
    class Addon implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var NativeSortableFactory
         */
        private $native_sortable_factory;
        /**
         * @var ModelFactory
         */
        private $model_factory;
        /**
         * @var Bookmark\SegmentRepository
         */
        private $segment_repository;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location\Absolute $location, \ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        public function register()
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         */
        public function init_table(\AC\ListScreen $list_screen)
        {
        }
        /**
         * Register field settings for sorting
         *
         * @param Column $column
         */
        public function register_column_settings($column)
        {
        }
        /**
         * Hide or show empty results
         * @return boolean
         * @since      4.0
         * @deprecated 5.1
         */
        public function show_all_results()
        {
        }
    }
    abstract class AbstractModel
    {
        /**
         * @var DataType
         */
        protected $data_type;
        /**
         * @var Strategy\Comment|Strategy\Post|Strategy\User
         */
        protected $strategy;
        public function __construct(\ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        /**
         * @return array
         */
        public abstract function get_sorting_vars();
        /**
         * @param Strategy $strategy
         */
        public function set_strategy(\ACP\Sorting\Strategy $strategy)
        {
        }
        /**
         * @return DataType
         */
        public function get_data_type()
        {
        }
        /**
         * Return the default or set order from the strategy.
         * Falls back to ASC if an invalid order is found
         * @return string ASC|DESC
         */
        public function get_order()
        {
        }
        /**
         * Sorts an array ascending, maintains index association and returns keys
         *
         * @param array $array
         *
         * @return array Returns the array keys of the sorted array
         * @deprecated 5.2
         */
        public function sort(array $array)
        {
        }
    }
}
namespace ACP\Sorting\Model\Post {
    /**
     * Sort a user list table on the number of times the meta_key is used by a user.
     * @since 5.2
     */
    class MetaCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @param string
         */
        public function __construct($meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
}
namespace ACP\Sorting\Model {
    interface WarningAware
    {
        // Slow warning indicator
    }
}
namespace ACP\Sorting\Model\Post {
    class Fields extends \ACP\Sorting\AbstractModel
    {
        /**
         * @param array
         */
        private $fields;
        /**
         * @var FormatValue
         */
        protected $formatter;
        public function __construct(array $fields, \ACP\Sorting\FormatValue $formatter = null, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        /**
         * @return array
         */
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        private function get_sorted_ids()
        {
        }
        /**
         * Only return fields required for sorting
         * @return string
         * @global wpdb $wpdb
         */
        public function posts_fields_callback()
        {
        }
    }
    class PostExcerpt extends \ACP\Sorting\Model\Post\Fields implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct()
        {
        }
    }
    class CommentCount extends \ACP\Sorting\AbstractModel
    {
        public const STATUS_APPROVED = '1';
        public const STATUS_SPAM = 'spam';
        public const STATUS_TRASH = 'trash';
        public const STATUS_PENDING = '0';
        /**
         * @var array
         */
        private $stati;
        public function __construct(array $stati = [])
        {
        }
        public function get_sorting_vars()
        {
        }
        public function posts_fields_callback($clauses)
        {
        }
    }
}
namespace ACP\Sorting\Model\Post\RelatedMeta {
    class UserField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct(string $field, string $meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class UserMeta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct(string $meta_field, string $meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class PostMeta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct(string $meta_field, string $meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class PostField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $post_field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct(string $post_field, string $meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
}
namespace ACP\Sorting\Model\Post {
    class CommentCountFactory
    {
        public function create($type)
        {
        }
    }
    /**
     * @property Post $strategy
     */
    class Menu extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function posts_fields_callback($clauses)
        {
        }
        /**
         * @return array
         */
        private function get_sorted_ids()
        {
        }
        /**
         * @param int $menu_item_id
         *
         * @return string|null
         */
        private function get_menu_label($menu_item_id)
        {
        }
    }
    class Taxonomy extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function get_sorting_vars()
        {
        }
        /**
         * @param array $clauses
         *
         * @return array
         */
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class Meta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        public function __construct(string $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    class MetaMapping extends \ACP\Sorting\Model\Post\Meta
    {
        /**
         * @var array
         */
        private $fields;
        public function __construct(string $meta_key, array $fields)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    /**
     * @property Post $strategy
     * @since 5.2
     */
    class FieldFormat extends \ACP\Sorting\AbstractModel
    {
        /**
         * @param string $field
         */
        protected $field;
        /**
         * @var FormatValue
         */
        protected $formatter;
        /**
         * Save memory by limiting the value length of the field
         * @var int
         */
        protected $value_length;
        public function __construct($field, \ACP\Sorting\FormatValue $formatter, \ACP\Sorting\Type\DataType $data_type = null, $value_length = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        private function get_sorted_ids()
        {
        }
        /**
         * Only return fields required for sorting
         * @return string
         * @global wpdb $wpdb
         */
        public function posts_fields_callback()
        {
        }
    }
    class Shortcodes extends \ACP\Sorting\Model\Post\FieldFormat implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct()
        {
        }
        public function get_sorting_vars()
        {
        }
        public function posts_where_callback($where)
        {
        }
    }
    class WordCount extends \ACP\Sorting\Model\Post\FieldFormat implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct()
        {
        }
    }
    class AuthorName extends \ACP\Sorting\Model\Post\FieldFormat implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct(\ACP\Sorting\FormatValue $formatter)
        {
        }
    }
    abstract class Featured extends \ACP\Sorting\AbstractModel
    {
        /**
         * @return int[]
         */
        protected abstract function get_featured_ids();
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class Sticky extends \ACP\Sorting\Model\Post\Featured
    {
        protected function get_featured_ids()
        {
        }
    }
    class PostParent extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class EstimateReadingTime extends \ACP\Sorting\Model\Post\FieldFormat implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct()
        {
        }
    }
    class LinkCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var array
         */
        private $domains;
        public function __construct(array $domains)
        {
        }
        public function get_sorting_vars()
        {
        }
        private function sql_replace($string)
        {
        }
        private function sql_prefix_with_href($url)
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class LastModifiedAuthorFactory
    {
        public function create($type)
        {
        }
    }
    /**
     * Sorts a post list table on a meta key. The meta value may contain mixed values, as long
     * as the supplied formatter can process them into a string.
     * @property Post $strategy
     * @since 5.2
     */
    class MetaFormat extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @var FormatValue
         */
        protected $formatter;
        /**
         * @param FormatValue   $formatter
         * @param string        $meta_key
         * @param DataType|null $data_type
         */
        public function __construct(\ACP\Sorting\FormatValue $formatter, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        /**
         * @return array
         */
        private function get_sorted_ids()
        {
        }
    }
    class PageTemplate extends \ACP\Sorting\Model\Post\MetaMapping
    {
        public function __construct($post_type, $meta_key)
        {
        }
        private function get_sorted_fields($post_type)
        {
        }
    }
    class LatestComment extends \ACP\Sorting\AbstractModel
    {
        public const STATUS_APPROVED = '1';
        public const STATUS_SPAM = 'spam';
        public const STATUS_TRASH = 'trash';
        public const STATUS_PENDING = '0';
        /**
         * @var array
         */
        private $stati;
        public function __construct(array $stati = [])
        {
        }
        public function get_sorting_vars()
        {
        }
        public function posts_fields_callback($clauses)
        {
        }
    }
    class AuthorFactory
    {
        /**
         * @param string      $type
         * @param Column|null $column
         *
         * @return AbstractModel
         */
        public function create($type, \AC\Column $column = null)
        {
        }
    }
    /**
     * For sorting a post list table on a meta_key that holds a Post ID (single).
     * @since 5.2
     */
    class MetaRelatedPostFactory
    {
        /**
         * @param string $post_property The post property to sort on (e.g. title, ID)
         * @param string $meta_key      The meta key that contains the post ID
         *
         * @return AbstractModel|null
         */
        public function create($post_property, $meta_key)
        {
        }
    }
    /**
     * @property Post $strategy
     */
    class FeaturedImageSize extends \ACP\Sorting\AbstractModel implements \ACP\Sorting\Model\WarningAware
    {
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        private function get_sorted_ids()
        {
        }
    }
    /**
     * @property Post $strategy
     */
    class Depth extends \ACP\Sorting\AbstractModel
    {
        public function __construct()
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        private function get_depth($id, array $ids, $depth = 0)
        {
        }
        private function get_sorted_ids()
        {
        }
    }
    class PostField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $field;
        public function __construct($field)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function posts_orderby_callback()
        {
        }
    }
    class Excerpt extends \ACP\Sorting\Model\Post\PostField
    {
        public function __construct()
        {
        }
    }
    class Permalink extends \ACP\Sorting\AbstractModel implements \ACP\Sorting\Model\WarningAware
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        /**
         * @return int[]
         */
        private function get_sorted_ids()
        {
        }
    }
    class ImageFileSizes extends \ACP\Sorting\Model\Post\FieldFormat implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct()
        {
        }
    }
    class BeforeMoreTag extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function posts_orderby_callback()
        {
        }
    }
}
namespace ACP\Sorting\Model\Post\Author {
    class UserField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $user_field;
        public function __construct($user_field)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class UserMeta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class FullName extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
}
namespace ACP\Sorting\Model\Post {
    class Attachment extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class Status extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        private function get_stati() : array
        {
        }
        public function orderby_status()
        {
        }
    }
    /**
     * For sorting a post list table on a meta_key that holds a User ID (single).
     * @since 5.2
     */
    class MetaRelatedUserFactory
    {
        /**
         * @param string $user_property The user property to sort on (e.g. fullname, last name)
         * @param string $meta_key      The meta key that contains the user ID
         *
         * @return AbstractModel|null
         */
        public function create($user_property, $meta_key)
        {
        }
    }
    class PostContent extends \ACP\Sorting\Model\Post\FieldFormat
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Sorting\Model {
    /**
     * Sorts a list table by the meta value (raw db value) that is associated with the supplied meta key.
     * @since 5.2
     */
    class MetaFactory
    {
        /**
         * @param string        $meta_type e.g. post, user, comment or taxonomy
         * @param string        $meta_key  e.g. 'my_custom_field_key'
         * @param DataType|null $data_type e.g. numeric, date or string
         *
         * @return AbstractModel
         */
        public function create($meta_type, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
    }
}
namespace ACP\Sorting\Model\User {
    /**
     * Sort a user list table on the number of times the meta_key is used by a user.
     * @since 5.2
     */
    class MetaCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        public function __construct($meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    class CommentCount extends \ACP\Sorting\AbstractModel
    {
        const STATUS_APPROVED = '1';
        const STATUS_SPAM = 'spam';
        const STATUS_TRASH = 'trash';
        const STATUS_PENDING = '0';
        /**
         * @var string
         */
        private $status;
        /**
         * @var array
         */
        private $post_types;
        public function __construct(array $status = [], array $post_types = [])
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        private function esc_sql_array($array)
        {
        }
    }
}
namespace ACP\Sorting\Model\User\RelatedMeta {
    class UserField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($field, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    class UserMeta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($meta_field, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    class PostField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $field;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($field, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
}
namespace ACP\Sorting\Model\User {
    class PostCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var array
         */
        private $post_types;
        /**
         * @var string
         */
        private $post_status;
        public function __construct(array $post_types = null, array $post_status = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        private function esc_sql_array($array)
        {
        }
    }
    class Meta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        public function __construct(string $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    class MetaMapping extends \ACP\Sorting\Model\User\Meta
    {
        /**
         * @var array
         */
        protected $fields;
        public function __construct(string $meta_key, array $fields)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    class UserField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $field;
        public function __construct($field, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    class FullName extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    /**
     * Sorts a user list table on a meta key. The meta value may contain mixed values, as long
     * as the supplied formatter can process them into a string.
     * @since 5.2
     */
    class MetaFormat extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var FormatValue
         */
        private $formatter;
        /**
         * @param FormatValue   $formatter
         * @param string        $meta_key
         * @param DataType|null $data_type
         */
        public function __construct(\ACP\Sorting\FormatValue $formatter, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        /**
         * @return array
         */
        private function get_sorted_ids()
        {
        }
    }
    /**
     * For sorting a user list table on a meta_key that holds a User ID (single).
     * @since 5.2
     */
    class MetaRelatedPostFactory
    {
        public function create($post_property, $meta_key)
        {
        }
    }
    /**
     * For sorting a user list table on a meta_key that holds a User ID (single).
     * @since 5.2
     */
    class MetaRelatedUserFactory
    {
        /**
         * @param string $user_property The user property to sort on (e.g. fullname, last name)
         * @param string $meta_key      The meta key that contains the user ID
         *
         * @return AbstractModel|null
         */
        public function create($user_property, $meta_key)
        {
        }
    }
    class MaxPostDate extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $post_type;
        /**
         * @var array
         */
        private $post_stati;
        /**
         * @var bool
         */
        private $oldest_post;
        public function __construct($post_type, array $post_stati = [], $oldest_post = false)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        private function esc_sql_array($array)
        {
        }
    }
    class Roles extends \ACP\Sorting\Model\User\MetaFormat
    {
        public function __construct($meta_key)
        {
        }
    }
}
namespace ACP\Sorting\Model {
    /**
     * Sorts any list table on a meta key. The meta value will go through a formatter before being sorted.
     * The meta value may contain mixed values, as long as the formatter can process them.
     * @since 5.2
     */
    class MetaFormatFactory
    {
        /**
         * @param string      $meta_type e.g. post, user, comment or taxonomy
         * @param string      $meta_key  e.g. 'my_custom_field'
         * @param FormatValue $formatter The formatter applies formatting to the raw meta value
         * @param DataType    $data_type e.g. string or numeric
         *
         * @return AbstractModel
         */
        public function create($meta_type, $meta_key, \ACP\Sorting\FormatValue $formatter, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
    }
    /**
     * Sort a user list table on the number of times the meta_key is used by an object.
     * @since 5.2
     */
    class MetaCountFactory
    {
        /**
         * @param string $meta_type
         * @param string $meta_key
         *
         * @return AbstractModel
         */
        public function create($meta_type, $meta_key)
        {
        }
    }
    /**
     * Sorts a list table by pre sorted fields that are associated with the supplied meta key.
     * @since 5.2
     */
    class MetaMappingFactory
    {
        /**
         * @param string $meta_type e.g. post, user, comment or taxonomy
         * @param string $meta_key  e.g. 'my_custom_field_key'
         * @param array  $fields
         *
         * @return AbstractModel
         */
        public function create(string $meta_type, string $meta_key, array $fields) : \ACP\Sorting\AbstractModel
        {
        }
    }
    class SqlOrderByFactory
    {
        public static function create_with_computation(\ACP\Sorting\Type\ComputationType $computation, string $field, string $order, bool $include_zero = false) : string
        {
        }
        public static function create_with_count(string $field, string $order) : string
        {
        }
        public static function create_with_ids(string $field, array $ids, string $order) : ?string
        {
        }
        public static function create_with_field(string $field, array $values, string $order, \ACP\Sorting\Type\DataType $data_type = null) : ?string
        {
        }
        private static function wrap_single_quote($value) : string
        {
        }
        private static function esc_sql_values(array $values, \ACP\Sorting\Type\DataType $data_type) : array
        {
        }
        private static function sanitize_values(array $values, \ACP\Sorting\Type\DataType $data_type) : array
        {
        }
        public static function create_with_concat(array $fields, string $order, \ACP\Sorting\Type\CastType $cast_type = null) : string
        {
        }
        public static function create(string $field, string $order, array $args = []) : string
        {
        }
    }
}
namespace ACP\Sorting\Model\Media {
    abstract class AttachmentMetaData extends \ACP\Sorting\Model\Post\MetaFormat
    {
        public function __construct(\ACP\Sorting\FormatValue $formatter, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
    }
    class FileMeta extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        public function __construct(array $keys)
        {
        }
    }
    class MimeType extends \ACP\Sorting\Model\Post\PostField
    {
        public function __construct()
        {
        }
    }
    class FileSize extends \ACP\Sorting\Model\Post\MetaFormat
    {
        public function __construct()
        {
        }
    }
    class AvailableSizes extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        public function __construct()
        {
        }
    }
    class Dimensions extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        public function __construct()
        {
        }
    }
    class Width extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        public function __construct()
        {
        }
    }
    class Exif extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        public function __construct($field)
        {
        }
    }
    class MetaDataText extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        /**
         * @param string $key
         */
        public function __construct($key)
        {
        }
    }
    class Height extends \ACP\Sorting\Model\Media\AttachmentMetaData
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Sorting\Model\Comment {
    /**
     * @property Strategy\Comment $strategy
     * @since 5.2
     */
    class FieldFormat extends \ACP\Sorting\AbstractModel
    {
        /**
         * @param string $field
         */
        protected $field;
        /**
         * @var FormatValue
         */
        protected $formatter;
        /**
         * Save memory by limiting the value lenght of the field
         * @var int
         */
        protected $value_length;
        public function __construct($field, \ACP\Sorting\FormatValue $formatter, \ACP\Sorting\Type\DataType $data_type = null, $value_length = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        /**
         * @param string $var
         *
         * @return string|null
         */
        private function get_query_var($var)
        {
        }
        private function get_comment_status()
        {
        }
        /**
         * @return array
         */
        private function get_sorted_ids()
        {
        }
    }
    class Author extends \ACP\Sorting\Model\Comment\FieldFormat implements \ACP\Sorting\Model\WarningAware
    {
        public function __construct(\AC\Settings\FormatValue $formatter)
        {
        }
    }
    /**
     * Sort the comment list table on the number of times the meta_key is used by a comment.
     * @since 5.2
     */
    class MetaCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @param string $meta_key
         */
        public function __construct($meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function comments_clauses_callback($clauses)
        {
        }
    }
    class Meta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function comments_clauses_callback($clauses)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    class MetaMapping extends \ACP\Sorting\Model\Comment\Meta
    {
        /**
         * @var array
         */
        private $fields;
        public function __construct(string $meta_key, array $fields)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    /**
     * Sorts a comment list table on a meta key. The meta value may contain mixed values, as long
     * as the supplied formatter can process them into a string.
     * @since 5.2
     */
    class MetaFormat extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var FormatValue
         */
        private $formatter;
        /**
         * @param FormatValue   $formatter
         * @param string        $meta_key
         * @param DataType|null $data_type
         */
        public function __construct(\ACP\Sorting\FormatValue $formatter, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        private function get_sorted_ids() : array
        {
        }
    }
    class AuthorFactory
    {
        /**
         * @param string $type
         * @param Column $column
         *
         * @return AbstractModel
         */
        public function create($type, \AC\Column $column = null)
        {
        }
    }
}
namespace ACP\Sorting\Model\Comment\Author {
    class UserField extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $user_field;
        public function __construct(string $user_field)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function comments_clauses_callback($clauses)
        {
        }
    }
    class UserMeta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_field;
        public function __construct($meta_field, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function comments_clauses_callback($clauses)
        {
        }
    }
    class FullName extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function comments_clauses_callback($clauses)
        {
        }
    }
}
namespace ACP\Sorting\Model\Comment {
    class Response extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function comments_clauses_callback($pieces)
        {
        }
    }
}
namespace ACP\Sorting\Model\Taxonomy {
    class MetaCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        public function __construct($meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_term_query_callback($clauses)
        {
        }
    }
    class Menu extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var array
         */
        private $menu_labels;
        /**
         * @param string $taxonomy
         */
        public function __construct($taxonomy)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_term_query_callback($clauses)
        {
        }
        /**
         * @return array
         */
        private function get_sorted_ids()
        {
        }
        private function get_menu_label(int $menu_item_id) : ?string
        {
        }
    }
    class Meta extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $meta_key;
        public function __construct(string $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_term_query_callback($clauses)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    class MetaMapping extends \ACP\Sorting\Model\Taxonomy\Meta
    {
        /**
         * @var array
         */
        protected $fields;
        public function __construct(string $meta_key, array $fields)
        {
        }
        protected function get_order_by() : string
        {
        }
    }
    /**
     * @property Taxonomy $strategy
     */
    class MetaFormat extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var FormatValue
         */
        private $formatter;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct(\ACP\Sorting\FormatValue $formatter, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_term_query_callback($clauses)
        {
        }
        /**
         * @return array
         */
        private function get_sorted_ids()
        {
        }
    }
}
namespace ACP\Sorting\Model {
    class CustomFieldFactory
    {
        /**
         * @param string|null             $type
         * @param string             $meta_type
         * @param string             $meta_key
         * @param Column\CustomField $column
         *
         * @return AbstractModel
         */
        public static function create($type, $meta_type, $meta_key, \AC\Column\CustomField $column)
        {
        }
    }
    /**
     * For sorting a list table (e.g. post or user) on a meta_key that holds a Post ID (single).
     * @since 5.2
     */
    class MetaRelatedPostFactory
    {
        /**
         * @param string $meta_type     List table type. e.g. post, user, comment or term
         * @param string $post_property The post property to sort on (e.g. title, id)
         * @param string $meta_key      The meta key that contains the user ID
         *
         * @return AbstractModel|null
         */
        public function create($meta_type, $post_property, $meta_key)
        {
        }
    }
    class Disabled extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
    }
    /**
     * For sorting a list table (e.g. post or user) on a meta_key that holds a User ID (single).
     * @since 5.2
     */
    class MetaRelatedUserFactory
    {
        /**
         * @param string $meta_type     List table type. e.g. post, user, comment or term
         * @param string $user_property The user property to sort on (e.g. fullname, last name)
         * @param string $meta_key      The meta key that contains the user ID
         *
         * @return AbstractModel|null
         */
        public function create($meta_type, $user_property, $meta_key)
        {
        }
    }
    class OrderBy extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        protected $orderby;
        public function __construct($orderby)
        {
        }
        /**
         * @return array
         */
        public function get_sorting_vars()
        {
        }
    }
}
namespace ACP\Sorting\UserPreference {
    class SortType
    {
        const OPTION_ORDER = 'order';
        const OPTION_ORDERBY = 'orderby';
        /**
         * @var string
         */
        private $key;
        /**
         * @var AC\Preferences\Site
         */
        private $storage;
        public function __construct($key)
        {
        }
        /**
         * @return Type\SortType|null
         */
        public function get()
        {
        }
        /**
         * @return bool
         */
        public function delete()
        {
        }
        public function save(\ACP\Sorting\Type\SortType $sort_type)
        {
        }
    }
}
namespace ACP\Sorting {
    interface ListScreen
    {
        /**
         * @param AbstractModel $model
         *
         * @return Strategy
         */
        public function sorting($model);
    }
    /**
     * @deprecated 5.2
     */
    class Model extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var Column
         */
        protected $column;
        /**
         * @var string
         */
        protected $orderby;
        public function __construct(\AC\Column $column, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        /**
         * @param string $data_type_value
         */
        public function set_data_type($data_type_value)
        {
        }
        /**
         * Get the sorting vars
         * @return array
         * @since 4.0
         */
        public function get_sorting_vars()
        {
        }
        /**
         * @return array
         */
        public function get_raw_values()
        {
        }
        /**
         * @param string $orderby
         *
         * @return $this
         * @deprecated 5.2
         */
        public function set_orderby($orderby)
        {
        }
    }
}
namespace ACP\Sorting\Type {
    /**
     * SQL cast type e.g. AVG, MIN, MAX
     * @since 6.0
     */
    class ComputationType
    {
        public const AVG = 'AVG';
        public const COUNT = 'COUNT';
        public const MIN = 'MIN';
        public const MAX = 'MAX';
        public const ROUND = 'ROUND';
        public const SUM = 'SUM';
        /**
         * @var string
         */
        private $value;
        public function __construct(string $value)
        {
        }
        public function __toString()
        {
        }
        public function get_value() : string
        {
        }
        public static function is_valid(string $value) : bool
        {
        }
    }
    class EmptyValues
    {
        public const NULL = null;
        public const EMPTY_STRING = '';
        public const ZERO = 0;
        /**
         * @var array
         */
        private $values;
        public function __construct(array $values)
        {
        }
        public static function is_valid(array $values) : bool
        {
        }
        public static function is_valid_value($value) : bool
        {
        }
        public function has_value($value) : bool
        {
        }
        public function get_values() : array
        {
        }
    }
    class DataType
    {
        const STRING = 'string';
        const NUMERIC = 'numeric';
        const DATE = 'date';
        const DATETIME = 'datetime';
        const DECIMAL = 'decimal';
        /**
         * @var string
         */
        private $value;
        public function __construct($value)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function is_valid($value)
        {
        }
        public function __toString()
        {
        }
    }
    class SortType
    {
        /**
         * @var string
         */
        private $order_by;
        /**
         * @var string
         */
        private $order;
        public function __construct($order_by, $order)
        {
        }
        private function validate()
        {
        }
        public function get_order_by()
        {
        }
        public function get_order()
        {
        }
        /**
         * @param SortType $sort_type
         *
         * @return bool
         */
        public function equals($sort_type)
        {
        }
        /**
         * @param Request\Sort $request
         *
         * @return SortType
         */
        public static function create_by_request(\ACP\Sorting\Request\Sort $request)
        {
        }
    }
    /**
     * SQL cast type e.g. CHAR, DATE or SIGNED
     * @since 5.2
     */
    class CastType
    {
        public const SIGNED = 'SIGNED';
        public const CHAR = 'CHAR';
        public const DECIMAL = 'DECIMAL(60,10)';
        public const DATE = 'DATE';
        public const DATETIME = 'DATETIME';
        public const BINARY = 'BINARY';
        /**
         * @var string
         */
        private $value;
        public function __construct(string $value)
        {
        }
        /**
         * @return string
         */
        public function get_value() : string
        {
        }
        public function __toString() : string
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function is_valid($value) : bool
        {
        }
        public static function create_from_data_type(\ACP\Sorting\Type\DataType $data_type) : self
        {
        }
    }
}
namespace ACP\Sorting\Settings\ListScreen {
    class PreferredSort
    {
        const FIELD_SORTING = 'sorting';
        const FIELD_SORTING_ORDER = 'sorting_order';
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @param ListScreen $list_screen
         */
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return SortType|null
         */
        public function get()
        {
        }
    }
    class PreferredSegmentSort
    {
        /**
         * @var PreferredSegment
         */
        private $preferred_segment;
        public function __construct(\ACP\Bookmark\Setting\PreferredSegment $preferred_segment)
        {
        }
        /**
         * @return SortType|null
         */
        public function get()
        {
        }
    }
}
namespace ACP\Sorting {
    /**
     * Sorts an array ascending, maintains index association and returns keys
     */
    class Sorter
    {
        /**
         * @param array         $values [ (int) $id => (string|int|bool) $value ]
         * @param DataType|null $data_type
         *
         * @return int[]
         */
        public function sort(array $values, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        private function truncate($value)
        {
        }
        /**
         * Allow zero values as nonempty. Allows them to be sorted.
         *
         * @param string|int|bool $value
         *
         * @return bool
         */
        private function is_not_empty($value)
        {
        }
    }
    interface FormatValue
    {
        /**
         * @param mixed $value
         *
         * @return string|int|float|bool
         */
        public function format_value($value);
    }
}
namespace ACP\Sorting\FormatValue {
    class FileMeta implements \ACP\Sorting\FormatValue
    {
        /**
         * @var array
         */
        private $keys;
        public function __construct(array $keys)
        {
        }
        public function format_value($value)
        {
        }
    }
    class SerializedSettingFormatter implements \ACP\Sorting\FormatValue
    {
        /**
         * @var FormatValue
         */
        private $formatter;
        /**
         * @param FormatValue $formatter
         */
        public function __construct(\ACP\Sorting\FormatValue $formatter)
        {
        }
        public function format_value($string)
        {
        }
    }
    class WordCount implements \ACP\Sorting\FormatValue
    {
        public function format_value($string)
        {
        }
    }
    class ContentTotalImageSize implements \ACP\Sorting\FormatValue
    {
        public function format_value($post_content)
        {
        }
    }
    class SerializedKey implements \ACP\Sorting\FormatValue
    {
        /**
         * @var string
         */
        private $key;
        public function __construct($key)
        {
        }
        public function format_value($value)
        {
        }
    }
    class FileName implements \ACP\Sorting\FormatValue
    {
        public function format_value($file)
        {
        }
    }
    class Date implements \ACP\Sorting\FormatValue
    {
        public function format_value($value)
        {
        }
    }
    class FileSize implements \ACP\Sorting\FormatValue
    {
        public function format_value($file)
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        private function is_relative_path($file)
        {
        }
    }
    class AvailableSizes implements \ACP\Sorting\FormatValue
    {
        public function format_value($value)
        {
        }
    }
    class Dimensions implements \ACP\Sorting\FormatValue
    {
        public function format_value($value)
        {
        }
    }
    class Width implements \ACP\Sorting\FormatValue
    {
        public function format_value($value)
        {
        }
    }
    class Exif implements \ACP\Sorting\FormatValue
    {
        /**
         * @var string
         */
        private $field;
        public function __construct($field)
        {
        }
        public function format_value($value)
        {
        }
    }
    class StripContent implements \ACP\Sorting\FormatValue
    {
        public function format_value($string)
        {
        }
    }
    class PostTitle implements \ACP\Sorting\FormatValue
    {
        public function format_value($id)
        {
        }
    }
    class ShortCodeCount implements \ACP\Sorting\FormatValue
    {
        public function format_value($content)
        {
        }
    }
    class SettingFormatter implements \ACP\Sorting\FormatValue
    {
        /**
         * @var AC\Settings\FormatValue
         */
        private $setting;
        public function __construct(\AC\Settings\FormatValue $setting)
        {
        }
        public function format_value($value)
        {
        }
    }
    class Height implements \ACP\Sorting\FormatValue
    {
        public function format_value($value)
        {
        }
    }
    class Roles implements \ACP\Sorting\FormatValue
    {
        private function get_role_label($capability)
        {
        }
        public function format_value($value)
        {
        }
    }
}
namespace ACP\Sorting\Request {
    class Sort
    {
        const PARAM_ORDERBY = 'orderby';
        const PARAM_ORDER = 'order';
        /**
         * @var string|null
         */
        private $order_by;
        /**
         * @var string|null
         */
        private $order;
        public function __construct($order_by, $order)
        {
        }
        public static function create_from_globals()
        {
        }
        public function get_order_by()
        {
        }
        public function get_order()
        {
        }
    }
}
namespace ACP\Sorting {
    abstract class Strategy
    {
        /**
         * @var AbstractModel
         */
        protected $model;
        /**
         * @param AbstractModel $model
         */
        public function __construct(\ACP\Sorting\AbstractModel $model)
        {
        }
        /**
         * Return the current sorting order
         * @return string ASC|DESC
         */
        public abstract function get_order();
        /**
         * Uniform way to query results
         *
         * @param array $data
         *
         * @return array
         */
        public abstract function get_results(array $data = []);
        /**
         * @return void
         */
        public abstract function manage_sorting();
        /**
         * Add the meta query for sorting to an existing meta query
         *
         * @param array $sorting_meta_query
         * @param array $meta_query
         *
         * @return array
         */
        protected function add_meta_query($sorting_meta_query, $meta_query)
        {
        }
        /**
         * Check if a key is an universal id
         *
         * @param string $key
         *
         * @return bool
         */
        protected function is_universal_id($key)
        {
        }
    }
}
namespace AC {
    interface Renderable
    {
        /**
         * @return string
         */
        public function render();
    }
}
namespace AC\Admin {
    abstract class Section implements \AC\Renderable
    {
        /**
         * @var string
         */
        protected $slug;
        public function __construct($slug)
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
    }
}
namespace ACP\Sorting\Admin\Section {
    class ResetSorting extends \AC\Admin\Section
    {
        const NAME = 'reset-sorting';
        public function __construct()
        {
        }
        public function render()
        {
        }
    }
}
namespace ACP\Sorting\Strategy {
    class Post extends \ACP\Sorting\Strategy
    {
        /**
         * @var WP_Query $wp_query
         */
        private $wp_query;
        /**
         * @var string
         */
        private $post_type;
        public function __construct(\ACP\Sorting\AbstractModel $model, $post_type)
        {
        }
        public function manage_sorting()
        {
        }
        /**
         * @param WP_Query $wp_query
         */
        private function set_wp_query(\WP_Query $wp_query)
        {
        }
        public function get_results(array $args = [])
        {
        }
        /**
         * @return WP_Query
         */
        public function get_query()
        {
        }
        public function get_order()
        {
        }
        /**
         * Get post ID's
         *
         * @param array $args
         *
         * @return array Array of post ID's
         * @since 1.0.7
         */
        protected function get_posts(array $args = [])
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @return int
         */
        public function get_author()
        {
        }
        /**
         * @return array
         */
        public function get_post_status()
        {
        }
        protected function get_pagination_per_page()
        {
        }
        /**
         * Handle the sorting request on the post-type listing screens
         *
         * @param WP_Query $query
         *
         * @since 1.0
         */
        public function handle_sorting_request(\WP_Query $query)
        {
        }
    }
    final class Media extends \ACP\Sorting\Strategy\Post
    {
        public function __construct(\ACP\Sorting\AbstractModel $model)
        {
        }
        protected function get_pagination_per_page()
        {
        }
    }
    class Taxonomy extends \ACP\Sorting\Strategy
    {
        /**
         * @var WP_Term_Query
         */
        private $term_query;
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(\ACP\Sorting\AbstractModel $model, $taxonomy)
        {
        }
        public function manage_sorting()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_results(array $args = [])
        {
        }
        /**
         * @param array $args
         *
         * @return int[]
         */
        protected function get_terms(array $args = [])
        {
        }
        /**
         * @return string
         */
        public function get_order()
        {
        }
        /**
         * @param WP_Term_Query $term_query
         */
        private function set_term_query(\WP_Term_Query $term_query)
        {
        }
        /**
         * return boolean
         */
        private function is_main_query()
        {
        }
        /**
         * @param WP_Term_Query $query
         *
         * @return void
         */
        public function handle_sorting_request(\WP_Term_Query $query)
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * @param string $var
         *
         * @return string|array|null
         */
        protected function get_query_var($var)
        {
        }
    }
    final class Comment extends \ACP\Sorting\Strategy
    {
        /**
         * @var WP_Comment_Query
         */
        protected $query;
        public function manage_sorting()
        {
        }
        private function set_comment_query(\WP_Comment_Query $query)
        {
        }
        /**
         * @return WP_Comment_Query
         */
        public function get_query()
        {
        }
        public function get_order()
        {
        }
        public function get_query_var($key)
        {
        }
        public function get_results(array $args = [])
        {
        }
        private function is_main_query() : bool
        {
        }
        /**
         * @param WP_Comment_Query $query
         */
        public function handle_sorting_request(\WP_Comment_Query $query)
        {
        }
    }
    final class User extends \ACP\Sorting\Strategy
    {
        /**
         * @var WP_User_Query
         */
        private $user_query;
        public function manage_sorting()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_results(array $args = [])
        {
        }
        /**
         * @param array $args
         *
         * @return int[]
         */
        protected function get_users(array $args = [])
        {
        }
        /**
         * @return string
         */
        public function get_order()
        {
        }
        /**
         * @param WP_User_Query $user_query
         */
        private function set_user_query(\WP_User_Query $user_query)
        {
        }
        /**
         * Handle the sorting request on the user listing screen
         *
         * @param WP_User_Query $query
         *
         * @return void
         * @since 1.0
         */
        public function handle_sorting_request(\WP_User_Query $query)
        {
        }
    }
}
namespace ACP\Sorting {
    class NativeSortableFactory
    {
        public function create(\AC\ListScreen $list_screen)
        {
        }
    }
    class ModelFactory
    {
        /**
         * @param Column $column
         *
         * @return AbstractModel|null
         */
        public function create(\AC\Column $column)
        {
        }
    }
}
namespace ACP\Sorting\ApplyFilter {
    /**
     * Wrapper class for the 'acp/sorting/default' filter
     */
    class DefaultSort implements \AC\ApplyFilter
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @param ListScreen $list_screen
         */
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param SortType|null $sort_type
         *
         * @return SortType|null
         */
        public function apply_filters($sort_type)
        {
        }
        private function create_args(\ACP\Sorting\Type\SortType $sort_type)
        {
        }
        /**
         * @param mixed $args
         *
         * @return string|null
         */
        private function parse_order_by($args)
        {
        }
        /**
         * @param mixed args
         *
         * @return string
         */
        private function parse_order($args)
        {
        }
    }
}
namespace ACP\Sorting\NativeSortable {
    class Storage
    {
        const OPTIONS_KEY = 'ac_sorting';
        /**
         * @var string
         */
        private $key;
        /**
         * @param string $list_screen_key
         */
        public function __construct($list_screen_key)
        {
        }
        /**
         * @param array $columns
         *
         * @return void
         */
        public function update(array $columns)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
        /**
         * @return void
         */
        public function delete()
        {
        }
    }
    class NativeSortableRepository
    {
        /**
         * @var ColumnRepository
         */
        private $column_repository;
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ColumnRepository $column_repository, \ACP\Sorting\NativeSortable\Storage $storage)
        {
        }
        /**
         * @param array $column_names
         *
         * @return bool
         */
        public function update(array $column_names)
        {
        }
        /**
         * @param string $order_by
         *
         * @return Column|null
         */
        public function find($order_by)
        {
        }
    }
}
namespace ACP\Sorting {
    class Settings extends \AC\Settings\Column implements \AC\Settings\Header
    {
        /**
         * @var string
         */
        private $sort;
        /**
         * @var bool
         */
        private $has_warning;
        public function __construct(\AC\Column $column, $has_warning = false)
        {
        }
        protected function define_options()
        {
        }
        private function get_instructions()
        {
        }
        public function create_header_view()
        {
        }
        private function tooltip_warning()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_sort()
        {
        }
        /**
         * @param string $sort
         *
         * @return $this
         */
        public function set_sort($sort)
        {
        }
        /**
         * @return bool
         */
        public function is_active()
        {
        }
    }
}
namespace ACP\Sorting\Controller {
    /**
     * Reset all sorting preferences for all users
     */
    class ResetSorting implements \AC\Registerable
    {
        public function register()
        {
        }
        public function handle_request()
        {
        }
    }
    class AjaxResetSorting implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function register()
        {
        }
        private function get_ajax_handler()
        {
        }
        public function handle_reset()
        {
        }
    }
    class ManageSortHandler
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var ModelFactory
         */
        private $model_factory;
        public function __construct(\AC\ListScreen $list_screen, \ACP\Sorting\ModelFactory $model_factory)
        {
        }
        public function handle($request)
        {
        }
    }
    /**
     * When you revisit a page, set the orderby variable so WordPress prints the columns headers properly
     */
    class RequestSetterHandler
    {
        const QUERY_PARAM_MODE = 'mode';
        /**
         * @var UserPreference\SortType
         */
        private $user_preference;
        /**
         * @var Settings\ListScreen\PreferredSort
         */
        private $setting_sort_default;
        /**
         * @var Settings\ListScreen\PreferredSegmentSort
         */
        private $setting_segment_default;
        /**
         * @var ApplyFilter\DefaultSort
         */
        private $default_sort_filter;
        public function __construct(\ACP\Sorting\UserPreference\SortType $user_preference, \ACP\Sorting\Settings\ListScreen\PreferredSort $setting_sort_default, \ACP\Sorting\Settings\ListScreen\PreferredSegmentSort $setting_segment_default, \ACP\Sorting\ApplyFilter\DefaultSort $default_sort_filter)
        {
        }
        private function get_ajax_request_sort_type()
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACP\Sorting\Table {
    class Screen implements \AC\Registerable
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        /**
         * @var Location\Absolute $location
         */
        private $location;
        /**
         * @var NativeSortableRepository
         */
        private $native_sortable_repository;
        /**
         * @var ModelFactory
         */
        private $model_factory;
        /**
         * @var ColumnRepository
         */
        private $column_respository;
        /**
         * @var Settings\ListScreen\PreferredSort
         */
        private $preferred_sort;
        /**
         * @var Settings\ListScreen\PreferredSegmentSort
         */
        private $preferred_segment_sort;
        public function __construct(\AC\ListScreen $list_screen, \AC\Asset\Location\Absolute $location, \ACP\Sorting\NativeSortable\NativeSortableRepository $native_sortable_repository, \ACP\Sorting\ModelFactory $model_factory, \AC\ColumnRepository $column_respository, \ACP\Sorting\Settings\ListScreen\PreferredSort $preferred_sort, \ACP\Sorting\Settings\ListScreen\PreferredSegmentSort $preferred_segment_sort)
        {
        }
        private function user_preference()
        {
        }
        public function register()
        {
        }
        public function add_reset_button(\AC\Table\Screen $table)
        {
        }
        private function request_setter()
        {
        }
        private function manage_sort()
        {
        }
        private function reset_button()
        {
        }
        /**
         * When the orderby (and order) are set, save the preference
         * @since 4.0
         */
        public function save_user_preference()
        {
        }
        /**
         * @param array $sortable_columns Column name or label
         *
         * @return array Column name or Sanitized Label
         */
        public function add_sortable_headings($sortable_columns)
        {
        }
        /**
         * @param array $sortable_columns
         *
         * @return array
         */
        public function unset_original_sortable_headings($sortable_columns)
        {
        }
        public function scripts()
        {
        }
    }
    class ResetButton
    {
        /**
         * @var ColumnRepository
         */
        private $column_repository;
        /**
         * @var Settings\ListScreen\PreferredSort
         */
        private $setting_sort_default;
        /**
         * @var Settings\ListScreen\PreferredSegmentSort
         */
        private $setting_segment_default;
        /**
         * @var ApplyFilter\DefaultSort
         */
        private $default_sort_filter;
        public function __construct(\AC\ColumnRepository $column_repository, \ACP\Sorting\Settings\ListScreen\PreferredSort $setting_sort_default, \ACP\Sorting\Settings\ListScreen\PreferredSegmentSort $setting_segment_default, \ACP\Sorting\ApplyFilter\DefaultSort $default_sort_filter)
        {
        }
        /**
         * @param SortType $request_sort_type
         *
         * @return bool
         */
        private function is_default(\ACP\Sorting\Type\SortType $request_sort_type)
        {
        }
        /**
         * @param SortType $sort_type
         *
         * @return Table\Button|null
         */
        public function get(\ACP\Sorting\Type\SortType $sort_type)
        {
        }
    }
}
namespace AC\ColumnRepository {
    interface Filter
    {
        public function filter(array $columns) : array;
    }
}
namespace ACP\Sorting\Table\Filter {
    class SortableColumns implements \AC\ColumnRepository\Filter
    {
        /**
         * @var ModelFactory
         */
        private $model_factory;
        public function __construct(\ACP\Sorting\ModelFactory $model_factory)
        {
        }
        public function filter(array $columns) : array
        {
        }
        private function is_active(\AC\Column $column)
        {
        }
    }
    class DisabledOriginalColumns implements \AC\ColumnRepository\Filter
    {
        public function filter(array $columns) : array
        {
        }
        private function is_disabled(\AC\Column $column)
        {
        }
    }
}
namespace ACP\Asset\Script {
    class LicenseCheck extends \AC\Asset\Script
    {
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
    class LicenseManager extends \AC\Asset\Script
    {
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        private function get_plugin_update_success_string()
        {
        }
    }
    class Table extends \AC\Asset\Script
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var ColumnSize\UserStorage
         */
        private $user_storage;
        /**
         * @var ColumnSize\ListStorage
         */
        private $list_storage;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\ListScreen $list_screen, \AC\ColumnSize\UserStorage $user_storage, \AC\ColumnSize\ListStorage $list_storage)
        {
        }
        private function is_column_order_active()
        {
        }
        private function is_column_resize_active()
        {
        }
        public function register()
        {
        }
        private function get_column_sizes(\AC\ListScreen $list_screen)
        {
        }
        private function get_column_sizes_by_user(\AC\ListScreen $list_screen)
        {
        }
        private function create_vars(\AC\Type\ColumnWidth $width)
        {
        }
    }
    class PluginUpdatesCheck extends \AC\Asset\Script
    {
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\Entity {
    final class Activation
    {
        /**
         * @var Status
         */
        private $status;
        /**
         * @var RenewalMethod
         */
        private $renewal_method;
        /**
         * @var ExpiryDate
         */
        private $expiry_date;
        /**
         * @var Products
         */
        private $products;
        public function __construct(\ACP\Type\Activation\Status $status, \ACP\Type\Activation\RenewalMethod $renewal_method, \ACP\Type\Activation\ExpiryDate $expiry_date, \ACP\Type\Activation\Products $products)
        {
        }
        /**
         * @return ExpiryDate
         */
        public function get_expiry_date()
        {
        }
        /**
         * @return bool
         */
        public function is_lifetime()
        {
        }
        /**
         * @return bool
         */
        public function is_expired()
        {
        }
        /**
         * @return RenewalMethod
         */
        public function get_renewal_method()
        {
        }
        /**
         * @return bool
         */
        public function is_auto_renewal()
        {
        }
        /**
         * @return bool
         */
        public function is_manual_renewal()
        {
        }
        /**
         * @return Status
         */
        public function get_status()
        {
        }
        /**
         * @return bool
         */
        public function is_active()
        {
        }
        /**
         * @return bool
         */
        public function is_cancelled()
        {
        }
        /**
         * @return Products
         */
        public function get_products()
        {
        }
    }
}
namespace AC\Admin {
    interface MenuFactoryInterface
    {
        /**
         * @param string $current
         *
         * @return Menu
         */
        public function create($current);
    }
    class MenuFactory implements \AC\Admin\MenuFactoryInterface
    {
        /**
         * @var string
         */
        protected $url;
        /**
         * @var Location\Absolute
         */
        protected $location;
        public function __construct($url, \AC\Asset\Location\Absolute $location)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        protected function create_menu_link($slug)
        {
        }
        public function create($current)
        {
        }
    }
}
namespace ACP\Admin {
    class MenuFactory extends \AC\Admin\MenuFactory
    {
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var IntegrationRepository
         */
        private $integration_repository;
        public function __construct($url, \AC\Asset\Location\Absolute $location, \ACP\ActivationTokenFactory $activation_token_factory, \AC\IntegrationRepository $integration_repository)
        {
        }
        public function get_inactive_addon_count()
        {
        }
        public function create($current)
        {
        }
        private function show_license_section()
        {
        }
    }
    class MenuNetworkFactory extends \ACP\Admin\MenuFactory
    {
        public function create($current)
        {
        }
    }
}
namespace AC\Admin {
    interface PageFactoryInterface
    {
        /**
         * @return Renderable
         */
        public function create();
    }
}
namespace ACP\Admin\NetworkPageFactory {
    class Columns implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        private $location_core;
        /**
         * @var DefaultColumnsRepository
         */
        private $default_columns_repository;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var MenuFactoryInterface
         */
        private $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location_core, \AC\DefaultColumnsRepository $default_columns_repository, \AC\ListScreenRepository\Storage $storage, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
    class Tools implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var MenuFactoryInterface
         */
        private $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\ListScreenRepository\Storage $storage, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
}
namespace ACP\Admin {
    class Scripts implements \AC\Registerable
    {
        /**
         * @var Asset\Location\Absolute
         */
        private $location;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        /**
         * @var bool
         */
        private $network_active;
        public function __construct(\AC\Asset\Location\Absolute $location, \ACP\Access\PermissionsStorage $permission_storage, $network_active)
        {
        }
        public function register()
        {
        }
        public function register_usage_limiter()
        {
        }
        public function register_daily_license_check()
        {
        }
        private function enqueue(\AC\Asset\Enqueueable $assets)
        {
        }
    }
}
namespace ACP\Admin\PageFactory {
    class Addons implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var IntegrationRepository
         */
        private $integrations;
        /**
         * @var PermissionsStorage
         */
        private $permissions_storage;
        /**
         * @var MenuFactoryInterface
         */
        private $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\IntegrationRepository $integrations, \ACP\Access\PermissionsStorage $permissions_storage, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
    class License implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var MenuFactoryInterface
         */
        private $menu_factory;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        /**
         * @var LicenseKeyRepository
         */
        private $license_key_repository;
        /**
         * @var PluginRepository
         */
        private $plugin_repository;
        /**
         * @var bool
         */
        private $network_active;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\Admin\MenuFactoryInterface $menu_factory, \ACP\Type\SiteUrl $site_url, \ACP\ActivationTokenFactory $activation_token_factory, \ACP\Access\ActivationStorage $activation_storage, \ACP\Access\PermissionsStorage $permission_storage, \ACP\LicenseKeyRepository $license_key_repository, \ACP\PluginRepository $plugin_repository, $network_active)
        {
        }
        public function create()
        {
        }
    }
    class Columns implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        private $location_core;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var DefaultColumnsRepository
         */
        private $default_column_repository;
        /**
         * @var MenuFactoryInterface
         */
        private $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location_core, \AC\ListScreenRepository\Storage $storage, \AC\DefaultColumnsRepository $default_column_repository, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
}
namespace AC\Admin\PageFactory {
    class Settings implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        protected $location;
        /**
         * @var MenuFactoryInterface
         */
        protected $menu_factory;
        /**
         * @var bool
         */
        private $is_acp_active;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\Admin\MenuFactoryInterface $menu_factory, bool $is_acp_active)
        {
        }
        public function create()
        {
        }
    }
}
namespace ACP\Admin\PageFactory {
    class Settings extends \AC\Admin\PageFactory\Settings
    {
        public function create()
        {
        }
    }
    class Tools implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var MenuFactoryInterface
         */
        private $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\ListScreenRepository\Storage $storage, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
}
namespace AC\Asset {
    interface Enqueueables
    {
        /**
         * @return Assets
         */
        public function get_assets();
    }
}
namespace AC\Admin {
    interface RenderableHead
    {
        /**
         * @return Renderable
         */
        public function render_head();
    }
}
namespace AC\Admin\Page {
    class Addons implements \AC\Asset\Enqueueables, \AC\Renderable, \AC\Admin\RenderableHead
    {
        const NAME = 'addons';
        /**
         * @var Location\Absolute
         */
        protected $location;
        /**
         * @var IntegrationRepository
         */
        protected $integrations;
        /**
         * @var Renderable
         */
        protected $head;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\IntegrationRepository $integrations, \AC\Renderable $head)
        {
        }
        public function render_head()
        {
        }
        public function get_assets()
        {
        }
        public function render()
        {
        }
        /**
         * @param AC\Integration $addon
         *
         * @return Renderable
         */
        protected function render_actions(\AC\Integration $addon) : ?\AC\Renderable
        {
        }
        /**
         * @return array
         */
        protected function get_grouped_addons()
        {
        }
    }
}
namespace ACP\Admin\Page {
    class Addons extends \AC\Admin\Page\Addons
    {
        protected function render_actions(\AC\Integration $addon) : ?\AC\Renderable
        {
        }
        protected function get_grouped_addons()
        {
        }
    }
    class License implements \AC\Asset\Enqueueables, \AC\Renderable, \AC\Admin\RenderableHead
    {
        const NAME = 'license';
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Renderable
         */
        private $head;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var ActivationTokenFactory
         */
        private $activation_token_factory;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        /**
         * @var LicenseKeyRepository
         */
        private $license_key_repository;
        /**
         * @var PluginRepository
         */
        private $plugin_repository;
        /**
         * @var bool
         */
        private $network_active;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\Renderable $head, \ACP\Type\SiteUrl $site_url, \ACP\ActivationTokenFactory $activation_token_factory, \ACP\Access\ActivationStorage $activation_storage, \ACP\Access\PermissionsStorage $permission_storage, \ACP\LicenseKeyRepository $license_key_repository, \ACP\PluginRepository $plugin_repository, $network_active)
        {
        }
        public function render_head()
        {
        }
        public function get_assets()
        {
        }
        /**
         * @param string $plugin_name
         *
         * @return ACP\Type\Url\Changelog
         */
        private function get_changelog_url($plugin_name)
        {
        }
        private function show_render_section_updates()
        {
        }
        public function render()
        {
        }
        private function render_section_updates() : \AC\View
        {
        }
        private function render_section_update(\AC\PluginInformation $plugin)
        {
        }
        private function get_inline_notice()
        {
        }
        private function render_network_message()
        {
        }
        private function render_license_section()
        {
        }
    }
    class Tools implements \AC\Asset\Enqueueables, \AC\Renderable, \AC\Admin\RenderableHead
    {
        const NAME = 'import-export';
        /**
         * @var Renderable[]
         */
        private $sections = [];
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Renderable
         */
        private $head;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\Renderable $head)
        {
        }
        public function render_head()
        {
        }
        /**
         * @param Renderable $section
         *
         * @return $this
         */
        public function add_section(\AC\Renderable $section)
        {
        }
        public function get_assets()
        {
        }
        public function render()
        {
        }
    }
}
namespace ACP\Admin {
    class Settings implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var SegmentRepository
         */
        private $segment_repository;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location\Absolute $location, \ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        public function register()
        {
        }
        public function render_submenu_view(\AC\ListScreen $current_list_screen)
        {
        }
        /**
         * @param string $key
         *
         * @return ListScreenCollection
         */
        private function get_list_screens($key)
        {
        }
        public function render_title(\AC\ListScreen $list_screen)
        {
        }
        public function render_sidebar(\AC\ListScreen $current_list_screen)
        {
        }
        /**
         * Admin Scripts
         */
        public function admin_scripts($main)
        {
        }
        private function tooltip_horizontal_scrolling()
        {
        }
        private function tooltip_filters()
        {
        }
        private function tooltip_primary_column()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return bool
         */
        private function can_bookmark(\AC\ListScreen $list_screen)
        {
        }
        public function render_settings(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param ListScreenId $list_screen_id
         *
         * @return array
         */
        private function get_segments_for_list_screen_id(\AC\Type\ListScreenId $list_screen_id)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return string HTML
         */
        private function get_checkboxes(\AC\ListScreen $list_screen)
        {
        }
        private function render_checkbox($name, $label, $is_checked, $dependent_on = [], $class = '')
        {
        }
        public function render_sidebar_help()
        {
        }
        /**
         * @param array $roles
         * @param bool  $is_disabled
         *
         * @return AC\Form\Element\MultiSelect
         */
        private function select_roles(array $roles = [], $is_disabled = false)
        {
        }
        /**
         * @return array
         */
        private function get_grouped_role_names()
        {
        }
        private function get_primary_column_options(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param array $user_ids
         * @param bool  $is_disabled
         *
         * @return AC\Form\Element\MultiSelect
         */
        private function select_users(array $user_ids = [], $is_disabled = false)
        {
        }
        /**
         * @param string     $message
         * @param ListScreen $list_screen
         *
         * @return string
         */
        public function read_only_message($message, $list_screen)
        {
        }
    }
    class Feedback implements \AC\Renderable, \AC\Asset\Enqueueables
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function get_assets()
        {
        }
        public function render()
        {
        }
    }
}
namespace ACP\Migrate {
    trait MessageTrait
    {
        /**
         * @param string      $message
         * @param string|null $type
         */
        protected function set_message($message, $type = null)
        {
        }
    }
}
namespace ACP\Migrate\Admin\Section {
    class Export implements \AC\Renderable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var bool
         */
        private $network_only;
        public function __construct(\AC\ListScreenRepository\Storage $storage, $network_only)
        {
        }
        public function render()
        {
        }
    }
    class Import implements \AC\Renderable
    {
        public function render()
        {
        }
    }
}
namespace AC\Admin {
    abstract class Table
    {
        /**
         * @var string
         */
        protected $message;
        /**
         * @return array
         */
        public abstract function get_headings();
        /**
         * @return Traversable
         */
        public abstract function get_rows();
        /**
         * @param string $key
         * @param mixed  $data
         *
         * @return string
         */
        public abstract function get_column($key, $data);
        /**
         * @return bool
         */
        public function has_message()
        {
        }
        public function get_message()
        {
        }
        public function render()
        {
        }
    }
}
namespace ACP\Migrate\Admin\Table {
    class Export extends \AC\Admin\Table
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var bool
         */
        private $network_only;
        public function __construct(\AC\ListScreenRepository\Storage $storage, $network_only)
        {
        }
        /**
         * @return ListScreenCollection
         */
        public function get_rows()
        {
        }
        /**
         * @param string     $key
         * @param ListScreen $list_screen
         *
         * @return string|null
         */
        public function get_column($key, $list_screen)
        {
        }
        private function get_repository_label($repository_name)
        {
        }
        private function get_source(\AC\ListScreen $list_screen)
        {
        }
        public function get_headings()
        {
        }
    }
}
namespace ACP\Migrate\Export {
    final class ResponseFactory
    {
        const FILE = 'file';
        /**
         * @var Encoder
         */
        private $encoder;
        public function __construct(\ACP\Storage\ListScreen\Encoder $encoder)
        {
        }
        /**
         * @param ListScreenCollection $list_screens
         * @param string|null          $type
         *
         * @return Response
         */
        public function create(\AC\ListScreenCollection $list_screens, $type = null)
        {
        }
    }
    interface Response
    {
        /**
         * @return void
         */
        public function send();
    }
}
namespace ACP\Migrate\Export\Response {
    final class Screen implements \ACP\Migrate\Export\Response
    {
        /**
         * @var ListScreenCollection
         */
        private $list_screens;
        /**
         * @var Encoder
         */
        private $encoder;
        public function __construct(\AC\ListScreenCollection $list_screens, \ACP\Storage\ListScreen\Encoder $encoder)
        {
        }
        /**
         * @return void
         */
        public function send()
        {
        }
    }
    final class File implements \ACP\Migrate\Export\Response
    {
        use \ACP\Migrate\MessageTrait;
        /**
         * @var string
         */
        private $type;
        /**
         * @var ListScreenCollection
         */
        private $list_screens;
        /**
         * @var Encoder
         */
        private $encoder;
        public function __construct($type, \AC\ListScreenCollection $list_screens, \ACP\Storage\ListScreen\Encoder $encoder)
        {
        }
        /**
         * @return void
         */
        public function send()
        {
        }
        private function get_file_name()
        {
        }
    }
}
namespace ACP\Migrate\Export {
    final class Request implements \AC\Registerable
    {
        const ACTION = 'acp-export';
        const NONCE_NAME = 'acp_export_nonce';
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var ResponseFactory
         */
        private $response_factory;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \ACP\Migrate\Export\ResponseFactory $response_factory)
        {
        }
        public function register()
        {
        }
        /**
         * @return void
         */
        public function handle_request()
        {
        }
        /**
         * @param array $ids
         *
         * @return AC\ListScreenCollection
         */
        protected function get_list_screens_from_request(array $ids)
        {
        }
    }
}
namespace ACP\Migrate\Import {
    final class Request implements \AC\Registerable
    {
        use \ACP\Migrate\MessageTrait;
        const ACTION = 'acp-import';
        const NONCE_NAME = 'acp_import_nonce';
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var LegacyCollectionDecoder
         */
        private $legacy_collection_decoder;
        /**
         * @var DecoderFactory
         */
        private $decoder_factory;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \ACP\Storage\ListScreen\DecoderFactory $decoder_factory, \ACP\Storage\ListScreen\LegacyCollectionDecoder $legacy_collection_decoder)
        {
        }
        public function register()
        {
        }
        /**
         * @return bool
         */
        private function is_request()
        {
        }
        /**
         * @return void
         */
        public function handle_request()
        {
        }
        private function success(\AC\ListScreenCollection $list_screens)
        {
        }
    }
}
namespace ACP {
    class RequestHandlerFactory
    {
        /**
         * @var RequestHandler[]
         */
        private $request_handlers;
        /**
         * @var Request
         */
        private $request;
        public function __construct(\AC\Request $request)
        {
        }
        public function add($action, \ACP\RequestHandler $request_handler)
        {
        }
        public function is_request()
        {
        }
        /**
         * @return RequestHandler|null
         */
        private function get_request_handler()
        {
        }
        /**
         * @return RequestHandler
         */
        public function create()
        {
        }
    }
}
namespace ACP\QuickAdd {
    class Addon implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Location
         */
        private $location;
        /**
         * @var AC\Request
         */
        private $request;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location $location, \AC\Request $request)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\QuickAdd\Model {
    interface Create
    {
        /**
         * @return int
         */
        public function create();
        /**
         * @param WP_User $user
         *
         * @return bool
         */
        public function has_permission(\WP_User $user);
    }
}
namespace ACP\QuickAdd\Model\Create {
    class Post implements \ACP\QuickAdd\Model\Create
    {
        protected $post_type;
        public function __construct(string $post_type)
        {
        }
        public function create()
        {
        }
        public function has_permission(\WP_User $user)
        {
        }
    }
}
namespace ACP\QuickAdd\Model {
    class Factory
    {
        /**
         * @var ModelFactory[]
         */
        private static $factories = [];
        public static function add_factory(\ACP\QuickAdd\Model\ModelFactory $factory)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return Create|null
         */
        public static function create(\AC\ListScreen $list_screen)
        {
        }
    }
    interface ModelFactory
    {
        /**
         * @param ListScreen $list_screen
         *
         * @return Create
         */
        public function create(\AC\ListScreen $list_screen);
    }
    class PostFactory implements \ACP\QuickAdd\Model\ModelFactory
    {
        public function create(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP\QuickAdd\Admin\HideOnScreen {
    class QuickAdd extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
        public function is_hidden(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP\QuickAdd\Admin {
    class Settings implements \AC\Registerable
    {
        /**
         * @var Filter
         */
        private $filter;
        public function __construct(\ACP\QuickAdd\Filter $filter)
        {
        }
        public function register()
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP\QuickAdd {
    class Filter
    {
        /**
         * @param ListScreen $list_screen
         *
         * @return bool
         */
        public function match(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP\QuickAdd\Controller {
    class AjaxScreenOption implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Table\Preference\ShowButton
         */
        private $preference_button;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \ACP\QuickAdd\Table\Preference\ShowButton $preference_button)
        {
        }
        public function register()
        {
        }
        protected function get_ajax_handler()
        {
        }
        public function update_table_option()
        {
        }
    }
    class JsonResponse extends \AC\Response\Json
    {
        public function create_from_list_screen(\AC\ListScreen $list_screen, $id)
        {
        }
    }
    class AjaxNewItem implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Request
         */
        protected $request;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Request $request)
        {
        }
        public function register()
        {
        }
        public function register_hooks(\AC\ListScreen $list_screen)
        {
        }
        private function is_request()
        {
        }
        public function handle_request()
        {
        }
    }
}
namespace AC\Form {
    abstract class Element implements \AC\Renderable
    {
        /**
         * @var array
         */
        protected $attributes = [];
        /**
         * Options for element like select
         * @var array
         */
        protected $options = [];
        /**
         * The elements value
         * @var mixed
         */
        protected $value;
        /**
         * Label
         * @var string
         */
        protected $label;
        /**
         * Extra description
         * @var string
         */
        protected $description;
        /**
         * Setup element with base name and id
         *
         * @param string $name
         * @param array  $options
         */
        public function __construct($name, array $options = [])
        {
        }
        /**
         * @return string|false
         */
        protected function render_description()
        {
        }
        /**
         * Render this element
         * @return string
         */
        public abstract function render();
        /**
         * @param $key
         *
         * @return string|false
         */
        public function get_attribute($key)
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return $this
         */
        public function set_attribute($key, $value)
        {
        }
        /**
         * @return array
         */
        public function get_attributes()
        {
        }
        /**
         * @param array $attributes
         *
         * @return $this
         */
        public function set_attributes(array $attributes)
        {
        }
        /**
         * Get attributes as string
         *
         * @param array $attributes
         *
         * @return string
         */
        protected function get_attributes_as_string(array $attributes)
        {
        }
        /**
         * Render an attribute
         *
         * @param string $key
         * @param string $value
         *
         * @return string
         */
        protected function get_attribute_as_string($key, $value = null)
        {
        }
        public function get_name()
        {
        }
        /**
         * @param string $name
         *
         * @return $this
         */
        public function set_name($name)
        {
        }
        /**
         * @return false|string
         */
        public function get_id()
        {
        }
        /**
         * @param string $id
         *
         * @return $this
         */
        public function set_id($id)
        {
        }
        /**
         * @return mixed
         */
        public function get_value()
        {
        }
        /**
         * @param mixed $value
         *
         * @return $this
         */
        public function set_value($value)
        {
        }
        /**
         * @param string $class
         *
         * @return $this
         */
        public function set_class($class)
        {
        }
        /**
         * @param string $class
         *
         * @return $this
         */
        public function add_class($class)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         *
         * @return $this
         */
        public function set_label($label)
        {
        }
        /**
         * @param array $options
         *
         * @return $this
         */
        public function set_options(array $options)
        {
        }
        /**
         * @return array
         */
        public function get_options()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @param $description
         *
         * @return $this
         */
        public function set_description($description)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace AC\Form\Element {
    class Checkbox extends \AC\Form\Element
    {
        /**
         * @var bool
         */
        protected $vertical;
        protected $multiple;
        protected function get_type()
        {
        }
        protected function get_classes()
        {
        }
        public function render()
        {
        }
        private function get_elements()
        {
        }
        public function set_multiple($multiple)
        {
        }
        public function is_multiple()
        {
        }
        public function set_vertical($vertical)
        {
        }
        public function is_vertical()
        {
        }
    }
}
namespace ACP\QuickAdd\Table\Checkbox {
    class ShowButton extends \AC\Form\Element\Checkbox
    {
        public function __construct($value)
        {
        }
    }
}
namespace ACP\QuickAdd\Table\Preference {
    class ShowButton extends \AC\Preferences\Site
    {
        const NAME = 'show_new_inline_button';
        public function __construct($user_id = null)
        {
        }
        public function is_active($key)
        {
        }
    }
}
namespace ACP\QuickAdd\Table\Script {
    class AddNewInline extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $label;
        public function __construct($label, $handle, \AC\Asset\Location $location = null, array $dependencies = [])
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\QuickAdd\Table {
    class Loader implements \AC\Registerable
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var HideOnScreen\QuickAdd
         */
        private $hide_on_screen;
        /**
         * @var Preference\ShowButton
         */
        private $preference;
        /**
         * @var Filter
         */
        private $filter;
        public function __construct(\AC\Asset\Location $location, \ACP\QuickAdd\Admin\HideOnScreen\QuickAdd $hide_on_screen, \ACP\QuickAdd\Table\Preference\ShowButton $preference, \ACP\QuickAdd\Filter $filter)
        {
        }
        public function register()
        {
        }
        public function load(\AC\Table\Screen $table_screen)
        {
        }
    }
}
namespace ACP {
    class IconPicker implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * Replace the default label setting with an pro version that includes an iconpicker
         *
         * @param Column $column
         *
         * @return void;
         */
        public function register_column_settings(\AC\Column $column)
        {
        }
    }
}
namespace ACP\Export {
    class Addon implements \AC\Registerable
    {
        /**
         * @var Location
         */
        private $location;
        /**
         * @var ListScreenRepository
         */
        private $list_screen_repository;
        public function __construct(\AC\Asset\Location $location, \AC\ListScreenRepository $list_screen_repository)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\Export\RequestHandler\Ajax {
    class FileName implements \ACP\RequestAjaxHandler
    {
        /**
         * @var ListScreenRepository
         */
        private $list_screen_repository;
        public function __construct(\AC\ListScreenRepository $list_screen_repository)
        {
        }
        public function handle()
        {
        }
    }
}
namespace ACP\Export {
    /**
     * Exportability model, which can be attached as an extension to a column. It handles custom
     * behaviour a column should exhibit when being exported
     */
    abstract class Model
    {
        /**
         * @var Column
         */
        protected $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function get_column()
        {
        }
        /**
         * Retrieve the value to be exported by the column for a specific item
         *
         * @param int $id
         *
         * @return string
         */
        public abstract function get_value($id);
    }
}
namespace ACP\Export\Model {
    /**
     * Exportability model for outputting the column's raw value
     * @since 4.1
     */
    class RawValue extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Exportability model for outputting the column's raw value, but with stripped HTML tags
     * @since 4.1
     */
    class StrippedRawValue extends \ACP\Export\Model\RawValue
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\Post {
    /**
     * Author (default column) exportability model
     * @since 4.1
     */
    class Author extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Comment Count exportability model
     * @since 4.1
     */
    class CommentCount extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Taxonomy (default column) exportability model
     * @property AC\Column\Taxonomy $column
     * @since 4.1
     */
    class Taxonomy extends \ACP\Export\Model
    {
        public function __construct($column)
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * Shortcodes column exportability model
     * @since 4.1
     */
    class Shortcodes extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Date (default column) exportability model
     * @since 4.1
     */
    class Date extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Parent (default column) exportability model
     * @since 4.1
     */
    class PostParent extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Shows Internal / External links in post content
     * @since 4.1
     */
    class LinkCount extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 4.1
     */
    class ChildPages extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model {
    /**
     * @since 5.7
     */
    class Meta extends \ACP\Export\Model
    {
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @var AC\MetaType
         */
        protected $meta_type;
        public function __construct(\AC\Column $column, \AC\MetaType $meta_type, $meta_key)
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\Post {
    /**
     * @since 5.7
     */
    class Meta extends \ACP\Export\Model\Meta
    {
        public function __construct(\AC\Column $column, $meta_key)
        {
        }
    }
}
namespace ACP\Export\Model {
    /**
     * Exportability model for outputting the column's output value
     * @since 4.1
     */
    class Value extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
        /**
         * What to return for an empty char
         * @return string
         */
        public function get_empty_char()
        {
        }
    }
}
namespace ACP\Export\Model\Post {
    /**
     * Last modified author column exportability model
     * @since 4.1
     */
    class LastModifiedAuthor extends \ACP\Export\Model\Value
    {
        /**
         * @param AC\Column\Post\LastModifiedAuthor $column
         */
        public function __construct(\AC\Column\Post\LastModifiedAuthor $column)
        {
        }
    }
    /**
     * Post title (default column) exportability model
     * @since 4.1
     */
    class Title extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Comments (default column) exportability model
     * @since 4.1
     */
    class Comments extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @property Column\Post\Ancestors $column
     * @since 4.2
     */
    class Ancestors extends \ACP\Export\Model
    {
        public function __construct(\ACP\Column\Post\Ancestors $column)
        {
        }
        public function get_value($id)
        {
        }
    }
    class Permalink extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 4.1
     */
    class ImageFileSizes extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 4.1
     */
    class Attachment extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    class Roles extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model {
    /**
     * Exportability model for outputting an attachment's URL based on its ID
     * @since 4.1
     */
    class AttachmentURLFromAttachmentId extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\User {
    /**
     * Posts count (default column) exportability model
     * @since 4.1
     */
    class Posts extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 4.1
     */
    class FullName extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Email (default column) exportability model
     * @since 4.1
     */
    class Email extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 4.1
     */
    class Login extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    class Nicename extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @property ACP\Column\User\UserPosts $column
     */
    class UserPosts extends \ACP\Export\Model
    {
        public function __construct(\ACP\Column\User\UserPosts $column)
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * Role (default column) exportability model
     * @since 4.1
     */
    class Role extends \ACP\Export\Model
    {
        /**
         * @var bool
         */
        private $allow_all_roles;
        public function __construct(\AC\Column $column, bool $allow_all_roles)
        {
        }
        private function is_site_role($role)
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\Term {
    /**
     * Name (default column) exportability model
     * @since 4.1
     */
    class Posts extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Name (default column) exportability model
     * @since 4.1
     */
    class Slug extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Name (default column) exportability model
     * @since 4.1
     */
    class Name extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Name (default column) exportability model
     * @since 4.1
     */
    class Description extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\CustomField {
    class Date extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    class Image extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model {
    /**
     * Exportability model for outputting a post's title based on its ID
     * @since 4.1
     */
    class PostTitleFromPostId extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\Media {
    class Title extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model\Comment {
    /**
     * Author (default column) exportability model
     * @since 4.1
     */
    class Author extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Date (default column) exportability model
     * @since 4.1
     */
    class Date extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 4.1
     */
    class AuthorAvatar extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Comment (default column) exportability model
     * @since 4.1
     */
    class Comment extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * Response (default column) exportability model
     * @since 4.1
     */
    class Response extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\Model {
    /**
     * @property Column\CustomField $column
     * @since 4.1
     */
    class CustomField extends \ACP\Export\Model\RawValue
    {
        public function __construct(\AC\Column\CustomField $column)
        {
        }
    }
    /**
     * Exportability model for outputting the column's output value
     * @since 4.1
     */
    class StrippedValue extends \ACP\Export\Model\Value
    {
        /**
         * Strips all HTML from content. Also, replace <br> with a space for readability.
         *
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
    }
    /**
     * @since      4.1
     * @deprecated 6.0
     */
    class Disabled extends \ACP\Export\Model
    {
        public function is_active()
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACP\Export\UserPreference {
    class ExportedColumns
    {
        /**
         * @var Site
         */
        private $user_preference;
        public function __construct()
        {
        }
        public function save(\AC\Type\ListScreenId $id, array $column_names) : void
        {
        }
        public function exists(\AC\Type\ListScreenId $id) : bool
        {
        }
        public function get(\AC\Type\ListScreenId $id) : array
        {
        }
        public function delete(\AC\Type\ListScreenId $id) : void
        {
        }
    }
}
namespace ACP\Export {
    interface ListScreen
    {
        /**
         * @return ACP\Export\Strategy
         */
        public function export();
    }
}
namespace ACP\Export\Settings {
    class Column extends \AC\Settings\Column implements \AC\Settings\Header
    {
        const NAME = 'export';
        /**
         * @var string
         */
        private $export;
        /**
         * @return array
         */
        protected function define_options()
        {
        }
        public function create_header_view()
        {
        }
        private function get_instructions()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_export()
        {
        }
        /**
         * @param string $export
         *
         * @return $this
         */
        public function set_export($export)
        {
        }
        /**
         * @return bool
         */
        public function is_active()
        {
        }
    }
}
namespace ACP\Export\HideOnScreen {
    class Export extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\Export {
    /**
     * Base class for exporters, which handle the construction of the file content for an an exported
     * list screen. Extending classes should generally implement exporting functionality for a specific
     * file format, such as CSV
     * @since 1.0
     */
    abstract class Exporter
    {
        /**
         * Rows to be exported. Format: array of associative arrays, where each associative array
         * denotes a row; a key should be the column name, and the values should be the corresponding
         * value
         * @since 1.0
         * @var array
         */
        private $data;
        /**
         * Column header labels. Should, for each column key, contain the corresponding label to be
         * outputted in the exported file
         * @since 1.0
         * @var array
         */
        private $column_labels;
        /**
         * Export the data to a temporary file. The file should be the CSV, Excel or other export file
         * such that it can be downloaded by the user
         *
         * @param resource $fh File reference pointer of file to write to
         *
         * @return string
         * @since 1.0
         */
        public abstract function export($fh);
        /**
         * Load an array of data to the exporter
         *
         * @param array $data Data array. See the property $data for the expected format
         *
         * @since 1.0
         */
        public function load_data($data)
        {
        }
        /**
         * Retrieve the data loaded to the exporter
         * @return array Data array. See the property $data for the returned format
         * @since 1.0
         */
        public function get_data()
        {
        }
        /**
         * Load an array of column labels to the exporter
         *
         * @param array $column_labels Column labels array. See the property $column_labels for the
         *                             expected format
         *
         * @since 1.0
         */
        public function load_column_labels($column_labels)
        {
        }
        /**
         * Retrieve the column labels loaded to the exporter
         * @return array Column labels array. See the property $data for the returned format
         * @since 1.0
         */
        public function get_column_labels()
        {
        }
    }
    /**
     * Base class for governing exporting for a list screen that is exportable. This class should be
     * extended, generally, per list screen. Furthermore, each instance of this class should be linked
     * to an Admin Columns list screen object
     * @since 1.0
     */
    abstract class Strategy
    {
        /**
         * Admin Columns list screen object this object is attached to
         * @since 1.0
         * @var ListScreen
         */
        protected $list_screen;
        /**
         * @var ListTableFactory
         */
        protected $list_table_factory;
        /**
         * @var ColumnRepository
         */
        private $column_repository;
        /**
         * @var Request
         */
        private $request;
        /**
         * Perform all required actions for when an AJAX export is requested. The parent class (this
         * class) will perform the necessary validation, and the inheriting class should implement
         * the actual functionality for setting up the items to be exported. The parent class's (this
         * class) `export` method can then be used to actually export the items
         * @since 1.0
         */
        protected abstract function ajax_export() : void;
        /**
         * Constructor
         *
         * @param AC\ListScreen $list_screen Associated Admin Columns list screen objec
         *
         * @since 1.0
         */
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        protected function get_list_table() : ?\AC\ListTable
        {
        }
        public function is_active() : bool
        {
        }
        /**
         * Callback for when the list screen is loaded in Admin Columns, i.e., when it is active. Child
         * classes should implement this method for any setup-related functionality
         * @since 1.0
         */
        public function attach() : void
        {
        }
        /**
         * Check whether an AJAX export should be made, and validate the input data. Will call child's
         * `ajax_export` method to do the actual exporting
         * @since 1.0
         */
        public function maybe_ajax_export() : void
        {
        }
        /**
         * Get the counter value passed for the AJAX export
         * @return int|false Counter value, or false if there is no valid counter value
         * @since 1.0
         */
        protected function get_export_counter()
        {
        }
        /**
         * @return int[]
         */
        protected function get_requested_ids() : array
        {
        }
        /**
         * @return Column[]
         */
        public function get_exportable_columns() : array
        {
        }
        /**
         * @return Column[]
         */
        public function get_requested_columns() : array
        {
        }
        /**
         * Retrieve the rows to export based on a set of item IDs. The rows contain the column data to
         * export for each item
         *
         * @param int[]    $ids IDs of the items to export
         * @param Column[] $columns
         *
         * @return array[mixed] Rows to export. One row is returned for each item ID
         * @since 1.0
         */
        public function get_rows(array $ids, array $columns) : array
        {
        }
        /**
         * Retrieve the headers for the columns
         *
         * @param Column[] $columns
         *
         * @return string[] Associative array of header labels for the columns.
         */
        protected function get_headers(array $columns) : array
        {
        }
        /**
         * @param Column[] $columns
         *
         * @return void
         */
        private function save_columns_as_user_preference(array $columns) : void
        {
        }
        /**
         * Export a list of items, given the item IDs, and sends the output as JSON to the requesting
         * AJAX process
         *
         * @param int[] $ids
         */
        public function export(array $ids) : void
        {
        }
        /**
         * Get the filtered number of items per iteration of the exporting algorithm
         * @return int Number of items per export iteration
         */
        public function get_num_items_per_iteration() : int
        {
        }
        /**
         * @return int|null
         */
        public function get_total_items() : ?int
        {
        }
    }
    class Admin implements \AC\Registerable
    {
        public function register()
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP\Export\Asset\Script {
    final class Table extends \AC\Asset\Script
    {
        const NONCE_ACTION = 'acp_export_listscreen_export';
        /**
         * @var Export\Strategy
         */
        private $strategy;
        /**
         * @var array [ $column_name => $column_label, ... ]
         */
        private $columns;
        public function __construct($handle, \AC\Asset\Location $location, \ACP\Export\Strategy $strategy, array $columns)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\Export {
    class TableScreen implements \AC\Registerable
    {
        /**
         * @var Location
         */
        protected $location;
        public function __construct(\AC\Asset\Location $location)
        {
        }
        public function register()
        {
        }
        /**
         * Load a list screen and potentially attach the proper exporting information to it
         *
         * @param AC\ListScreen $list_screen List screen for current table screen
         */
        public function load_list_screen(\AC\ListScreen $list_screen) : void
        {
        }
        private function is_exportable(\AC\ListScreen $list_screen) : bool
        {
        }
        private function get_user_preference_column_names(\AC\Type\ListScreenId $id) : array
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return AC\Column[]
         */
        private function get_exportable_column_labels(\AC\ListScreen $list_screen) : array
        {
        }
        private function get_sanitized_label(\AC\Column $column) : string
        {
        }
        /**
         * Allows plain text and dashicons
         */
        private function sanitize_column_label(string $label) : string
        {
        }
        public function scripts(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\Table\Screen $table
         */
        public function register_screen_option(\AC\Table\Screen $table)
        {
        }
        public function preferences()
        {
        }
        private function get_export_button_setting(\AC\ListScreen $list_screen) : bool
        {
        }
        /**
         * @param string $list_screen_key
         * @param int    $value
         */
        private function set_export_button_setting($list_screen_key, $value)
        {
        }
        public function update_table_option_show_export_button()
        {
        }
        /**
         * @param string          $classes
         * @param AC\Table\Screen $table
         *
         * @return string
         */
        public function add_hide_export_button_class($classes, $table)
        {
        }
    }
}
namespace ACP\Export\Strategy {
    /**
     * Exportability class for terms list screen
     * @property ACP\ListScreen\Taxonomy $list_screen
     */
    class Taxonomy extends \ACP\Export\Strategy
    {
        /**
         * @param ACP\ListScreen\Taxonomy $list_screen
         */
        public function __construct(\ACP\ListScreen\Taxonomy $list_screen)
        {
        }
        protected function ajax_export() : void
        {
        }
        /**
         * Catch the terms query and run it with altered parameters for pagination. This should be
         * attached to the parse_term_query hook when an AJAX request is sent
         *
         * @param $query
         *
         * @see   action:parse_term_query
         * @since 1.0
         */
        public function terms_query(\WP_Term_Query $query) : void
        {
        }
    }
    /**
     * Exportability class for posts list screen
     * @property AC\ListScreenPost $list_screen
     */
    class Post extends \ACP\Export\Strategy
    {
        public function __construct(\AC\ListScreenPost $list_screen)
        {
        }
        protected function ajax_export() : void
        {
        }
        public function filter_ids($clauses, \WP_Query $query)
        {
        }
        /**
         * Modify the main posts query to use the correct pagination arguments. This should be attached
         * to the pre_get_posts hook when an AJAX request is sent
         *
         * @param WP_Query $query
         *
         * @since 1.0
         * @see   action:pre_get_posts
         */
        public function modify_posts_query($query)
        {
        }
        /**
         * Run the actual export when the posts query is finalized. This should be attached to the
         * the_posts filter when an AJAX request is run
         *
         * @param array    $posts
         * @param WP_Query $query
         *
         * @return array
         */
        public function catch_posts($posts, \WP_Query $query)
        {
        }
    }
    /**
     * Exportability class for comments list screen
     * @property ListScreen\Comment $list_screen
     */
    class Comment extends \ACP\Export\Strategy
    {
        public function __construct(\AC\ListScreen\Comment $list_screen)
        {
        }
        protected function ajax_export() : void
        {
        }
        /**
         * Catch the comments query and run it with altered parameters for pagination. This should be
         * attached to the parse_comment_query hook when an AJAX request is sent
         *
         * @param $query
         *
         * @see   action:pre_get_posts
         * @since 1.0
         */
        public function comments_query($query) : void
        {
        }
    }
    /**
     * Exportability class for users list screen
     * @property AC\ListScreen\User $list_screen
     */
    class User extends \ACP\Export\Strategy
    {
        public function __construct(\AC\ListScreen\User $list_screen)
        {
        }
        protected function ajax_export() : void
        {
        }
        /**
         * Modify the users query to use the correct pagination arguments, and epxort the resulting
         * items. This should be attached to the users_list_table_query_args hook when an AJAX request
         * is sent
         *
         * @param $args
         *
         * @see   filter:users_list_table_query_args
         * @since 1.0
         */
        public function catch_users_query($args) : void
        {
        }
    }
}
namespace ACP\Export\Repository\Filter {
    class ExcludeColumnNames implements \AC\ColumnRepository\Filter
    {
        /**
         * @var array
         */
        private $column_names;
        public function __construct(array $column_names)
        {
        }
        public function filter(array $columns) : array
        {
        }
        private function not_contains(\AC\Column $column) : bool
        {
        }
    }
    class ExportableColumns implements \AC\ColumnRepository\Filter
    {
        public function filter(array $columns) : array
        {
        }
        private function is_exportable(\AC\Column $column) : bool
        {
        }
    }
    class IncludeColumnNames implements \AC\ColumnRepository\Filter
    {
        /**
         * @var array
         */
        private $column_names;
        public function __construct(array $column_names)
        {
        }
        public function filter(array $columns) : array
        {
        }
        private function contains(\AC\Column $column) : bool
        {
        }
    }
}
namespace AC\ColumnRepository {
    interface Sort
    {
        /**
         * @param Column[] $columns
         *
         * @return Column[]
         */
        public function sort(array $columns) : array;
    }
}
namespace ACP\Export\Repository\Sort {
    class ColumnNames implements \AC\ColumnRepository\Sort
    {
        /**
         * @var string[]
         */
        private $column_names;
        public function __construct(array $column_names)
        {
        }
        public function sort(array $columns) : array
        {
        }
    }
}
namespace ACP\Export\ApplyFilter {
    class ListScreenActive implements \AC\ApplyFilter
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function apply_filters($value)
        {
        }
    }
    class ColumnActive implements \AC\ApplyFilter
    {
        /**
         * @var Column
         */
        private $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function apply_filters($is_enabled)
        {
        }
    }
}
namespace ACP\Export\Exporter {
    class CSV extends \ACP\Export\Exporter
    {
        /**
         * @param resource $fh
         */
        public function export($fh)
        {
        }
        private function get_delimiter() : string
        {
        }
        /**
         * Format the output to a string. For scalars (integers, strings, etc.), it returns the input
         * value cast to a string. For arrays, it (deeply) applies this function to the array values
         * and returns them in a comma-separated string
         *
         * @param mixed $value Input value
         *
         * @return string Formatted value
         */
        private function format_output($value) : string
        {
        }
    }
}
namespace ACP\Export {
    class Settings implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location
         */
        protected $location;
        public function __construct(\AC\Asset\Location $location)
        {
        }
        public function register()
        {
        }
        /**
         * @param AC\Column $column
         *
         * @return bool
         */
        private function is_exportable(\AC\Column $column)
        {
        }
        public function column_settings(\AC\Column $column)
        {
        }
        public function admin_scripts()
        {
        }
    }
}
namespace ACP\Helper {
    final class FilterButtonFactory
    {
        const SCREEN_USERS = 'users';
        const SCREEN_TAXONOMY = 'taxonomy';
        /**
         * @var FilterButton[]
         */
        private static $instances = [];
        /**
         * @param string $screen
         *
         * @return FilterButton
         */
        public static function create($screen)
        {
        }
    }
}
namespace AC\Helper\Select {
    abstract class Group extends \AC\ArrayIterator
    {
        /**
         * @var Formatter
         */
        private $formatter;
        /**
         * @param Formatter $formatter
         */
        public function __construct(\AC\Helper\Select\Formatter $formatter)
        {
        }
        /**
         * @param array $groups
         *
         * @return array
         */
        protected function sort(array $groups)
        {
        }
        /**
         * @return OptionGroup[]
         */
        protected function get_group()
        {
        }
        /**
         * @param array $groups
         *
         * @return OptionGroup[]
         */
        protected function get_option_groups(array $groups)
        {
        }
        /**
         * @param        $entity
         * @param Option $option
         *
         * @return string
         */
        protected abstract function get_label($entity, \AC\Helper\Select\Option $option);
    }
}
namespace ACP\Helper\Select\Group {
    class PostTypeType extends \AC\Helper\Select\Group
    {
        /**
         * @param object                  $post_type
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($post_type, \AC\Helper\Select\Option $option)
        {
        }
        protected function sort(array $groups)
        {
        }
    }
    class MimeType extends \AC\Helper\Select\Group
    {
        /**
         * @param WP_Post                 $post
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($post, \AC\Helper\Select\Option $option)
        {
        }
        private function get_translated_label($type)
        {
        }
    }
    class Taxonomy extends \AC\Helper\Select\Group
    {
        /**
         * @param /WP_Term $term
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($term, \AC\Helper\Select\Option $option)
        {
        }
    }
    class Alphabetically extends \AC\Helper\Select\Group
    {
        /**
         * @param                         $entity
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($entity, \AC\Helper\Select\Option $option)
        {
        }
    }
    class Date extends \AC\Helper\Select\Group
    {
        /**
         * @param WP_Post                 $post
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($post, \AC\Helper\Select\Option $option)
        {
        }
        protected function sort(array $groups)
        {
        }
    }
    class PostType extends \AC\Helper\Select\Group
    {
        /**
         * @param WP_Post                 $post
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($post, \AC\Helper\Select\Option $option)
        {
        }
    }
    class UserRole extends \AC\Helper\Select\Group
    {
        /**
         * @var WP_User[]
         */
        private $helper;
        /**
         * @param AC\Helper\Select\Formatter $formatter
         */
        public function __construct(\AC\Helper\Select\Formatter $formatter)
        {
        }
        /**
         * @param WP_User                 $user
         * @param AC\Helper\Select\Option $option
         *
         * @return string
         */
        public function get_label($user, \AC\Helper\Select\Option $option)
        {
        }
    }
}
namespace AC\Helper\Select {
    interface Paginated
    {
        /**
         * @return int
         */
        public function get_total_pages();
        /**
         * @return int
         */
        public function get_page();
        /**
         * @return bool
         */
        public function is_last_page();
    }
    class Entities extends \AC\ArrayIterator
    {
        /**
         * @param array $entities
         * @param Value $value
         */
        public function __construct(array $entities, \AC\Helper\Select\Value $value)
        {
        }
    }
}
namespace ACP\Helper\Select\Entities {
    class MimeType extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
        /**
         * @param string $post_type
         *
         * @return object[]
         */
        private function get_mimetypes($post_type)
        {
        }
    }
    class Taxonomy extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        /**
         * @var WP_Term_Query
         */
        protected $query;
        /**
         * @param array                  $args
         * @param AC\Helper\Select\Value $value
         */
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
    class Post extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        /**
         * @var WP_Query
         */
        protected $query;
        /**
         * @var array
         */
        protected $search_fields = [];
        /**
         * @param array                  $args
         * @param AC\Helper\Select\Value $value
         */
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function set_search_fields($search_where, \WP_Query $wp_query)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
    class PostType extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
        /**
         * @param array $args
         *
         * @return object[]
         */
        private function get_post_types($args)
        {
        }
    }
    class Comment extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        /**
         * @var WP_Comment_Query
         */
        protected $query;
        /**
         * @param array                  $args
         * @param AC\Helper\Select\Value $value
         */
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
    class User extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        /**
         * @var WP_User_Query
         */
        protected $query;
        /** @var string */
        private $searchterm;
        /**
         * @param array                  $args
         * @param AC\Helper\Select\Value $value
         */
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        /**
         * Add meta query for user's first and last name
         *
         * @param WP_User_Query $query
         */
        public function callback_meta_query(\WP_User_Query $query)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
    class PostStatus extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
        /**
         * @param string $post_type
         *
         * @return object[]
         */
        private function get_statuses($post_type)
        {
        }
    }
}
namespace AC\Helper\Select {
    abstract class Formatter extends \AC\ArrayIterator
    {
        /**
         * @var Entities
         */
        private $entities;
        /**
         * @var Value
         */
        protected $value;
        /**
         * @param Entities $entities
         * @param Value    $value
         */
        public function __construct(\AC\Helper\Select\Entities $entities, \AC\Helper\Select\Value $value = null)
        {
        }
        /**
         * @return Entities
         */
        public function get_entities()
        {
        }
        /**
         * @param $value
         *
         * @return mixed
         */
        public function get_entity($value)
        {
        }
        /**
         * @return Option[]
         */
        protected function get_labels()
        {
        }
        /**
         * @param $entity
         *
         * @return string
         */
        protected abstract function get_label($entity);
        /**
         * @param $labels
         *
         * @return array
         */
        protected function get_labels_unique(array $labels)
        {
        }
        /**
         * @param string $label
         * @param mixed  $entity
         *
         * @return string
         */
        protected function get_label_unique($label, $entity)
        {
        }
        /**
         * @param array $labels
         *
         * @return Option[]
         */
        private function get_options(array $labels)
        {
        }
    }
}
namespace ACP\Helper\Select {
    /**
     * @deprecated 4.7
     */
    abstract class Formatter extends \AC\Helper\Select\Formatter
    {
    }
    /**
     * @deprecated 4.7
     */
    class Entities extends \AC\Helper\Select\Entities
    {
    }
}
namespace AC\Helper\Select {
    class Option
    {
        /**
         * @var string
         */
        private $value;
        /**
         * @var string
         */
        private $label;
        /**
         * @param string $value
         * @param string $label
         */
        public function __construct($value, $label = null)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
    }
}
namespace ACP\Helper\Select {
    /**
     * @deprecated 4.7
     */
    final class Option extends \AC\Helper\Select\Option
    {
        public function __construct($value, $label)
        {
        }
    }
}
namespace ACP\Helper\Select\Options {
    class SinglePage implements \AC\Helper\Select\Paginated
    {
        public function get_total_pages()
        {
        }
        public function is_last_page()
        {
        }
        public function get_page()
        {
        }
    }
}
namespace AC\Helper\Select {
    class Options extends \AC\ArrayIterator
    {
        /**
         * @param array $options
         */
        public function __construct(array $options)
        {
        }
        private function validate()
        {
        }
        /**
         * @param $array
         *
         * @return Options
         */
        public static function create_from_array(array $array)
        {
        }
    }
}
namespace AC\Helper\Select\Options {
    class Paginated extends \AC\Helper\Select\Options implements \AC\Helper\Select\Paginated
    {
        /**
         * @var Paginated
         */
        protected $paginated;
        /**
         * @param Select\Paginated $paginated
         * @param ArrayIterator    $options
         */
        public function __construct(\AC\Helper\Select\Paginated $paginated, \AC\ArrayIterator $options)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
}
namespace ACP\Helper\Select\Options {
    /**
     * @deprecated use AC\Helper\Select\Options\Paginated instead
     */
    class Paginated extends \AC\Helper\Select\Options\Paginated
    {
        /**
         * @param AC\Helper\Select\Paginated $paginated
         * @param ArrayIterator              $options
         */
        public function __construct(\AC\Helper\Select\Paginated $paginated, \AC\ArrayIterator $options)
        {
        }
    }
}
namespace ACP\Helper\Select {
    /**
     * @deprecated 4.7
     */
    class Options extends \AC\Helper\Select\Options
    {
        public function __construct(array $options)
        {
        }
    }
}
namespace ACP\Helper\Select\Paginated {
    class Posts extends \AC\Helper\Select\Options\Paginated
    {
        public function __construct($search_term, $page, array $args = [])
        {
        }
    }
    class Users extends \AC\Helper\Select\Options\Paginated
    {
        public function __construct($search_term, $page, $args = [])
        {
        }
    }
    class Terms extends \AC\Helper\Select\Options\Paginated
    {
        public function __construct($search_term, $page, array $taxonomy = [], array $query_args = [])
        {
        }
    }
}
namespace ACP\Helper\Select\Formatter {
    class UserName extends \AC\Helper\Select\Formatter
    {
        /**
         * @var array
         */
        private $properties;
        public function __construct(\AC\Helper\Select\Entities $entities, $properties = [])
        {
        }
        /**
         * @param WP_User $user
         *
         * @return string
         */
        public function get_label($user)
        {
        }
    }
    class TermName extends \AC\Helper\Select\Formatter
    {
        /**
         * @var array
         */
        private $taxonomies;
        public function __construct(\AC\Helper\Select\Entities $entities, \AC\Helper\Select\Value $value = null)
        {
        }
        /**
         * @return array
         */
        private function get_taxonomies()
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return bool
         */
        private function is_term_post_format($term)
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return string
         */
        protected function get_label($term)
        {
        }
    }
    class PostTitle extends \AC\Helper\Select\Formatter
    {
        public function __construct(\AC\Helper\Select\Entities $entities, \AC\Helper\Select\Value $value = null)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string
         */
        public function get_label($post)
        {
        }
    }
    class CommentSummary extends \AC\Helper\Select\Formatter
    {
        /**
         * @param WP_Comment $comment
         * @param bool       $is_duplicate
         *
         * @return string
         */
        public function get_label($comment, $is_duplicate = false)
        {
        }
    }
    class PostTypeLabel extends \AC\Helper\Select\Formatter
    {
        /**
         * @param object $post_type
         *
         * @return string
         */
        public function get_label($post_type)
        {
        }
    }
}
namespace ACP\Helper\Select {
    /**
     * @deprecated 4.7
     */
    interface Paginated extends \AC\Helper\Select\Paginated
    {
        /**
         * @return int
         */
        public function get_total_pages();
        /**
         * @return int
         */
        public function get_page();
        /**
         * @return bool
         */
        public function is_last_page();
    }
}
namespace AC\Helper\Select {
    interface Value
    {
        /**
         * @param $entity
         *
         * @return string
         */
        public function get_value($entity);
    }
}
namespace ACP\Helper\Select {
    /**
     * @deprecated 4.7
     */
    interface Value extends \AC\Helper\Select\Value
    {
        /**
         * @param $entity
         *
         * @return string
         */
        public function get_value($entity);
    }
}
namespace ACP\Helper\Select\Value {
    final class MimeType implements \AC\Helper\Select\Value
    {
        public function get_value($mime_type)
        {
        }
    }
    final class Taxonomy implements \AC\Helper\Select\Value
    {
        const ID = 'term_id';
        const SLUG = 'slug';
        /**
         * @var string
         */
        private $property;
        /**
         * @param null|string $property
         */
        public function __construct($property = null)
        {
        }
        private function validate()
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return string
         */
        public function get_value($term)
        {
        }
    }
    final class Post implements \AC\Helper\Select\Value
    {
        /**
         * @param WP_Post $post
         *
         * @return int
         */
        public function get_value($post)
        {
        }
    }
    final class PostType implements \AC\Helper\Select\Value
    {
        /**
         * @param object $post_type
         *
         * @return string
         */
        public function get_value($post_type)
        {
        }
    }
    final class Comment implements \AC\Helper\Select\Value
    {
        public function get_value($comment)
        {
        }
    }
    final class User implements \AC\Helper\Select\Value
    {
        /**
         * @param WP_User $user
         *
         * @return int
         */
        public function get_value($user)
        {
        }
    }
    final class PostStatus implements \AC\Helper\Select\Value
    {
        /**
         * @param object $status
         *
         * @return string
         */
        public function get_value($status)
        {
        }
    }
}
namespace ACP\Helper {
    abstract class FilterButton implements \AC\Registerable
    {
        /**
         * @var string
         */
        protected $screen;
        /**
         * @var string
         */
        protected $has_run = false;
        /**
         * @param string $screen
         */
        public function __construct($screen)
        {
        }
        /**
         * Display filter button
         */
        public function display_button()
        {
        }
        /**
         * @return callable
         */
        protected function get_callback()
        {
        }
    }
}
namespace ACP\Helper\FilterButton {
    final class Taxonomy extends \ACP\Helper\FilterButton
    {
        public function register()
        {
        }
    }
    final class Users extends \ACP\Helper\FilterButton
    {
        public function register()
        {
        }
    }
}
namespace AC\Form {
    class Nonce
    {
        /**
         * @var string
         */
        private $action;
        /**
         * @var string
         */
        private $name;
        public function __construct($action, $name)
        {
        }
        /**
         * @return string
         */
        public function get_action()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string|null
         */
        public function create()
        {
        }
        /**
         * @return string
         */
        public function create_field()
        {
        }
        /**
         * @param string $nonce
         *
         * @return bool
         */
        public function verify_nonce($nonce)
        {
        }
        /**
         * @param Request $request
         *
         * @return bool
         */
        public function verify(\AC\Request $request)
        {
        }
    }
}
namespace ACP\Nonce {
    class LayoutNonce extends \AC\Form\Nonce
    {
        public function __construct()
        {
        }
    }
    class LicenseNonce extends \AC\Form\Nonce
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\ApplyFilter\CustomField {
    class StoredDateFormat implements \AC\ApplyFilter
    {
        /**
         * @var AC\Column
         */
        private $column;
        public function __construct(\AC\Column\CustomField $column)
        {
        }
        public function apply_filters($date_format)
        {
        }
    }
}
namespace ACP\Filtering {
    interface ListScreen
    {
        /**
         * @param Model $model
         *
         * @return Strategy
         */
        public function filtering($model);
    }
}
namespace AC {
    /**
     * List Screen
     * @since 2.0
     */
    abstract class ListScreen
    {
        /**
         * @deprecated 4.0
         */
        const OPTIONS_KEY = 'cpac_options_';
        /**
         * Unique Identifier for List Screen.
         * @since 2.0
         * @var string
         */
        private $key;
        /**
         * @since 2.0
         * @var string
         */
        private $label;
        /**
         * @since 2.3.5
         * @var string
         */
        private $singular_label;
        /**
         * Meta type of list screen; post, user, comment. Mostly used for fetching metadata.
         * @since 3.0
         * @var string
         */
        private $meta_type;
        /**
         * Page menu slug. Applies only when a menu page is used.
         * @since 2.4.10
         * @var string
         */
        private $page;
        /**
         * Group slug. Used for menu.
         * @var string
         */
        private $group;
        /**
         * Name of the base PHP file (without extension).
         * @see   \WP_Screen::base
         * @since 2.0
         * @var string
         */
        private $screen_base;
        /**
         * The unique ID of the screen.
         * @see   \WP_Screen::id
         * @since 2.5
         * @var string
         */
        private $screen_id;
        /**
         * @since 2.0.1
         * @var Column[]
         */
        private $columns;
        /**
         * @since 2.2
         * @var Column[]
         */
        private $column_types;
        /**
         * @var string Layout ID
         */
        private $layout_id;
        /**
         * @var string Storage key used for saving column data to the database
         */
        private $storage_key;
        /**
         * @var array Column settings data
         */
        private $settings = [];
        /**
         * @var array ListScreen settings data
         */
        private $preferences = [];
        /**
         * @var bool True when column settings can not be overwritten
         */
        private $read_only = false;
        /**
         * @var bool
         */
        private $network_only = false;
        /**
         * @var string
         */
        private $title;
        /**
         * @var DateTime
         */
        private $updated;
        /**
         * @return bool
         */
        public function has_id()
        {
        }
        /**
         * @return ListScreenId
         */
        public function get_id()
        {
        }
        /**
         * Contains the hook that contains the manage_value callback
         *
         * @return void
         */
        public abstract function set_manage_value_callback();
        /**
         * Register column types
         *
         * @return void
         */
        protected abstract function register_column_types();
        /**
         * Register column types from a list with (fully qualified) class names
         *
         * @param string[] $list
         */
        protected function register_column_types_from_list(array $list) : void
        {
        }
        /**
         * @return string
         */
        public function get_heading_hookname()
        {
        }
        /**
         * @return string
         */
        public function get_key()
        {
        }
        /**
         * @param string $key
         *
         * @return self
         */
        protected function set_key($key)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         *
         * @return self
         */
        protected function set_label($label)
        {
        }
        /**
         * @return string
         */
        public function get_singular_label()
        {
        }
        /**
         * @param string $label
         *
         * @return self
         */
        protected function set_singular_label($label)
        {
        }
        /**
         * @return string
         */
        public function get_meta_type()
        {
        }
        /**
         * @param string $meta_type
         *
         * @return self
         */
        protected function set_meta_type($meta_type)
        {
        }
        /**
         * @return string
         */
        public function get_screen_base()
        {
        }
        /**
         * @param string $screen_base
         *
         * @return self
         */
        protected function set_screen_base($screen_base)
        {
        }
        /**
         * @return string
         */
        public function get_screen_id()
        {
        }
        /**
         * @param string $screen_id
         *
         * @return self
         */
        protected function set_screen_id($screen_id)
        {
        }
        /**
         * @return string
         */
        public function get_page()
        {
        }
        /**
         * @param string $page
         *
         * @return self
         */
        protected function set_page($page)
        {
        }
        /**
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * @param string $group
         *
         * @return self
         */
        public function set_group($group)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @param string $title
         *
         * @return $this
         */
        public function set_title($title)
        {
        }
        /**
         * @return string
         */
        public function get_storage_key()
        {
        }
        /**
         * @param string $key
         */
        private function set_storage_key($key)
        {
        }
        /**
         * @return string
         */
        public function get_layout_id()
        {
        }
        /**
         * @param string $layout_id
         *
         * @return self
         */
        public function set_layout_id($layout_id)
        {
        }
        /**
         * ID attribute of targeted list table
         * @return string
         * @since 3.0
         */
        public function get_table_attr_id()
        {
        }
        /**
         * @param $wp_screen
         *
         * @return boolean
         * @since 2.0.3
         */
        public function is_current_screen($wp_screen)
        {
        }
        /**
         * Settings can not be overwritten
         */
        public function is_read_only()
        {
        }
        /**
         * @param bool $read_only
         *
         * @return $this
         */
        public function set_read_only($read_only)
        {
        }
        /**
         * Settings can not be overwritten
         */
        public function is_network_only()
        {
        }
        /**
         * @param bool $network_only
         */
        public function set_network_only($network_only)
        {
        }
        /**
         * @param DateTime $updated
         *
         * @return $this
         */
        public function set_updated(\DateTime $updated)
        {
        }
        /**
         * @return DateTime
         */
        public function get_updated()
        {
        }
        /**
         * @return string
         */
        protected function get_admin_url()
        {
        }
        /**
         * @return string Link
         * @since 2.0
         */
        public function get_screen_link()
        {
        }
        /**
         * @since 2.0
         */
        public function get_edit_link()
        {
        }
        /**
         * @return Column[]
         * @since 3.0
         */
        public function get_columns()
        {
        }
        /**
         * @return Column[]
         */
        public function get_column_types()
        {
        }
        /**
         * @param $name
         *
         * @return false|Column
         * @since 2.0
         */
        public function get_column_by_name($name)
        {
        }
        /**
         * @param string $type
         *
         * @return false|Column
         */
        public function get_column_by_type($type)
        {
        }
        /**
         * @param string $type
         *
         * @return false|string
         */
        public function get_class_by_type($type)
        {
        }
        /**
         * @param string $type Column type
         */
        public function deregister_column_type($type)
        {
        }
        /**
         * @param Column $column
         */
        public function register_column_type(\AC\Column $column)
        {
        }
        /**
         * @param string $type
         *
         * @return string Label
         */
        public function get_original_label($type)
        {
        }
        /**
         * @return array
         */
        public function get_original_columns()
        {
        }
        /**
         * Available column types
         */
        private function set_column_types()
        {
        }
        /**
         * @param string $type Column type
         *
         * @return bool
         */
        private function is_original_column($type)
        {
        }
        /**
         * @param string $column_name Column name
         *
         * @since 3.0
         */
        public function deregister_column($column_name)
        {
        }
        /**
         * @param array $settings Column options
         *
         * @return Column|false
         */
        public function create_column(array $settings)
        {
        }
        /**
         * @param Column $column
         */
        protected function register_column(\AC\Column $column)
        {
        }
        /**
         * @param array $settings
         *
         * @return self
         */
        public function set_settings(array $settings)
        {
        }
        /**
         * @since 3.0
         */
        private function set_columns()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        public function set_preferences(array $preferences)
        {
        }
        /**
         * @return array
         */
        public function get_preferences()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null
         */
        public function get_preference($key)
        {
        }
        /**
         * @param string $column_name
         * @param int    $id
         * @param null   $original_value
         *
         * @return string
         */
        public function get_display_value_by_column_name($column_name, $id, $original_value = null)
        {
        }
        /**
         * @param string $namespace Namespace from the current path
         *
         * Can be removed after a short while from 6.0, e.g. 6.1 or after a few months, as this very custom to begin with
         */
        public function register_column_types_from_dir($namespace)
        {
        }
        /**
         * @param array $columns
         *
         * @deprecated 4.0
         */
        public function save_default_headings($columns)
        {
        }
        /**
         * @return array
         * @deprecated 4.0
         */
        public function get_stored_default_headings()
        {
        }
        /**
         * @return void
         */
        public function delete_default_headings()
        {
        }
        /**
         * @return bool
         * @deprecated 4.0
         */
        public function delete()
        {
        }
        /**
         * Get default column headers
         * @return array
         * @deprecated 4.0
         */
        public function get_default_column_headers()
        {
        }
        /**
         * Clears columns variable, which allow it to be repopulated by get_columns().
         * @deprecated 4.0
         * @since      2.5
         */
        public function reset()
        {
        }
        /**
         * @deprecated 4.0
         */
        public function populate_settings()
        {
        }
        /**
         * Reset original columns
         * @deprecated 4.0
         */
        public function reset_original_columns()
        {
        }
        /**
         * Store column data
         *
         * @param array $column_data
         *
         * @deprecated 4.0
         */
        public function store($column_data)
        {
        }
        /**
         * @param array $columns
         *
         * @deprecated 4.3
         */
        public function set_original_columns($columns)
        {
        }
    }
    /**
     * @since 3.1
     */
    abstract class ListScreenWP extends \AC\ListScreen
    {
        /**
         * @return WP_List_Table
         */
        protected abstract function get_list_table();
        /**
         * @param int $id
         *
         * @return object
         */
        protected abstract function get_object($id);
        /**
         * @param int $id
         *
         * @return string HTML
         */
        public function get_single_row($id)
        {
        }
        /**
         * @return array [ $column_name => [ $orderby, $order ], ... ]
         */
        public function get_default_sortable_columns()
        {
        }
    }
    abstract class ListScreenPost extends \AC\ListScreenWP
    {
        /**
         * @var string Post type
         */
        private $post_type;
        /**
         * @param string $post_type
         */
        public function __construct($post_type)
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @param string $post_type
         *
         * @return self
         */
        protected function set_post_type($post_type)
        {
        }
        /**
         * @param int $id
         *
         * @return WP_Post
         */
        protected function get_object($id)
        {
        }
        /**
         * @param string $var
         *
         * @return string|false
         */
        protected function get_post_type_label_var($var)
        {
        }
        /**
         * Register post specific columns
         */
        protected function register_column_types()
        {
        }
    }
}
namespace AC\ListScreen {
    class Media extends \AC\ListScreenPost
    {
        public function __construct()
        {
        }
        public function set_manage_value_callback()
        {
        }
        /**
         * @return WP_Media_List_Table
         */
        protected function get_list_table()
        {
        }
        public function get_screen_link()
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_single_row($id)
        {
        }
        /**
         * @param $column_name
         * @param $id
         *
         * @since 2.4.7
         */
        public function manage_value($column_name, $id)
        {
        }
        protected function register_column_types()
        {
        }
    }
}
namespace ACP\ListScreen {
    class Media extends \AC\ListScreen\Media implements \ACP\Sorting\ListScreen, \ACP\Editing\ListScreen, \ACP\Filtering\ListScreen, \ACP\Export\ListScreen, \ACP\Editing\BulkDelete\ListScreen
    {
        public function sorting($model)
        {
        }
        public function deletable()
        {
        }
        public function editing()
        {
        }
        public function filtering($model)
        {
        }
        public function export()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class Taxonomy extends \AC\ListScreenWP implements \ACP\Editing\ListScreen, \ACP\Export\ListScreen, \ACP\Filtering\ListScreen, \ACP\Sorting\ListScreen, \ACP\Editing\BulkDelete\ListScreen
    {
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @param string $taxonomy
         */
        public function __construct($taxonomy)
        {
        }
        public function deletable()
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return self
         */
        protected function set_taxonomy($taxonomy)
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * @see WP_Terms_List_Table::column_default
         */
        public function set_manage_value_callback()
        {
        }
        /**
         * @return WP_Terms_List_Table
         */
        protected function get_list_table()
        {
        }
        /**
         * @param int $term_id
         *
         * @return WP_Term
         * @since 4.0
         */
        protected function get_object($term_id)
        {
        }
        /**
         * @return string|false
         */
        public function get_label()
        {
        }
        /**
         * @return false|string
         */
        public function get_singular_label()
        {
        }
        /**
         * @param $wp_screen
         *
         * @return bool
         * @since 3.7.3
         */
        public function is_current_screen($wp_screen)
        {
        }
        /**
         * Get screen link
         * @return string Link
         * @since 1.2.0
         */
        public function get_screen_link()
        {
        }
        /**
         * Manage value
         *
         * @param string $value
         * @param string $column_name
         * @param int    $term_id
         *
         * @return string
         * @since 1.2.0
         */
        public function manage_value($value, $column_name, $term_id)
        {
        }
        /**
         * @param $var
         *
         * @return string|false
         */
        private function get_taxonomy_label_var($var)
        {
        }
        private function get_taxonomy_var($var)
        {
        }
        protected function register_column_types()
        {
        }
        public function editing()
        {
        }
        public function filtering($model)
        {
        }
        public function sorting($model)
        {
        }
        public function export()
        {
        }
    }
}
namespace AC\ListScreen {
    class User extends \AC\ListScreenWP
    {
        public function __construct()
        {
        }
        /**
         * @see set_manage_value_callback()
         */
        public function set_manage_value_callback()
        {
        }
        /**
         * @param $wp_screen
         *
         * @return bool
         * @since 2.4.10
         */
        public function is_current_screen($wp_screen)
        {
        }
        /**
         * @param string $value
         * @param string $column_name
         * @param int    $user_id
         *
         * @return string
         * @since 2.0.2
         */
        public function manage_value($value, $column_name, $user_id)
        {
        }
        /**
         * @param int $id
         *
         * @return WP_User
         */
        protected function get_object($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string HTML
         * @since 3.0
         */
        public function get_single_row($id)
        {
        }
        protected function register_column_types()
        {
        }
        /**
         * @return WP_Users_List_Table
         */
        protected function get_list_table()
        {
        }
    }
}
namespace ACP\ListScreen {
    class User extends \AC\ListScreen\User implements \ACP\Sorting\ListScreen, \ACP\Editing\ListScreen, \ACP\Filtering\ListScreen, \ACP\Export\ListScreen, \ACP\Editing\BulkDelete\ListScreen
    {
        public function sorting($model)
        {
        }
        public function deletable()
        {
        }
        public function editing()
        {
        }
        public function filtering($model)
        {
        }
        public function export()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class MSUser extends \ACP\ListScreen\User
    {
        public function __construct()
        {
        }
        /**
         * @return WP_MS_Users_List_Table
         */
        protected function get_list_table()
        {
        }
        protected function get_admin_url()
        {
        }
        public function get_edit_link()
        {
        }
        /**
         * @param int $id
         *
         * @return string HTML
         * @since 4.0
         */
        public function get_single_row($id)
        {
        }
    }
}
namespace AC\ListScreen {
    class Post extends \AC\ListScreenPost
    {
        public function __construct($post_type)
        {
        }
        /**
         * @see WP_Posts_List_Table::column_default
         */
        public function set_manage_value_callback()
        {
        }
        /**
         * @return WP_Posts_List_Table
         */
        protected function get_list_table()
        {
        }
        /**
         * @since 2.0
         */
        public function get_screen_link()
        {
        }
        /**
         * @return string|false
         */
        public function get_label()
        {
        }
        /**
         * @return false|string
         */
        public function get_singular_label()
        {
        }
        /**
         * @param $column_name
         * @param $id
         *
         * @since 2.4.7
         */
        public function manage_value($column_name, $id)
        {
        }
        protected function register_column_types()
        {
        }
    }
}
namespace ACP\ListScreen {
    class Post extends \AC\ListScreen\Post implements \ACP\Sorting\ListScreen, \ACP\Editing\ListScreen, \ACP\Filtering\ListScreen, \ACP\Export\ListScreen, \ACP\Editing\BulkDelete\ListScreen
    {
        public function sorting($model)
        {
        }
        public function deletable()
        {
        }
        public function editing()
        {
        }
        public function filtering($model)
        {
        }
        public function export()
        {
        }
        protected function register_column_types()
        {
        }
    }
}
namespace AC\ListScreen {
    class Comment extends \AC\ListScreenWP
    {
        public function __construct()
        {
        }
        /**
         * @param int $id
         *
         * @return WP_Comment
         */
        protected function get_object($id)
        {
        }
        /**
         * @return WP_Comments_List_Table
         */
        protected function get_list_table()
        {
        }
        public function set_manage_value_callback()
        {
        }
        /**
         * @since 3.5
         */
        public function get_table_attr_id()
        {
        }
        /**
         * @param string $column_name
         * @param int    $id
         */
        public function manage_value($column_name, $id)
        {
        }
        /**
         * Register column types
         */
        protected function register_column_types()
        {
        }
    }
}
namespace ACP\ListScreen {
    class Comment extends \AC\ListScreen\Comment implements \ACP\Sorting\ListScreen, \ACP\Editing\ListScreen, \ACP\Filtering\ListScreen, \ACP\Export\ListScreen, \ACP\Editing\BulkDelete\ListScreen
    {
        public function sorting($model)
        {
        }
        public function deletable()
        {
        }
        public function editing()
        {
        }
        public function filtering($model)
        {
        }
        public function export()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class MSSite extends \AC\ListScreenWP implements \ACP\Editing\ListScreen
    {
        public function __construct()
        {
        }
        /**
         * @param int $site_id
         *
         * @return WP_Site Site object
         * @since 4.0
         */
        protected function get_object($site_id)
        {
        }
        /**
         * @return WP_MS_Sites_List_Table
         */
        protected function get_list_table()
        {
        }
        public function set_manage_value_callback()
        {
        }
        /**
         * @return string
         */
        protected function get_admin_url()
        {
        }
        public function get_edit_link()
        {
        }
        /**
         * @param $column_name
         * @param $blog_id
         *
         * @since 2.4.7
         */
        public function manage_value($column_name, $blog_id)
        {
        }
        public function get_single_row($site_id)
        {
        }
        protected function register_column_types()
        {
        }
        public function editing()
        {
        }
    }
}
namespace AC\Plugin {
    abstract class Update
    {
        /**
         * @var Version
         */
        protected $version;
        public function __construct(\AC\Plugin\Version $version)
        {
        }
        /**
         * @param Version $current_version
         *
         * @return bool
         */
        public function needs_update(\AC\Plugin\Version $current_version)
        {
        }
        /**
         * @return void
         */
        public abstract function apply_update();
        /**
         * @return Version
         */
        public function get_version()
        {
        }
    }
}
namespace ACP\Plugin\Update {
    /**
     * Migrate license settings per site
     */
    class V5000 extends \AC\Plugin\Update
    {
        const LICENSE_OPTION_KEY = 'cpupdate_cac-pro';
        public function __construct()
        {
        }
        /**
         * @throws Exception
         */
        public function apply_update()
        {
        }
        private function migrate_license()
        {
        }
        protected function get_license_option($key = '')
        {
        }
        protected function get_option($key)
        {
        }
        protected function update_option($key, $value)
        {
        }
    }
}
namespace ACP\Plugin\NetworkUpdate {
    class V5000 extends \ACP\Plugin\Update\V5000
    {
        protected function get_option($key)
        {
        }
        protected function update_option($key, $value)
        {
        }
    }
}
namespace ACP\Plugin\Update {
    class V5700 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        protected function clear_cache_api()
        {
        }
        private function update_permissions()
        {
        }
        private function update_subscription_details()
        {
        }
        protected function update_option($name, $value)
        {
        }
        protected function get_option($name)
        {
        }
    }
}
namespace ACP\Plugin\NetworkUpdate {
    class V5700 extends \ACP\Plugin\Update\V5700
    {
        protected function update_option($name, $value)
        {
        }
        protected function get_option($name)
        {
        }
        protected function clear_cache_api()
        {
        }
    }
}
namespace AC\Plugin {
    interface Install
    {
        /**
         * Idempotent call to set up Admin Columns
         *
         * @return void
         */
        public function install();
    }
}
namespace ACP\Plugin\Install {
    class BookmarkTable implements \AC\Plugin\Install
    {
        public function install()
        {
        }
    }
}
namespace ACP\Plugin\Update {
    class V5400 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
    }
    class V4301 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        /**
         * @throws Exception
         */
        public function apply_update()
        {
        }
        /**
         * Set all files to the proper case
         *
         * @param string Directory
         */
        protected function uppercase_class_files($directory)
        {
        }
        /**
         * @param string $key
         *
         * @return array ID's
         */
        protected function get_users_by_meta_key($key)
        {
        }
        /**
         * @throws Exception
         */
        private function update_notice_preference_renewal()
        {
        }
    }
    class V5201 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        private function map_rule($rule)
        {
        }
    }
    class V4101 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function validate_key($key)
        {
        }
        /**
         * @param string $key
         *
         * @return array
         */
        private function get_meta($key)
        {
        }
        /**
         * Migrate USER and SITE specific preferences
         */
        private function migrate_site_and_user_specific_settings()
        {
        }
        /**
         * Rename USER and SITE specific preferences
         */
        private function rename_user_specific_settings()
        {
        }
        /**
         * Preference to be REMOVED
         */
        private function delete_deprecated_settings()
        {
        }
        /**
         * Remove meta data
         *
         * @param string $key
         */
        private function delete($key)
        {
        }
    }
    class V5300 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        public function migrate_bookmarks()
        {
        }
        public function create_table()
        {
        }
    }
    class V6000 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        private function apply_acf_update() : void
        {
        }
    }
    class V5104 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        private function set_default_export_option()
        {
        }
    }
}
namespace AC\Plugin {
    class SetupFactory
    {
        const SITE = 'site';
        const NETWORK = 'network';
        /**
         * @var string
         */
        private $version_key;
        /**
         * @var Version
         */
        private $version;
        /**
         * @var InstallCollection
         */
        protected $installers;
        /**
         * @var UpdateCollection
         */
        protected $updates;
        public function __construct($version_key, \AC\Plugin\Version $version, \AC\Plugin\InstallCollection $installers = null, \AC\Plugin\UpdateCollection $updates = null)
        {
        }
        /**
         * @return Setup
         */
        public function create($type)
        {
        }
    }
}
namespace ACP\Plugin {
    class SetupFactory extends \AC\Plugin\SetupFactory
    {
        public function create($type)
        {
        }
    }
}
namespace ACP\Exception {
    class FailedToCreateDirectoryException extends \RuntimeException
    {
        /**
         * @var string
         */
        private $path;
        public function __construct($path, $code = 0)
        {
        }
        /**
         * @return string
         */
        public function get_path()
        {
        }
    }
    class ControllerException extends \LogicException
    {
        /**
         * @param string $action
         *
         * @return self
         */
        public static function from_invalid_action($action)
        {
        }
    }
    class FileNotWritableException extends \RuntimeException
    {
        /**
         * @param ListScreen $list_screen
         *
         * @return self
         */
        public static function from_saving_list_screen(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return self
         */
        public static function from_removing_list_screen(\AC\ListScreen $list_screen)
        {
        }
    }
    class FailedToReadDirectoryException extends \RuntimeException
    {
        /**
         * @var string
         */
        private $path;
        public function __construct($path, $code = 0)
        {
        }
        /**
         * @return string
         */
        public function get_path()
        {
        }
    }
    final class DecoderNotFoundException extends \RuntimeException
    {
        /**
         * @var array
         */
        private $encoded_list_screen;
        public function __construct(array $encoded_list_screen, $code = 0)
        {
        }
        /**
         * @return array
         */
        public function get_encoded_list_screen()
        {
        }
    }
    class DirectoryNotWritableException extends \RuntimeException
    {
        /**
         * @var string
         */
        private $path;
        public function __construct($path, $code = 0)
        {
        }
        /**
         * @return string
         */
        public function get_path()
        {
        }
    }
    final class UndecodableListScreenException extends \LogicException
    {
        /**
         * @var array
         */
        private $encoded_list_screen;
        public function __construct(array $encoded_list_screen, $code = 0)
        {
        }
        /**
         * @return array
         */
        public function get_encoded_list_screen()
        {
        }
    }
}
namespace AC\Integration {
    interface Filter
    {
        /**
         * @param Integrations $integrations
         *
         * @return Integrations
         */
        public function filter(\AC\Integrations $integrations);
    }
}
namespace ACP\Integration\Filter {
    class IsProActive implements \AC\Integration\Filter
    {
        public function filter(\AC\Integrations $integrations)
        {
        }
        private function is_active(\AC\Integration $integration)
        {
        }
    }
}
namespace ACP\API {
    class Request
    {
        /**
         * @var array
         */
        protected $args;
        /**
         * @var string
         */
        protected $format;
        /**
         * @param array $body
         */
        public function __construct(array $body = [])
        {
        }
        /**
         * @return array
         */
        public function get_body()
        {
        }
        /**
         * @param array $value
         *
         * @return $this
         */
        public function set_body(array $value)
        {
        }
        /**
         * @return string
         */
        public function get_format()
        {
        }
        /**
         * @param string $format
         *
         * @return $this
         */
        public function set_format($format)
        {
        }
        public function get_args()
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function set_args(array $args)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         *
         * @return $this
         */
        public function set_arg($key, $value)
        {
        }
    }
}
namespace ACP\API\Request {
    /**
     * Used for installing 'add-ons'
     */
    class DownloadInformation extends \ACP\API\Request
    {
        /**
         * @param string          $plugin_name e.g. 'plugin-name'
         * @param ActivationToken $token
         * @param SiteUrl         $site_url
         */
        public function __construct($plugin_name, \ACP\Type\ActivationToken $token, \ACP\Type\SiteUrl $site_url)
        {
        }
    }
    class Deactivate extends \ACP\API\Request
    {
        public function __construct(\ACP\Type\ActivationToken $token, \ACP\Type\SiteUrl $site_url)
        {
        }
    }
    /**
     * Used for updating subscription information, such as expiration date.
     */
    class SubscriptionDetails extends \ACP\API\Request
    {
        public function __construct(\ACP\Type\SiteUrl $site_url, \ACP\Plugins $plugins, \ACP\Type\ActivationToken $activation_token)
        {
        }
    }
    class Activate extends \ACP\API\Request
    {
        public function __construct(\ACP\Type\LicenseKey $license_key, \ACP\Type\SiteUrl $site_url)
        {
        }
    }
    /**
     * Used for displaying changelog information when clicking "view details" on the plugins page.
     */
    class ProductInformation extends \ACP\API\Request
    {
        /**
         * @param string $plugin_name e.g. 'plugin-name'
         */
        public function __construct($plugin_name)
        {
        }
    }
    class ProductsUpdate extends \ACP\API\Request
    {
        public function __construct(\ACP\Type\SiteUrl $site_url, \ACP\Type\ActivationToken $activation_token = null)
        {
        }
        /**
         * @param Plugins $plugins
         *
         * @return array
         */
        public function format_versions(\ACP\Plugins $plugins)
        {
        }
    }
}
namespace ACP\API {
    class Response
    {
        /**
         * @var object
         */
        private $body;
        /**
         * @var WP_Error
         */
        private $error;
        public function get_body()
        {
        }
        public function get_error()
        {
        }
        /**
         * @return bool
         */
        public function has_error()
        {
        }
        /**
         * @param object $body
         *
         * @return Response
         */
        public function with_body($body)
        {
        }
        public function with_error(\WP_Error $error)
        {
        }
        /**
         * Access properties from the body
         *
         * @param string $key
         *
         * @return mixed
         */
        public function get($key)
        {
        }
    }
}
namespace ACP\Filtering {
    /**
     * @since 4.0
     */
    class Addon implements \AC\Registerable
    {
        /**
         * @var AC\ListScreenRepository\Storage
         */
        private $storage;
        /**
         * @var Location
         */
        private $location;
        /**
         * @var Request
         */
        private $request;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location $location, \AC\Request $request)
        {
        }
        public function register()
        {
        }
        public function ajax_update_dropdown_cache()
        {
        }
        /**
         * @return Helper
         */
        public function helper()
        {
        }
        /**
         * @param AC\Column $column
         *
         * @return Model|false
         */
        public function get_filtering_model($column)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return array|false
         */
        private function get_models(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return TableScreen|false
         */
        public function table_screen(\AC\ListScreen $list_screen)
        {
        }
        public function settings_scripts($page)
        {
        }
        /**
         * Register field settings for filtering
         *
         * @param AC\Column $column
         */
        public function settings($column)
        {
        }
        /**
         * Handle filtering request
         *
         * @param AC\ListScreen $list_screen
         */
        public function handle_filtering(\AC\ListScreen $list_screen)
        {
        }
    }
    abstract class Model
    {
        /**
         * @var AC\Column
         */
        protected $column;
        /**
         * @var string
         */
        private $data_type = 'string';
        /**
         * @var Strategy
         */
        protected $strategy;
        /**
         * @var bool
         */
        private $ranged;
        /**
         * Get the query vars to filter on
         *
         * @param array $vars
         *
         * @return array
         */
        public abstract function get_filtering_vars($vars);
        /**
         * Return the data required to generate the filtering gui on a list screen
         * @return array
         */
        public abstract function get_filtering_data();
        public function __construct(\AC\Column $column)
        {
        }
        /**
         * @return AC\Column
         */
        public function get_column()
        {
        }
        /**
         * @param string $data_type
         *
         * @return $this
         */
        public function set_data_type($data_type)
        {
        }
        /**
         * @return string
         */
        public function get_data_type()
        {
        }
        /**
         * @param Strategy $strategy
         */
        public function set_strategy(\ACP\Filtering\Strategy $strategy)
        {
        }
        /**
         * @return Strategy
         */
        public function get_strategy()
        {
        }
        /**
         * @param bool $is_ranged
         */
        public function set_ranged($is_ranged)
        {
        }
        /**
         * @return bool
         */
        public function is_ranged()
        {
        }
        /**
         * @return bool
         */
        public function is_active()
        {
        }
        /**
         * Register column settings
         */
        public function register_settings()
        {
        }
        /**
         * @return string|array
         */
        public function get_filter_value()
        {
        }
        /**
         * Validate a value: can it be used to filter results?
         *
         * @param string|integer $value
         * @param string         $filters Options: all, serialize, length and empty. Use a | to use a selection of filters e.g. length|empty
         *
         * @return bool
         */
        protected function validate_value($value, $filters = 'all')
        {
        }
        /**
         * @param string $label
         *
         * @return array
         */
        protected function get_empty_labels($label = '')
        {
        }
        /**
         * @param string $request_key
         *
         * @return array
         */
        private function get_preferred_filters($request_key)
        {
        }
        /**
         * Get a request var for all columns
         *
         * @param string $suffix
         *
         * @return string|false
         */
        public function get_request_var($suffix = '')
        {
        }
    }
}
namespace ACP\Filtering\Model\Post {
    class CommentCount extends \ACP\Filtering\Model
    {
        public function __construct($column)
        {
        }
        public function filter_by_comment_count($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Strategy\Post $strategy
     */
    class Taxonomy extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return array Term options
         * @since 4.0
         */
        public function get_terms_list($taxonomy)
        {
        }
        /**
         * Applies indenting markup for taxonomy dropdown
         *
         * @param array $array
         * @param int   $level
         * @param array $output
         *
         * @return array Output
         * @since 1.0
         */
        private function apply_indenting_markup($array, $level = 0, $output = [])
        {
        }
    }
    class Formats extends \ACP\Filtering\Model\Post\Taxonomy
    {
        public function get_filtering_data()
        {
        }
    }
    class ID extends \ACP\Filtering\Model
    {
        public function __construct($column)
        {
        }
        public function filter_by_id($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Date extends \ACP\Filtering\Model
    {
        /**
         * @var string
         */
        private $date_field = 'post_date';
        public function __construct($column)
        {
        }
        public function register_settings()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
        /**
         * @param string $field
         *
         * @return array
         */
        private function get_dates($field)
        {
        }
        public function get_filter_format()
        {
        }
        /**
         * @return string
         */
        public function get_date_field()
        {
        }
        /**
         * @param string $date_field
         */
        public function set_date_field($date_field)
        {
        }
    }
    class Modified extends \ACP\Filtering\Model\Post\Date
    {
        public function __construct($column)
        {
        }
    }
    class PingStatus extends \ACP\Filtering\Model
    {
        public function filter_by_ping_status($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class AuthorName extends \ACP\Filtering\Model
    {
        public function filter_by_author_name($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Sticky extends \ACP\Filtering\Model
    {
        public function filter_by_sticky($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Content extends \ACP\Filtering\Model
    {
        public function filter_by_description($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class PostParent extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class ChildPages extends \ACP\Filtering\Model
    {
        public function filter_by_description($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACP\Filtering\Model {
    /**
     * @property AC\Column\Meta $column
     */
    class Meta extends \ACP\Filtering\Model
    {
        /**
         * @var bool
         */
        private $serialized;
        public function __construct(\AC\Column\Meta $column, $serialized = null)
        {
        }
        /**
         * Get meta values by meta key
         * @return array
         */
        public function get_meta_values()
        {
        }
        /**
         * @return array Filtered meta values
         */
        public function get_meta_values_filtered()
        {
        }
        /**
         * Get meta query empty_not_empty
         *
         * @param array $vars
         *
         * @return array Query vars
         * @since 4.0
         */
        protected function get_filtering_vars_empty_nonempty($vars)
        {
        }
        /**
         * @param array $vars Query args
         * @param array $args Options
         *
         * @return array
         * @since 4.0
         */
        protected function get_filtering_vars_ranged($vars, $args = [])
        {
        }
        /**
         * @param array $vars
         *
         * @return array
         */
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
        /**
         * @return array
         */
        protected function get_meta_values_unserialized()
        {
        }
        /**
         * @param array  $vars
         * @param string $value
         *
         * @return array
         */
        protected function get_filtering_vars_serialized($vars, $value)
        {
        }
    }
}
namespace ACP\Filtering\Model\Post {
    /**
     * @property AC\Column\Post\PageTemplate $column
     */
    class PageTemplate extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\AC\Column\Post\PageTemplate $column)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class LastModifiedAuthor extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class Excerpt extends \ACP\Filtering\Model
    {
        public function get_filtering_data()
        {
        }
        public function filter_by_excerpt($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
    }
    class Ancestors extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class CommentStatus extends \ACP\Filtering\Model
    {
        public function filter_by_comment_status($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class BeforeMoreTag extends \ACP\Filtering\Model
    {
        public function filter_by_before_moretag($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class FeaturedImage extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class Status extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Roles extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACP\Filtering\Model {
    class Delegated extends \ACP\Filtering\Model
    {
        /**
         * @var string Dropdown HTML attribute id
         */
        private $dropdown_attr_id;
        /**
         * @param AC\Column $column
         * @param string    $dropdown_attr_id
         */
        public function __construct(\AC\Column $column, $dropdown_attr_id = null)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
        public function register_settings()
        {
        }
        public function get_dropdown_attr_id()
        {
        }
    }
}
namespace ACP\Filtering\Model\User {
    class ShowToolbar extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column\User\Language $column
     */
    class Language extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACP\Column\User\Language $column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Registered extends \ACP\Filtering\Model
    {
        public function __construct($column)
        {
        }
        public function register_settings()
        {
        }
        public function filter_by_user_registered($query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
        private function get_filter_format()
        {
        }
    }
    class RichEditing extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Email extends \ACP\Filtering\Model
    {
        /**
         * @param $query
         *
         * @return WP_Query
         */
        public function filter_by_email($query)
        {
        }
        /**
         * @param array $vars
         *
         * @return array
         */
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
    }
    class Url extends \ACP\Filtering\Model
    {
        public function filter_by_user_url($query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Username extends \ACP\Filtering\Model
    {
        public function filter_by_username($query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Role extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACP\Filtering\Model {
    /**
     * @property AC\Column\CustomField $column
     */
    class CustomField extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\AC\Column\CustomField $column)
        {
        }
    }
}
namespace ACP\Filtering\Model\CustomField {
    class Hascontent extends \ACP\Filtering\Model\CustomField
    {
        public function get_filtering_data()
        {
        }
    }
    class Image extends \ACP\Filtering\Model\CustomField
    {
        public function get_filtering_data()
        {
        }
        public function register_settings()
        {
        }
    }
    class Media extends \ACP\Filtering\Model\CustomField\Image
    {
        // @see Model_CustomField_Image
    }
    class Number extends \ACP\Filtering\Model\CustomField
    {
        public function __construct($column)
        {
        }
    }
    class Date extends \ACP\Filtering\Model\CustomField
    {
        public function __construct($column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Post extends \ACP\Filtering\Model\CustomField
    {
        public function get_filtering_data()
        {
        }
    }
    class Link extends \ACP\Filtering\Model\CustomField
    {
        public function get_filtering_data()
        {
        }
    }
    class User extends \ACP\Filtering\Model\CustomField
    {
        public function get_filtering_data()
        {
        }
    }
    class Checkmark extends \ACP\Filtering\Model\CustomField
    {
        public function get_filtering_data()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
    }
}
namespace ACP\Filtering\Model\Media {
    class Author extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class UsedAsFeaturedImage extends \ACP\Filtering\Model
    {
        public function filter_by_ids($clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class MimeType extends \ACP\Filtering\Model
    {
        public function filter_by_mime_type($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class PostType extends \ACP\Filtering\Model
    {
        public function filter_by_post_type($where, \WP_Query $query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Comments extends \ACP\Filtering\Model
    {
        public function filter_by_comments($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACP\Filtering\Model\Comment {
    class Author extends \ACP\Filtering\Model
    {
        public function filter_by_author($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class ReplyTo extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Agent extends \ACP\Filtering\Model
    {
        public function filter_by_agent($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class AuthorIP extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function filter_by_author_ip($comments_clauses)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class AuthorName extends \ACP\Filtering\Model
    {
        public function filter_by_author_name($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Date extends \ACP\Filtering\Model
    {
        public function filter_by_date($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class PostType extends \ACP\Filtering\Model
    {
        /**
         * PostType constructor.
         *
         * @param ACP\Column\Comment\PostType $column
         */
        public function __construct(\ACP\Column\Comment\PostType $column)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function filter_on_post_type($comments_clauses)
        {
        }
        public function get_filtering_data()
        {
        }
        /**
         * @return array
         */
        private function get_available_post_types()
        {
        }
    }
    class Type extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Approved extends \ACP\Filtering\Model
    {
        public function filter_by_approved($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class DateGmt extends \ACP\Filtering\Model
    {
        public function filter_by_date_gmt($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class User extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class AuthorUrl extends \ACP\Filtering\Model
    {
        public function filter_by_author_url($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Response extends \ACP\Filtering\Model
    {
        public function filter_by_post_id($comments_clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class AuthorEmail extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACP\Filtering\Model\Taxonomy {
    class ID extends \ACP\Filtering\Model
    {
        public function __construct($column)
        {
        }
        public function filter_by_id($clauses)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class TaxonomyParent extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACP\Filtering\Model {
    class MetaDate extends \ACP\Filtering\Model\Meta
    {
        /**
         * @var string
         */
        private $date_format = 'Y-m-d';
        public function __construct($column)
        {
        }
        /**
         * @param string $date_format
         */
        protected function set_date_format($date_format)
        {
        }
        /**
         * @return string
         */
        protected function get_date_format()
        {
        }
        /**
         * Adds Meta Query vars for dates
         *
         * @param array $vars Query args
         *
         * @return array
         * @since 4.0
         */
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
        private function get_filter_format()
        {
        }
        /**
         * @param string $date
         *
         * @return DateTime|false
         */
        private function get_date_time_object($date = null)
        {
        }
        public function register_settings()
        {
        }
    }
    class Disabled extends \ACP\Filtering\Model
    {
        public function is_active()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACP\Filtering {
    /**
     * @since 4.0
     */
    class Helper
    {
        /**
         * @param int[] $post_ids Post ID's
         *
         * @return array
         */
        public function get_post_titles($post_ids)
        {
        }
        /**
         * @param array  $term_ids
         * @param string $taxonomy
         *
         * @return array
         */
        public function get_term_names($term_ids, $taxonomy)
        {
        }
        /**
         * Return options for a date filter based on an array of dates
         *
         * @param array       $dates
         * @param string      $display How to display the date
         * @param string      $format  Format of the date
         * @param string|null $key
         *
         * @return array
         */
        public function get_date_options(array $dates, $display, $format = 'Y-m-d', $key = null)
        {
        }
        /**
         * @param string $format
         *
         * @return array|false
         */
        public function get_date_options_relative($format)
        {
        }
    }
    class Cache
    {
        /**
         * @var string
         */
        private $key;
        /**
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * Set Cache id. Max length for site_transient name is 40 characters,
         *
         * @param string $key
         * @source https://core.trac.wordpress.org/ticket/15058
         */
        private function set_key($key)
        {
        }
        /**
         * Put some data into the cache
         *
         * @param mixed    $data
         * @param null|int $seconds
         */
        public function put($data, $seconds = null)
        {
        }
        /**
         * @return string|false
         */
        public function get()
        {
        }
        /**
         * @return bool
         */
        public function is_expired()
        {
        }
        /**
         * @param int $seconds Expiration in seconds
         *
         * @return null|int
         */
        protected function get_seconds($seconds)
        {
        }
        public function delete()
        {
        }
    }
}
namespace ACP\Filtering\Cache {
    class Model extends \ACP\Filtering\Cache
    {
        /**
         * @var Filtering\Model
         */
        protected $model;
        public function __construct(\ACP\Filtering\Model $model)
        {
        }
        protected function get_key()
        {
        }
        public function put_if_expired()
        {
        }
    }
}
namespace ACP\Filtering {
    class Settings extends \AC\Settings\Column implements \AC\Settings\Header
    {
        /**
         * @var string 'On' or 'Off'
         */
        private $filter;
        /**
         * @var string Top Label
         */
        private $filter_label;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return string
         */
        private function get_instruction()
        {
        }
        public function create_header_view()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        protected function get_label_from_column()
        {
        }
        /**
         * @return string
         */
        public function get_filter_label_default()
        {
        }
        private function get_default_translation_string()
        {
        }
        /**
         * @return string
         */
        public function get_filter()
        {
        }
        /**
         * @param string $filter
         *
         * @return $this
         */
        public function set_filter($filter)
        {
        }
        /**
         * @return bool True when filter is selected
         */
        public function is_active()
        {
        }
        protected function sanitize_label($label)
        {
        }
        /**
         * @return string
         */
        public function get_filter_label()
        {
        }
        /**
         * @param string $filter_label
         *
         * @return $this
         */
        public function set_filter_label($filter_label)
        {
        }
    }
}
namespace ACP\Filtering\Settings {
    class Delegated extends \ACP\Filtering\Settings
    {
        public function define_options()
        {
        }
        public function create_view()
        {
        }
    }
    abstract class Ranged extends \ACP\Filtering\Settings
    {
        /**
         * @var string
         * Options: range, daily, monthly, yearly, exact_match, future, past
         */
        private $filter_format;
        protected abstract function get_options();
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return bool True when ranged selected
         */
        public function is_ranged()
        {
        }
        /**
         * @return string
         */
        public function get_filter_format()
        {
        }
        /**
         * @param string $filter_format
         *
         * @return $this
         */
        public function set_filter_format($filter_format)
        {
        }
    }
    class Date extends \ACP\Filtering\Settings\Ranged
    {
        protected function get_options()
        {
        }
    }
    class DatePast extends \ACP\Filtering\Settings\Ranged
    {
        protected function get_options()
        {
        }
    }
}
namespace ACP\Filtering {
    abstract class Strategy
    {
        /**
         * @var Model
         */
        protected $model;
        /**
         * @param Model $model
         */
        public function __construct(\ACP\Filtering\Model $model)
        {
        }
        /**
         * @return Model
         */
        public function get_model()
        {
        }
        /**
         * @param string $field
         *
         * @return array|false
         */
        public abstract function get_values_by_db_field($field);
        /**
         * Used to add a callback for handling filter request
         * @return void
         */
        public abstract function handle_request();
        /**
         * @return AC\Column
         */
        public function get_column()
        {
        }
    }
    abstract class TableScreen
    {
        /**
         * @var Model[]
         */
        protected $models;
        /**
         * @var Enqueueable[]
         */
        private $assets;
        /**
         * @param array $models
         * @param array $assets
         */
        public function __construct(array $models, array $assets)
        {
        }
        public function scripts()
        {
        }
        /**
         * @since 3.8
         */
        public function hide_default_dropdowns()
        {
        }
        protected function get_data_from_cache(\ACP\Filtering\Model $model)
        {
        }
        /**
         * @return string
         * @since 3.6
         */
        public function update_dropdown_cache()
        {
        }
        public function render_markup()
        {
        }
        /**
         * Display dropdown markup
         *
         * @param Model $model
         */
        protected function render_model(\ACP\Filtering\Model $model)
        {
        }
    }
}
namespace ACP\Filtering\TableScreen {
    class Taxonomy extends \ACP\Filtering\TableScreen
    {
        public function __construct(array $models, $assets)
        {
        }
        public function render_markup()
        {
        }
        private function get_active_filters()
        {
        }
    }
    class User extends \ACP\Filtering\TableScreen
    {
        public function __construct(array $models, $assets)
        {
        }
        /**
         * Run once for Users
         */
        public function render_markup()
        {
        }
    }
    class MSUser extends \ACP\Filtering\TableScreen\User
    {
        public function __construct(array $models, array $assets)
        {
        }
        public function render_button()
        {
        }
    }
    class Post extends \ACP\Filtering\TableScreen
    {
        public function __construct(array $models, $assets)
        {
        }
        public function hide_default_dropdowns()
        {
        }
    }
    class Comment extends \ACP\Filtering\TableScreen
    {
        public function __construct(array $models, $assets)
        {
        }
    }
}
namespace AC\Form\Element {
    class Select extends \AC\Form\Element
    {
        /**
         * @var string
         */
        protected $no_result = '';
        protected function render_options(array $options)
        {
        }
        /**
         * @param string $key
         * @param string $label
         *
         * @return string
         */
        protected function render_option($key, $label)
        {
        }
        /**
         * @param string $key
         *
         * @return array
         */
        protected function get_option_attributes($key)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        protected function selected($value)
        {
        }
        /**
         * @param array $group
         *
         * @return string
         */
        protected function render_optgroup(array $group)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        public function get_no_result()
        {
        }
        /**
         * @param string $no_result
         *
         * @return $this
         */
        public function set_no_result($no_result)
        {
        }
    }
}
namespace ACP\Filtering\Markup {
    class Dropdown extends \AC\Form\Element\Select
    {
        const OPTION_EMPTY = 'cpac_empty';
        const OPTION_NON_EMPTY = 'cpac_nonempty';
        const OPTION_FILTER = 'acp_filter';
        /**
         * @var string
         */
        private $empty;
        /**
         * @var string
         */
        private $nonempty;
        /**
         * @var string
         */
        private $order;
        public function __construct($name, array $options = [])
        {
        }
        /**
         * @return string
         */
        public function get_empty()
        {
        }
        /**
         * @param null|string $label
         *
         * @return $this
         */
        public function set_empty($label = null)
        {
        }
        /**
         * @return string
         */
        public function get_nonempty()
        {
        }
        /**
         * @param null|$label
         *
         * @return $this
         */
        public function set_nonempty($label = null)
        {
        }
        /**
         * @param string $order ASC (default) or DESC
         *
         * @return $this
         */
        public function set_order($order)
        {
        }
        /**
         * @return string
         */
        public function get_order()
        {
        }
        private function sanitize_options()
        {
        }
        /**
         * @return string
         */
        public static function get_disabled_prefix()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function is_disabled_key($key)
        {
        }
        /**
         * @return bool
         */
        private function has_empty_option()
        {
        }
        public function render()
        {
        }
        protected function get_option_attributes($key)
        {
        }
    }
    abstract class Ranged
    {
        /**
         * @var Input
         */
        private $min;
        /**
         * @var Input
         */
        private $max;
        /**
         * @param string     $name
         * @param string     $label
         * @param int|string $min The requested minimal value
         * @param int|string $max The requested maximal value
         */
        public function __construct($name, $label, $min, $max)
        {
        }
        private function create_input($element, $name, $label, $value)
        {
        }
        /**
         * Set type (should be similar for both inputs )
         *
         * @param string $type
         */
        protected function set_input_type($type)
        {
        }
        protected function render_input(\AC\Form\Element\Input $input)
        {
        }
        /**
         * Get the class type based on it's simple name
         * @return string
         */
        private function get_type()
        {
        }
        public function render()
        {
        }
        /**
         * @return Input
         */
        protected function get_min()
        {
        }
        /**
         * @return Input
         */
        protected function get_max()
        {
        }
    }
}
namespace ACP\Filtering\Markup\Ranged {
    class Number extends \ACP\Filtering\Markup\Ranged
    {
        public function __construct($name, $label, $min, $max)
        {
        }
    }
    class Date extends \ACP\Filtering\Markup\Ranged
    {
        public function __construct($name, $label, $min, $max)
        {
        }
    }
}
namespace ACP\Filtering\Strategy {
    /**
     * @since 4.3
     */
    final class Taxonomy extends \ACP\Filtering\Strategy
    {
        public function handle_request()
        {
        }
        /**
         * @param WP_Term_Query $query
         */
        public function handle_filter_requests(\WP_Term_Query $query)
        {
        }
        /**
         * Get values by term field
         *
         * @param string $field
         *
         * @return array
         */
        public function get_values_by_db_field($field)
        {
        }
    }
    class Post extends \ACP\Filtering\Strategy
    {
        public function handle_request()
        {
        }
        /**
         * Handle filter request
         *
         * @param WP_Query $wp_query
         *
         * @since 3.5
         */
        public function handle_filter_requests($wp_query)
        {
        }
        /**
         * Get values by post field
         *
         * @param string $field
         *
         * @return array
         */
        public function get_values_by_db_field($field)
        {
        }
        /**
         * @param array        $vars
         * @param mixed        $value
         * @param array|string $taxonomy
         *
         * @return array
         */
        public function get_filterable_request_vars_taxonomy($vars, $value, $taxonomy)
        {
        }
    }
    class Comment extends \ACP\Filtering\Strategy
    {
        public function handle_request()
        {
        }
        /**
         * Handle filter request for single values
         *
         * @param WP_Comment_Query $comment_query
         *
         * @since 3.5
         */
        public function handle_filter_requests($comment_query)
        {
        }
        /**
         * @param string $field
         *
         * @return array
         * @since 3.5
         */
        public function get_values_by_db_field($field)
        {
        }
    }
    class User extends \ACP\Filtering\Strategy
    {
        public function handle_request()
        {
        }
        /**
         * Handle filter request
         *
         * @param WP_User_Query $user_query
         *
         * @since 3.5
         */
        public function handle_filter_requests($user_query)
        {
        }
        public function get_values_by_db_field($user_field)
        {
        }
    }
}
namespace ACP\Filtering\Bookmark {
    class PreferredFilter
    {
        /**
         * @var SegmentRepository
         */
        private $segment_repository;
        public function __construct(\ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        /**
         * @param ListScreen $list_screen
         * @param string     $request_key
         *
         * @return array
         */
        public function findFilters(\AC\ListScreen $list_screen, $request_key)
        {
        }
    }
}
namespace ACP {
    class RequestAjaxParser implements \AC\Registerable
    {
        /**
         * @var RequestAjaxHandlers
         */
        private $handlers;
        public function __construct(\ACP\RequestAjaxHandlers $handlers)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACP\Access {
    final class PermissionsStorage
    {
        /**
         * @var KeyValuePair
         */
        private $storage;
        public function __construct(\AC\Storage\KeyValueFactory $storage_factory)
        {
        }
        /**
         * @return Permissions
         */
        public function retrieve()
        {
        }
        public function exists()
        {
        }
        public function save(\ACP\Access\Permissions $permissions)
        {
        }
    }
    class ActivationUpdater
    {
        /**
         * @var ActivationKeyStorage
         */
        private $activation_key_storage;
        /**
         * @var ActivationStorage
         */
        private $activation_storage;
        /**
         * @var LicenseKeyRepository
         */
        private $license_key_repository;
        /**
         * @var RequestDispatcher
         */
        private $api;
        /**
         * @var SiteUrl
         */
        private $site_url;
        /**
         * @var PluginRepository
         */
        private $plugin_repository;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        public function __construct(\ACP\Access\ActivationKeyStorage $activation_key_storage, \ACP\Access\ActivationStorage $activation_storage, \ACP\LicenseKeyRepository $license_key_repository, \ACP\RequestDispatcher $api, \ACP\Type\SiteUrl $site_url, \ACP\PluginRepository $plugin_repository, \ACP\Access\PermissionChecker $permission_checker)
        {
        }
        /**
         * @return API\Response
         */
        public function update(\ACP\Type\ActivationToken $token)
        {
        }
        private function create_activation_key_from_response(\ACP\API\Response $api_response)
        {
        }
        private function create_activation_from_response(\ACP\API\Response $api_response)
        {
        }
        /**
         * @param WP_Error $error
         * @param string   $code
         *
         * @return bool
         */
        private function has_error_code(\WP_Error $error, $code)
        {
        }
    }
    final class ActivationStorage
    {
        const ACTIVATION_DETAILS = 'acp_subscription_details';
        const ACTIVATION_TOKEN = 'acp_subscription_details_key';
        const PARAM_STATUS = 'status';
        const PARAM_RENEWAL_METHOD = 'renewal_method';
        const PARAM_EXPIRY_DATE = 'expiry_date';
        const PARAM_PRODUCTS = 'products';
        /**
         * @var KeyValuePair
         */
        private $activation;
        /**
         * @var KeyValuePair
         */
        private $token;
        public function __construct(\AC\Storage\KeyValueFactory $option_factory)
        {
        }
        /**
         * @param ActivationToken $activation_token
         *
         * @return Activation|null
         */
        public function find(\ACP\Type\ActivationToken $activation_token)
        {
        }
        public function save(\ACP\Type\Activation\Key $key, \ACP\Entity\Activation $activation)
        {
        }
        public function delete()
        {
        }
    }
    class ActivationKeyStorage
    {
        /**
         * @var KeyValuePair
         */
        private $storage;
        public function __construct(\AC\Storage\KeyValueFactory $storage_factory)
        {
        }
        /**
         * @return Key|null
         */
        public function find()
        {
        }
        private function get()
        {
        }
        public function save(\ACP\Type\Activation\Key $key)
        {
        }
        public function delete()
        {
        }
    }
    class Platform
    {
        public static function is_local()
        {
        }
    }
    interface Rule
    {
        /**
         * @return Permissions
         */
        public function get_permissions();
    }
}
namespace ACP\Access\Rule {
    class ApiActivateResponse implements \ACP\Access\Rule
    {
        /**
         * @var ACP\API\Response
         */
        protected $response;
        public function __construct(\ACP\API\Response $response)
        {
        }
        public function get_permissions()
        {
        }
        /**
         * @param WP_Error $error
         *
         * @return bool
         * @see WP_Http
         */
        private function has_http_error_code(\WP_Error $error) : bool
        {
        }
    }
    class LocalServer implements \ACP\Access\Rule
    {
        public function get_permissions()
        {
        }
    }
    class ApiDetailsResponse implements \ACP\Access\Rule
    {
        /**
         * @var ACP\API\Response
         */
        protected $response;
        public function __construct(\ACP\API\Response $response)
        {
        }
        public function get_permissions()
        {
        }
    }
    class ApiDeactivateResponse implements \ACP\Access\Rule
    {
        /**
         * @var ACP\API\Response
         */
        protected $response;
        public function __construct(\ACP\API\Response $response)
        {
        }
        public function get_permissions()
        {
        }
    }
}
namespace ACP\Access {
    final class PermissionChecker
    {
        /**
         * @var PermissionsStorage
         */
        private $permissions_storage;
        /**
         * @var Rule[]
         */
        private $rules;
        public function __construct(\ACP\Access\PermissionsStorage $permissions_storage)
        {
        }
        public function add_rule(\ACP\Access\Rule $rule)
        {
        }
        public function apply()
        {
        }
    }
    final class Permissions
    {
        const UPDATE = 'update';
        const USAGE = 'usage';
        /**
         * @var array
         */
        private $permissions;
        public function __construct(array $permissions = [])
        {
        }
        /**
         * @param string $permission
         *
         * @return self
         */
        public function with_permission($permission)
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
        /**
         * @param string $permission
         *
         * @return bool
         */
        public function has_permission($permission)
        {
        }
        /**
         * @return bool
         */
        public function has_usage_permission()
        {
        }
        /**
         * @return bool
         */
        public function has_updates_permission()
        {
        }
    }
}
namespace AC {
    /**
     * Used to hold values from the same type
     */
    class Collection implements \Iterator
    {
        /**
         * @var array
         */
        protected $items;
        public function __construct(array $items = [])
        {
        }
        public function all()
        {
        }
        public function has($key)
        {
        }
        public function put($key, $value)
        {
        }
        public function push($value)
        {
        }
        public function get($key, $default = null)
        {
        }
        public function __get($key)
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        public function first()
        {
        }
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        public function get_copy()
        {
        }
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        public function count()
        {
        }
        /**
         * Filter collection items
         * @return Collection
         */
        public function filter()
        {
        }
        /**
         * Limit array to max number of items
         *
         * @param int $length
         *
         * @return int Number of removed items
         */
        public function limit($length)
        {
        }
        /**
         * @param string $glue
         *
         * @return string
         */
        public function implode($glue = '')
        {
        }
    }
}
namespace ACP {
    class Plugins extends \AC\Collection
    {
        public function __construct(array $items = [])
        {
        }
        public function add(\AC\PluginInformation $plugin)
        {
        }
        /**
         * @return PluginInformation[]
         */
        public function all()
        {
        }
    }
    class ListScreens implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param Groups $groups
         */
        public function register_list_screen_groups(\AC\Groups $groups)
        {
        }
        /**
         * @return bool
         */
        private function is_settings_screen()
        {
        }
        /**
         * @param AC\ListScreens $register
         *
         * @since 4.0
         */
        public function register_list_screens(\AC\ListScreens $register)
        {
        }
        /**
         * Get a list of taxonomies supported by Admin Columns
         * @return array List of taxonomies
         * @since 1.0
         */
        private function get_taxonomies()
        {
        }
    }
}
namespace ACP\Bookmark {
    class Addon implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Request
         */
        private $request;
        /**
         * @var SegmentRepository
         */
        private $segment_repository;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Request $request, \ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        public function register()
        {
        }
        public function request_setter(\AC\ListScreen $list_screen)
        {
        }
        public function segment_request()
        {
        }
        /**
         * @param ListScreen $list_screen
         */
        public function delete_segments_after_list_screen_deleted(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param int $user_id
         */
        public function delete_segments_after_user_deleted($user_id)
        {
        }
    }
}
namespace ACP\Bookmark\Type {
    final class SegmentId
    {
        /**
         * @var int
         */
        private $identity;
        public function __construct($identity)
        {
        }
        private function validate()
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
    }
}
namespace ACP\Bookmark\Entity {
    final class Segment
    {
        /**
         * @var SegmentId
         */
        private $id;
        /**
         * @var ListScreenId
         */
        private $list_screen_id;
        /**
         * @var int
         */
        private $user_id;
        /**
         * @var string
         */
        private $name;
        /**
         * @var array
         */
        private $url_parameters;
        /**
         * @var bool
         */
        private $global;
        /**
         * @param SegmentId    $id
         * @param ListScreenId $list_screen_id
         * @param int          $user_id
         * @param string       $name
         * @param array        $url_parameters
         * @param bool         $global
         */
        public function __construct(\ACP\Bookmark\Type\SegmentId $id, \AC\Type\ListScreenId $list_screen_id, $user_id, $name, array $url_parameters, $global)
        {
        }
        private function validate()
        {
        }
        /**
         * @return SegmentId
         */
        public function get_id()
        {
        }
        /**
         * @return ListScreenId
         */
        public function get_list_screen_id()
        {
        }
        /**
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return array
         */
        public function get_url_parameters()
        {
        }
        /**
         * @return bool
         */
        public function is_global()
        {
        }
    }
}
namespace ACP\Bookmark {
    class SegmentRepository
    {
        const FILTER_USER = 'user_id';
        const FILTER_LIST_SCREEN = 'list_screen_id';
        const FILTER_GLOBAL = 'global';
        const ORDER_BY = 'orderby';
        const ORDER = 'order';
        const TABLE = 'ac_segments';
        /**
         * @param SegmentId $id
         *
         * @return Segment|null
         */
        public function find(\ACP\Bookmark\Type\SegmentId $id)
        {
        }
        /**
         * @param array $args
         *
         * @return Segment[]
         */
        public function find_all(array $args = [])
        {
        }
        /**
         * @param int $user_id
         *
         * @return Segment[]
         */
        public function find_all_by_user($user_id)
        {
        }
        /**
         * @param object $row
         *
         * @return Segment
         */
        private function create_segment_from_row($row)
        {
        }
        /**
         * @param ListScreenId $list_screen_id
         * @param int          $user_id
         * @param string       $name
         * @param array        $url_parameters
         * @param bool         $global
         *
         * @return Segment
         */
        public function create(\AC\Type\ListScreenId $list_screen_id, $user_id, $name, array $url_parameters, $global)
        {
        }
        /**
         * @param SegmentId $id
         */
        public function delete(\ACP\Bookmark\Type\SegmentId $id)
        {
        }
    }
}
namespace ACP\Bookmark\Setting {
    class PreferredSegment
    {
        const FIELD_SEGMENT = 'filter_segment';
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var SegmentRepository
         */
        private $segment_repository;
        /**
         * @param ListScreen        $list_screen
         * @param SegmentRepository $segment_repository
         */
        public function __construct(\AC\ListScreen $list_screen, \ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        /**
         * @return Segment|null
         */
        public function get_segment()
        {
        }
    }
}
namespace ACP\Bookmark\Controller {
    class Segment extends \ACP\Controller
    {
        /**
         * @var AC\ListScreen;
         */
        protected $list_screen;
        /**
         * @var SegmentRepository
         */
        private $segment_repository;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Request $request, \ACP\Bookmark\SegmentRepository $segment_repository)
        {
        }
        /**
         * @param Entity\Segment $segment
         *
         * @return array
         */
        protected function get_segment_response(\ACP\Bookmark\Entity\Segment $segment)
        {
        }
        public function read_action()
        {
        }
        public function create_action()
        {
        }
        public function delete_action()
        {
        }
    }
    /**
     * Fill the $_GET and $_REQUEST params with the preferred segment query parameters.
     */
    class RequestSetter
    {
        /**
         * @var Bookmark\Setting\PreferredSegment
         */
        private $setting;
        public function __construct(\ACP\Bookmark\Setting\PreferredSegment $setting)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    final class Addon implements \AC\Registerable
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var RulesRepositoryFactory
         */
        private $rules_repository_factory;
        /**
         * @var HideOnScreenFactory
         */
        private $hide_on_screen_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \ACP\ConditionalFormat\RulesRepositoryFactory $rules_repository_factory, \ACP\ConditionalFormat\Settings\ListScreen\HideOnScreenFactory $hide_on_screen_factory)
        {
        }
        public function register() : void
        {
        }
    }
}
namespace ACP\ConditionalFormat\RequestHandler {
    class SaveRules implements \ACP\RequestAjaxHandler
    {
        /**
         * @var RulesRepositoryFactory
         */
        private $rules_repository_factory;
        public function __construct(\ACP\ConditionalFormat\RulesRepositoryFactory $rules_repository_factory)
        {
        }
        public function handle() : void
        {
        }
    }
}
namespace ACP\ConditionalFormat\Service {
    final class Formatter implements \AC\Registerable
    {
        /**
         * @var Operators
         */
        private $operators;
        /**
         * @var RulesRepositoryFactory
         */
        private $rules_repository_factory;
        public function __construct(\ACP\ConditionalFormat\Operators $operators, \ACP\ConditionalFormat\RulesRepositoryFactory $rules_repository_factory)
        {
        }
        public function register() : void
        {
        }
        /**
         * Comparisons are done case-insensitive
         */
        public function format($value, int $id, \AC\Column $column) : string
        {
        }
        private function sanitize_fact($fact) : string
        {
        }
        /**
         * @throws InvalidDateFormatException
         */
        private function get_specification(string $operator, string $type, $fact = null) : \ACP\Expression\Specification
        {
        }
    }
    final class Storage implements \AC\Registerable
    {
        /**
         * @var RulesRepositoryFactory
         */
        private $rules_repository_factory;
        public function __construct(\ACP\ConditionalFormat\RulesRepositoryFactory $rules_repository_factory)
        {
        }
        public function register() : void
        {
        }
        public function list_screen_deleted(\AC\ListScreen $list_screen) : void
        {
        }
    }
    final class ListScreenSettings implements \AC\Registerable
    {
        /**
         * @var HideOnScreenFactory
         */
        private $hide_on_screen_factory;
        public function __construct(\ACP\ConditionalFormat\Settings\ListScreen\HideOnScreenFactory $hide_on_screen_factory)
        {
        }
        public function register() : void
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection) : void
        {
        }
    }
    final class Assets implements \AC\Registerable
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Operators
         */
        private $operators;
        /**
         * @var RulesRepositoryFactory
         */
        private $rules_repository_factory;
        /**
         * @var HideOnScreenFactory
         */
        private $hide_on_screen_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \ACP\ConditionalFormat\Operators $operators, \ACP\ConditionalFormat\RulesRepositoryFactory $rules_repository_factory, \ACP\ConditionalFormat\Settings\ListScreen\HideOnScreenFactory $hide_on_screen_factory)
        {
        }
        private function is_enabled(\AC\ListScreen $list_screen) : bool
        {
        }
        private function get_columns(\AC\ListScreen $list_screen) : array
        {
        }
        private function get_column_label(\AC\Column $column) : string
        {
        }
        /**
         * Allows plain text and dashicons
         */
        private function sanitize_column_label(string $label) : string
        {
        }
        public function register() : void
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    final class FormattableConfig
    {
        /**
         * @var Formatter
         */
        private $formatter;
        public function __construct(\ACP\ConditionalFormat\Formatter $formatter = null)
        {
        }
        // TODO David get vs tell or parametrize this call to make deductions on which formatter, which would imply an interface or abstract class
        public function get_value_formatter() : \ACP\ConditionalFormat\Formatter
        {
        }
    }
}
namespace AC {
    abstract class Iterator implements \Iterator
    {
        protected $data = [];
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    final class RuleCollection extends \AC\Iterator
    {
        public function __construct(array $data = [])
        {
        }
        public function add(\ACP\ConditionalFormat\Entity\Rule $rule) : void
        {
        }
        public function current() : \ACP\ConditionalFormat\Entity\Rule
        {
        }
    }
    interface Formatter
    {
        public const DATE = 'date';
        public const FLOAT = 'float';
        public const INTEGER = 'integer';
        public const STRING = 'string';
        public function get_type() : string;
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string;
    }
}
namespace ACP\ConditionalFormat\Type {
    final class Format
    {
        private $class;
        public function __construct(string $class)
        {
        }
        public function __toString() : string
        {
        }
    }
}
namespace ACP\ConditionalFormat\Settings\ListScreen {
    final class HideOnScreenFactory implements \ACP\Settings\ListScreen\HideOnScreenFactory
    {
        public function create() : \ACP\Settings\ListScreen\HideOnScreen
        {
        }
    }
}
namespace ACP\ConditionalFormat\Asset {
    final class Table extends \AC\Asset\Script
    {
        /**
         * @var Operators
         */
        private $operators;
        /**
         * @var RuleCollection
         */
        private $rules;
        /**
         * @var array
         */
        private $columns;
        public function __construct(\AC\Asset\Location\Absolute $location, \ACP\ConditionalFormat\Operators $operators, \ACP\ConditionalFormat\RuleCollection $rules, array $columns)
        {
        }
        public function register() : void
        {
        }
        private function get_documentation_link() : string
        {
        }
    }
}
namespace ACP\ConditionalFormat\Entity {
    final class Rule
    {
        private $column_name;
        private $format;
        private $operator;
        private $fact;
        public function __construct(string $column_name, \ACP\ConditionalFormat\Type\Format $format, string $operator, $fact = null)
        {
        }
        public function get_column_name() : string
        {
        }
        public function get_format() : \ACP\ConditionalFormat\Type\Format
        {
        }
        public function get_operator() : string
        {
        }
        public function has_fact() : bool
        {
        }
        public function get_fact()
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    final class RulesRepositoryFactory
    {
        public function create(\AC\Type\ListScreenId $id) : \ACP\ConditionalFormat\RulesRepository
        {
        }
    }
    final class RulesRepository
    {
        private const FORMAT = 'format';
        private const FACT = 'fact';
        private const OPERATOR = 'operator';
        private const COLUMN_NAME = 'column_name';
        /**
         * @var string
         */
        private $key;
        public function __construct(\AC\Type\ListScreenId $list_screen_id)
        {
        }
        public function find(\AC\Type\UserId $id) : \ACP\ConditionalFormat\RuleCollection
        {
        }
        public function find_by_column(\AC\Type\UserId $id, string $column_name) : \ACP\ConditionalFormat\RuleCollection
        {
        }
        public function save(\AC\Type\UserId $id, \ACP\ConditionalFormat\RuleCollection $rules) : void
        {
        }
        public function remove(\AC\Type\UserId $id) : void
        {
        }
        public function remove_for_all_users() : void
        {
        }
        private function create_rules(array $encoded_rules) : \ACP\ConditionalFormat\RuleCollection
        {
        }
    }
}
namespace ACP\ConditionalFormat\Formatter {
    abstract class BaseFormatter implements \ACP\ConditionalFormat\Formatter
    {
        private $type;
        public function __construct(string $type)
        {
        }
        protected function validate() : void
        {
        }
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
    class StringFormatter extends \ACP\ConditionalFormat\Formatter\BaseFormatter
    {
        public function __construct()
        {
        }
    }
    final class SanitizedFormatter implements \ACP\ConditionalFormat\Formatter
    {
        private $formatter;
        private $ignored_operator_groups;
        public function __construct(\ACP\ConditionalFormat\Formatter $formatter, array $ignored_operator_groups = [])
        {
        }
        public static function from_ignore_strings(\ACP\ConditionalFormat\Formatter $formatter) : self
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
        public function get_type() : string
        {
        }
        private function validate() : void
        {
        }
        protected function sanitize(string $value) : string
        {
        }
    }
    class IntegerFormatter extends \ACP\ConditionalFormat\Formatter\BaseFormatter
    {
        public function __construct()
        {
        }
    }
    class DateFormatter extends \ACP\ConditionalFormat\Formatter\BaseFormatter
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\ConditionalFormat\Formatter\DateFormatter {
    class FormatFormatter extends \ACP\ConditionalFormat\Formatter\DateFormatter
    {
        private $format;
        public function __construct(string $format = null)
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
}
namespace ACP\ConditionalFormat\Formatter {
    final class FilterHtmlFormatter implements \ACP\ConditionalFormat\Formatter
    {
        /**
         * @var Formatter
         */
        private $formatter;
        public function __construct(\ACP\ConditionalFormat\Formatter $formatter)
        {
        }
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
    class RawValueFormatter implements \ACP\ConditionalFormat\Formatter
    {
        /**
         * @var string
         */
        protected $type;
        public function __construct(string $type)
        {
        }
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
    class FloatFormatter extends \ACP\ConditionalFormat\Formatter\BaseFormatter
    {
        public function __construct()
        {
        }
    }
}
namespace ACP\ConditionalFormat {
    trait FilteredHtmlFormatTrait
    {
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    final class Operators
    {
        private const LABEL = 'label';
        private const TYPE = 'type';
        private const OPERATOR = 'operator';
        private const TYPE_RELATIVE = 'relative';
        private const TYPE_BETWEEN = 'between';
        private const TYPE_SINGLE = 'single';
        public function get_group(string $operator) : string
        {
        }
        public function get_operators() : array
        {
        }
    }
}
namespace AC {
    class Plugin
    {
        /**
         * @var string
         */
        private $file;
        /**
         * @var Version
         */
        private $version;
        /**
         * @var string  $file
         * @var Version $version
         */
        protected function __construct($file, \AC\Plugin\Version $version)
        {
        }
        /**
         * @return string
         */
        public function get_basename()
        {
        }
        /**
         * @return string
         */
        public function get_dir()
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return Version
         */
        public function get_version()
        {
        }
        /**
         * @return Location\Absolute
         */
        public function get_location()
        {
        }
        /**
         * @return void
         * @deprecated
         */
        public function install()
        {
        }
    }
}
namespace ACP {
    final class AdminColumnsPro extends \AC\Plugin
    {
        /**
         * @var self
         */
        private static $instance;
        /**
         * @var API
         */
        private $api;
        protected function __construct()
        {
        }
        public static function instance() : self
        {
        }
        public function get_api() : \ACP\API
        {
        }
        /**
         * For backwards compatibility with the `Dependencies` class
         *
         * @param string $version
         *
         * @return bool
         * @deprecated 6.0
         */
        public function is_version_gte($version) : bool
        {
        }
        /**
         * @return bool
         * @deprecated 5.7
         */
        public function is_network_active() : bool
        {
        }
        /**
         * @since      4.0
         * @deprecated 5.5.2
         */
        public function network_admin() : void
        {
        }
        /**
         * @since      4.0
         * @deprecated 5.0.0
         */
        public function layouts() : void
        {
        }
    }
    class PluginActionLinks implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $basename;
        /**
         * @var PermissionsStorage
         */
        private $permission_storage;
        public function __construct($basename, \ACP\Access\PermissionsStorage $permission_storage)
        {
        }
        public function register()
        {
        }
        private function has_usage_permission()
        {
        }
        public function add_settings_link($links, $file)
        {
        }
        public function add_network_settings_link($links, $file)
        {
        }
        /**
         * @param Url $url
         *
         * @return string
         */
        private function create_link_element(\AC\Type\Url $url)
        {
        }
    }
}
namespace ACP\Table {
    class StickyTableRow implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function register()
        {
        }
        private function ajax_handler()
        {
        }
        public function preferences()
        {
        }
        public function is_sticky($key)
        {
        }
        public function update_sticky_table()
        {
        }
        /**
         * @param AC\Table\Screen $table
         */
        public function register_screen_option($table)
        {
        }
    }
    interface HideElement
    {
        /**
         * @return void
         */
        public function hide();
    }
}
namespace ACP\Table\HideElement {
    class FilterCommentTypes implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
    class FilterPostDate implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
    class SubMenu implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
        public function render()
        {
        }
    }
    class BulkActions implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
        public function render()
        {
        }
    }
    class Search implements \ACP\Table\HideElement
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function hide()
        {
        }
        public function render()
        {
        }
        private function get_search_selector()
        {
        }
    }
    class RowActions implements \ACP\Table\HideElement
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function hide()
        {
        }
    }
    class Filters implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
    class FilterPostFormats implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
    class FilterMediaItems implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
    class FilterPostCategories implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
    class ActionsBar implements \ACP\Table\HideElement
    {
        public function hide()
        {
        }
    }
}
namespace ACP\Table {
    class Switcher implements \AC\Registerable
    {
        /** @var Storage */
        private $storage;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function register()
        {
        }
        private function add_filter_args_to_url($link)
        {
        }
        public function switcher(\AC\ListScreen $list_screen)
        {
        }
    }
    class Scripts implements \AC\Registerable
    {
        /**
         * @var Asset\Location\Absolute
         */
        private $location;
        /**
         * @var ColumnSize\UserStorage
         */
        private $user_storage;
        /**
         * @var ColumnSize\ListStorage
         */
        private $list_storage;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\ColumnSize\UserStorage $user_storage, \AC\ColumnSize\ListStorage $list_storage)
        {
        }
        public function register()
        {
        }
        public function scripts(\AC\ListScreen $list_screen)
        {
        }
    }
    class PrimaryColumn implements \AC\Registerable
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        public function register()
        {
        }
        public function init(\AC\Table\Screen $table_screen)
        {
        }
        function set_primary_column($column_name)
        {
        }
    }
    class HorizontalScrolling implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Asset\Location\Absolute
         */
        private $location;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        /**
         * @return AC\Preferences\Site
         */
        public function preferences()
        {
        }
        /**
         * Handle ajax request
         */
        public function update_table_option_overflow()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return bool
         */
        private function is_overflow_table(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param ListScreen $list_screen
         */
        public function delete_overflow_preference($list_screen)
        {
        }
        /**
         * @param AC\Table\Screen $table
         */
        public function register_screen_option($table)
        {
        }
        private function is_windows_browser()
        {
        }
        /**
         * Load scripts
         */
        public function scripts()
        {
        }
        /**
         * @param string          $classes
         * @param AC\Table\Screen $table
         *
         * @return string
         */
        public function add_horizontal_scrollable_class($classes, $table)
        {
        }
    }
    final class HideElements implements \AC\Registerable
    {
        public function register()
        {
        }
        public function hide_elements(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACP {
    class RequestParser implements \AC\Registerable
    {
        /**
         * @var RequestHandlerFactory
         */
        private $handler_factory;
        public function __construct(\ACP\RequestHandlerFactory $handler_factory)
        {
        }
        public function register()
        {
        }
        public function handle()
        {
        }
    }
    class Localize implements \AC\Registerable
    {
        const TEXTDOMAIN = 'codepress-admin-columns';
        /**
         * @var string
         */
        private $plugin_dir;
        public function __construct($plugin_dir)
        {
        }
        public function register()
        {
        }
        public function localize()
        {
        }
        /**
         * @return string
         */
        private function get_local()
        {
        }
        /**
         * Do no use `load_plugin_textdomain()` because it could prevent
         * pro languages from loading when core translation files are found.
         *
         * @param string $language_dir
         * @param string $local
         */
        private function load_textdomain($language_dir, $local)
        {
        }
    }
    class LicenseKeyRepository
    {
        /**
         * @var KeyValuePair
         */
        private $storage;
        public function __construct(\AC\Storage\KeyValueFactory $storage_factory)
        {
        }
        /**
         * @return LicenseKey|null
         */
        public function find()
        {
        }
        private function is_defined()
        {
        }
        private function get()
        {
        }
        public function delete()
        {
        }
    }
}
namespace ACP\Vendor\Composer {
    /**
     * This class is copied in every Composer installed project and available to all
     *
     * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
     *
     * To require its presence, you can require `composer-runtime-api ^2.0`
     *
     * @final
     */
    class InstalledVersions
    {
        /**
         * @var mixed[]|null
         * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
         */
        private static $installed;
        /**
         * @var bool|null
         */
        private static $canGetVendors;
        /**
         * @var array[]
         * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
         */
        private static $installedByVendor = array();
        /**
         * Returns a list of all package names which are present, either by being installed, replaced or provided
         *
         * @return string[]
         * @psalm-return list<string>
         */
        public static function getInstalledPackages()
        {
        }
        /**
         * Returns a list of all package names with a specific type e.g. 'library'
         *
         * @param  string   $type
         * @return string[]
         * @psalm-return list<string>
         */
        public static function getInstalledPackagesByType($type)
        {
        }
        /**
         * Checks whether the given package is installed
         *
         * This also returns true if the package name is provided or replaced by another package
         *
         * @param  string $packageName
         * @param  bool   $includeDevRequirements
         * @return bool
         */
        public static function isInstalled($packageName, $includeDevRequirements = \true)
        {
        }
        /**
         * Checks whether the given package satisfies a version constraint
         *
         * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
         *
         *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
         *
         * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
         * @param  string        $packageName
         * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
         * @return bool
         */
        public static function satisfies(\ACP\Vendor\Composer\Semver\VersionParser $parser, $packageName, $constraint)
        {
        }
        /**
         * Returns a version constraint representing all the range(s) which are installed for a given package
         *
         * It is easier to use this via isInstalled() with the $constraint argument if you need to check
         * whether a given version of a package is installed, and not just whether it exists
         *
         * @param  string $packageName
         * @return string Version constraint usable with composer/semver
         */
        public static function getVersionRanges($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
         */
        public static function getVersion($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
         */
        public static function getPrettyVersion($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
         */
        public static function getReference($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
         */
        public static function getInstallPath($packageName)
        {
        }
        /**
         * @return array
         * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
         */
        public static function getRootPackage()
        {
        }
        /**
         * Returns the raw installed.php data for custom implementations
         *
         * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
         * @return array[]
         * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
         */
        public static function getRawData()
        {
        }
        /**
         * Returns the raw data of all installed.php which are currently loaded for custom implementations
         *
         * @return array[]
         * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
         */
        public static function getAllRawData()
        {
        }
        /**
         * Lets you reload the static array from another file
         *
         * This is only useful for complex integrations in which a project needs to use
         * this class but then also needs to execute another project's autoloader in process,
         * and wants to ensure both projects have access to their version of installed.php.
         *
         * A typical case would be PHPUnit, where it would need to make sure it reads all
         * the data it needs from this class, then call reload() with
         * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
         * the project in which it runs can then also use this class safely, without
         * interference between PHPUnit's dependencies and the project's dependencies.
         *
         * @param  array[] $data A vendor/composer/installed.php data set
         * @return void
         *
         * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
         */
        public static function reload($data)
        {
        }
        /**
         * @return array[]
         * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
         */
        private static function getInstalled()
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInitAdminColumnsPro
    {
        private static $loader;
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInitAdminColumnsPro
    {
        public static $prefixLengthsPsr4 = array('A' => array('ACP\\' => 4, 'ACA\\YoastSeo\\' => 13, 'ACA\\WC\\' => 7, 'ACA\\Types\\' => 10, 'ACA\\Polylang\\' => 13, 'ACA\\Pods\\' => 9, 'ACA\\MetaBox\\' => 12, 'ACA\\MLA\\' => 8, 'ACA\\JetEngine\\' => 14, 'ACA\\GravityForms\\' => 17, 'ACA\\EC\\' => 7, 'ACA\\BeaverBuilder\\' => 18, 'ACA\\BbPress\\' => 12, 'ACA\\BP\\' => 7, 'ACA\\ACF\\' => 8));
        public static $prefixDirsPsr4 = array('ACP\\' => array(0 => __DIR__ . '/../..' . '/classes'), 'ACA\\YoastSeo\\' => array(0 => __DIR__ . '/../..' . '/addons/yoast-seo/classes'), 'ACA\\WC\\' => array(0 => __DIR__ . '/../..' . '/addons/woocommerce/classes'), 'ACA\\Types\\' => array(0 => __DIR__ . '/../..' . '/addons/types/classes'), 'ACA\\Polylang\\' => array(0 => __DIR__ . '/../..' . '/addons/polylang/classes'), 'ACA\\Pods\\' => array(0 => __DIR__ . '/../..' . '/addons/pods/classes'), 'ACA\\MetaBox\\' => array(0 => __DIR__ . '/../..' . '/addons/metabox/classes'), 'ACA\\MLA\\' => array(0 => __DIR__ . '/../..' . '/addons/media-library-assistant/classes'), 'ACA\\JetEngine\\' => array(0 => __DIR__ . '/../..' . '/addons/jetengine/classes'), 'ACA\\GravityForms\\' => array(0 => __DIR__ . '/../..' . '/addons/gravityforms/classes'), 'ACA\\EC\\' => array(0 => __DIR__ . '/../..' . '/addons/events-calendar/classes'), 'ACA\\BeaverBuilder\\' => array(0 => __DIR__ . '/../..' . '/addons/beaver-builder/classes'), 'ACA\\BbPress\\' => array(0 => __DIR__ . '/../..' . '/addons/bbpress/classes'), 'ACA\\BP\\' => array(0 => __DIR__ . '/../..' . '/addons/buddypress/classes'), 'ACA\\ACF\\' => array(0 => __DIR__ . '/../..' . '/addons/acf/classes'));
        public static $classMap = array('ACA\\ACF\\AdvancedCustomFields' => __DIR__ . '/../..' . '/addons/acf/classes/AdvancedCustomFields.php', 'ACA\\ACF\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/acf/classes/Asset/Script/Admin.php', 'ACA\\ACF\\CloneColumnFactory' => __DIR__ . '/../..' . '/addons/acf/classes/CloneColumnFactory.php', 'ACA\\ACF\\Column' => __DIR__ . '/../..' . '/addons/acf/classes/Column.php', 'ACA\\ACF\\ColumnFactory' => __DIR__ . '/../..' . '/addons/acf/classes/ColumnFactory.php', 'ACA\\ACF\\ColumnGroup' => __DIR__ . '/../..' . '/addons/acf/classes/ColumnGroup.php', 'ACA\\ACF\\ColumnInstantiator' => __DIR__ . '/../..' . '/addons/acf/classes/ColumnInstantiator.php', 'ACA\\ACF\\Column\\Deprecated' => __DIR__ . '/../..' . '/addons/acf/classes/Column/Deprecated.php', 'ACA\\ACF\\Column\\Repeater' => __DIR__ . '/../..' . '/addons/acf/classes/Column/Repeater.php', 'ACA\\ACF\\Column\\Unsupported' => __DIR__ . '/../..' . '/addons/acf/classes/Column/Unsupported.php', 'ACA\\ACF\\ConditionalFormatting\\FieldFormattableFactory' => __DIR__ . '/../..' . '/addons/acf/classes/ConditionalFormatting/FieldFormattableFactory.php', 'ACA\\ACF\\ConditionalFormatting\\FormattableFactory' => __DIR__ . '/../..' . '/addons/acf/classes/ConditionalFormatting/FormattableFactory.php', 'ACA\\ACF\\ConditionalFormatting\\FormattableFactoryAware' => __DIR__ . '/../..' . '/addons/acf/classes/ConditionalFormatting/FormattableFactoryAware.php', 'ACA\\ACF\\ConditionalFormatting\\FormattableTrait' => __DIR__ . '/../..' . '/addons/acf/classes/ConditionalFormatting/FormattableTrait.php', 'ACA\\ACF\\ConfigFactory' => __DIR__ . '/../..' . '/addons/acf/classes/ConfigFactory.php', 'ACA\\ACF\\Configurable' => __DIR__ . '/../..' . '/addons/acf/classes/Configurable.php', 'ACA\\ACF\\Configurable\\ClonePrefixedField' => __DIR__ . '/../..' . '/addons/acf/classes/Configurable/ClonePrefixedField.php', 'ACA\\ACF\\Configurable\\Column' => __DIR__ . '/../..' . '/addons/acf/classes/Configurable/Column.php', 'ACA\\ACF\\Configurable\\Group' => __DIR__ . '/../..' . '/addons/acf/classes/Configurable/Group.php', 'ACA\\ACF\\Editing\\EditableTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/EditableTrait.php', 'ACA\\ACF\\Editing\\EditingFactoryAware' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/EditingFactoryAware.php', 'ACA\\ACF\\Editing\\EditingModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/EditingModelFactory.php', 'ACA\\ACF\\Editing\\ModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/ModelFactory.php', 'ACA\\ACF\\Editing\\ModelViewFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/ModelViewFactory.php', 'ACA\\ACF\\Editing\\Service\\MultipleSelect' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Service/MultipleSelect.php', 'ACA\\ACF\\Editing\\Service\\Taxonomies' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Service/Taxonomies.php', 'ACA\\ACF\\Editing\\Service\\Taxonomy' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Service/Taxonomy.php', 'ACA\\ACF\\Editing\\StorageFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/StorageFactory.php', 'ACA\\ACF\\Editing\\Storage\\CloneField' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Storage/CloneField.php', 'ACA\\ACF\\Editing\\Storage\\Field' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Storage/Field.php', 'ACA\\ACF\\Editing\\Storage\\Group' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Storage/Group.php', 'ACA\\ACF\\Editing\\Storage\\ReadStorage' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Storage/ReadStorage.php', 'ACA\\ACF\\Editing\\Storage\\Read\\Column' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/Storage/Read/Column.php', 'ACA\\ACF\\Editing\\View\\Link' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/View/Link.php', 'ACA\\ACF\\Editing\\View\\Range' => __DIR__ . '/../..' . '/addons/acf/classes/Editing/View/Range.php', 'ACA\\ACF\\Export\\ModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Export/ModelFactory.php', 'ACA\\ACF\\Export\\Model\\Date' => __DIR__ . '/../..' . '/addons/acf/classes/Export/Model/Date.php', 'ACA\\ACF\\Export\\Model\\Link' => __DIR__ . '/../..' . '/addons/acf/classes/Export/Model/Link.php', 'ACA\\ACF\\Export\\Model\\RepeaterSubField' => __DIR__ . '/../..' . '/addons/acf/classes/Export/Model/RepeaterSubField.php', 'ACA\\ACF\\Field' => __DIR__ . '/../..' . '/addons/acf/classes/Field.php', 'ACA\\ACF\\FieldFactory' => __DIR__ . '/../..' . '/addons/acf/classes/FieldFactory.php', 'ACA\\ACF\\FieldGroup\\Location\\Comment' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/Location/Comment.php', 'ACA\\ACF\\FieldGroup\\Location\\Media' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/Location/Media.php', 'ACA\\ACF\\FieldGroup\\Location\\Post' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/Location/Post.php', 'ACA\\ACF\\FieldGroup\\Location\\Taxonomy' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/Location/Taxonomy.php', 'ACA\\ACF\\FieldGroup\\Location\\User' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/Location/User.php', 'ACA\\ACF\\FieldGroup\\Query' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/Query.php', 'ACA\\ACF\\FieldGroup\\QueryFactory' => __DIR__ . '/../..' . '/addons/acf/classes/FieldGroup/QueryFactory.php', 'ACA\\ACF\\FieldRepository' => __DIR__ . '/../..' . '/addons/acf/classes/FieldRepository.php', 'ACA\\ACF\\FieldType' => __DIR__ . '/../..' . '/addons/acf/classes/FieldType.php', 'ACA\\ACF\\Field\\Choices' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Choices.php', 'ACA\\ACF\\Field\\Date' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Date.php', 'ACA\\ACF\\Field\\DefaultValue' => __DIR__ . '/../..' . '/addons/acf/classes/Field/DefaultValue.php', 'ACA\\ACF\\Field\\DisplayFormat' => __DIR__ . '/../..' . '/addons/acf/classes/Field/DisplayFormat.php', 'ACA\\ACF\\Field\\Library' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Library.php', 'ACA\\ACF\\Field\\MaxLength' => __DIR__ . '/../..' . '/addons/acf/classes/Field/MaxLength.php', 'ACA\\ACF\\Field\\Multiple' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Multiple.php', 'ACA\\ACF\\Field\\Number' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Number.php', 'ACA\\ACF\\Field\\Placeholder' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Placeholder.php', 'ACA\\ACF\\Field\\PostTypeFilterable' => __DIR__ . '/../..' . '/addons/acf/classes/Field/PostTypeFilterable.php', 'ACA\\ACF\\Field\\RoleFilterable' => __DIR__ . '/../..' . '/addons/acf/classes/Field/RoleFilterable.php', 'ACA\\ACF\\Field\\SaveFormat' => __DIR__ . '/../..' . '/addons/acf/classes/Field/SaveFormat.php', 'ACA\\ACF\\Field\\Subfields' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Subfields.php', 'ACA\\ACF\\Field\\TaxonomyFilterable' => __DIR__ . '/../..' . '/addons/acf/classes/Field/TaxonomyFilterable.php', 'ACA\\ACF\\Field\\TermRelation' => __DIR__ . '/../..' . '/addons/acf/classes/Field/TermRelation.php', 'ACA\\ACF\\Field\\Textarea' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Textarea.php', 'ACA\\ACF\\Field\\Type\\Boolean' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Boolean.php', 'ACA\\ACF\\Field\\Type\\ButtonGroup' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/ButtonGroup.php', 'ACA\\ACF\\Field\\Type\\Checkbox' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Checkbox.php', 'ACA\\ACF\\Field\\Type\\ChoicesTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/ChoicesTrait.php', 'ACA\\ACF\\Field\\Type\\CloneField' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/CloneField.php', 'ACA\\ACF\\Field\\Type\\Color' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Color.php', 'ACA\\ACF\\Field\\Type\\Date' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Date.php', 'ACA\\ACF\\Field\\Type\\DateTime' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/DateTime.php', 'ACA\\ACF\\Field\\Type\\DefaultValueTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/DefaultValueTrait.php', 'ACA\\ACF\\Field\\Type\\Email' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Email.php', 'ACA\\ACF\\Field\\Type\\File' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/File.php', 'ACA\\ACF\\Field\\Type\\FlexibleContent' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/FlexibleContent.php', 'ACA\\ACF\\Field\\Type\\Gallery' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Gallery.php', 'ACA\\ACF\\Field\\Type\\GoogleMap' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/GoogleMap.php', 'ACA\\ACF\\Field\\Type\\Image' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Image.php', 'ACA\\ACF\\Field\\Type\\Link' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Link.php', 'ACA\\ACF\\Field\\Type\\MaxLengthTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/MaxLengthTrait.php', 'ACA\\ACF\\Field\\Type\\MultipleTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/MultipleTrait.php', 'ACA\\ACF\\Field\\Type\\Number' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Number.php', 'ACA\\ACF\\Field\\Type\\NumberTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/NumberTrait.php', 'ACA\\ACF\\Field\\Type\\Oembed' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Oembed.php', 'ACA\\ACF\\Field\\Type\\PageLinks' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/PageLinks.php', 'ACA\\ACF\\Field\\Type\\Password' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Password.php', 'ACA\\ACF\\Field\\Type\\PlaceholderTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/PlaceholderTrait.php', 'ACA\\ACF\\Field\\Type\\PostObject' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/PostObject.php', 'ACA\\ACF\\Field\\Type\\PostTypeTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/PostTypeTrait.php', 'ACA\\ACF\\Field\\Type\\Radio' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Radio.php', 'ACA\\ACF\\Field\\Type\\Range' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Range.php', 'ACA\\ACF\\Field\\Type\\Relationship' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Relationship.php', 'ACA\\ACF\\Field\\Type\\Repeater' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Repeater.php', 'ACA\\ACF\\Field\\Type\\Select' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Select.php', 'ACA\\ACF\\Field\\Type\\Taxonomy' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Taxonomy.php', 'ACA\\ACF\\Field\\Type\\TaxonomyFilterableTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/TaxonomyFilterableTrait.php', 'ACA\\ACF\\Field\\Type\\Text' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Text.php', 'ACA\\ACF\\Field\\Type\\Textarea' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Textarea.php', 'ACA\\ACF\\Field\\Type\\Time' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Time.php', 'ACA\\ACF\\Field\\Type\\Url' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Url.php', 'ACA\\ACF\\Field\\Type\\User' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/User.php', 'ACA\\ACF\\Field\\Type\\ValueDecoratorTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/ValueDecoratorTrait.php', 'ACA\\ACF\\Field\\Type\\Wysiwyg' => __DIR__ . '/../..' . '/addons/acf/classes/Field/Type/Wysiwyg.php', 'ACA\\ACF\\Field\\ValueWrapper' => __DIR__ . '/../..' . '/addons/acf/classes/Field/ValueWrapper.php', 'ACA\\ACF\\FieldsFactory' => __DIR__ . '/../..' . '/addons/acf/classes/FieldsFactory.php', 'ACA\\ACF\\Filtering\\FilteringFactoryAware' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/FilteringFactoryAware.php', 'ACA\\ACF\\Filtering\\FilteringModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/FilteringModelFactory.php', 'ACA\\ACF\\Filtering\\FilteringTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/FilteringTrait.php', 'ACA\\ACF\\Filtering\\ModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/ModelFactory.php', 'ACA\\ACF\\Filtering\\Model\\Choices' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/Choices.php', 'ACA\\ACF\\Filtering\\Model\\DatePicker' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/DatePicker.php', 'ACA\\ACF\\Filtering\\Model\\DateTimePicker' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/DateTimePicker.php', 'ACA\\ACF\\Filtering\\Model\\File' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/File.php', 'ACA\\ACF\\Filtering\\Model\\FormattedRelation' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/FormattedRelation.php', 'ACA\\ACF\\Filtering\\Model\\FormattedRelations' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/FormattedRelations.php', 'ACA\\ACF\\Filtering\\Model\\Image' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/Image.php', 'ACA\\ACF\\Filtering\\Model\\Link' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/Link.php', 'ACA\\ACF\\Filtering\\Model\\Number' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/Number.php', 'ACA\\ACF\\Filtering\\Model\\SerializedChoices' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/SerializedChoices.php', 'ACA\\ACF\\Filtering\\Model\\Toggle' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/Toggle.php', 'ACA\\ACF\\Filtering\\Model\\Unformatted' => __DIR__ . '/../..' . '/addons/acf/classes/Filtering/Model/Unformatted.php', 'ACA\\ACF\\GroupColumnFactory' => __DIR__ . '/../..' . '/addons/acf/classes/GroupColumnFactory.php', 'ACA\\ACF\\Helper' => __DIR__ . '/../..' . '/addons/acf/classes/Helper.php', 'ACA\\ACF\\Nonce\\UpdateDeprecatedNonce' => __DIR__ . '/../..' . '/addons/acf/classes/Nonce/UpdateDeprecatedNonce.php', 'ACA\\ACF\\RequestHandler\\MapLegacyListScreen' => __DIR__ . '/../..' . '/addons/acf/classes/RequestHandler/MapLegacyListScreen.php', 'ACA\\ACF\\Search\\ComparisonFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Search/ComparisonFactory.php', 'ACA\\ACF\\Search\\ComparisonFactory\\Repeater' => __DIR__ . '/../..' . '/addons/acf/classes/Search/ComparisonFactory/Repeater.php', 'ACA\\ACF\\Search\\Comparison\\DatePicker' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/DatePicker.php', 'ACA\\ACF\\Search\\Comparison\\Link' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Link.php', 'ACA\\ACF\\Search\\Comparison\\MultiSelect' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/MultiSelect.php', 'ACA\\ACF\\Search\\Comparison\\Repeater' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Date' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Date.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\DateTime' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/DateTime.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Image' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Image.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Media' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Media.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Number' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Number.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Posts' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Posts.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Select' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Select.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Text' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Text.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\Toggle' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/Toggle.php', 'ACA\\ACF\\Search\\Comparison\\Repeater\\User' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Repeater/User.php', 'ACA\\ACF\\Search\\Comparison\\Select' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Select.php', 'ACA\\ACF\\Search\\Comparison\\Taxonomies' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Taxonomies.php', 'ACA\\ACF\\Search\\Comparison\\Taxonomy' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Taxonomy.php', 'ACA\\ACF\\Search\\Comparison\\User' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/User.php', 'ACA\\ACF\\Search\\Comparison\\Users' => __DIR__ . '/../..' . '/addons/acf/classes/Search/Comparison/Users.php', 'ACA\\ACF\\Search\\SearchComparisonFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Search/SearchComparisonFactory.php', 'ACA\\ACF\\Search\\SearchFactoryAware' => __DIR__ . '/../..' . '/addons/acf/classes/Search/SearchFactoryAware.php', 'ACA\\ACF\\Search\\SearchableTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Search/SearchableTrait.php', 'ACA\\ACF\\Service\\AddColumns' => __DIR__ . '/../..' . '/addons/acf/classes/Service/AddColumns.php', 'ACA\\ACF\\Service\\ColumnSettings' => __DIR__ . '/../..' . '/addons/acf/classes/Service/ColumnSettings.php', 'ACA\\ACF\\Service\\EditingFix' => __DIR__ . '/../..' . '/addons/acf/classes/Service/EditingFix.php', 'ACA\\ACF\\Service\\InitColumn' => __DIR__ . '/../..' . '/addons/acf/classes/Service/InitColumn.php', 'ACA\\ACF\\Service\\LegacyColumnMapper' => __DIR__ . '/../..' . '/addons/acf/classes/Service/LegacyColumnMapper.php', 'ACA\\ACF\\Service\\RemoveDeprecatedColumnFromTypeSelector' => __DIR__ . '/../..' . '/addons/acf/classes/Service/RemoveDeprecatedColumnFromTypeSelector.php', 'ACA\\ACF\\Service\\Scripts' => __DIR__ . '/../..' . '/addons/acf/classes/Service/Scripts.php', 'ACA\\ACF\\Settings\\Column\\Color' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/Color.php', 'ACA\\ACF\\Settings\\Column\\Date' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/Date.php', 'ACA\\ACF\\Settings\\Column\\FlexibleContent' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/FlexibleContent.php', 'ACA\\ACF\\Settings\\Column\\HiddenDeprecated' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/HiddenDeprecated.php', 'ACA\\ACF\\Settings\\Column\\Oembed' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/Oembed.php', 'ACA\\ACF\\Settings\\Column\\PageLink' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/PageLink.php', 'ACA\\ACF\\Settings\\Column\\RepeaterDisplay' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/RepeaterDisplay.php', 'ACA\\ACF\\Settings\\Column\\RepeaterSubField' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/RepeaterSubField.php', 'ACA\\ACF\\Settings\\Column\\TermLink' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/TermLink.php', 'ACA\\ACF\\Settings\\Column\\Time' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/Time.php', 'ACA\\ACF\\Settings\\Column\\Unsupported' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/Column/Unsupported.php', 'ACA\\ACF\\Settings\\SettingFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Settings/SettingFactory.php', 'ACA\\ACF\\Sorting\\FormatValue\\File' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/FormatValue/File.php', 'ACA\\ACF\\Sorting\\FormatValue\\Select' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/FormatValue/Select.php', 'ACA\\ACF\\Sorting\\FormatValue\\Taxonomy' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/FormatValue/Taxonomy.php', 'ACA\\ACF\\Sorting\\ModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/ModelFactory.php', 'ACA\\ACF\\Sorting\\ModelFactory\\Relation' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/ModelFactory/Relation.php', 'ACA\\ACF\\Sorting\\ModelFactory\\Taxonomy' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/ModelFactory/Taxonomy.php', 'ACA\\ACF\\Sorting\\ModelFactory\\User' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/ModelFactory/User.php', 'ACA\\ACF\\Sorting\\SortableTrait' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/SortableTrait.php', 'ACA\\ACF\\Sorting\\SortingFactoryAware' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/SortingFactoryAware.php', 'ACA\\ACF\\Sorting\\SortingModelFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Sorting/SortingModelFactory.php', 'ACA\\ACF\\Utils\\V2ToV3Migration' => __DIR__ . '/../..' . '/addons/acf/classes/Utils/V2ToV3Migration.php', 'ACA\\ACF\\Value\\Formatter' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter.php', 'ACA\\ACF\\Value\\FormatterFactory' => __DIR__ . '/../..' . '/addons/acf/classes/Value/FormatterFactory.php', 'ACA\\ACF\\Value\\Formatter\\Boolean' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/Boolean.php', 'ACA\\ACF\\Value\\Formatter\\Color' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/Color.php', 'ACA\\ACF\\Value\\Formatter\\DefaultFormatter' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/DefaultFormatter.php', 'ACA\\ACF\\Value\\Formatter\\File' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/File.php', 'ACA\\ACF\\Value\\Formatter\\FlexCount' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/FlexCount.php', 'ACA\\ACF\\Value\\Formatter\\FlexStructure' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/FlexStructure.php', 'ACA\\ACF\\Value\\Formatter\\Link' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/Link.php', 'ACA\\ACF\\Value\\Formatter\\Maps' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/Maps.php', 'ACA\\ACF\\Value\\Formatter\\MultipleFormatted' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/MultipleFormatted.php', 'ACA\\ACF\\Value\\Formatter\\Select' => __DIR__ . '/../..' . '/addons/acf/classes/Value/Formatter/Select.php', 'ACA\\BP\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/buddypress/classes/Asset/Script/Admin.php', 'ACA\\BP\\BuddyPress' => __DIR__ . '/../..' . '/addons/buddypress/classes/BuddyPress.php', 'ACA\\BP\\Column\\Group\\Avatar' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/Avatar.php', 'ACA\\BP\\Column\\Group\\Creator' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/Creator.php', 'ACA\\BP\\Column\\Group\\Description' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/Description.php', 'ACA\\BP\\Column\\Group\\Id' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/Id.php', 'ACA\\BP\\Column\\Group\\Name' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/Name.php', 'ACA\\BP\\Column\\Group\\NameOnly' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/NameOnly.php', 'ACA\\BP\\Column\\Group\\Status' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Group/Status.php', 'ACA\\BP\\Column\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/Profile.php', 'ACA\\BP\\Column\\User\\ActivityUpdates' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/ActivityUpdates.php', 'ACA\\BP\\Column\\User\\Friends' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/Friends.php', 'ACA\\BP\\Column\\User\\Groups' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/Groups.php', 'ACA\\BP\\Column\\User\\LastActivity' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/LastActivity.php', 'ACA\\BP\\Column\\User\\LastSeen' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/LastSeen.php', 'ACA\\BP\\Column\\User\\MemberType' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/MemberType.php', 'ACA\\BP\\Column\\User\\Status' => __DIR__ . '/../..' . '/addons/buddypress/classes/Column/User/Status.php', 'ACA\\BP\\Editing\\Ajax\\TableRows\\Groups' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Ajax/TableRows/Groups.php', 'ACA\\BP\\Editing\\RequestHandler\\Query\\Groups' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/RequestHandler/Query/Groups.php', 'ACA\\BP\\Editing\\Service\\Group\\Description' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Service/Group/Description.php', 'ACA\\BP\\Editing\\Service\\Group\\NameOnly' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Service/Group/NameOnly.php', 'ACA\\BP\\Editing\\Service\\Group\\Status' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Service/Group/Status.php', 'ACA\\BP\\Editing\\Service\\User\\Membertype' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Service/User/Membertype.php', 'ACA\\BP\\Editing\\Service\\User\\Status' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Service/User/Status.php', 'ACA\\BP\\Editing\\Storage\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Storage/Group.php', 'ACA\\BP\\Editing\\Storage\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Storage/Profile.php', 'ACA\\BP\\Editing\\Storage\\Profile\\MultiChoices' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Storage/Profile/MultiChoices.php', 'ACA\\BP\\Editing\\Strategy\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/Editing/Strategy/Group.php', 'ACA\\BP\\Export\\MultipleValues' => __DIR__ . '/../..' . '/addons/buddypress/classes/Export/MultipleValues.php', 'ACA\\BP\\Field\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile.php', 'ACA\\BP\\Field\\Profile\\Checkbox' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Checkbox.php', 'ACA\\BP\\Field\\Profile\\Datebox' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Datebox.php', 'ACA\\BP\\Field\\Profile\\Multiselectbox' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Multiselectbox.php', 'ACA\\BP\\Field\\Profile\\Number' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Number.php', 'ACA\\BP\\Field\\Profile\\Radio' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Radio.php', 'ACA\\BP\\Field\\Profile\\Selectbox' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Selectbox.php', 'ACA\\BP\\Field\\Profile\\Telephone' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Telephone.php', 'ACA\\BP\\Field\\Profile\\Textarea' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Textarea.php', 'ACA\\BP\\Field\\Profile\\Textbox' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/Textbox.php', 'ACA\\BP\\Field\\Profile\\URL' => __DIR__ . '/../..' . '/addons/buddypress/classes/Field/Profile/URL.php', 'ACA\\BP\\Filtering\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/Profile.php', 'ACA\\BP\\Filtering\\Profile\\Date' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/Profile/Date.php', 'ACA\\BP\\Filtering\\Profile\\Number' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/Profile/Number.php', 'ACA\\BP\\Filtering\\Profile\\Serialized' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/Profile/Serialized.php', 'ACA\\BP\\Filtering\\User\\ActivityUpdates' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/User/ActivityUpdates.php', 'ACA\\BP\\Filtering\\User\\Friends' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/User/Friends.php', 'ACA\\BP\\Filtering\\User\\Groups' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/User/Groups.php', 'ACA\\BP\\Filtering\\User\\LastSeen' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/User/LastSeen.php', 'ACA\\BP\\Filtering\\User\\Status' => __DIR__ . '/../..' . '/addons/buddypress/classes/Filtering/User/Status.php', 'ACA\\BP\\Helper\\Select\\Entities\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/Helper/Select/Entities/Group.php', 'ACA\\BP\\Helper\\Select\\Formatter\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/Helper/Select/Formatter/Group.php', 'ACA\\BP\\Helper\\Select\\Value\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/Helper/Select/Value/Group.php', 'ACA\\BP\\ListScreen\\Email' => __DIR__ . '/../..' . '/addons/buddypress/classes/ListScreen/Email.php', 'ACA\\BP\\ListScreen\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/ListScreen/Group.php', 'ACA\\BP\\Search\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/Profile.php', 'ACA\\BP\\Search\\Profile\\Choice' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/Profile/Choice.php', 'ACA\\BP\\Search\\Profile\\Date' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/Profile/Date.php', 'ACA\\BP\\Search\\Profile\\MultipleChoice' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/Profile/MultipleChoice.php', 'ACA\\BP\\Search\\Profile\\Number' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/Profile/Number.php', 'ACA\\BP\\Search\\Profile\\Text' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/Profile/Text.php', 'ACA\\BP\\Search\\User\\ActivityUpdates' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/User/ActivityUpdates.php', 'ACA\\BP\\Search\\User\\Date' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/User/Date.php', 'ACA\\BP\\Search\\User\\Groups' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/User/Groups.php', 'ACA\\BP\\Search\\User\\MemberTypes' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/User/MemberTypes.php', 'ACA\\BP\\Search\\User\\Status' => __DIR__ . '/../..' . '/addons/buddypress/classes/Search/User/Status.php', 'ACA\\BP\\Service\\Admin' => __DIR__ . '/../..' . '/addons/buddypress/classes/Service/Admin.php', 'ACA\\BP\\Service\\Columns' => __DIR__ . '/../..' . '/addons/buddypress/classes/Service/Columns.php', 'ACA\\BP\\Service\\ListScreens' => __DIR__ . '/../..' . '/addons/buddypress/classes/Service/ListScreens.php', 'ACA\\BP\\Service\\Table' => __DIR__ . '/../..' . '/addons/buddypress/classes/Service/Table.php', 'ACA\\BP\\Settings\\ActivityType' => __DIR__ . '/../..' . '/addons/buddypress/classes/Settings/ActivityType.php', 'ACA\\BP\\Settings\\Date' => __DIR__ . '/../..' . '/addons/buddypress/classes/Settings/Date.php', 'ACA\\BP\\Settings\\Group' => __DIR__ . '/../..' . '/addons/buddypress/classes/Settings/Group.php', 'ACA\\BP\\Settings\\GroupLink' => __DIR__ . '/../..' . '/addons/buddypress/classes/Settings/GroupLink.php', 'ACA\\BP\\Settings\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Settings/Profile.php', 'ACA\\BP\\Sorting\\Profile' => __DIR__ . '/../..' . '/addons/buddypress/classes/Sorting/Profile.php', 'ACA\\BP\\Sorting\\User\\ActivityUpdates' => __DIR__ . '/../..' . '/addons/buddypress/classes/Sorting/User/ActivityUpdates.php', 'ACA\\BbPress\\BbPress' => __DIR__ . '/../..' . '/addons/bbpress/classes/BbPress.php', 'ACA\\BbPress\\Column\\Topic\\Forum' => __DIR__ . '/../..' . '/addons/bbpress/classes/Column/Topic/Forum.php', 'ACA\\BbPress\\Editing\\Service\\Topic\\Forum' => __DIR__ . '/../..' . '/addons/bbpress/classes/Editing/Service/Topic/Forum.php', 'ACA\\BbPress\\ListScreen\\Forum' => __DIR__ . '/../..' . '/addons/bbpress/classes/ListScreen/Forum.php', 'ACA\\BbPress\\ListScreen\\Reply' => __DIR__ . '/../..' . '/addons/bbpress/classes/ListScreen/Reply.php', 'ACA\\BbPress\\ListScreen\\Topic' => __DIR__ . '/../..' . '/addons/bbpress/classes/ListScreen/Topic.php', 'ACA\\BbPress\\Service\\Columns' => __DIR__ . '/../..' . '/addons/bbpress/classes/Service/Columns.php', 'ACA\\BbPress\\Service\\Editing' => __DIR__ . '/../..' . '/addons/bbpress/classes/Service/Editing.php', 'ACA\\BbPress\\Service\\ListScreens' => __DIR__ . '/../..' . '/addons/bbpress/classes/Service/ListScreens.php', 'ACA\\BeaverBuilder\\BeaverBuilder' => __DIR__ . '/../..' . '/addons/beaver-builder/classes/BeaverBuilder.php', 'ACA\\BeaverBuilder\\ListScreen\\Template' => __DIR__ . '/../..' . '/addons/beaver-builder/classes/ListScreen/Template.php', 'ACA\\BeaverBuilder\\Service\\ListScreens' => __DIR__ . '/../..' . '/addons/beaver-builder/classes/Service/ListScreens.php', 'ACA\\BeaverBuilder\\Service\\PostTypes' => __DIR__ . '/../..' . '/addons/beaver-builder/classes/Service/PostTypes.php', 'ACA\\EC\\API' => __DIR__ . '/../..' . '/addons/events-calendar/classes/API.php', 'ACA\\EC\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Asset/Script/Admin.php', 'ACA\\EC\\Column\\EventSeries\\Events' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/EventSeries/Events.php', 'ACA\\EC\\Column\\Event\\AllDayEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/AllDayEvent.php', 'ACA\\EC\\Column\\Event\\Categories' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Categories.php', 'ACA\\EC\\Column\\Event\\Costs' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Costs.php', 'ACA\\EC\\Column\\Event\\DisplayDate' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/DisplayDate.php', 'ACA\\EC\\Column\\Event\\Duration' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Duration.php', 'ACA\\EC\\Column\\Event\\EndDate' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/EndDate.php', 'ACA\\EC\\Column\\Event\\Featured' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Featured.php', 'ACA\\EC\\Column\\Event\\Field' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field.php', 'ACA\\EC\\Column\\Event\\Field\\Checkbox' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field/Checkbox.php', 'ACA\\EC\\Column\\Event\\Field\\Dropdown' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field/Dropdown.php', 'ACA\\EC\\Column\\Event\\Field\\Radio' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field/Radio.php', 'ACA\\EC\\Column\\Event\\Field\\Text' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field/Text.php', 'ACA\\EC\\Column\\Event\\Field\\Textarea' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field/Textarea.php', 'ACA\\EC\\Column\\Event\\Field\\Url' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Field/Url.php', 'ACA\\EC\\Column\\Event\\HideFromUpcoming' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/HideFromUpcoming.php', 'ACA\\EC\\Column\\Event\\Organizer' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Organizer.php', 'ACA\\EC\\Column\\Event\\ParentEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/ParentEvent.php', 'ACA\\EC\\Column\\Event\\Recurring' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Recurring.php', 'ACA\\EC\\Column\\Event\\StartDate' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/StartDate.php', 'ACA\\EC\\Column\\Event\\Sticky' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Sticky.php', 'ACA\\EC\\Column\\Event\\Venue' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Venue.php', 'ACA\\EC\\Column\\Event\\Website' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Event/Website.php', 'ACA\\EC\\Column\\Events' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Events.php', 'ACA\\EC\\Column\\Meta' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Meta.php', 'ACA\\EC\\Column\\Organizer\\Email' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Organizer/Email.php', 'ACA\\EC\\Column\\Organizer\\Events' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Organizer/Events.php', 'ACA\\EC\\Column\\Organizer\\Phone' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Organizer/Phone.php', 'ACA\\EC\\Column\\Organizer\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Organizer/UpcomingEvent.php', 'ACA\\EC\\Column\\Organizer\\Website' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Organizer/Website.php', 'ACA\\EC\\Column\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/UpcomingEvent.php', 'ACA\\EC\\Column\\Venue\\Address' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/Address.php', 'ACA\\EC\\Column\\Venue\\City' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/City.php', 'ACA\\EC\\Column\\Venue\\Country' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/Country.php', 'ACA\\EC\\Column\\Venue\\Events' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/Events.php', 'ACA\\EC\\Column\\Venue\\Phone' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/Phone.php', 'ACA\\EC\\Column\\Venue\\PostalCode' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/PostalCode.php', 'ACA\\EC\\Column\\Venue\\StateProvince' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/StateProvince.php', 'ACA\\EC\\Column\\Venue\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/UpcomingEvent.php', 'ACA\\EC\\Column\\Venue\\Website' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Column/Venue/Website.php', 'ACA\\EC\\Editing\\Service\\Event\\AllDayEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Service/Event/AllDayEvent.php', 'ACA\\EC\\Editing\\Service\\Event\\HideFromUpcoming' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Service/Event/HideFromUpcoming.php', 'ACA\\EC\\Editing\\Service\\Event\\Organizer' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Service/Event/Organizer.php', 'ACA\\EC\\Editing\\Service\\Event\\Sticky' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Service/Event/Sticky.php', 'ACA\\EC\\Editing\\Service\\Event\\Venue' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Service/Event/Venue.php', 'ACA\\EC\\Editing\\Storage\\Event\\EndDate' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Storage/Event/EndDate.php', 'ACA\\EC\\Editing\\Storage\\Event\\StartDate' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Storage/Event/StartDate.php', 'ACA\\EC\\Editing\\Storage\\Field\\Checkbox' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Editing/Storage/Field/Checkbox.php', 'ACA\\EC\\EventsCalendar' => __DIR__ . '/../..' . '/addons/events-calendar/classes/EventsCalendar.php', 'ACA\\EC\\Export\\Model\\EventSeries\\Events' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Export/Model/EventSeries/Events.php', 'ACA\\EC\\Export\\Model\\Event\\AllDayEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Export/Model/Event/AllDayEvent.php', 'ACA\\EC\\Export\\Model\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Export/Model/UpcomingEvent.php', 'ACA\\EC\\Export\\Strategy\\Event' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Export/Strategy/Event.php', 'ACA\\EC\\Filtering\\Event\\AllDayEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Event/AllDayEvent.php', 'ACA\\EC\\Filtering\\Event\\Date' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Event/Date.php', 'ACA\\EC\\Filtering\\Event\\Featured' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Event/Featured.php', 'ACA\\EC\\Filtering\\Event\\Field\\Checkbox' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Event/Field/Checkbox.php', 'ACA\\EC\\Filtering\\Event\\HiddenFromUpcoming' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Event/HiddenFromUpcoming.php', 'ACA\\EC\\Filtering\\Event\\Sticky' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Event/Sticky.php', 'ACA\\EC\\Filtering\\Organizer\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Organizer/UpcomingEvent.php', 'ACA\\EC\\Filtering\\RelatedPost' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/RelatedPost.php', 'ACA\\EC\\Filtering\\Toggle' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Toggle.php', 'ACA\\EC\\Filtering\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/UpcomingEvent.php', 'ACA\\EC\\Filtering\\Venue\\UpcomingEvent' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Filtering/Venue/UpcomingEvent.php', 'ACA\\EC\\ImportListscreens\\Controller' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ImportListscreens/Controller.php', 'ACA\\EC\\ImportListscreens\\ImportedSetting' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ImportListscreens/ImportedSetting.php', 'ACA\\EC\\ImportListscreens\\Message' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ImportListscreens/Message.php', 'ACA\\EC\\ListScreen\\Event' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ListScreen/Event.php', 'ACA\\EC\\ListScreen\\EventSeries' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ListScreen/EventSeries.php', 'ACA\\EC\\ListScreen\\Organizer' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ListScreen/Organizer.php', 'ACA\\EC\\ListScreen\\Venue' => __DIR__ . '/../..' . '/addons/events-calendar/classes/ListScreen/Venue.php', 'ACA\\EC\\Search\\Event\\Featured' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Search/Event/Featured.php', 'ACA\\EC\\Search\\Event\\Field\\Options' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Search/Event/Field/Options.php', 'ACA\\EC\\Search\\Event\\Recurring' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Search/Event/Recurring.php', 'ACA\\EC\\Search\\Event\\Relation' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Search/Event/Relation.php', 'ACA\\EC\\Search\\Event\\Sticky' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Search/Event/Sticky.php', 'ACA\\EC\\Search\\Venue\\Country' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Search/Venue/Country.php', 'ACA\\EC\\Service\\ColumnGroups' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Service/ColumnGroups.php', 'ACA\\EC\\Service\\ListScreens' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Service/ListScreens.php', 'ACA\\EC\\Service\\Scripts' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Service/Scripts.php', 'ACA\\EC\\Service\\TableScreen' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Service/TableScreen.php', 'ACA\\EC\\Settings\\EventDates' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/EventDates.php', 'ACA\\EC\\Settings\\EventDisplay' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/EventDisplay.php', 'ACA\\EC\\Settings\\EventLink' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/EventLink.php', 'ACA\\EC\\Settings\\NonPublicPostLink' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/NonPublicPostLink.php', 'ACA\\EC\\Settings\\OrganizerDisplay' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/OrganizerDisplay.php', 'ACA\\EC\\Settings\\OrganizerLink' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/OrganizerLink.php', 'ACA\\EC\\Settings\\ShowEventDate' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/ShowEventDate.php', 'ACA\\EC\\Settings\\ShowFilterLink' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/ShowFilterLink.php', 'ACA\\EC\\Settings\\Venue' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Settings/Venue.php', 'ACA\\EC\\Sorting\\EventSortingFix' => __DIR__ . '/../..' . '/addons/events-calendar/classes/Sorting/EventSortingFix.php', 'ACA\\GravityForms\\Admin' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Admin.php', 'ACA\\GravityForms\\Capabilities' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Capabilities.php', 'ACA\\GravityForms\\Column\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry.php', 'ACA\\GravityForms\\Column\\EntryConfigurator' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/EntryConfigurator.php', 'ACA\\GravityForms\\Column\\EntryFactory' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/EntryFactory.php', 'ACA\\GravityForms\\Column\\Entry\\Address' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Address.php', 'ACA\\GravityForms\\Column\\Entry\\Choices' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Choices.php', 'ACA\\GravityForms\\Column\\Entry\\Custom\\User' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Custom/User.php', 'ACA\\GravityForms\\Column\\Entry\\MultipleChoices' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/MultipleChoices.php', 'ACA\\GravityForms\\Column\\Entry\\Name' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Name.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\DateCreated' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/DateCreated.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\DatePayment' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/DatePayment.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\EntryId' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/EntryId.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\PaymentAmount' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/PaymentAmount.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\SourceUrl' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/SourceUrl.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\Starred' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/Starred.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\TransactionId' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/TransactionId.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\User' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/User.php', 'ACA\\GravityForms\\Column\\Entry\\Original\\UserIp' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Original/UserIp.php', 'ACA\\GravityForms\\Column\\Entry\\Product' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/Product.php', 'ACA\\GravityForms\\Column\\Entry\\ProductSelect' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Column/Entry/ProductSelect.php', 'ACA\\GravityForms\\Editing\\EntryServiceFactory' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/EntryServiceFactory.php', 'ACA\\GravityForms\\Editing\\RequestHandler\\Query\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/RequestHandler/Query/Entry.php', 'ACA\\GravityForms\\Editing\\Storage\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/Storage/Entry.php', 'ACA\\GravityForms\\Editing\\Storage\\Entry\\Checkbox' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/Storage/Entry/Checkbox.php', 'ACA\\GravityForms\\Editing\\Storage\\Entry\\MultiSelect' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/Storage/Entry/MultiSelect.php', 'ACA\\GravityForms\\Editing\\Strategy\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/Strategy/Entry.php', 'ACA\\GravityForms\\Editing\\TableRows\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Editing/TableRows/Entry.php', 'ACA\\GravityForms\\Export\\Model\\EntryFactory' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Export/Model/EntryFactory.php', 'ACA\\GravityForms\\Export\\Model\\Entry\\Address' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Export/Model/Entry/Address.php', 'ACA\\GravityForms\\Export\\Model\\Entry\\Check' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Export/Model/Entry/Check.php', 'ACA\\GravityForms\\Export\\Model\\Entry\\ItemList' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Export/Model/Entry/ItemList.php', 'ACA\\GravityForms\\Export\\Strategy\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Export/Strategy/Entry.php', 'ACA\\GravityForms\\Field' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field.php', 'ACA\\GravityForms\\FieldFactory' => __DIR__ . '/../..' . '/addons/gravityforms/classes/FieldFactory.php', 'ACA\\GravityForms\\FieldTypes' => __DIR__ . '/../..' . '/addons/gravityforms/classes/FieldTypes.php', 'ACA\\GravityForms\\Field\\Container' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Container.php', 'ACA\\GravityForms\\Field\\Field' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Field.php', 'ACA\\GravityForms\\Field\\Multiple' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Multiple.php', 'ACA\\GravityForms\\Field\\Number' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Number.php', 'ACA\\GravityForms\\Field\\Options' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Options.php', 'ACA\\GravityForms\\Field\\Type\\Address' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Address.php', 'ACA\\GravityForms\\Field\\Type\\Checkbox' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Checkbox.php', 'ACA\\GravityForms\\Field\\Type\\CheckboxGroup' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/CheckboxGroup.php', 'ACA\\GravityForms\\Field\\Type\\Consent' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Consent.php', 'ACA\\GravityForms\\Field\\Type\\Date' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Date.php', 'ACA\\GravityForms\\Field\\Type\\Email' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Email.php', 'ACA\\GravityForms\\Field\\Type\\Input' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Input.php', 'ACA\\GravityForms\\Field\\Type\\ItemList' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/ItemList.php', 'ACA\\GravityForms\\Field\\Type\\Name' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Name.php', 'ACA\\GravityForms\\Field\\Type\\Number' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Number.php', 'ACA\\GravityForms\\Field\\Type\\Product' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Product.php', 'ACA\\GravityForms\\Field\\Type\\ProductSelect' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/ProductSelect.php', 'ACA\\GravityForms\\Field\\Type\\Radio' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Radio.php', 'ACA\\GravityForms\\Field\\Type\\Select' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Select.php', 'ACA\\GravityForms\\Field\\Type\\Textarea' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Textarea.php', 'ACA\\GravityForms\\Field\\Type\\Unsupported' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Field/Type/Unsupported.php', 'ACA\\GravityForms\\GravityForms' => __DIR__ . '/../..' . '/addons/gravityforms/classes/GravityForms.php', 'ACA\\GravityForms\\HideOnScreen\\EntryFilters' => __DIR__ . '/../..' . '/addons/gravityforms/classes/HideOnScreen/EntryFilters.php', 'ACA\\GravityForms\\HideOnScreen\\WordPressNotifications' => __DIR__ . '/../..' . '/addons/gravityforms/classes/HideOnScreen/WordPressNotifications.php', 'ACA\\GravityForms\\ListScreen\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/ListScreen/Entry.php', 'ACA\\GravityForms\\ListTable' => __DIR__ . '/../..' . '/addons/gravityforms/classes/ListTable.php', 'ACA\\GravityForms\\MetaTypes' => __DIR__ . '/../..' . '/addons/gravityforms/classes/MetaTypes.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry.php', 'ACA\\GravityForms\\Search\\Comparison\\EntryFactory' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/EntryFactory.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Checkbox' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Checkbox.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\CheckboxGroup' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/CheckboxGroup.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Choice' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Choice.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Choices' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Choices.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Consent' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Consent.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Date' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Date.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\DateColumn' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/DateColumn.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\EntryId' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/EntryId.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Number' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Number.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\PaymentAmount' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/PaymentAmount.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Starred' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Starred.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\Text' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/Text.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\TextColumn' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/TextColumn.php', 'ACA\\GravityForms\\Search\\Comparison\\Entry\\User' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Comparison/Entry/User.php', 'ACA\\GravityForms\\Search\\Query' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Query.php', 'ACA\\GravityForms\\Search\\Query\\Bindings' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/Query/Bindings.php', 'ACA\\GravityForms\\Search\\TableScreen\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Search/TableScreen/Entry.php', 'ACA\\GravityForms\\Settings\\ChoiceDisplay' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Settings/ChoiceDisplay.php', 'ACA\\GravityForms\\TableFactory' => __DIR__ . '/../..' . '/addons/gravityforms/classes/TableFactory.php', 'ACA\\GravityForms\\TableScreen\\Entry' => __DIR__ . '/../..' . '/addons/gravityforms/classes/TableScreen/Entry.php', 'ACA\\GravityForms\\Utils\\FormField' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Utils/FormField.php', 'ACA\\GravityForms\\Utils\\Hooks' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Utils/Hooks.php', 'ACA\\GravityForms\\Value' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Value.php', 'ACA\\GravityForms\\Value\\EntryValue' => __DIR__ . '/../..' . '/addons/gravityforms/classes/Value/EntryValue.php', 'ACA\\JetEngine\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/jetengine/classes/Asset/Script/Admin.php', 'ACA\\JetEngine\\ColumnFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/ColumnFactory.php', 'ACA\\JetEngine\\Column\\Meta' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta.php', 'ACA\\JetEngine\\Column\\Meta\\Checkbox' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Checkbox.php', 'ACA\\JetEngine\\Column\\Meta\\ColorPicker' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/ColorPicker.php', 'ACA\\JetEngine\\Column\\Meta\\Date' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Date.php', 'ACA\\JetEngine\\Column\\Meta\\DateTime' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/DateTime.php', 'ACA\\JetEngine\\Column\\Meta\\Gallery' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Gallery.php', 'ACA\\JetEngine\\Column\\Meta\\IconPicker' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/IconPicker.php', 'ACA\\JetEngine\\Column\\Meta\\Media' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Media.php', 'ACA\\JetEngine\\Column\\Meta\\MultiSelect' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/MultiSelect.php', 'ACA\\JetEngine\\Column\\Meta\\Number' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Number.php', 'ACA\\JetEngine\\Column\\Meta\\Post' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Post.php', 'ACA\\JetEngine\\Column\\Meta\\Radio' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Radio.php', 'ACA\\JetEngine\\Column\\Meta\\Repeater' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Repeater.php', 'ACA\\JetEngine\\Column\\Meta\\Select' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Select.php', 'ACA\\JetEngine\\Column\\Meta\\Switcher' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Switcher.php', 'ACA\\JetEngine\\Column\\Meta\\Text' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Text.php', 'ACA\\JetEngine\\Column\\Meta\\Textarea' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Textarea.php', 'ACA\\JetEngine\\Column\\Meta\\Time' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Time.php', 'ACA\\JetEngine\\Column\\Meta\\Wysiwyg' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Meta/Wysiwyg.php', 'ACA\\JetEngine\\Column\\Relation' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Relation.php', 'ACA\\JetEngine\\Column\\RelationLegacy' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/RelationLegacy.php', 'ACA\\JetEngine\\Column\\Relation\\Post' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Relation/Post.php', 'ACA\\JetEngine\\Column\\Relation\\Term' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Relation/Term.php', 'ACA\\JetEngine\\Column\\Relation\\User' => __DIR__ . '/../..' . '/addons/jetengine/classes/Column/Relation/User.php', 'ACA\\JetEngine\\Editing\\EditableTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/EditableTrait.php', 'ACA\\JetEngine\\Editing\\MetaServiceFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/MetaServiceFactory.php', 'ACA\\JetEngine\\Editing\\MetaViewFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/MetaViewFactory.php', 'ACA\\JetEngine\\Editing\\Service\\Relation\\Post' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Service/Relation/Post.php', 'ACA\\JetEngine\\Editing\\Service\\Relation\\Term' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Service/Relation/Term.php', 'ACA\\JetEngine\\Editing\\Service\\Relation\\User' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Service/Relation/User.php', 'ACA\\JetEngine\\Editing\\Service\\Relationship' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Service/Relationship.php', 'ACA\\JetEngine\\Editing\\Service\\RelationshipLegacy' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Service/RelationshipLegacy.php', 'ACA\\JetEngine\\Editing\\Storage\\Meta\\Checkbox' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Storage/Meta/Checkbox.php', 'ACA\\JetEngine\\Editing\\Storage\\Meta\\Gallery' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Storage/Meta/Gallery.php', 'ACA\\JetEngine\\Editing\\Storage\\Meta\\Media' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Storage/Meta/Media.php', 'ACA\\JetEngine\\Editing\\Storage\\RelationshipChildren' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Storage/RelationshipChildren.php', 'ACA\\JetEngine\\Editing\\Storage\\RelationshipParents' => __DIR__ . '/../..' . '/addons/jetengine/classes/Editing/Storage/RelationshipParents.php', 'ACA\\JetEngine\\Export\\ModelFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Export/ModelFactory.php', 'ACA\\JetEngine\\FieldFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/FieldFactory.php', 'ACA\\JetEngine\\FieldRepository' => __DIR__ . '/../..' . '/addons/jetengine/classes/FieldRepository.php', 'ACA\\JetEngine\\Field\\DefaultValue' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/DefaultValue.php', 'ACA\\JetEngine\\Field\\DefaultValueTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/DefaultValueTrait.php', 'ACA\\JetEngine\\Field\\Field' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Field.php', 'ACA\\JetEngine\\Field\\GlossaryOptions' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/GlossaryOptions.php', 'ACA\\JetEngine\\Field\\GlossaryOptionsTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/GlossaryOptionsTrait.php', 'ACA\\JetEngine\\Field\\MaxLength' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/MaxLength.php', 'ACA\\JetEngine\\Field\\MaxLengthTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/MaxLengthTrait.php', 'ACA\\JetEngine\\Field\\Multiple' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Multiple.php', 'ACA\\JetEngine\\Field\\MultipleTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/MultipleTrait.php', 'ACA\\JetEngine\\Field\\NumberInput' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/NumberInput.php', 'ACA\\JetEngine\\Field\\NumberInputTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/NumberInputTrait.php', 'ACA\\JetEngine\\Field\\Options' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Options.php', 'ACA\\JetEngine\\Field\\OptionsTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/OptionsTrait.php', 'ACA\\JetEngine\\Field\\RelatedPostTypes' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/RelatedPostTypes.php', 'ACA\\JetEngine\\Field\\TimeStamp' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/TimeStamp.php', 'ACA\\JetEngine\\Field\\TimestampTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/TimestampTrait.php', 'ACA\\JetEngine\\Field\\Type\\Checkbox' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Checkbox.php', 'ACA\\JetEngine\\Field\\Type\\ColorPicker' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/ColorPicker.php', 'ACA\\JetEngine\\Field\\Type\\Date' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Date.php', 'ACA\\JetEngine\\Field\\Type\\DateTime' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/DateTime.php', 'ACA\\JetEngine\\Field\\Type\\Gallery' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Gallery.php', 'ACA\\JetEngine\\Field\\Type\\IconPicker' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/IconPicker.php', 'ACA\\JetEngine\\Field\\Type\\Media' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Media.php', 'ACA\\JetEngine\\Field\\Type\\Number' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Number.php', 'ACA\\JetEngine\\Field\\Type\\Posts' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Posts.php', 'ACA\\JetEngine\\Field\\Type\\Radio' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Radio.php', 'ACA\\JetEngine\\Field\\Type\\Repeater' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Repeater.php', 'ACA\\JetEngine\\Field\\Type\\Select' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Select.php', 'ACA\\JetEngine\\Field\\Type\\Switcher' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Switcher.php', 'ACA\\JetEngine\\Field\\Type\\Text' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Text.php', 'ACA\\JetEngine\\Field\\Type\\Textarea' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Textarea.php', 'ACA\\JetEngine\\Field\\Type\\Time' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Time.php', 'ACA\\JetEngine\\Field\\Type\\Wysiwyg' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/Type/Wysiwyg.php', 'ACA\\JetEngine\\Field\\ValueFormat' => __DIR__ . '/../..' . '/addons/jetengine/classes/Field/ValueFormat.php', 'ACA\\JetEngine\\JetEngine' => __DIR__ . '/../..' . '/addons/jetengine/classes/JetEngine.php', 'ACA\\JetEngine\\Mapping\\MediaId' => __DIR__ . '/../..' . '/addons/jetengine/classes/Mapping/MediaId.php', 'ACA\\JetEngine\\Mapping\\Options' => __DIR__ . '/../..' . '/addons/jetengine/classes/Mapping/Options.php', 'ACA\\JetEngine\\RelationColumnFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/RelationColumnFactory.php', 'ACA\\JetEngine\\Search\\ComparisonFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/ComparisonFactory.php', 'ACA\\JetEngine\\Search\\Comparison\\Checkbox' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/Checkbox.php', 'ACA\\JetEngine\\Search\\Comparison\\ChildRelation' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/ChildRelation.php', 'ACA\\JetEngine\\Search\\Comparison\\ParentRelation' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/ParentRelation.php', 'ACA\\JetEngine\\Search\\Comparison\\Relation' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/Relation.php', 'ACA\\JetEngine\\Search\\Comparison\\Relation\\Post' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/Relation/Post.php', 'ACA\\JetEngine\\Search\\Comparison\\Relation\\Term' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/Relation/Term.php', 'ACA\\JetEngine\\Search\\Comparison\\Relation\\User' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/Comparison/Relation/User.php', 'ACA\\JetEngine\\Search\\SearchableTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Search/SearchableTrait.php', 'ACA\\JetEngine\\Service\\Admin' => __DIR__ . '/../..' . '/addons/jetengine/classes/Service/Admin.php', 'ACA\\JetEngine\\Service\\ColumnGroups' => __DIR__ . '/../..' . '/addons/jetengine/classes/Service/ColumnGroups.php', 'ACA\\JetEngine\\Service\\ColumnInstantiate' => __DIR__ . '/../..' . '/addons/jetengine/classes/Service/ColumnInstantiate.php', 'ACA\\JetEngine\\Service\\MetaColumns' => __DIR__ . '/../..' . '/addons/jetengine/classes/Service/MetaColumns.php', 'ACA\\JetEngine\\Service\\RelationalColumns' => __DIR__ . '/../..' . '/addons/jetengine/classes/Service/RelationalColumns.php', 'ACA\\JetEngine\\Settings\\Column\\RepeaterField' => __DIR__ . '/../..' . '/addons/jetengine/classes/Settings/Column/RepeaterField.php', 'ACA\\JetEngine\\Settings\\SettingFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Settings/SettingFactory.php', 'ACA\\JetEngine\\Sorting\\FormatValue\\Media' => __DIR__ . '/../..' . '/addons/jetengine/classes/Sorting/FormatValue/Media.php', 'ACA\\JetEngine\\Sorting\\FormatValue\\Select' => __DIR__ . '/../..' . '/addons/jetengine/classes/Sorting/FormatValue/Select.php', 'ACA\\JetEngine\\Sorting\\ModelFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Sorting/ModelFactory.php', 'ACA\\JetEngine\\Sorting\\ModelFactory\\Post' => __DIR__ . '/../..' . '/addons/jetengine/classes/Sorting/ModelFactory/Post.php', 'ACA\\JetEngine\\Sorting\\SortableTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Sorting/SortableTrait.php', 'ACA\\JetEngine\\Utils\\Api' => __DIR__ . '/../..' . '/addons/jetengine/classes/Utils/Api.php', 'ACA\\JetEngine\\Utils\\FieldOptions' => __DIR__ . '/../..' . '/addons/jetengine/classes/Utils/FieldOptions.php', 'ACA\\JetEngine\\Utils\\Relations' => __DIR__ . '/../..' . '/addons/jetengine/classes/Utils/Relations.php', 'ACA\\JetEngine\\Value\\DefaultValueFormatterTrait' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/DefaultValueFormatterTrait.php', 'ACA\\JetEngine\\Value\\Format\\Checkbox' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Checkbox.php', 'ACA\\JetEngine\\Value\\Format\\Color' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Color.php', 'ACA\\JetEngine\\Value\\Format\\Date' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Date.php', 'ACA\\JetEngine\\Value\\Format\\DateTime' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/DateTime.php', 'ACA\\JetEngine\\Value\\Format\\DefaultFormatter' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/DefaultFormatter.php', 'ACA\\JetEngine\\Value\\Format\\Gallery' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Gallery.php', 'ACA\\JetEngine\\Value\\Format\\Media' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Media.php', 'ACA\\JetEngine\\Value\\Format\\MultipleOptions' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/MultipleOptions.php', 'ACA\\JetEngine\\Value\\Format\\Options' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Options.php', 'ACA\\JetEngine\\Value\\Format\\Posts' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Posts.php', 'ACA\\JetEngine\\Value\\Format\\Switcher' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Format/Switcher.php', 'ACA\\JetEngine\\Value\\Formatter' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/Formatter.php', 'ACA\\JetEngine\\Value\\ValueFormatter' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/ValueFormatter.php', 'ACA\\JetEngine\\Value\\ValueFormatterFactory' => __DIR__ . '/../..' . '/addons/jetengine/classes/Value/ValueFormatterFactory.php', 'ACA\\MLA\\MediaLibraryAssistant' => __DIR__ . '/../..' . '/addons/media-library-assistant/classes/MediaLibraryAssistant.php', 'ACA\\MLA\\Service\\IntegratedMlaSupport' => __DIR__ . '/../..' . '/addons/media-library-assistant/classes/Service/IntegratedMlaSupport.php', 'ACA\\MetaBox\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/metabox/classes/Asset/Script/Admin.php', 'ACA\\MetaBox\\Column' => __DIR__ . '/../..' . '/addons/metabox/classes/Column.php', 'ACA\\MetaBox\\ColumnFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/ColumnFactory.php', 'ACA\\MetaBox\\Column\\AdvancedTaxonomies' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/AdvancedTaxonomies.php', 'ACA\\MetaBox\\Column\\AdvancedTaxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/AdvancedTaxonomy.php', 'ACA\\MetaBox\\Column\\Autocomplete' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Autocomplete.php', 'ACA\\MetaBox\\Column\\Background' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Background.php', 'ACA\\MetaBox\\Column\\ButtonGroup' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/ButtonGroup.php', 'ACA\\MetaBox\\Column\\Checkbox' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Checkbox.php', 'ACA\\MetaBox\\Column\\CheckboxList' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/CheckboxList.php', 'ACA\\MetaBox\\Column\\Color' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Color.php', 'ACA\\MetaBox\\Column\\Date' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Date.php', 'ACA\\MetaBox\\Column\\DateTime' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/DateTime.php', 'ACA\\MetaBox\\Column\\FieldsetText' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/FieldsetText.php', 'ACA\\MetaBox\\Column\\File' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/File.php', 'ACA\\MetaBox\\Column\\Image' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Image.php', 'ACA\\MetaBox\\Column\\ImageSelect' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/ImageSelect.php', 'ACA\\MetaBox\\Column\\KeyValue' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/KeyValue.php', 'ACA\\MetaBox\\Column\\Map' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Map.php', 'ACA\\MetaBox\\Column\\Number' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Number.php', 'ACA\\MetaBox\\Column\\Osm' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Osm.php', 'ACA\\MetaBox\\Column\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Post.php', 'ACA\\MetaBox\\Column\\Posts' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Posts.php', 'ACA\\MetaBox\\Column\\Relation' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Relation.php', 'ACA\\MetaBox\\Column\\Relation\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Relation/Post.php', 'ACA\\MetaBox\\Column\\Relation\\Term' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Relation/Term.php', 'ACA\\MetaBox\\Column\\Relation\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Relation/User.php', 'ACA\\MetaBox\\Column\\Select' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Select.php', 'ACA\\MetaBox\\Column\\SelectAdvanced' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/SelectAdvanced.php', 'ACA\\MetaBox\\Column\\SingleImage' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/SingleImage.php', 'ACA\\MetaBox\\Column\\Slider' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Slider.php', 'ACA\\MetaBox\\Column\\Taxonomies' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Taxonomies.php', 'ACA\\MetaBox\\Column\\Taxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Taxonomy.php', 'ACA\\MetaBox\\Column\\Text' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Text.php', 'ACA\\MetaBox\\Column\\TextList' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/TextList.php', 'ACA\\MetaBox\\Column\\Textarea' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Textarea.php', 'ACA\\MetaBox\\Column\\Url' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Url.php', 'ACA\\MetaBox\\Column\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/User.php', 'ACA\\MetaBox\\Column\\Users' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Users.php', 'ACA\\MetaBox\\Column\\Video' => __DIR__ . '/../..' . '/addons/metabox/classes/Column/Video.php', 'ACA\\MetaBox\\Editing\\ServiceFactory\\Autocomplete' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/ServiceFactory/Autocomplete.php', 'ACA\\MetaBox\\Editing\\ServiceFactory\\File' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/ServiceFactory/File.php', 'ACA\\MetaBox\\Editing\\ServiceFactory\\Input' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/ServiceFactory/Input.php', 'ACA\\MetaBox\\Editing\\ServiceFactory\\Number' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/ServiceFactory/Number.php', 'ACA\\MetaBox\\Editing\\ServiceFactory\\Slider' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/ServiceFactory/Slider.php', 'ACA\\MetaBox\\Editing\\Service\\Relation' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/Relation.php', 'ACA\\MetaBox\\Editing\\Service\\Relation\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/Relation/Post.php', 'ACA\\MetaBox\\Editing\\Service\\Relation\\Term' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/Relation/Term.php', 'ACA\\MetaBox\\Editing\\Service\\Relation\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/Relation/User.php', 'ACA\\MetaBox\\Editing\\Service\\Taxonomies' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/Taxonomies.php', 'ACA\\MetaBox\\Editing\\Service\\TaxonomiesAdvanced' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/TaxonomiesAdvanced.php', 'ACA\\MetaBox\\Editing\\Service\\Taxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Service/Taxonomy.php', 'ACA\\MetaBox\\Editing\\StorageFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/StorageFactory.php', 'ACA\\MetaBox\\Editing\\Storage\\CustomTable' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Storage/CustomTable.php', 'ACA\\MetaBox\\Editing\\Storage\\Field' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Storage/Field.php', 'ACA\\MetaBox\\Editing\\Storage\\TermField' => __DIR__ . '/../..' . '/addons/metabox/classes/Editing/Storage/TermField.php', 'ACA\\MetaBox\\Entity\\Relation' => __DIR__ . '/../..' . '/addons/metabox/classes/Entity/Relation.php', 'ACA\\MetaBox\\Export\\Factory' => __DIR__ . '/../..' . '/addons/metabox/classes/Export/Factory.php', 'ACA\\MetaBox\\Export\\Model\\FieldsetText' => __DIR__ . '/../..' . '/addons/metabox/classes/Export/Model/FieldsetText.php', 'ACA\\MetaBox\\Export\\Model\\File' => __DIR__ . '/../..' . '/addons/metabox/classes/Export/Model/File.php', 'ACA\\MetaBox\\Export\\Model\\Formatted' => __DIR__ . '/../..' . '/addons/metabox/classes/Export/Model/Formatted.php', 'ACA\\MetaBox\\Export\\Model\\Raw' => __DIR__ . '/../..' . '/addons/metabox/classes/Export/Model/Raw.php', 'ACA\\MetaBox\\Factory' => __DIR__ . '/../..' . '/addons/metabox/classes/Factory.php', 'ACA\\MetaBox\\MetaBox' => __DIR__ . '/../..' . '/addons/metabox/classes/MetaBox.php', 'ACA\\MetaBox\\RelationColumnFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/RelationColumnFactory.php', 'ACA\\MetaBox\\RelationshipRepository' => __DIR__ . '/../..' . '/addons/metabox/classes/RelationshipRepository.php', 'ACA\\MetaBox\\Search\\CloneableFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/CloneableFactory.php', 'ACA\\MetaBox\\Search\\Comparison\\MultiSelect' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/MultiSelect.php', 'ACA\\MetaBox\\Search\\Comparison\\Relation' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Relation.php', 'ACA\\MetaBox\\Search\\Comparison\\Relation\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Relation/Post.php', 'ACA\\MetaBox\\Search\\Comparison\\Relation\\Term' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Relation/Term.php', 'ACA\\MetaBox\\Search\\Comparison\\Relation\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Relation/User.php', 'ACA\\MetaBox\\Search\\Comparison\\Select' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Select.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\DateIso' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/DateIso.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\Media' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/Media.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\MultiMapTrait' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/MultiMapTrait.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\MultiSelect' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/MultiSelect.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/Post.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\Select' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/Select.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\TableStorage' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/TableStorage.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\Timestamp' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/Timestamp.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/User.php', 'ACA\\MetaBox\\Search\\Comparison\\Table\\Users' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Table/Users.php', 'ACA\\MetaBox\\Search\\Comparison\\Taxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Taxonomy.php', 'ACA\\MetaBox\\Search\\Comparison\\TaxonomyAdvanced' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/TaxonomyAdvanced.php', 'ACA\\MetaBox\\Search\\Comparison\\Video' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Comparison/Video.php', 'ACA\\MetaBox\\Search\\Factory' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory.php', 'ACA\\MetaBox\\Search\\Factory\\Autocomplete' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Autocomplete.php', 'ACA\\MetaBox\\Search\\Factory\\CheckboxList' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/CheckboxList.php', 'ACA\\MetaBox\\Search\\Factory\\Date' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Date.php', 'ACA\\MetaBox\\Search\\Factory\\Meta' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Meta.php', 'ACA\\MetaBox\\Search\\Factory\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Post.php', 'ACA\\MetaBox\\Search\\Factory\\Select' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Select.php', 'ACA\\MetaBox\\Search\\Factory\\Taxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Taxonomy.php', 'ACA\\MetaBox\\Search\\Factory\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/User.php', 'ACA\\MetaBox\\Search\\Factory\\Video' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/Factory/Video.php', 'ACA\\MetaBox\\Search\\TableStorageFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Search/TableStorageFactory.php', 'ACA\\MetaBox\\Service\\ColumnInstantiate' => __DIR__ . '/../..' . '/addons/metabox/classes/Service/ColumnInstantiate.php', 'ACA\\MetaBox\\Service\\Columns' => __DIR__ . '/../..' . '/addons/metabox/classes/Service/Columns.php', 'ACA\\MetaBox\\Service\\QuickAdd' => __DIR__ . '/../..' . '/addons/metabox/classes/Service/QuickAdd.php', 'ACA\\MetaBox\\Service\\Scripts' => __DIR__ . '/../..' . '/addons/metabox/classes/Service/Scripts.php', 'ACA\\MetaBox\\Service\\Storage' => __DIR__ . '/../..' . '/addons/metabox/classes/Service/Storage.php', 'ACA\\MetaBox\\Sorting\\CloneableFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/CloneableFactory.php', 'ACA\\MetaBox\\Sorting\\Factory' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory.php', 'ACA\\MetaBox\\Sorting\\Factory\\AdvancedTaxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/AdvancedTaxonomy.php', 'ACA\\MetaBox\\Sorting\\Factory\\Date' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/Date.php', 'ACA\\MetaBox\\Sorting\\Factory\\Meta' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/Meta.php', 'ACA\\MetaBox\\Sorting\\Factory\\Post' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/Post.php', 'ACA\\MetaBox\\Sorting\\Factory\\Select' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/Select.php', 'ACA\\MetaBox\\Sorting\\Factory\\TableStorageFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/TableStorageFactory.php', 'ACA\\MetaBox\\Sorting\\Factory\\User' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Factory/User.php', 'ACA\\MetaBox\\Sorting\\FormatValue\\Taxonomy' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/FormatValue/Taxonomy.php', 'ACA\\MetaBox\\Sorting\\Model\\Post\\Table' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Model/Post/Table.php', 'ACA\\MetaBox\\Sorting\\Model\\Taxonomy\\Table' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Model/Taxonomy/Table.php', 'ACA\\MetaBox\\Sorting\\Model\\User\\Table' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/Model/User/Table.php', 'ACA\\MetaBox\\Sorting\\TableOrderByFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/TableOrderByFactory.php', 'ACA\\MetaBox\\Sorting\\TableStorageFactory' => __DIR__ . '/../..' . '/addons/metabox/classes/Sorting/TableStorageFactory.php', 'ACA\\MetaBox\\StorageAware' => __DIR__ . '/../..' . '/addons/metabox/classes/StorageAware.php', 'ACA\\Pods\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/pods/classes/Asset/Script/Admin.php', 'ACA\\Pods\\Column' => __DIR__ . '/../..' . '/addons/pods/classes/Column.php', 'ACA\\Pods\\Column\\Comment' => __DIR__ . '/../..' . '/addons/pods/classes/Column/Comment.php', 'ACA\\Pods\\Column\\Media' => __DIR__ . '/../..' . '/addons/pods/classes/Column/Media.php', 'ACA\\Pods\\Column\\Post' => __DIR__ . '/../..' . '/addons/pods/classes/Column/Post.php', 'ACA\\Pods\\Column\\Taxonomy' => __DIR__ . '/../..' . '/addons/pods/classes/Column/Taxonomy.php', 'ACA\\Pods\\Column\\User' => __DIR__ . '/../..' . '/addons/pods/classes/Column/User.php', 'ACA\\Pods\\ConditionalFormatting\\FormattableConfigFactory' => __DIR__ . '/../..' . '/addons/pods/classes/ConditionalFormatting/FormattableConfigFactory.php', 'ACA\\Pods\\Editing\\DefaultServiceTrait' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/DefaultServiceTrait.php', 'ACA\\Pods\\Editing\\Service\\FieldStorage' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Service/FieldStorage.php', 'ACA\\Pods\\Editing\\Service\\PickComments' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Service/PickComments.php', 'ACA\\Pods\\Editing\\Service\\PickTaxonomy' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Service/PickTaxonomy.php', 'ACA\\Pods\\Editing\\StorageFactory' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/StorageFactory.php', 'ACA\\Pods\\Editing\\Storage\\Date' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Storage/Date.php', 'ACA\\Pods\\Editing\\Storage\\Field' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Storage/Field.php', 'ACA\\Pods\\Editing\\Storage\\File' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Storage/File.php', 'ACA\\Pods\\Editing\\Storage\\ReadStorage' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Storage/ReadStorage.php', 'ACA\\Pods\\Editing\\Storage\\Read\\DbRaw' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Storage/Read/DbRaw.php', 'ACA\\Pods\\Editing\\Storage\\Read\\PodsRaw' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/Storage/Read/PodsRaw.php', 'ACA\\Pods\\Editing\\ViewFactory' => __DIR__ . '/../..' . '/addons/pods/classes/Editing/ViewFactory.php', 'ACA\\Pods\\Export\\File' => __DIR__ . '/../..' . '/addons/pods/classes/Export/File.php', 'ACA\\Pods\\Field' => __DIR__ . '/../..' . '/addons/pods/classes/Field.php', 'ACA\\Pods\\FieldFactory' => __DIR__ . '/../..' . '/addons/pods/classes/FieldFactory.php', 'ACA\\Pods\\FieldPickFactory' => __DIR__ . '/../..' . '/addons/pods/classes/FieldPickFactory.php', 'ACA\\Pods\\Field\\Boolean' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Boolean.php', 'ACA\\Pods\\Field\\Code' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Code.php', 'ACA\\Pods\\Field\\Color' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Color.php', 'ACA\\Pods\\Field\\Currency' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Currency.php', 'ACA\\Pods\\Field\\Date' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Date.php', 'ACA\\Pods\\Field\\Datetime' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Datetime.php', 'ACA\\Pods\\Field\\Email' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Email.php', 'ACA\\Pods\\Field\\File' => __DIR__ . '/../..' . '/addons/pods/classes/Field/File.php', 'ACA\\Pods\\Field\\Number' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Number.php', 'ACA\\Pods\\Field\\Paragraph' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Paragraph.php', 'ACA\\Pods\\Field\\Password' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Password.php', 'ACA\\Pods\\Field\\Phone' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Phone.php', 'ACA\\Pods\\Field\\Pick' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick.php', 'ACA\\Pods\\Field\\Pick\\Capability' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/Capability.php', 'ACA\\Pods\\Field\\Pick\\Comment' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/Comment.php', 'ACA\\Pods\\Field\\Pick\\Country' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/Country.php', 'ACA\\Pods\\Field\\Pick\\CustomSimple' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/CustomSimple.php', 'ACA\\Pods\\Field\\Pick\\DaysOfWeek' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/DaysOfWeek.php', 'ACA\\Pods\\Field\\Pick\\ImageSize' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/ImageSize.php', 'ACA\\Pods\\Field\\Pick\\Media' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/Media.php', 'ACA\\Pods\\Field\\Pick\\MonthsOfYear' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/MonthsOfYear.php', 'ACA\\Pods\\Field\\Pick\\NavMenu' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/NavMenu.php', 'ACA\\Pods\\Field\\Pick\\PostFormat' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/PostFormat.php', 'ACA\\Pods\\Field\\Pick\\PostStatus' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/PostStatus.php', 'ACA\\Pods\\Field\\Pick\\PostType' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/PostType.php', 'ACA\\Pods\\Field\\Pick\\Role' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/Role.php', 'ACA\\Pods\\Field\\Pick\\Taxonomy' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/Taxonomy.php', 'ACA\\Pods\\Field\\Pick\\UsState' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/UsState.php', 'ACA\\Pods\\Field\\Pick\\User' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Pick/User.php', 'ACA\\Pods\\Field\\Text' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Text.php', 'ACA\\Pods\\Field\\Time' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Time.php', 'ACA\\Pods\\Field\\Website' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Website.php', 'ACA\\Pods\\Field\\Wysiwyg' => __DIR__ . '/../..' . '/addons/pods/classes/Field/Wysiwyg.php', 'ACA\\Pods\\Filtering' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering.php', 'ACA\\Pods\\Filtering\\Disabled' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/Disabled.php', 'ACA\\Pods\\Filtering\\Number' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/Number.php', 'ACA\\Pods\\Filtering\\Pick' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/Pick.php', 'ACA\\Pods\\Filtering\\PickCustom' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/PickCustom.php', 'ACA\\Pods\\Filtering\\PickPosts' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/PickPosts.php', 'ACA\\Pods\\Filtering\\PickTaxonomy' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/PickTaxonomy.php', 'ACA\\Pods\\Filtering\\PickUsers' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/PickUsers.php', 'ACA\\Pods\\Filtering\\TrueFalse' => __DIR__ . '/../..' . '/addons/pods/classes/Filtering/TrueFalse.php', 'ACA\\Pods\\Pods' => __DIR__ . '/../..' . '/addons/pods/classes/Pods.php', 'ACA\\Pods\\Search\\Pick' => __DIR__ . '/../..' . '/addons/pods/classes/Search/Pick.php', 'ACA\\Pods\\Search\\PickComment' => __DIR__ . '/../..' . '/addons/pods/classes/Search/PickComment.php', 'ACA\\Pods\\Search\\PickPost' => __DIR__ . '/../..' . '/addons/pods/classes/Search/PickPost.php', 'ACA\\Pods\\Search\\PickTaxonomy' => __DIR__ . '/../..' . '/addons/pods/classes/Search/PickTaxonomy.php', 'ACA\\Pods\\Search\\PickUser' => __DIR__ . '/../..' . '/addons/pods/classes/Search/PickUser.php', 'ACA\\Pods\\Service\\Columns' => __DIR__ . '/../..' . '/addons/pods/classes/Service/Columns.php', 'ACA\\Pods\\Service\\Scripts' => __DIR__ . '/../..' . '/addons/pods/classes/Service/Scripts.php', 'ACA\\Pods\\Setting\\Date' => __DIR__ . '/../..' . '/addons/pods/classes/Setting/Date.php', 'ACA\\Pods\\Setting\\Field' => __DIR__ . '/../..' . '/addons/pods/classes/Setting/Field.php', 'ACA\\Pods\\Sorting\\DefaultSortingTrait' => __DIR__ . '/../..' . '/addons/pods/classes/Sorting/DefaultSortingTrait.php', 'ACA\\Pods\\Value\\DbRaw' => __DIR__ . '/../..' . '/addons/pods/classes/Value/DbRaw.php', 'ACA\\Polylang\\Column\\Language' => __DIR__ . '/../..' . '/addons/polylang/classes/Column/Language.php', 'ACA\\Polylang\\Polylang' => __DIR__ . '/../..' . '/addons/polylang/classes/Polylang.php', 'ACA\\Polylang\\Service\\Admin' => __DIR__ . '/../..' . '/addons/polylang/classes/Service/Admin.php', 'ACA\\Polylang\\Service\\ColumnReplacement' => __DIR__ . '/../..' . '/addons/polylang/classes/Service/ColumnReplacement.php', 'ACA\\Polylang\\Service\\Columns' => __DIR__ . '/../..' . '/addons/polylang/classes/Service/Columns.php', 'ACA\\Types\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/types/classes/Asset/Script/Admin.php', 'ACA\\Types\\Column' => __DIR__ . '/../..' . '/addons/types/classes/Column.php', 'ACA\\Types\\Column\\Post' => __DIR__ . '/../..' . '/addons/types/classes/Column/Post.php', 'ACA\\Types\\Column\\Post\\Intermediary' => __DIR__ . '/../..' . '/addons/types/classes/Column/Post/Intermediary.php', 'ACA\\Types\\Column\\Post\\Relationship' => __DIR__ . '/../..' . '/addons/types/classes/Column/Post/Relationship.php', 'ACA\\Types\\Column\\Taxonomy' => __DIR__ . '/../..' . '/addons/types/classes/Column/Taxonomy.php', 'ACA\\Types\\Column\\User' => __DIR__ . '/../..' . '/addons/types/classes/Column/User.php', 'ACA\\Types\\ConditionalFormatting\\FormattableConfigFactory' => __DIR__ . '/../..' . '/addons/types/classes/ConditionalFormatting/FormattableConfigFactory.php', 'ACA\\Types\\Editing' => __DIR__ . '/../..' . '/addons/types/classes/Editing.php', 'ACA\\Types\\Editing\\Service\\Relationship' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Service/Relationship.php', 'ACA\\Types\\Editing\\Storage\\Checkboxes' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/Checkboxes.php', 'ACA\\Types\\Editing\\Storage\\File' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/File.php', 'ACA\\Types\\Editing\\Storage\\Relationship' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/Relationship.php', 'ACA\\Types\\Editing\\Storage\\Relationship\\ChildRelation' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/Relationship/ChildRelation.php', 'ACA\\Types\\Editing\\Storage\\Relationship\\ParentRelation' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/Relationship/ParentRelation.php', 'ACA\\Types\\Editing\\Storage\\RepeatableDate' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/RepeatableDate.php', 'ACA\\Types\\Editing\\Storage\\RepeatableFile' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/RepeatableFile.php', 'ACA\\Types\\Editing\\Storage\\Repeater' => __DIR__ . '/../..' . '/addons/types/classes/Editing/Storage/Repeater.php', 'ACA\\Types\\Export\\Field' => __DIR__ . '/../..' . '/addons/types/classes/Export/Field.php', 'ACA\\Types\\Export\\Field\\Checkboxes' => __DIR__ . '/../..' . '/addons/types/classes/Export/Field/Checkboxes.php', 'ACA\\Types\\Export\\Field\\Date' => __DIR__ . '/../..' . '/addons/types/classes/Export/Field/Date.php', 'ACA\\Types\\Export\\Field\\Skype' => __DIR__ . '/../..' . '/addons/types/classes/Export/Field/Skype.php', 'ACA\\Types\\Field' => __DIR__ . '/../..' . '/addons/types/classes/Field.php', 'ACA\\Types\\FieldFactory' => __DIR__ . '/../..' . '/addons/types/classes/FieldFactory.php', 'ACA\\Types\\FieldRepeatableFactory' => __DIR__ . '/../..' . '/addons/types/classes/FieldRepeatableFactory.php', 'ACA\\Types\\Field\\Audio' => __DIR__ . '/../..' . '/addons/types/classes/Field/Audio.php', 'ACA\\Types\\Field\\Checkbox' => __DIR__ . '/../..' . '/addons/types/classes/Field/Checkbox.php', 'ACA\\Types\\Field\\Checkboxes' => __DIR__ . '/../..' . '/addons/types/classes/Field/Checkboxes.php', 'ACA\\Types\\Field\\Colorpicker' => __DIR__ . '/../..' . '/addons/types/classes/Field/Colorpicker.php', 'ACA\\Types\\Field\\Date' => __DIR__ . '/../..' . '/addons/types/classes/Field/Date.php', 'ACA\\Types\\Field\\Email' => __DIR__ . '/../..' . '/addons/types/classes/Field/Email.php', 'ACA\\Types\\Field\\Embed' => __DIR__ . '/../..' . '/addons/types/classes/Field/Embed.php', 'ACA\\Types\\Field\\File' => __DIR__ . '/../..' . '/addons/types/classes/Field/File.php', 'ACA\\Types\\Field\\Image' => __DIR__ . '/../..' . '/addons/types/classes/Field/Image.php', 'ACA\\Types\\Field\\Number' => __DIR__ . '/../..' . '/addons/types/classes/Field/Number.php', 'ACA\\Types\\Field\\Phone' => __DIR__ . '/../..' . '/addons/types/classes/Field/Phone.php', 'ACA\\Types\\Field\\Radio' => __DIR__ . '/../..' . '/addons/types/classes/Field/Radio.php', 'ACA\\Types\\Field\\Repeatable\\Audio' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Audio.php', 'ACA\\Types\\Field\\Repeatable\\Colorpicker' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Colorpicker.php', 'ACA\\Types\\Field\\Repeatable\\Date' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Date.php', 'ACA\\Types\\Field\\Repeatable\\Email' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Email.php', 'ACA\\Types\\Field\\Repeatable\\Embed' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Embed.php', 'ACA\\Types\\Field\\Repeatable\\File' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/File.php', 'ACA\\Types\\Field\\Repeatable\\Image' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Image.php', 'ACA\\Types\\Field\\Repeatable\\Number' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Number.php', 'ACA\\Types\\Field\\Repeatable\\Phone' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Phone.php', 'ACA\\Types\\Field\\Repeatable\\Skype' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Skype.php', 'ACA\\Types\\Field\\Repeatable\\Textarea' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Textarea.php', 'ACA\\Types\\Field\\Repeatable\\Textfield' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Textfield.php', 'ACA\\Types\\Field\\Repeatable\\Url' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Url.php', 'ACA\\Types\\Field\\Repeatable\\Video' => __DIR__ . '/../..' . '/addons/types/classes/Field/Repeatable/Video.php', 'ACA\\Types\\Field\\Select' => __DIR__ . '/../..' . '/addons/types/classes/Field/Select.php', 'ACA\\Types\\Field\\Skype' => __DIR__ . '/../..' . '/addons/types/classes/Field/Skype.php', 'ACA\\Types\\Field\\Textarea' => __DIR__ . '/../..' . '/addons/types/classes/Field/Textarea.php', 'ACA\\Types\\Field\\Textfield' => __DIR__ . '/../..' . '/addons/types/classes/Field/Textfield.php', 'ACA\\Types\\Field\\Url' => __DIR__ . '/../..' . '/addons/types/classes/Field/Url.php', 'ACA\\Types\\Field\\Video' => __DIR__ . '/../..' . '/addons/types/classes/Field/Video.php', 'ACA\\Types\\Field\\Wysiwyg' => __DIR__ . '/../..' . '/addons/types/classes/Field/Wysiwyg.php', 'ACA\\Types\\Filtering' => __DIR__ . '/../..' . '/addons/types/classes/Filtering.php', 'ACA\\Types\\Filtering\\Checkbox' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Checkbox.php', 'ACA\\Types\\Filtering\\Checkboxes' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Checkboxes.php', 'ACA\\Types\\Filtering\\Date' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Date.php', 'ACA\\Types\\Filtering\\File' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/File.php', 'ACA\\Types\\Filtering\\Image' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Image.php', 'ACA\\Types\\Filtering\\Number' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Number.php', 'ACA\\Types\\Filtering\\Post\\ParentPost' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Post/ParentPost.php', 'ACA\\Types\\Filtering\\Select' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Select.php', 'ACA\\Types\\Filtering\\Skype' => __DIR__ . '/../..' . '/addons/types/classes/Filtering/Skype.php', 'ACA\\Types\\Search\\Checkbox' => __DIR__ . '/../..' . '/addons/types/classes/Search/Checkbox.php', 'ACA\\Types\\Search\\Checkboxes' => __DIR__ . '/../..' . '/addons/types/classes/Search/Checkboxes.php', 'ACA\\Types\\Search\\File' => __DIR__ . '/../..' . '/addons/types/classes/Search/File.php', 'ACA\\Types\\Search\\Post\\IntermediaryRelationship' => __DIR__ . '/../..' . '/addons/types/classes/Search/Post/IntermediaryRelationship.php', 'ACA\\Types\\Search\\Post\\Relationship' => __DIR__ . '/../..' . '/addons/types/classes/Search/Post/Relationship.php', 'ACA\\Types\\Search\\Select' => __DIR__ . '/../..' . '/addons/types/classes/Search/Select.php', 'ACA\\Types\\Search\\Skype' => __DIR__ . '/../..' . '/addons/types/classes/Search/Skype.php', 'ACA\\Types\\Service\\Columns' => __DIR__ . '/../..' . '/addons/types/classes/Service/Columns.php', 'ACA\\Types\\Service\\Scripts' => __DIR__ . '/../..' . '/addons/types/classes/Service/Scripts.php', 'ACA\\Types\\Settings\\ChildPostType' => __DIR__ . '/../..' . '/addons/types/classes/Settings/ChildPostType.php', 'ACA\\Types\\Settings\\Field' => __DIR__ . '/../..' . '/addons/types/classes/Settings/Field.php', 'ACA\\Types\\Settings\\IntermediaryRelationship' => __DIR__ . '/../..' . '/addons/types/classes/Settings/IntermediaryRelationship.php', 'ACA\\Types\\Settings\\ParentPostType' => __DIR__ . '/../..' . '/addons/types/classes/Settings/ParentPostType.php', 'ACA\\Types\\Settings\\Relationship' => __DIR__ . '/../..' . '/addons/types/classes/Settings/Relationship.php', 'ACA\\Types\\Sorting\\DisabledSortingTrait' => __DIR__ . '/../..' . '/addons/types/classes/Sorting/DisabledSortingTrait.php', 'ACA\\Types\\Types' => __DIR__ . '/../..' . '/addons/types/classes/Types.php', 'ACA\\WC\\Admin' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Admin.php', 'ACA\\WC\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Asset/Script/Admin.php', 'ACA\\WC\\Asset\\Script\\Table' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Asset/Script/Table.php', 'ACA\\WC\\Asset\\Script\\TableVariation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Asset/Script/TableVariation.php', 'ACA\\WC\\Column\\Comment\\ProductReview' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Comment/ProductReview.php', 'ACA\\WC\\Column\\Comment\\Rating' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Comment/Rating.php', 'ACA\\WC\\Column\\CouponProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/CouponProductCategories.php', 'ACA\\WC\\Column\\ProductCategory\\Image' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductCategory/Image.php', 'ACA\\WC\\Column\\ProductSubscription\\Expires' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductSubscription/Expires.php', 'ACA\\WC\\Column\\ProductSubscription\\FreeTrial' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductSubscription/FreeTrial.php', 'ACA\\WC\\Column\\ProductSubscription\\LimitSubscription' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductSubscription/LimitSubscription.php', 'ACA\\WC\\Column\\ProductSubscription\\Period' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductSubscription/Period.php', 'ACA\\WC\\Column\\ProductVariation\\Attribute' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Attribute.php', 'ACA\\WC\\Column\\ProductVariation\\Description' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Description.php', 'ACA\\WC\\Column\\ProductVariation\\Dimensions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Dimensions.php', 'ACA\\WC\\Column\\ProductVariation\\Downloadable' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Downloadable.php', 'ACA\\WC\\Column\\ProductVariation\\Enabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Enabled.php', 'ACA\\WC\\Column\\ProductVariation\\ID' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/ID.php', 'ACA\\WC\\Column\\ProductVariation\\Image' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Image.php', 'ACA\\WC\\Column\\ProductVariation\\Order' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Order.php', 'ACA\\WC\\Column\\ProductVariation\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Price.php', 'ACA\\WC\\Column\\ProductVariation\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Product.php', 'ACA\\WC\\Column\\ProductVariation\\SKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/SKU.php', 'ACA\\WC\\Column\\ProductVariation\\Sales' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Sales.php', 'ACA\\WC\\Column\\ProductVariation\\ShippingClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/ShippingClass.php', 'ACA\\WC\\Column\\ProductVariation\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Stock.php', 'ACA\\WC\\Column\\ProductVariation\\TaxClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/TaxClass.php', 'ACA\\WC\\Column\\ProductVariation\\Taxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Taxonomy.php', 'ACA\\WC\\Column\\ProductVariation\\Thumb' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Thumb.php', 'ACA\\WC\\Column\\ProductVariation\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Variation.php', 'ACA\\WC\\Column\\ProductVariation\\Virtual' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Virtual.php', 'ACA\\WC\\Column\\ProductVariation\\Weight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ProductVariation/Weight.php', 'ACA\\WC\\Column\\Product\\Attributes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Attributes.php', 'ACA\\WC\\Column\\Product\\AvgOrderInterval' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/AvgOrderInterval.php', 'ACA\\WC\\Column\\Product\\BackordersAllowed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/BackordersAllowed.php', 'ACA\\WC\\Column\\Product\\Comments' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Comments.php', 'ACA\\WC\\Column\\Product\\Coupons' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Coupons.php', 'ACA\\WC\\Column\\Product\\Crosssells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Crosssells.php', 'ACA\\WC\\Column\\Product\\Customers' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Customers.php', 'ACA\\WC\\Column\\Product\\Date' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Date.php', 'ACA\\WC\\Column\\Product\\DefaultFormValues' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/DefaultFormValues.php', 'ACA\\WC\\Column\\Product\\Dimensions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Dimensions.php', 'ACA\\WC\\Column\\Product\\Downloads' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Downloads.php', 'ACA\\WC\\Column\\Product\\Featured' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Featured.php', 'ACA\\WC\\Column\\Product\\Gallery' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Gallery.php', 'ACA\\WC\\Column\\Product\\GroupedProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/GroupedProducts.php', 'ACA\\WC\\Column\\Product\\LowOnStock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/LowOnStock.php', 'ACA\\WC\\Column\\Product\\MenuOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/MenuOrder.php', 'ACA\\WC\\Column\\Product\\Name' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Name.php', 'ACA\\WC\\Column\\Product\\OrderCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/OrderCount.php', 'ACA\\WC\\Column\\Product\\OrderTotal' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/OrderTotal.php', 'ACA\\WC\\Column\\Product\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Price.php', 'ACA\\WC\\Column\\Product\\ProductCat' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ProductCat.php', 'ACA\\WC\\Column\\Product\\ProductParent' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ProductParent.php', 'ACA\\WC\\Column\\Product\\ProductTag' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ProductTag.php', 'ACA\\WC\\Column\\Product\\ProductType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ProductType.php', 'ACA\\WC\\Column\\Product\\PurchaseNote' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/PurchaseNote.php', 'ACA\\WC\\Column\\Product\\Rating' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Rating.php', 'ACA\\WC\\Column\\Product\\Reviews' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Reviews.php', 'ACA\\WC\\Column\\Product\\ReviewsEnabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ReviewsEnabled.php', 'ACA\\WC\\Column\\Product\\SKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/SKU.php', 'ACA\\WC\\Column\\Product\\Sale' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Sale.php', 'ACA\\WC\\Column\\Product\\Sales' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Sales.php', 'ACA\\WC\\Column\\Product\\ShippingClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ShippingClass.php', 'ACA\\WC\\Column\\Product\\ShortDescription' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/ShortDescription.php', 'ACA\\WC\\Column\\Product\\SoldIndividually' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/SoldIndividually.php', 'ACA\\WC\\Column\\Product\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Stock.php', 'ACA\\WC\\Column\\Product\\StockStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/StockStatus.php', 'ACA\\WC\\Column\\Product\\TaxClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/TaxClass.php', 'ACA\\WC\\Column\\Product\\TaxStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/TaxStatus.php', 'ACA\\WC\\Column\\Product\\Thumb' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Thumb.php', 'ACA\\WC\\Column\\Product\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Type.php', 'ACA\\WC\\Column\\Product\\Upsells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Upsells.php', 'ACA\\WC\\Column\\Product\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Variation.php', 'ACA\\WC\\Column\\Product\\Visibility' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Visibility.php', 'ACA\\WC\\Column\\Product\\Weight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/Product/Weight.php', 'ACA\\WC\\Column\\ShopCoupon\\Amount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Amount.php', 'ACA\\WC\\Column\\ShopCoupon\\Coupon' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Coupon.php', 'ACA\\WC\\Column\\ShopCoupon\\CouponCode' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/CouponCode.php', 'ACA\\WC\\Column\\ShopCoupon\\CouponDescription' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/CouponDescription.php', 'ACA\\WC\\Column\\ShopCoupon\\Description' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Description.php', 'ACA\\WC\\Column\\ShopCoupon\\EmailRestrictions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/EmailRestrictions.php', 'ACA\\WC\\Column\\ShopCoupon\\ExcludeProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/ExcludeProducts.php', 'ACA\\WC\\Column\\ShopCoupon\\ExcludeProductsCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/ExcludeProductsCategories.php', 'ACA\\WC\\Column\\ShopCoupon\\ExpiryDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/ExpiryDate.php', 'ACA\\WC\\Column\\ShopCoupon\\FreeShipping' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/FreeShipping.php', 'ACA\\WC\\Column\\ShopCoupon\\IncludeProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/IncludeProducts.php', 'ACA\\WC\\Column\\ShopCoupon\\Limit' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Limit.php', 'ACA\\WC\\Column\\ShopCoupon\\MaximumAmount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/MaximumAmount.php', 'ACA\\WC\\Column\\ShopCoupon\\MinimumAmount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/MinimumAmount.php', 'ACA\\WC\\Column\\ShopCoupon\\Orders' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Orders.php', 'ACA\\WC\\Column\\ShopCoupon\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Products.php', 'ACA\\WC\\Column\\ShopCoupon\\ProductsCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/ProductsCategories.php', 'ACA\\WC\\Column\\ShopCoupon\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Type.php', 'ACA\\WC\\Column\\ShopCoupon\\Usage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/Usage.php', 'ACA\\WC\\Column\\ShopCoupon\\UsedBy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopCoupon/UsedBy.php', 'ACA\\WC\\Column\\ShopOrder\\Actions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Actions.php', 'ACA\\WC\\Column\\ShopOrder\\Address' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Address.php', 'ACA\\WC\\Column\\ShopOrder\\Address\\Billing' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Address/Billing.php', 'ACA\\WC\\Column\\ShopOrder\\Address\\Shipping' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Address/Shipping.php', 'ACA\\WC\\Column\\ShopOrder\\BillingAddress' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/BillingAddress.php', 'ACA\\WC\\Column\\ShopOrder\\CouponsUsed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/CouponsUsed.php', 'ACA\\WC\\Column\\ShopOrder\\Currency' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Currency.php', 'ACA\\WC\\Column\\ShopOrder\\Customer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Customer.php', 'ACA\\WC\\Column\\ShopOrder\\CustomerMessage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/CustomerMessage.php', 'ACA\\WC\\Column\\ShopOrder\\CustomerNote' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/CustomerNote.php', 'ACA\\WC\\Column\\ShopOrder\\Date' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Date.php', 'ACA\\WC\\Column\\ShopOrder\\Discount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Discount.php', 'ACA\\WC\\Column\\ShopOrder\\Downloads' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Downloads.php', 'ACA\\WC\\Column\\ShopOrder\\IP' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/IP.php', 'ACA\\WC\\Column\\ShopOrder\\IsCustomer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/IsCustomer.php', 'ACA\\WC\\Column\\ShopOrder\\Notes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Notes.php', 'ACA\\WC\\Column\\ShopOrder\\Order' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Order.php', 'ACA\\WC\\Column\\ShopOrder\\OrderDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/OrderDate.php', 'ACA\\WC\\Column\\ShopOrder\\OrderNotes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/OrderNotes.php', 'ACA\\WC\\Column\\ShopOrder\\OrderNumber' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/OrderNumber.php', 'ACA\\WC\\Column\\ShopOrder\\OrderNumberOriginal' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/OrderNumberOriginal.php', 'ACA\\WC\\Column\\ShopOrder\\PaidAmount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/PaidAmount.php', 'ACA\\WC\\Column\\ShopOrder\\PaymentMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/PaymentMethod.php', 'ACA\\WC\\Column\\ShopOrder\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Product.php', 'ACA\\WC\\Column\\ShopOrder\\ProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/ProductCategories.php', 'ACA\\WC\\Column\\ShopOrder\\ProductDetails' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/ProductDetails.php', 'ACA\\WC\\Column\\ShopOrder\\ProductTags' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/ProductTags.php', 'ACA\\WC\\Column\\ShopOrder\\ProductTaxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/ProductTaxonomy.php', 'ACA\\WC\\Column\\ShopOrder\\Purchased' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Purchased.php', 'ACA\\WC\\Column\\ShopOrder\\Refunds' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Refunds.php', 'ACA\\WC\\Column\\ShopOrder\\Shipping' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Shipping.php', 'ACA\\WC\\Column\\ShopOrder\\ShippingAddress' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/ShippingAddress.php', 'ACA\\WC\\Column\\ShopOrder\\ShippingMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/ShippingMethod.php', 'ACA\\WC\\Column\\ShopOrder\\Status' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Status.php', 'ACA\\WC\\Column\\ShopOrder\\StatusIcon' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/StatusIcon.php', 'ACA\\WC\\Column\\ShopOrder\\Subtotal' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Subtotal.php', 'ACA\\WC\\Column\\ShopOrder\\Tax' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Tax.php', 'ACA\\WC\\Column\\ShopOrder\\Total' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Total.php', 'ACA\\WC\\Column\\ShopOrder\\TotalWeight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/TotalWeight.php', 'ACA\\WC\\Column\\ShopOrder\\Totals' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/Totals.php', 'ACA\\WC\\Column\\ShopOrder\\TransactionID' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/TransactionID.php', 'ACA\\WC\\Column\\ShopOrder\\WcActions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopOrder/WcActions.php', 'ACA\\WC\\Column\\ShopSubscription\\AutoRenewal' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/AutoRenewal.php', 'ACA\\WC\\Column\\ShopSubscription\\EndDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/EndDate.php', 'ACA\\WC\\Column\\ShopSubscription\\LastPaymentDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/LastPaymentDate.php', 'ACA\\WC\\Column\\ShopSubscription\\NextPaymentDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/NextPaymentDate.php', 'ACA\\WC\\Column\\ShopSubscription\\OrderItems' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/OrderItems.php', 'ACA\\WC\\Column\\ShopSubscription\\Orders' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/Orders.php', 'ACA\\WC\\Column\\ShopSubscription\\RecurringTotal' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/RecurringTotal.php', 'ACA\\WC\\Column\\ShopSubscription\\StartDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/StartDate.php', 'ACA\\WC\\Column\\ShopSubscription\\Status' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/Status.php', 'ACA\\WC\\Column\\ShopSubscription\\SubscriptionDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/SubscriptionDate.php', 'ACA\\WC\\Column\\ShopSubscription\\TotalRevenue' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/TotalRevenue.php', 'ACA\\WC\\Column\\ShopSubscription\\TrailEndDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/ShopSubscription/TrailEndDate.php', 'ACA\\WC\\Column\\UserSubscription\\ActiveSubscriber' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/UserSubscription/ActiveSubscriber.php', 'ACA\\WC\\Column\\UserSubscription\\InactiveSubscriber' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/UserSubscription/InactiveSubscriber.php', 'ACA\\WC\\Column\\UserSubscription\\Subscriptions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/UserSubscription/Subscriptions.php', 'ACA\\WC\\Column\\User\\Address' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/Address.php', 'ACA\\WC\\Column\\User\\Country' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/Country.php', 'ACA\\WC\\Column\\User\\CouponsUsed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/CouponsUsed.php', 'ACA\\WC\\Column\\User\\CustomerSince' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/CustomerSince.php', 'ACA\\WC\\Column\\User\\FirstOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/FirstOrder.php', 'ACA\\WC\\Column\\User\\LastOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/LastOrder.php', 'ACA\\WC\\Column\\User\\OrderCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/OrderCount.php', 'ACA\\WC\\Column\\User\\Orders' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/Orders.php', 'ACA\\WC\\Column\\User\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/Products.php', 'ACA\\WC\\Column\\User\\Ratings' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/Ratings.php', 'ACA\\WC\\Column\\User\\Reviews' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/Reviews.php', 'ACA\\WC\\Column\\User\\TotalSales' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Column/User/TotalSales.php', 'ACA\\WC\\ConditionalFormat\\FilteredHtmlIntegerFormatterTrait' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/FilteredHtmlIntegerFormatterTrait.php', 'ACA\\WC\\ConditionalFormat\\Formatter\\PriceFormatter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/Formatter/PriceFormatter.php', 'ACA\\WC\\ConditionalFormat\\Formatter\\ProductVariation\\PriceFormatter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/Formatter/ProductVariation/PriceFormatter.php', 'ACA\\WC\\ConditionalFormat\\Formatter\\Product\\AvgOrderIntervalFormatter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/Formatter/Product/AvgOrderIntervalFormatter.php', 'ACA\\WC\\ConditionalFormat\\Formatter\\Product\\SaleFormatter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/Formatter/Product/SaleFormatter.php', 'ACA\\WC\\ConditionalFormat\\Formatter\\ShopOrder\\TaxFormatter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/Formatter/ShopOrder/TaxFormatter.php', 'ACA\\WC\\ConditionalFormat\\Formatter\\User\\TotalSalesFormatter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ConditionalFormat/Formatter/User/TotalSalesFormatter.php', 'ACA\\WC\\Editing\\Comment\\Rating' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Comment/Rating.php', 'ACA\\WC\\Editing\\EditValue\\Product\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/EditValue/Product/Price.php', 'ACA\\WC\\Editing\\EditValue\\Product\\SalePrice' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/EditValue/Product/SalePrice.php', 'ACA\\WC\\Editing\\PostTrait' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/PostTrait.php', 'ACA\\WC\\Editing\\ProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductCategories.php', 'ACA\\WC\\Editing\\ProductRelations' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductRelations.php', 'ACA\\WC\\Editing\\ProductSubscription\\Expires' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductSubscription/Expires.php', 'ACA\\WC\\Editing\\ProductSubscription\\Limit' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductSubscription/Limit.php', 'ACA\\WC\\Editing\\ProductSubscription\\Period' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductSubscription/Period.php', 'ACA\\WC\\Editing\\ProductSubscription\\ProductSubscriptionEditableTrait' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductSubscription/ProductSubscriptionEditableTrait.php', 'ACA\\WC\\Editing\\ProductVariation\\Description' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Description.php', 'ACA\\WC\\Editing\\ProductVariation\\Downloadable' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Downloadable.php', 'ACA\\WC\\Editing\\ProductVariation\\Enabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Enabled.php', 'ACA\\WC\\Editing\\ProductVariation\\ShippingClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/ShippingClass.php', 'ACA\\WC\\Editing\\ProductVariation\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Stock.php', 'ACA\\WC\\Editing\\ProductVariation\\TaxClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/TaxClass.php', 'ACA\\WC\\Editing\\ProductVariation\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Variation.php', 'ACA\\WC\\Editing\\ProductVariation\\Virtual' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Virtual.php', 'ACA\\WC\\Editing\\ProductVariation\\Weight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ProductVariation/Weight.php', 'ACA\\WC\\Editing\\Product\\Attributes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Attributes.php', 'ACA\\WC\\Editing\\Product\\Attributes\\Taxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Attributes/Taxonomy.php', 'ACA\\WC\\Editing\\Product\\BackordersAllowed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/BackordersAllowed.php', 'ACA\\WC\\Editing\\Product\\Crosssells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Crosssells.php', 'ACA\\WC\\Editing\\Product\\Dimensions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Dimensions.php', 'ACA\\WC\\Editing\\Product\\GroupedProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/GroupedProducts.php', 'ACA\\WC\\Editing\\Product\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Price.php', 'ACA\\WC\\Editing\\Product\\ProductNotSupportedReasonTrait' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/ProductNotSupportedReasonTrait.php', 'ACA\\WC\\Editing\\Product\\ReviewsEnabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/ReviewsEnabled.php', 'ACA\\WC\\Editing\\Product\\ShippingClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/ShippingClass.php', 'ACA\\WC\\Editing\\Product\\SoldIndividually' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/SoldIndividually.php', 'ACA\\WC\\Editing\\Product\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Stock.php', 'ACA\\WC\\Editing\\Product\\TaxClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/TaxClass.php', 'ACA\\WC\\Editing\\Product\\TaxStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/TaxStatus.php', 'ACA\\WC\\Editing\\Product\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Type.php', 'ACA\\WC\\Editing\\Product\\Upsells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Upsells.php', 'ACA\\WC\\Editing\\Product\\Visibility' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Visibility.php', 'ACA\\WC\\Editing\\Product\\Weight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Product/Weight.php', 'ACA\\WC\\Editing\\ShopCoupon\\Amount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/Amount.php', 'ACA\\WC\\Editing\\ShopCoupon\\Description' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/Description.php', 'ACA\\WC\\Editing\\ShopCoupon\\EmailRestrictions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/EmailRestrictions.php', 'ACA\\WC\\Editing\\ShopCoupon\\ExcludeProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/ExcludeProductCategories.php', 'ACA\\WC\\Editing\\ShopCoupon\\ExcludeProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/ExcludeProducts.php', 'ACA\\WC\\Editing\\ShopCoupon\\ExpiryDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/ExpiryDate.php', 'ACA\\WC\\Editing\\ShopCoupon\\FreeShipping' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/FreeShipping.php', 'ACA\\WC\\Editing\\ShopCoupon\\IncludeProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/IncludeProducts.php', 'ACA\\WC\\Editing\\ShopCoupon\\MaximumAmount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/MaximumAmount.php', 'ACA\\WC\\Editing\\ShopCoupon\\MinimumAmount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/MinimumAmount.php', 'ACA\\WC\\Editing\\ShopCoupon\\ProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/ProductCategories.php', 'ACA\\WC\\Editing\\ShopCoupon\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/Type.php', 'ACA\\WC\\Editing\\ShopCoupon\\Usage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopCoupon/Usage.php', 'ACA\\WC\\Editing\\ShopOrder\\AddressFactory' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/AddressFactory.php', 'ACA\\WC\\Editing\\ShopOrder\\LastNote' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/LastNote.php', 'ACA\\WC\\Editing\\ShopOrder\\NotesPrivate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/NotesPrivate.php', 'ACA\\WC\\Editing\\ShopOrder\\NotesSystem' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/NotesSystem.php', 'ACA\\WC\\Editing\\ShopOrder\\NotesToCustomer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/NotesToCustomer.php', 'ACA\\WC\\Editing\\ShopOrder\\PaymentMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/PaymentMethod.php', 'ACA\\WC\\Editing\\ShopOrder\\Status' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopOrder/Status.php', 'ACA\\WC\\Editing\\ShopSubscription\\Date' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/ShopSubscription/Date.php', 'ACA\\WC\\Editing\\StorageModel\\Product\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/StorageModel/Product/Price.php', 'ACA\\WC\\Editing\\StorageModel\\Product\\SalePrice' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/StorageModel/Product/SalePrice.php', 'ACA\\WC\\Editing\\Storage\\Coupon\\ExcludedProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Coupon/ExcludedProductCategories.php', 'ACA\\WC\\Editing\\Storage\\Coupon\\ExcludedProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Coupon/ExcludedProducts.php', 'ACA\\WC\\Editing\\Storage\\Coupon\\IncludedProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Coupon/IncludedProductCategories.php', 'ACA\\WC\\Editing\\Storage\\Coupon\\IncludedProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Coupon/IncludedProducts.php', 'ACA\\WC\\Editing\\Storage\\Product\\Attributes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Product/Attributes.php', 'ACA\\WC\\Editing\\Storage\\Product\\Attributes\\Custom' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Product/Attributes/Custom.php', 'ACA\\WC\\Editing\\Storage\\Product\\CrossSells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Product/CrossSells.php', 'ACA\\WC\\Editing\\Storage\\Product\\Gallery' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Product/Gallery.php', 'ACA\\WC\\Editing\\Storage\\Product\\Sku' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Product/Sku.php', 'ACA\\WC\\Editing\\Storage\\Product\\UpSells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Storage/Product/UpSells.php', 'ACA\\WC\\Editing\\Strategy\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/Strategy/Product.php', 'ACA\\WC\\Editing\\View\\Dimensions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Dimensions.php', 'ACA\\WC\\Editing\\View\\Notes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Notes.php', 'ACA\\WC\\Editing\\View\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Price.php', 'ACA\\WC\\Editing\\View\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Stock.php', 'ACA\\WC\\Editing\\View\\SubscriptionPeriod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/SubscriptionPeriod.php', 'ACA\\WC\\Editing\\View\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Type.php', 'ACA\\WC\\Editing\\View\\Usage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Usage.php', 'ACA\\WC\\Editing\\View\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Editing/View/Variation.php', 'ACA\\WC\\Export\\Product\\Attributes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/Attributes.php', 'ACA\\WC\\Export\\Product\\Downloads' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/Downloads.php', 'ACA\\WC\\Export\\Product\\SKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/SKU.php', 'ACA\\WC\\Export\\Product\\Sale' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/Sale.php', 'ACA\\WC\\Export\\Product\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/Stock.php', 'ACA\\WC\\Export\\Product\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/Type.php', 'ACA\\WC\\Export\\Product\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/Product/Variation.php', 'ACA\\WC\\Export\\ShopCoupon\\Amount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Amount.php', 'ACA\\WC\\Export\\ShopCoupon\\Coupon' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Coupon.php', 'ACA\\WC\\Export\\ShopCoupon\\Description' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Description.php', 'ACA\\WC\\Export\\ShopCoupon\\EmailRestrictions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/EmailRestrictions.php', 'ACA\\WC\\Export\\ShopCoupon\\Orders' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Orders.php', 'ACA\\WC\\Export\\ShopCoupon\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Products.php', 'ACA\\WC\\Export\\ShopCoupon\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Type.php', 'ACA\\WC\\Export\\ShopCoupon\\Usage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopCoupon/Usage.php', 'ACA\\WC\\Export\\ShopOrder\\BillingAddress' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/BillingAddress.php', 'ACA\\WC\\Export\\ShopOrder\\CustomerMessage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/CustomerMessage.php', 'ACA\\WC\\Export\\ShopOrder\\CustomerRole' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/CustomerRole.php', 'ACA\\WC\\Export\\ShopOrder\\Downloads' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/Downloads.php', 'ACA\\WC\\Export\\ShopOrder\\Order' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/Order.php', 'ACA\\WC\\Export\\ShopOrder\\OrderDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/OrderDate.php', 'ACA\\WC\\Export\\ShopOrder\\OrderNotes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/OrderNotes.php', 'ACA\\WC\\Export\\ShopOrder\\ProductCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/ProductCount.php', 'ACA\\WC\\Export\\ShopOrder\\ProductCustomField' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/ProductCustomField.php', 'ACA\\WC\\Export\\ShopOrder\\ProductThumbnails' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/ProductThumbnails.php', 'ACA\\WC\\Export\\ShopOrder\\ShippingAddress' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopOrder/ShippingAddress.php', 'ACA\\WC\\Export\\ShopSubscription\\OrderItems' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopSubscription/OrderItems.php', 'ACA\\WC\\Export\\ShopSubscription\\Status' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopSubscription/Status.php', 'ACA\\WC\\Export\\ShopSubscription\\SubscriptionDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/ShopSubscription/SubscriptionDate.php', 'ACA\\WC\\Export\\UserSubscription\\ActiveSubscriber' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/UserSubscription/ActiveSubscriber.php', 'ACA\\WC\\Export\\User\\Orders' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/User/Orders.php', 'ACA\\WC\\Export\\User\\TotalSales' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Export/User/TotalSales.php', 'ACA\\WC\\Field' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field.php', 'ACA\\WC\\Field\\ShopOrder\\OrderDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopOrder/OrderDate.php', 'ACA\\WC\\Field\\ShopOrder\\OrderDate\\Completed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopOrder/OrderDate/Completed.php', 'ACA\\WC\\Field\\ShopOrder\\OrderDate\\Created' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopOrder/OrderDate/Created.php', 'ACA\\WC\\Field\\ShopOrder\\OrderDate\\Modified' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopOrder/OrderDate/Modified.php', 'ACA\\WC\\Field\\ShopOrder\\OrderDate\\Paid' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopOrder/OrderDate/Paid.php', 'ACA\\WC\\Field\\ShopSubscription\\SubscriptionDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopSubscription/SubscriptionDate.php', 'ACA\\WC\\Field\\ShopSubscription\\SubscriptionDate\\EndDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopSubscription/SubscriptionDate/EndDate.php', 'ACA\\WC\\Field\\ShopSubscription\\SubscriptionDate\\NextPayment' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopSubscription/SubscriptionDate/NextPayment.php', 'ACA\\WC\\Field\\ShopSubscription\\SubscriptionDate\\StartDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopSubscription/SubscriptionDate/StartDate.php', 'ACA\\WC\\Field\\ShopSubscription\\SubscriptionDate\\TrialEnd' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Field/ShopSubscription/SubscriptionDate/TrialEnd.php', 'ACA\\WC\\Filtering\\Comment\\ProductReview' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Comment/ProductReview.php', 'ACA\\WC\\Filtering\\MetaWithoutEmptyOption' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/MetaWithoutEmptyOption.php', 'ACA\\WC\\Filtering\\Number' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Number.php', 'ACA\\WC\\Filtering\\ProductVariation\\Downloadable' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ProductVariation/Downloadable.php', 'ACA\\WC\\Filtering\\ProductVariation\\Virtual' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ProductVariation/Virtual.php', 'ACA\\WC\\Filtering\\Product\\BackordersAllowed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/BackordersAllowed.php', 'ACA\\WC\\Filtering\\Product\\Coupons' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/Coupons.php', 'ACA\\WC\\Filtering\\Product\\Featured' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/Featured.php', 'ACA\\WC\\Filtering\\Product\\GroupedProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/GroupedProducts.php', 'ACA\\WC\\Filtering\\Product\\Price' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/Price.php', 'ACA\\WC\\Filtering\\Product\\ProductTag' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/ProductTag.php', 'ACA\\WC\\Filtering\\Product\\PurchaseNote' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/PurchaseNote.php', 'ACA\\WC\\Filtering\\Product\\ReviewsEnabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/ReviewsEnabled.php', 'ACA\\WC\\Filtering\\Product\\Sale' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/Sale.php', 'ACA\\WC\\Filtering\\Product\\ShortDescription' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/ShortDescription.php', 'ACA\\WC\\Filtering\\Product\\SoldIndividually' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/SoldIndividually.php', 'ACA\\WC\\Filtering\\Product\\StockStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/StockStatus.php', 'ACA\\WC\\Filtering\\Product\\TaxClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/TaxClass.php', 'ACA\\WC\\Filtering\\Product\\TaxStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/TaxStatus.php', 'ACA\\WC\\Filtering\\Product\\Thumb' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/Thumb.php', 'ACA\\WC\\Filtering\\Product\\Visibility' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Product/Visibility.php', 'ACA\\WC\\Filtering\\Settings\\ShowVariableProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/Settings/ShowVariableProducts.php', 'ACA\\WC\\Filtering\\ShopCoupon\\FreeShipping' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopCoupon/FreeShipping.php', 'ACA\\WC\\Filtering\\ShopCoupon\\ProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopCoupon/ProductCategories.php', 'ACA\\WC\\Filtering\\ShopCoupon\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopCoupon/Type.php', 'ACA\\WC\\Filtering\\ShopOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder.php', 'ACA\\WC\\Filtering\\ShopOrder\\CouponUsed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/CouponUsed.php', 'ACA\\WC\\Filtering\\ShopOrder\\CustomerMessage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/CustomerMessage.php', 'ACA\\WC\\Filtering\\ShopOrder\\CustomerRole' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/CustomerRole.php', 'ACA\\WC\\Filtering\\ShopOrder\\MetaDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/MetaDate.php', 'ACA\\WC\\Filtering\\ShopOrder\\PaymentMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/PaymentMethod.php', 'ACA\\WC\\Filtering\\ShopOrder\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/Product.php', 'ACA\\WC\\Filtering\\ShopOrder\\ProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/ProductCategories.php', 'ACA\\WC\\Filtering\\ShopOrder\\ProductTaxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/ProductTaxonomy.php', 'ACA\\WC\\Filtering\\ShopOrder\\Refunds' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/Refunds.php', 'ACA\\WC\\Filtering\\ShopOrder\\ShippingMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/ShippingMethod.php', 'ACA\\WC\\Filtering\\ShopOrder\\Status' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Filtering/ShopOrder/Status.php', 'ACA\\WC\\Helper\\Price\\Rounding' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/Price/Rounding.php', 'ACA\\WC\\Helper\\Select\\Entities\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/Select/Entities/Product.php', 'ACA\\WC\\Helper\\Select\\Formatter\\ProductIDTitleAndSKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/Select/Formatter/ProductIDTitleAndSKU.php', 'ACA\\WC\\Helper\\Select\\Formatter\\ProductTitleAndSKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/Select/Formatter/ProductTitleAndSKU.php', 'ACA\\WC\\Helper\\Select\\Paginated\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/Select/Paginated/Products.php', 'ACA\\WC\\Helper\\Select\\SinglePage' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/Select/SinglePage.php', 'ACA\\WC\\Helper\\User' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Helper/User.php', 'ACA\\WC\\ListScreen\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListScreen/Product.php', 'ACA\\WC\\ListScreen\\ProductCategory' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListScreen/ProductCategory.php', 'ACA\\WC\\ListScreen\\ProductVariation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListScreen/ProductVariation.php', 'ACA\\WC\\ListScreen\\ShopCoupon' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListScreen/ShopCoupon.php', 'ACA\\WC\\ListScreen\\ShopOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListScreen/ShopOrder.php', 'ACA\\WC\\ListScreen\\Subscriptions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListScreen/Subscriptions.php', 'ACA\\WC\\ListTable\\ProductVariation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/ListTable/ProductVariation.php', 'ACA\\WC\\PostType\\ProductVariation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/PostType/ProductVariation.php', 'ACA\\WC\\QuickAdd\\Create\\Coupon' => __DIR__ . '/../..' . '/addons/woocommerce/classes/QuickAdd/Create/Coupon.php', 'ACA\\WC\\QuickAdd\\Create\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/QuickAdd/Create/Product.php', 'ACA\\WC\\QuickAdd\\Factory' => __DIR__ . '/../..' . '/addons/woocommerce/classes/QuickAdd/Factory.php', 'ACA\\WC\\Rounding' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Rounding.php', 'ACA\\WC\\Search\\Comment\\ProductReview' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Comment/ProductReview.php', 'ACA\\WC\\Search\\Meta\\Date\\ISO' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Meta/Date/ISO.php', 'ACA\\WC\\Search\\Meta\\Date\\Timestamp' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Meta/Date/Timestamp.php', 'ACA\\WC\\Search\\ProductSubscription\\Options' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductSubscription/Options.php', 'ACA\\WC\\Search\\ProductSubscription\\Period' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductSubscription/Period.php', 'ACA\\WC\\Search\\ProductVariation\\Attribute' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductVariation/Attribute.php', 'ACA\\WC\\Search\\ProductVariation\\AttributeTaxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductVariation/AttributeTaxonomy.php', 'ACA\\WC\\Search\\ProductVariation\\Enabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductVariation/Enabled.php', 'ACA\\WC\\Search\\ProductVariation\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductVariation/Product.php', 'ACA\\WC\\Search\\ProductVariation\\ProductTaxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductVariation/ProductTaxonomy.php', 'ACA\\WC\\Search\\ProductVariation\\SKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ProductVariation/SKU.php', 'ACA\\WC\\Search\\Product\\BackordersAllowed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/BackordersAllowed.php', 'ACA\\WC\\Search\\Product\\Coupons' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Coupons.php', 'ACA\\WC\\Search\\Product\\Crosssells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Crosssells.php', 'ACA\\WC\\Search\\Product\\Featured' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Featured.php', 'ACA\\WC\\Search\\Product\\GroupedProducts' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/GroupedProducts.php', 'ACA\\WC\\Search\\Product\\LowOnStock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/LowOnStock.php', 'ACA\\WC\\Search\\Product\\OrderCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/OrderCount.php', 'ACA\\WC\\Search\\Product\\Rating' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Rating.php', 'ACA\\WC\\Search\\Product\\ReviewsEnabled' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/ReviewsEnabled.php', 'ACA\\WC\\Search\\Product\\Sale' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Sale.php', 'ACA\\WC\\Search\\Product\\SoldIndividually' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/SoldIndividually.php', 'ACA\\WC\\Search\\Product\\StockStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/StockStatus.php', 'ACA\\WC\\Search\\Product\\TaxClass' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/TaxClass.php', 'ACA\\WC\\Search\\Product\\TaxStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/TaxStatus.php', 'ACA\\WC\\Search\\Product\\Upsells' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Upsells.php', 'ACA\\WC\\Search\\Product\\Visibility' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/Product/Visibility.php', 'ACA\\WC\\Search\\ShopCoupon\\Categories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopCoupon/Categories.php', 'ACA\\WC\\Search\\ShopCoupon\\EmailRestriction' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopCoupon/EmailRestriction.php', 'ACA\\WC\\Search\\ShopCoupon\\FreeShipping' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopCoupon/FreeShipping.php', 'ACA\\WC\\Search\\ShopCoupon\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopCoupon/Products.php', 'ACA\\WC\\Search\\ShopCoupon\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopCoupon/Type.php', 'ACA\\WC\\Search\\ShopOrder\\AddressFactory' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/AddressFactory.php', 'ACA\\WC\\Search\\ShopOrder\\Address\\Country' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Address/Country.php', 'ACA\\WC\\Search\\ShopOrder\\CouponsUsed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/CouponsUsed.php', 'ACA\\WC\\Search\\ShopOrder\\Currency' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Currency.php', 'ACA\\WC\\Search\\ShopOrder\\Customer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Customer.php', 'ACA\\WC\\Search\\ShopOrder\\Customer\\Meta' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Customer/Meta.php', 'ACA\\WC\\Search\\ShopOrder\\Customer\\Meta\\Serialized' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Customer/Meta/Serialized.php', 'ACA\\WC\\Search\\ShopOrder\\Customer\\Meta\\Serialized\\Role' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Customer/Meta/Serialized/Role.php', 'ACA\\WC\\Search\\ShopOrder\\IsCustomer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/IsCustomer.php', 'ACA\\WC\\Search\\ShopOrder\\NotesPrivate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/NotesPrivate.php', 'ACA\\WC\\Search\\ShopOrder\\NotesSystem' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/NotesSystem.php', 'ACA\\WC\\Search\\ShopOrder\\NotesToCustomer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/NotesToCustomer.php', 'ACA\\WC\\Search\\ShopOrder\\OrderWeight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/OrderWeight.php', 'ACA\\WC\\Search\\ShopOrder\\PaymentMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/PaymentMethod.php', 'ACA\\WC\\Search\\ShopOrder\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Product.php', 'ACA\\WC\\Search\\ShopOrder\\ProductCategories' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/ProductCategories.php', 'ACA\\WC\\Search\\ShopOrder\\ProductCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/ProductCount.php', 'ACA\\WC\\Search\\ShopOrder\\ProductTags' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/ProductTags.php', 'ACA\\WC\\Search\\ShopOrder\\ProductTaxonomy' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/ProductTaxonomy.php', 'ACA\\WC\\Search\\ShopOrder\\Refunds' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Refunds.php', 'ACA\\WC\\Search\\ShopOrder\\ShippingMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/ShippingMethod.php', 'ACA\\WC\\Search\\ShopOrder\\ShippingMethodLabel' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/ShippingMethodLabel.php', 'ACA\\WC\\Search\\ShopOrder\\Total' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopOrder/Total.php', 'ACA\\WC\\Search\\ShopSubscription\\AutoRenewal' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/ShopSubscription/AutoRenewal.php', 'ACA\\WC\\Search\\UserSubscription\\ActiveSubscriber' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/UserSubscription/ActiveSubscriber.php', 'ACA\\WC\\Search\\UserSubscription\\InactiveSubscriber' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/UserSubscription/InactiveSubscriber.php', 'ACA\\WC\\Search\\User\\Country' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/User/Country.php', 'ACA\\WC\\Search\\User\\OrderCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/User/OrderCount.php', 'ACA\\WC\\Search\\User\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/User/Products.php', 'ACA\\WC\\Search\\User\\TotalSales' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Search/User/TotalSales.php', 'ACA\\WC\\Service\\ColumnGroups' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/ColumnGroups.php', 'ACA\\WC\\Service\\Columns' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/Columns.php', 'ACA\\WC\\Service\\Editing' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/Editing.php', 'ACA\\WC\\Service\\ListScreenGroups' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/ListScreenGroups.php', 'ACA\\WC\\Service\\ListScreens' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/ListScreens.php', 'ACA\\WC\\Service\\QuickAdd' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/QuickAdd.php', 'ACA\\WC\\Service\\Table' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Service/Table.php', 'ACA\\WC\\Settings\\Address' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/Address.php', 'ACA\\WC\\Settings\\Address\\Billing' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/Address/Billing.php', 'ACA\\WC\\Settings\\DateType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/DateType.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterOrderCustomer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterOrderCustomer.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterProductCategory' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterProductCategory.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterProductStockStatus' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterProductStockStatus.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterProductType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterProductType.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterSubscriptionCustomer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterSubscriptionCustomer.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterSubscriptionPayment' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterSubscriptionPayment.php', 'ACA\\WC\\Settings\\HideOnScreen\\FilterSubscriptionProduct' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/HideOnScreen/FilterSubscriptionProduct.php', 'ACA\\WC\\Settings\\OrderStatuses' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/OrderStatuses.php', 'ACA\\WC\\Settings\\ProductVariation\\Attribute' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ProductVariation/Attribute.php', 'ACA\\WC\\Settings\\ProductVariation\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ProductVariation/Variation.php', 'ACA\\WC\\Settings\\Product\\Attributes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/Product/Attributes.php', 'ACA\\WC\\Settings\\Product\\Period' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/Product/Period.php', 'ACA\\WC\\Settings\\Product\\UseIcon' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/Product/UseIcon.php', 'ACA\\WC\\Settings\\ShopCoupon\\Limit' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopCoupon/Limit.php', 'ACA\\WC\\Settings\\ShopOrder\\Customer' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/Customer.php', 'ACA\\WC\\Settings\\ShopOrder\\IP' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/IP.php', 'ACA\\WC\\Settings\\ShopOrder\\NoteType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/NoteType.php', 'ACA\\WC\\Settings\\ShopOrder\\Notes' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/Notes.php', 'ACA\\WC\\Settings\\ShopOrder\\OrderDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/OrderDate.php', 'ACA\\WC\\Settings\\ShopOrder\\Product' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/Product.php', 'ACA\\WC\\Settings\\ShopOrder\\ProductMeta' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/ProductMeta.php', 'ACA\\WC\\Settings\\ShopOrder\\ShippingMethodType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/ShippingMethodType.php', 'ACA\\WC\\Settings\\ShopOrder\\Totals' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopOrder/Totals.php', 'ACA\\WC\\Settings\\ShopSubscription\\SubscriptionDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/ShopSubscription/SubscriptionDate.php', 'ACA\\WC\\Settings\\User\\AddressType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/User/AddressType.php', 'ACA\\WC\\Settings\\User\\Country' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/User/Country.php', 'ACA\\WC\\Settings\\User\\Meta' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/User/Meta.php', 'ACA\\WC\\Settings\\User\\Order' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/User/Order.php', 'ACA\\WC\\Settings\\User\\Products' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/User/Products.php', 'ACA\\WC\\Settings\\User\\Ratings' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Settings/User/Ratings.php', 'ACA\\WC\\Sorting\\Comment\\Rating' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Comment/Rating.php', 'ACA\\WC\\Sorting\\ProductVariation\\SKU' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ProductVariation/SKU.php', 'ACA\\WC\\Sorting\\ProductVariation\\SkuNaturalSort' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ProductVariation/SkuNaturalSort.php', 'ACA\\WC\\Sorting\\ProductVariation\\Stock' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ProductVariation/Stock.php', 'ACA\\WC\\Sorting\\Product\\BackordersAllowed' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Product/BackordersAllowed.php', 'ACA\\WC\\Sorting\\Product\\Customers' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Product/Customers.php', 'ACA\\WC\\Sorting\\Product\\Dimensions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Product/Dimensions.php', 'ACA\\WC\\Sorting\\Product\\Featured' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Product/Featured.php', 'ACA\\WC\\Sorting\\Product\\ProductType' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Product/ProductType.php', 'ACA\\WC\\Sorting\\Product\\Variation' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/Product/Variation.php', 'ACA\\WC\\Sorting\\ShopCoupon\\ExpiryDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ShopCoupon/ExpiryDate.php', 'ACA\\WC\\Sorting\\ShopCoupon\\Type' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ShopCoupon/Type.php', 'ACA\\WC\\Sorting\\ShopOrder\\ItemCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ShopOrder/ItemCount.php', 'ACA\\WC\\Sorting\\ShopOrder\\OrderWeight' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ShopOrder/OrderWeight.php', 'ACA\\WC\\Sorting\\ShopOrder\\ShippingMethod' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ShopOrder/ShippingMethod.php', 'ACA\\WC\\Sorting\\ShopOrder\\ShippingMethodLabel' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/ShopOrder/ShippingMethodLabel.php', 'ACA\\WC\\Sorting\\User\\OrderCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/OrderCount.php', 'ACA\\WC\\Sorting\\User\\OrderDate' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/OrderDate.php', 'ACA\\WC\\Sorting\\User\\OrderDate\\FirstOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/OrderDate/FirstOrder.php', 'ACA\\WC\\Sorting\\User\\OrderDate\\LastOrder' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/OrderDate/LastOrder.php', 'ACA\\WC\\Sorting\\User\\ProductCount' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/ProductCount.php', 'ACA\\WC\\Sorting\\User\\ProductCountUnique' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/ProductCountUnique.php', 'ACA\\WC\\Sorting\\User\\Ratings' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/Ratings.php', 'ACA\\WC\\Sorting\\User\\TotalSales' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Sorting/User/TotalSales.php', 'ACA\\WC\\Subscriptions' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Subscriptions.php', 'ACA\\WC\\TableScreen' => __DIR__ . '/../..' . '/addons/woocommerce/classes/TableScreen.php', 'ACA\\WC\\TableScreen\\HideProductFilter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/TableScreen/HideProductFilter.php', 'ACA\\WC\\TableScreen\\HideSubscriptionsFilter' => __DIR__ . '/../..' . '/addons/woocommerce/classes/TableScreen/HideSubscriptionsFilter.php', 'ACA\\WC\\Type\\ProductAttribute' => __DIR__ . '/../..' . '/addons/woocommerce/classes/Type/ProductAttribute.php', 'ACA\\WC\\WooCommerce' => __DIR__ . '/../..' . '/addons/woocommerce/classes/WooCommerce.php', 'ACA\\YoastSeo\\Asset\\Script\\Admin' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Asset/Script/Admin.php', 'ACA\\YoastSeo\\Column\\Post\\FacebookDescription' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/FacebookDescription.php', 'ACA\\YoastSeo\\Column\\Post\\FacebookImage' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/FacebookImage.php', 'ACA\\YoastSeo\\Column\\Post\\FacebookTitle' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/FacebookTitle.php', 'ACA\\YoastSeo\\Column\\Post\\FocusKW' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/FocusKW.php', 'ACA\\YoastSeo\\Column\\Post\\FocusKeywordCount' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/FocusKeywordCount.php', 'ACA\\YoastSeo\\Column\\Post\\IsIndexed' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/IsIndexed.php', 'ACA\\YoastSeo\\Column\\Post\\Linked' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/Linked.php', 'ACA\\YoastSeo\\Column\\Post\\Links' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/Links.php', 'ACA\\YoastSeo\\Column\\Post\\MetaDesc' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/MetaDesc.php', 'ACA\\YoastSeo\\Column\\Post\\PrimaryTaxonomy' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/PrimaryTaxonomy.php', 'ACA\\YoastSeo\\Column\\Post\\Readability' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/Readability.php', 'ACA\\YoastSeo\\Column\\Post\\Score' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/Score.php', 'ACA\\YoastSeo\\Column\\Post\\Title' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/Title.php', 'ACA\\YoastSeo\\Column\\Post\\TwitterDescription' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/TwitterDescription.php', 'ACA\\YoastSeo\\Column\\Post\\TwitterImage' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/TwitterImage.php', 'ACA\\YoastSeo\\Column\\Post\\TwitterTitle' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Post/TwitterTitle.php', 'ACA\\YoastSeo\\Column\\Taxonomy\\CanonicalUrl' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Taxonomy/CanonicalUrl.php', 'ACA\\YoastSeo\\Column\\Taxonomy\\FocusKeyword' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Taxonomy/FocusKeyword.php', 'ACA\\YoastSeo\\Column\\Taxonomy\\IncludeInSitemap' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Taxonomy/IncludeInSitemap.php', 'ACA\\YoastSeo\\Column\\Taxonomy\\MetaDesc' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Taxonomy/MetaDesc.php', 'ACA\\YoastSeo\\Column\\Taxonomy\\MetaTitle' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Taxonomy/MetaTitle.php', 'ACA\\YoastSeo\\Column\\Taxonomy\\NoIndex' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/Taxonomy/NoIndex.php', 'ACA\\YoastSeo\\Column\\TermMeta' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/TermMeta.php', 'ACA\\YoastSeo\\Column\\User\\AuthorPageMetaDesc' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/User/AuthorPageMetaDesc.php', 'ACA\\YoastSeo\\Column\\User\\AuthorPageTitle' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/User/AuthorPageTitle.php', 'ACA\\YoastSeo\\Column\\User\\DisableReadabilityAnalysis' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/User/DisableReadabilityAnalysis.php', 'ACA\\YoastSeo\\Column\\User\\DisableSeoAnalysis' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/User/DisableSeoAnalysis.php', 'ACA\\YoastSeo\\Column\\User\\NoIndexAuthor' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Column/User/NoIndexAuthor.php', 'ACA\\YoastSeo\\Editing\\Service\\Post\\IsIndexed' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Editing/Service/Post/IsIndexed.php', 'ACA\\YoastSeo\\Editing\\Service\\Post\\PrimaryTaxonomy' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Editing/Service/Post/PrimaryTaxonomy.php', 'ACA\\YoastSeo\\Editing\\Service\\Taxonomy\\SeoMeta' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Editing/Service/Taxonomy/SeoMeta.php', 'ACA\\YoastSeo\\Editing\\Service\\User\\ToggleOn' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Editing/Service/User/ToggleOn.php', 'ACA\\YoastSeo\\Editing\\Storage\\Post\\SocialImage' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Editing/Storage/Post/SocialImage.php', 'ACA\\YoastSeo\\Export\\Post\\Title' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Export/Post/Title.php', 'ACA\\YoastSeo\\Filtering\\Post\\PrimaryTaxonomy' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Filtering/Post/PrimaryTaxonomy.php', 'ACA\\YoastSeo\\Search\\Post\\IsIndexed' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Search/Post/IsIndexed.php', 'ACA\\YoastSeo\\Service\\Admin' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Service/Admin.php', 'ACA\\YoastSeo\\Service\\ColumnGroups' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Service/ColumnGroups.php', 'ACA\\YoastSeo\\Service\\Columns' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Service/Columns.php', 'ACA\\YoastSeo\\Service\\HideFilters' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Service/HideFilters.php', 'ACA\\YoastSeo\\Service\\Table' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Service/Table.php', 'ACA\\YoastSeo\\Setting\\PrimaryTaxonomy' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Setting/PrimaryTaxonomy.php', 'ACA\\YoastSeo\\Settings\\ListScreen\\HideOnScreen\\FilterReadabilityScore' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Settings/ListScreen/HideOnScreen/FilterReadabilityScore.php', 'ACA\\YoastSeo\\Settings\\ListScreen\\HideOnScreen\\FilterSeoScores' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/Settings/ListScreen/HideOnScreen/FilterSeoScores.php', 'ACA\\YoastSeo\\YoastSeo' => __DIR__ . '/../..' . '/addons/yoast-seo/classes/YoastSeo.php', 'ACP\\API' => __DIR__ . '/../..' . '/classes/API.php', 'ACP\\API\\Request' => __DIR__ . '/../..' . '/classes/API/Request.php', 'ACP\\API\\Request\\Activate' => __DIR__ . '/../..' . '/classes/API/Request/Activate.php', 'ACP\\API\\Request\\Deactivate' => __DIR__ . '/../..' . '/classes/API/Request/Deactivate.php', 'ACP\\API\\Request\\DownloadInformation' => __DIR__ . '/../..' . '/classes/API/Request/DownloadInformation.php', 'ACP\\API\\Request\\ProductInformation' => __DIR__ . '/../..' . '/classes/API/Request/ProductInformation.php', 'ACP\\API\\Request\\ProductsUpdate' => __DIR__ . '/../..' . '/classes/API/Request/ProductsUpdate.php', 'ACP\\API\\Request\\SubscriptionDetails' => __DIR__ . '/../..' . '/classes/API/Request/SubscriptionDetails.php', 'ACP\\API\\Response' => __DIR__ . '/../..' . '/classes/API/Response.php', 'ACP\\Access\\ActivationKeyStorage' => __DIR__ . '/../..' . '/classes/Access/ActivationKeyStorage.php', 'ACP\\Access\\ActivationStorage' => __DIR__ . '/../..' . '/classes/Access/ActivationStorage.php', 'ACP\\Access\\ActivationUpdater' => __DIR__ . '/../..' . '/classes/Access/ActivationUpdater.php', 'ACP\\Access\\PermissionChecker' => __DIR__ . '/../..' . '/classes/Access/PermissionChecker.php', 'ACP\\Access\\Permissions' => __DIR__ . '/../..' . '/classes/Access/Permissions.php', 'ACP\\Access\\PermissionsStorage' => __DIR__ . '/../..' . '/classes/Access/PermissionsStorage.php', 'ACP\\Access\\Platform' => __DIR__ . '/../..' . '/classes/Access/Platform.php', 'ACP\\Access\\Rule' => __DIR__ . '/../..' . '/classes/Access/Rule.php', 'ACP\\Access\\Rule\\ApiActivateResponse' => __DIR__ . '/../..' . '/classes/Access/Rule/ApiActivateResponse.php', 'ACP\\Access\\Rule\\ApiDeactivateResponse' => __DIR__ . '/../..' . '/classes/Access/Rule/ApiDeactivateResponse.php', 'ACP\\Access\\Rule\\ApiDetailsResponse' => __DIR__ . '/../..' . '/classes/Access/Rule/ApiDetailsResponse.php', 'ACP\\Access\\Rule\\LocalServer' => __DIR__ . '/../..' . '/classes/Access/Rule/LocalServer.php', 'ACP\\ActivationTokenFactory' => __DIR__ . '/../..' . '/classes/ActivationTokenFactory.php', 'ACP\\AdminColumnsPro' => __DIR__ . '/../..' . '/classes/AdminColumnsPro.php', 'ACP\\Admin\\Feedback' => __DIR__ . '/../..' . '/classes/Admin/Feedback.php', 'ACP\\Admin\\MenuFactory' => __DIR__ . '/../..' . '/classes/Admin/MenuFactory.php', 'ACP\\Admin\\MenuNetworkFactory' => __DIR__ . '/../..' . '/classes/Admin/MenuNetworkFactory.php', 'ACP\\Admin\\NetworkPageFactory\\Columns' => __DIR__ . '/../..' . '/classes/Admin/NetworkPageFactory/Columns.php', 'ACP\\Admin\\NetworkPageFactory\\Tools' => __DIR__ . '/../..' . '/classes/Admin/NetworkPageFactory/Tools.php', 'ACP\\Admin\\PageFactory\\Addons' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Addons.php', 'ACP\\Admin\\PageFactory\\Columns' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Columns.php', 'ACP\\Admin\\PageFactory\\License' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/License.php', 'ACP\\Admin\\PageFactory\\Settings' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Settings.php', 'ACP\\Admin\\PageFactory\\Tools' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Tools.php', 'ACP\\Admin\\Page\\Addons' => __DIR__ . '/../..' . '/classes/Admin/Page/Addons.php', 'ACP\\Admin\\Page\\License' => __DIR__ . '/../..' . '/classes/Admin/Page/License.php', 'ACP\\Admin\\Page\\Tools' => __DIR__ . '/../..' . '/classes/Admin/Page/Tools.php', 'ACP\\Admin\\Scripts' => __DIR__ . '/../..' . '/classes/Admin/Scripts.php', 'ACP\\Admin\\Settings' => __DIR__ . '/../..' . '/classes/Admin/Settings.php', 'ACP\\ApplyFilter\\CustomField\\StoredDateFormat' => __DIR__ . '/../..' . '/classes/ApplyFilter/CustomField/StoredDateFormat.php', 'ACP\\Asset\\Script\\LicenseCheck' => __DIR__ . '/../..' . '/classes/Asset/Script/LicenseCheck.php', 'ACP\\Asset\\Script\\LicenseManager' => __DIR__ . '/../..' . '/classes/Asset/Script/LicenseManager.php', 'ACP\\Asset\\Script\\PluginUpdatesCheck' => __DIR__ . '/../..' . '/classes/Asset/Script/PluginUpdatesCheck.php', 'ACP\\Asset\\Script\\Table' => __DIR__ . '/../..' . '/classes/Asset/Script/Table.php', 'ACP\\Bookmark\\Addon' => __DIR__ . '/../..' . '/classes/Bookmark/Addon.php', 'ACP\\Bookmark\\Controller\\RequestSetter' => __DIR__ . '/../..' . '/classes/Bookmark/Controller/RequestSetter.php', 'ACP\\Bookmark\\Controller\\Segment' => __DIR__ . '/../..' . '/classes/Bookmark/Controller/Segment.php', 'ACP\\Bookmark\\Entity\\Segment' => __DIR__ . '/../..' . '/classes/Bookmark/Entity/Segment.php', 'ACP\\Bookmark\\SegmentRepository' => __DIR__ . '/../..' . '/classes/Bookmark/SegmentRepository.php', 'ACP\\Bookmark\\Setting\\PreferredSegment' => __DIR__ . '/../..' . '/classes/Bookmark/Setting/PreferredSegment.php', 'ACP\\Bookmark\\Type\\SegmentId' => __DIR__ . '/../..' . '/classes/Bookmark/Type/SegmentId.php', 'ACP\\Capability\\Capability' => __DIR__ . '/../..' . '/classes/Capability/Capability.php', 'ACP\\Check\\Activation' => __DIR__ . '/../..' . '/classes/Check/Activation.php', 'ACP\\Check\\Beta' => __DIR__ . '/../..' . '/classes/Check/Beta.php', 'ACP\\Check\\Expired' => __DIR__ . '/../..' . '/classes/Check/Expired.php', 'ACP\\Check\\LockedSettings' => __DIR__ . '/../..' . '/classes/Check/LockedSettings.php', 'ACP\\Check\\Renewal' => __DIR__ . '/../..' . '/classes/Check/Renewal.php', 'ACP\\Column\\Actions' => __DIR__ . '/../..' . '/classes/Column/Actions.php', 'ACP\\Column\\Comment\\Agent' => __DIR__ . '/../..' . '/classes/Column/Comment/Agent.php', 'ACP\\Column\\Comment\\Approved' => __DIR__ . '/../..' . '/classes/Column/Comment/Approved.php', 'ACP\\Column\\Comment\\Author' => __DIR__ . '/../..' . '/classes/Column/Comment/Author.php', 'ACP\\Column\\Comment\\AuthorAvatar' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorAvatar.php', 'ACP\\Column\\Comment\\AuthorEmail' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorEmail.php', 'ACP\\Column\\Comment\\AuthorIP' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorIP.php', 'ACP\\Column\\Comment\\AuthorName' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorName.php', 'ACP\\Column\\Comment\\AuthorUrl' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorUrl.php', 'ACP\\Column\\Comment\\Comment' => __DIR__ . '/../..' . '/classes/Column/Comment/Comment.php', 'ACP\\Column\\Comment\\Date' => __DIR__ . '/../..' . '/classes/Column/Comment/Date.php', 'ACP\\Column\\Comment\\DateGmt' => __DIR__ . '/../..' . '/classes/Column/Comment/DateGmt.php', 'ACP\\Column\\Comment\\Excerpt' => __DIR__ . '/../..' . '/classes/Column/Comment/Excerpt.php', 'ACP\\Column\\Comment\\HasReplies' => __DIR__ . '/../..' . '/classes/Column/Comment/HasReplies.php', 'ACP\\Column\\Comment\\ID' => __DIR__ . '/../..' . '/classes/Column/Comment/ID.php', 'ACP\\Column\\Comment\\IsReply' => __DIR__ . '/../..' . '/classes/Column/Comment/IsReply.php', 'ACP\\Column\\Comment\\Post' => __DIR__ . '/../..' . '/classes/Column/Comment/Post.php', 'ACP\\Column\\Comment\\PostType' => __DIR__ . '/../..' . '/classes/Column/Comment/PostType.php', 'ACP\\Column\\Comment\\ReplyTo' => __DIR__ . '/../..' . '/classes/Column/Comment/ReplyTo.php', 'ACP\\Column\\Comment\\Response' => __DIR__ . '/../..' . '/classes/Column/Comment/Response.php', 'ACP\\Column\\Comment\\Status' => __DIR__ . '/../..' . '/classes/Column/Comment/Status.php', 'ACP\\Column\\Comment\\Type' => __DIR__ . '/../..' . '/classes/Column/Comment/Type.php', 'ACP\\Column\\Comment\\User' => __DIR__ . '/../..' . '/classes/Column/Comment/User.php', 'ACP\\Column\\Comment\\WordCount' => __DIR__ . '/../..' . '/classes/Column/Comment/WordCount.php', 'ACP\\Column\\CustomField' => __DIR__ . '/../..' . '/classes/Column/CustomField.php', 'ACP\\Column\\CustomField\\ConditionalFormatableFactory' => __DIR__ . '/../..' . '/classes/Column/CustomField/ConditionalFormatableFactory.php', 'ACP\\Column\\CustomField\\EditingModelFactory' => __DIR__ . '/../..' . '/classes/Column/CustomField/EditingModelFactory.php', 'ACP\\Column\\CustomField\\ExportModelFactory' => __DIR__ . '/../..' . '/classes/Column/CustomField/ExportModelFactory.php', 'ACP\\Column\\CustomField\\FilteringModelFactory' => __DIR__ . '/../..' . '/classes/Column/CustomField/FilteringModelFactory.php', 'ACP\\Column\\CustomField\\SearchComparisonFactory' => __DIR__ . '/../..' . '/classes/Column/CustomField/SearchComparisonFactory.php', 'ACP\\Column\\Media\\Album' => __DIR__ . '/../..' . '/classes/Column/Media/Album.php', 'ACP\\Column\\Media\\AlternateText' => __DIR__ . '/../..' . '/classes/Column/Media/AlternateText.php', 'ACP\\Column\\Media\\Artist' => __DIR__ . '/../..' . '/classes/Column/Media/Artist.php', 'ACP\\Column\\Media\\Author' => __DIR__ . '/../..' . '/classes/Column/Media/Author.php', 'ACP\\Column\\Media\\AuthorName' => __DIR__ . '/../..' . '/classes/Column/Media/AuthorName.php', 'ACP\\Column\\Media\\AvailableSizes' => __DIR__ . '/../..' . '/classes/Column/Media/AvailableSizes.php', 'ACP\\Column\\Media\\Caption' => __DIR__ . '/../..' . '/classes/Column/Media/Caption.php', 'ACP\\Column\\Media\\Comments' => __DIR__ . '/../..' . '/classes/Column/Media/Comments.php', 'ACP\\Column\\Media\\Date' => __DIR__ . '/../..' . '/classes/Column/Media/Date.php', 'ACP\\Column\\Media\\Description' => __DIR__ . '/../..' . '/classes/Column/Media/Description.php', 'ACP\\Column\\Media\\Dimensions' => __DIR__ . '/../..' . '/classes/Column/Media/Dimensions.php', 'ACP\\Column\\Media\\ExifData' => __DIR__ . '/../..' . '/classes/Column/Media/ExifData.php', 'ACP\\Column\\Media\\FileMetaAudio' => __DIR__ . '/../..' . '/classes/Column/Media/FileMetaAudio.php', 'ACP\\Column\\Media\\FileMetaVideo' => __DIR__ . '/../..' . '/classes/Column/Media/FileMetaVideo.php', 'ACP\\Column\\Media\\FileName' => __DIR__ . '/../..' . '/classes/Column/Media/FileName.php', 'ACP\\Column\\Media\\FileSize' => __DIR__ . '/../..' . '/classes/Column/Media/FileSize.php', 'ACP\\Column\\Media\\Height' => __DIR__ . '/../..' . '/classes/Column/Media/Height.php', 'ACP\\Column\\Media\\ID' => __DIR__ . '/../..' . '/classes/Column/Media/ID.php', 'ACP\\Column\\Media\\MediaParent' => __DIR__ . '/../..' . '/classes/Column/Media/MediaParent.php', 'ACP\\Column\\Media\\Menu' => __DIR__ . '/../..' . '/classes/Column/Media/Menu.php', 'ACP\\Column\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Column/Media/MimeType.php', 'ACP\\Column\\Media\\Permalink' => __DIR__ . '/../..' . '/classes/Column/Media/Permalink.php', 'ACP\\Column\\Media\\PostType' => __DIR__ . '/../..' . '/classes/Column/Media/PostType.php', 'ACP\\Column\\Media\\Taxonomy' => __DIR__ . '/../..' . '/classes/Column/Media/Taxonomy.php', 'ACP\\Column\\Media\\Title' => __DIR__ . '/../..' . '/classes/Column/Media/Title.php', 'ACP\\Column\\Media\\UsedAsFeaturedImage' => __DIR__ . '/../..' . '/classes/Column/Media/UsedAsFeaturedImage.php', 'ACP\\Column\\Media\\Width' => __DIR__ . '/../..' . '/classes/Column/Media/Width.php', 'ACP\\Column\\Menu' => __DIR__ . '/../..' . '/classes/Column/Menu.php', 'ACP\\Column\\Meta' => __DIR__ . '/../..' . '/classes/Column/Meta.php', 'ACP\\Column\\NativeTaxonomy' => __DIR__ . '/../..' . '/classes/Column/NativeTaxonomy.php', 'ACP\\Column\\NetworkSite\\BlogID' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/BlogID.php', 'ACP\\Column\\NetworkSite\\CommentCount' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/CommentCount.php', 'ACP\\Column\\NetworkSite\\Domain' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Domain.php', 'ACP\\Column\\NetworkSite\\LastUpdated' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/LastUpdated.php', 'ACP\\Column\\NetworkSite\\Name' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Name.php', 'ACP\\Column\\NetworkSite\\Option' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Option.php', 'ACP\\Column\\NetworkSite\\Options' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Options.php', 'ACP\\Column\\NetworkSite\\Path' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Path.php', 'ACP\\Column\\NetworkSite\\Plugins' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Plugins.php', 'ACP\\Column\\NetworkSite\\PostCount' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/PostCount.php', 'ACP\\Column\\NetworkSite\\Property' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Property.php', 'ACP\\Column\\NetworkSite\\Registered' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Registered.php', 'ACP\\Column\\NetworkSite\\SiteID' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/SiteID.php', 'ACP\\Column\\NetworkSite\\Status' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Status.php', 'ACP\\Column\\NetworkSite\\Theme' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/Theme.php', 'ACP\\Column\\NetworkSite\\UploadSpace' => __DIR__ . '/../..' . '/classes/Column/NetworkSite/UploadSpace.php', 'ACP\\Column\\Post\\Ancestors' => __DIR__ . '/../..' . '/classes/Column/Post/Ancestors.php', 'ACP\\Column\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Column/Post/Attachment.php', 'ACP\\Column\\Post\\Author' => __DIR__ . '/../..' . '/classes/Column/Post/Author.php', 'ACP\\Column\\Post\\AuthorName' => __DIR__ . '/../..' . '/classes/Column/Post/AuthorName.php', 'ACP\\Column\\Post\\BeforeMoreTag' => __DIR__ . '/../..' . '/classes/Column/Post/BeforeMoreTag.php', 'ACP\\Column\\Post\\Categories' => __DIR__ . '/../..' . '/classes/Column/Post/Categories.php', 'ACP\\Column\\Post\\ChildPages' => __DIR__ . '/../..' . '/classes/Column/Post/ChildPages.php', 'ACP\\Column\\Post\\CommentCount' => __DIR__ . '/../..' . '/classes/Column/Post/CommentCount.php', 'ACP\\Column\\Post\\CommentStatus' => __DIR__ . '/../..' . '/classes/Column/Post/CommentStatus.php', 'ACP\\Column\\Post\\Comments' => __DIR__ . '/../..' . '/classes/Column/Post/Comments.php', 'ACP\\Column\\Post\\Content' => __DIR__ . '/../..' . '/classes/Column/Post/Content.php', 'ACP\\Column\\Post\\Date' => __DIR__ . '/../..' . '/classes/Column/Post/Date.php', 'ACP\\Column\\Post\\DatePublished' => __DIR__ . '/../..' . '/classes/Column/Post/DatePublished.php', 'ACP\\Column\\Post\\Depth' => __DIR__ . '/../..' . '/classes/Column/Post/Depth.php', 'ACP\\Column\\Post\\EstimateReadingTime' => __DIR__ . '/../..' . '/classes/Column/Post/EstimateReadingTime.php', 'ACP\\Column\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Column/Post/Excerpt.php', 'ACP\\Column\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Column/Post/FeaturedImage.php', 'ACP\\Column\\Post\\Formats' => __DIR__ . '/../..' . '/classes/Column/Post/Formats.php', 'ACP\\Column\\Post\\GutenbergBlocks' => __DIR__ . '/../..' . '/classes/Column/Post/GutenbergBlocks.php', 'ACP\\Column\\Post\\HasTerm' => __DIR__ . '/../..' . '/classes/Column/Post/HasTerm.php', 'ACP\\Column\\Post\\ID' => __DIR__ . '/../..' . '/classes/Column/Post/ID.php', 'ACP\\Column\\Post\\Images' => __DIR__ . '/../..' . '/classes/Column/Post/Images.php', 'ACP\\Column\\Post\\LastModifiedAuthor' => __DIR__ . '/../..' . '/classes/Column/Post/LastModifiedAuthor.php', 'ACP\\Column\\Post\\LatestComment' => __DIR__ . '/../..' . '/classes/Column/Post/LatestComment.php', 'ACP\\Column\\Post\\LinkCount' => __DIR__ . '/../..' . '/classes/Column/Post/LinkCount.php', 'ACP\\Column\\Post\\Menu' => __DIR__ . '/../..' . '/classes/Column/Post/Menu.php', 'ACP\\Column\\Post\\Modified' => __DIR__ . '/../..' . '/classes/Column/Post/Modified.php', 'ACP\\Column\\Post\\Order' => __DIR__ . '/../..' . '/classes/Column/Post/Order.php', 'ACP\\Column\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Column/Post/PageTemplate.php', 'ACP\\Column\\Post\\PasswordProtected' => __DIR__ . '/../..' . '/classes/Column/Post/PasswordProtected.php', 'ACP\\Column\\Post\\Path' => __DIR__ . '/../..' . '/classes/Column/Post/Path.php', 'ACP\\Column\\Post\\Permalink' => __DIR__ . '/../..' . '/classes/Column/Post/Permalink.php', 'ACP\\Column\\Post\\PingStatus' => __DIR__ . '/../..' . '/classes/Column/Post/PingStatus.php', 'ACP\\Column\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Column/Post/PostParent.php', 'ACP\\Column\\Post\\PostType' => __DIR__ . '/../..' . '/classes/Column/Post/PostType.php', 'ACP\\Column\\Post\\PostVisibility' => __DIR__ . '/../..' . '/classes/Column/Post/PostVisibility.php', 'ACP\\Column\\Post\\Revisions' => __DIR__ . '/../..' . '/classes/Column/Post/Revisions.php', 'ACP\\Column\\Post\\Shortcode' => __DIR__ . '/../..' . '/classes/Column/Post/Shortcode.php', 'ACP\\Column\\Post\\Shortcodes' => __DIR__ . '/../..' . '/classes/Column/Post/Shortcodes.php', 'ACP\\Column\\Post\\Slug' => __DIR__ . '/../..' . '/classes/Column/Post/Slug.php', 'ACP\\Column\\Post\\Status' => __DIR__ . '/../..' . '/classes/Column/Post/Status.php', 'ACP\\Column\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Column/Post/Sticky.php', 'ACP\\Column\\Post\\Tags' => __DIR__ . '/../..' . '/classes/Column/Post/Tags.php', 'ACP\\Column\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Column/Post/Taxonomy.php', 'ACP\\Column\\Post\\Title' => __DIR__ . '/../..' . '/classes/Column/Post/Title.php', 'ACP\\Column\\Post\\TitleRaw' => __DIR__ . '/../..' . '/classes/Column/Post/TitleRaw.php', 'ACP\\Column\\Post\\WordCount' => __DIR__ . '/../..' . '/classes/Column/Post/WordCount.php', 'ACP\\Column\\Taxonomy\\Count' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Count.php', 'ACP\\Column\\Taxonomy\\CountForPostType' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/CountForPostType.php', 'ACP\\Column\\Taxonomy\\CustomDescription' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/CustomDescription.php', 'ACP\\Column\\Taxonomy\\Description' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Description.php', 'ACP\\Column\\Taxonomy\\Excerpt' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Excerpt.php', 'ACP\\Column\\Taxonomy\\ID' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/ID.php', 'ACP\\Column\\Taxonomy\\Links' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Links.php', 'ACP\\Column\\Taxonomy\\Menu' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Menu.php', 'ACP\\Column\\Taxonomy\\Name' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Name.php', 'ACP\\Column\\Taxonomy\\Posts' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Posts.php', 'ACP\\Column\\Taxonomy\\Slug' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/Slug.php', 'ACP\\Column\\Taxonomy\\TaxonomyParent' => __DIR__ . '/../..' . '/classes/Column/Taxonomy/TaxonomyParent.php', 'ACP\\Column\\User\\CommentCount' => __DIR__ . '/../..' . '/classes/Column/User/CommentCount.php', 'ACP\\Column\\User\\Description' => __DIR__ . '/../..' . '/classes/Column/User/Description.php', 'ACP\\Column\\User\\DisplayName' => __DIR__ . '/../..' . '/classes/Column/User/DisplayName.php', 'ACP\\Column\\User\\Email' => __DIR__ . '/../..' . '/classes/Column/User/Email.php', 'ACP\\Column\\User\\FirstName' => __DIR__ . '/../..' . '/classes/Column/User/FirstName.php', 'ACP\\Column\\User\\FirstPost' => __DIR__ . '/../..' . '/classes/Column/User/FirstPost.php', 'ACP\\Column\\User\\FullName' => __DIR__ . '/../..' . '/classes/Column/User/FullName.php', 'ACP\\Column\\User\\Gravatar' => __DIR__ . '/../..' . '/classes/Column/User/Gravatar.php', 'ACP\\Column\\User\\ID' => __DIR__ . '/../..' . '/classes/Column/User/ID.php', 'ACP\\Column\\User\\Language' => __DIR__ . '/../..' . '/classes/Column/User/Language.php', 'ACP\\Column\\User\\LastName' => __DIR__ . '/../..' . '/classes/Column/User/LastName.php', 'ACP\\Column\\User\\LastPost' => __DIR__ . '/../..' . '/classes/Column/User/LastPost.php', 'ACP\\Column\\User\\Login' => __DIR__ . '/../..' . '/classes/Column/User/Login.php', 'ACP\\Column\\User\\Name' => __DIR__ . '/../..' . '/classes/Column/User/Name.php', 'ACP\\Column\\User\\Nicename' => __DIR__ . '/../..' . '/classes/Column/User/Nicename.php', 'ACP\\Column\\User\\Nickname' => __DIR__ . '/../..' . '/classes/Column/User/Nickname.php', 'ACP\\Column\\User\\PostCount' => __DIR__ . '/../..' . '/classes/Column/User/PostCount.php', 'ACP\\Column\\User\\Posts' => __DIR__ . '/../..' . '/classes/Column/User/Posts.php', 'ACP\\Column\\User\\Registered' => __DIR__ . '/../..' . '/classes/Column/User/Registered.php', 'ACP\\Column\\User\\RichEditing' => __DIR__ . '/../..' . '/classes/Column/User/RichEditing.php', 'ACP\\Column\\User\\Role' => __DIR__ . '/../..' . '/classes/Column/User/Role.php', 'ACP\\Column\\User\\Roles' => __DIR__ . '/../..' . '/classes/Column/User/Roles.php', 'ACP\\Column\\User\\ShowToolbar' => __DIR__ . '/../..' . '/classes/Column/User/ShowToolbar.php', 'ACP\\Column\\User\\Url' => __DIR__ . '/../..' . '/classes/Column/User/Url.php', 'ACP\\Column\\User\\UserPosts' => __DIR__ . '/../..' . '/classes/Column/User/UserPosts.php', 'ACP\\Column\\User\\Username' => __DIR__ . '/../..' . '/classes/Column/User/Username.php', 'ACP\\ConditionalFormat\\Addon' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Addon.php', 'ACP\\ConditionalFormat\\Asset\\Table' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Asset/Table.php', 'ACP\\ConditionalFormat\\ConditionalFormatTrait' => __DIR__ . '/../..' . '/classes/ConditionalFormat/ConditionalFormatTrait.php', 'ACP\\ConditionalFormat\\Entity\\Rule' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Entity/Rule.php', 'ACP\\ConditionalFormat\\FilteredHtmlFormatTrait' => __DIR__ . '/../..' . '/classes/ConditionalFormat/FilteredHtmlFormatTrait.php', 'ACP\\ConditionalFormat\\Formattable' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formattable.php', 'ACP\\ConditionalFormat\\FormattableConfig' => __DIR__ . '/../..' . '/classes/ConditionalFormat/FormattableConfig.php', 'ACP\\ConditionalFormat\\Formatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter.php', 'ACP\\ConditionalFormat\\Formatter\\BaseFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/BaseFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\DateFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/DateFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\DateFormatter\\FormatFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/DateFormatter/FormatFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\FilterHtmlFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/FilterHtmlFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\FloatFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/FloatFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\IntegerFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/IntegerFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\RawValueFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/RawValueFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\SanitizedFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/SanitizedFormatter.php', 'ACP\\ConditionalFormat\\Formatter\\StringFormatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Formatter/StringFormatter.php', 'ACP\\ConditionalFormat\\IntegerFormattableTrait' => __DIR__ . '/../..' . '/classes/ConditionalFormat/IntegerFormattableTrait.php', 'ACP\\ConditionalFormat\\Operators' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Operators.php', 'ACP\\ConditionalFormat\\RequestHandler\\SaveRules' => __DIR__ . '/../..' . '/classes/ConditionalFormat/RequestHandler/SaveRules.php', 'ACP\\ConditionalFormat\\RuleCollection' => __DIR__ . '/../..' . '/classes/ConditionalFormat/RuleCollection.php', 'ACP\\ConditionalFormat\\RulesRepository' => __DIR__ . '/../..' . '/classes/ConditionalFormat/RulesRepository.php', 'ACP\\ConditionalFormat\\RulesRepositoryFactory' => __DIR__ . '/../..' . '/classes/ConditionalFormat/RulesRepositoryFactory.php', 'ACP\\ConditionalFormat\\Service\\Assets' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Service/Assets.php', 'ACP\\ConditionalFormat\\Service\\Formatter' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Service/Formatter.php', 'ACP\\ConditionalFormat\\Service\\ListScreenSettings' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Service/ListScreenSettings.php', 'ACP\\ConditionalFormat\\Service\\Storage' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Service/Storage.php', 'ACP\\ConditionalFormat\\Settings\\ListScreen\\HideOnScreenFactory' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Settings/ListScreen/HideOnScreenFactory.php', 'ACP\\ConditionalFormat\\Type\\Format' => __DIR__ . '/../..' . '/classes/ConditionalFormat/Type/Format.php', 'ACP\\Controller' => __DIR__ . '/../..' . '/classes/Controller.php', 'ACP\\Editing\\Addon' => __DIR__ . '/../..' . '/classes/Editing/Addon.php', 'ACP\\Editing\\Ajax\\TableRows' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRows.php', 'ACP\\Editing\\Ajax\\TableRowsFactory' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRowsFactory.php', 'ACP\\Editing\\Ajax\\TableRows\\Comment' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRows/Comment.php', 'ACP\\Editing\\Ajax\\TableRows\\Media' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRows/Media.php', 'ACP\\Editing\\Ajax\\TableRows\\Post' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRows/Post.php', 'ACP\\Editing\\Ajax\\TableRows\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRows/Taxonomy.php', 'ACP\\Editing\\Ajax\\TableRows\\User' => __DIR__ . '/../..' . '/classes/Editing/Ajax/TableRows/User.php', 'ACP\\Editing\\ApplyFilter\\BulkEditActive' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/BulkEditActive.php', 'ACP\\Editing\\ApplyFilter\\EditValue' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/EditValue.php', 'ACP\\Editing\\ApplyFilter\\PostStatus' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/PostStatus.php', 'ACP\\Editing\\ApplyFilter\\ReassignUser' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/ReassignUser.php', 'ACP\\Editing\\ApplyFilter\\RowsPerIteration' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/RowsPerIteration.php', 'ACP\\Editing\\ApplyFilter\\SaveValue' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/SaveValue.php', 'ACP\\Editing\\ApplyFilter\\View' => __DIR__ . '/../..' . '/classes/Editing/ApplyFilter/View.php', 'ACP\\Editing\\Asset\\Script\\Table' => __DIR__ . '/../..' . '/classes/Editing/Asset/Script/Table.php', 'ACP\\Editing\\BulkDelete\\Deletable' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/Deletable.php', 'ACP\\Editing\\BulkDelete\\Deletable\\Comment' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/Deletable/Comment.php', 'ACP\\Editing\\BulkDelete\\Deletable\\Post' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/Deletable/Post.php', 'ACP\\Editing\\BulkDelete\\Deletable\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/Deletable/Taxonomy.php', 'ACP\\Editing\\BulkDelete\\Deletable\\User' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/Deletable/User.php', 'ACP\\Editing\\BulkDelete\\ListScreen' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/ListScreen.php', 'ACP\\Editing\\BulkDelete\\RequestHandler' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/RequestHandler.php', 'ACP\\Editing\\BulkDelete\\RequestHandler\\Comment' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/RequestHandler/Comment.php', 'ACP\\Editing\\BulkDelete\\RequestHandler\\Post' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/RequestHandler/Post.php', 'ACP\\Editing\\BulkDelete\\RequestHandler\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/RequestHandler/Taxonomy.php', 'ACP\\Editing\\BulkDelete\\RequestHandler\\User' => __DIR__ . '/../..' . '/classes/Editing/BulkDelete/RequestHandler/User.php', 'ACP\\Editing\\ColumnBulkSettingsSetter' => __DIR__ . '/../..' . '/classes/Editing/ColumnBulkSettingsSetter.php', 'ACP\\Editing\\ColumnInlineSettingsSetter' => __DIR__ . '/../..' . '/classes/Editing/ColumnInlineSettingsSetter.php', 'ACP\\Editing\\Editable' => __DIR__ . '/../..' . '/classes/Editing/Editable.php', 'ACP\\Editing\\EditableDataFactory' => __DIR__ . '/../..' . '/classes/Editing/EditableDataFactory.php', 'ACP\\Editing\\Factory\\BulkEditFactory' => __DIR__ . '/../..' . '/classes/Editing/Factory/BulkEditFactory.php', 'ACP\\Editing\\Factory\\InlineEditFactory' => __DIR__ . '/../..' . '/classes/Editing/Factory/InlineEditFactory.php', 'ACP\\Editing\\HideOnScreen\\BulkDelete' => __DIR__ . '/../..' . '/classes/Editing/HideOnScreen/BulkDelete.php', 'ACP\\Editing\\HideOnScreen\\BulkEdit' => __DIR__ . '/../..' . '/classes/Editing/HideOnScreen/BulkEdit.php', 'ACP\\Editing\\HideOnScreen\\InlineEdit' => __DIR__ . '/../..' . '/classes/Editing/HideOnScreen/InlineEdit.php', 'ACP\\Editing\\ListScreen' => __DIR__ . '/../..' . '/classes/Editing/ListScreen.php', 'ACP\\Editing\\Model' => __DIR__ . '/../..' . '/classes/Editing/Model.php', 'ACP\\Editing\\Model\\Comment' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment.php', 'ACP\\Editing\\Model\\Comment\\Approved' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/Approved.php', 'ACP\\Editing\\Model\\Comment\\AuthorEmail' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/AuthorEmail.php', 'ACP\\Editing\\Model\\Comment\\AuthorName' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/AuthorName.php', 'ACP\\Editing\\Model\\Comment\\AuthorURL' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/AuthorURL.php', 'ACP\\Editing\\Model\\Comment\\Comment' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/Comment.php', 'ACP\\Editing\\Model\\Comment\\Status' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/Status.php', 'ACP\\Editing\\Model\\Comment\\Type' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/Type.php', 'ACP\\Editing\\Model\\Comment\\User' => __DIR__ . '/../..' . '/classes/Editing/Model/Comment/User.php', 'ACP\\Editing\\Model\\Disabled' => __DIR__ . '/../..' . '/classes/Editing/Model/Disabled.php', 'ACP\\Editing\\Model\\Media\\AlternateText' => __DIR__ . '/../..' . '/classes/Editing/Model/Media/AlternateText.php', 'ACP\\Editing\\Model\\Media\\Caption' => __DIR__ . '/../..' . '/classes/Editing/Model/Media/Caption.php', 'ACP\\Editing\\Model\\Media\\Date' => __DIR__ . '/../..' . '/classes/Editing/Model/Media/Date.php', 'ACP\\Editing\\Model\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Editing/Model/Media/MimeType.php', 'ACP\\Editing\\Model\\Media\\Title' => __DIR__ . '/../..' . '/classes/Editing/Model/Media/Title.php', 'ACP\\Editing\\Model\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Model/Menu.php', 'ACP\\Editing\\Model\\Meta' => __DIR__ . '/../..' . '/classes/Editing/Model/Meta.php', 'ACP\\Editing\\Model\\Post' => __DIR__ . '/../..' . '/classes/Editing/Model/Post.php', 'ACP\\Editing\\Model\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Attachment.php', 'ACP\\Editing\\Model\\Post\\Author' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Author.php', 'ACP\\Editing\\Model\\Post\\CommentStatus' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/CommentStatus.php', 'ACP\\Editing\\Model\\Post\\Content' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Content.php', 'ACP\\Editing\\Model\\Post\\Date' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Date.php', 'ACP\\Editing\\Model\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Excerpt.php', 'ACP\\Editing\\Model\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/FeaturedImage.php', 'ACP\\Editing\\Model\\Post\\Formats' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Formats.php', 'ACP\\Editing\\Model\\Post\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Menu.php', 'ACP\\Editing\\Model\\Post\\Modified' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Modified.php', 'ACP\\Editing\\Model\\Post\\Order' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Order.php', 'ACP\\Editing\\Model\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/PageTemplate.php', 'ACP\\Editing\\Model\\Post\\Password' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Password.php', 'ACP\\Editing\\Model\\Post\\PingStatus' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/PingStatus.php', 'ACP\\Editing\\Model\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/PostParent.php', 'ACP\\Editing\\Model\\Post\\Slug' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Slug.php', 'ACP\\Editing\\Model\\Post\\Status' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Status.php', 'ACP\\Editing\\Model\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Sticky.php', 'ACP\\Editing\\Model\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/Taxonomy.php', 'ACP\\Editing\\Model\\Post\\TitleRaw' => __DIR__ . '/../..' . '/classes/Editing/Model/Post/TitleRaw.php', 'ACP\\Editing\\Model\\Taxonomy\\Description' => __DIR__ . '/../..' . '/classes/Editing/Model/Taxonomy/Description.php', 'ACP\\Editing\\Model\\Taxonomy\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Model/Taxonomy/Menu.php', 'ACP\\Editing\\Model\\Taxonomy\\Name' => __DIR__ . '/../..' . '/classes/Editing/Model/Taxonomy/Name.php', 'ACP\\Editing\\Model\\Taxonomy\\Slug' => __DIR__ . '/../..' . '/classes/Editing/Model/Taxonomy/Slug.php', 'ACP\\Editing\\Model\\Taxonomy\\TaxonomyParent' => __DIR__ . '/../..' . '/classes/Editing/Model/Taxonomy/TaxonomyParent.php', 'ACP\\Editing\\Model\\User' => __DIR__ . '/../..' . '/classes/Editing/Model/User.php', 'ACP\\Editing\\Model\\User\\Description' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Description.php', 'ACP\\Editing\\Model\\User\\DisplayName' => __DIR__ . '/../..' . '/classes/Editing/Model/User/DisplayName.php', 'ACP\\Editing\\Model\\User\\Email' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Email.php', 'ACP\\Editing\\Model\\User\\Fullname' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Fullname.php', 'ACP\\Editing\\Model\\User\\Nicename' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Nicename.php', 'ACP\\Editing\\Model\\User\\Registered' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Registered.php', 'ACP\\Editing\\Model\\User\\RichEditing' => __DIR__ . '/../..' . '/classes/Editing/Model/User/RichEditing.php', 'ACP\\Editing\\Model\\User\\Role' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Role.php', 'ACP\\Editing\\Model\\User\\ShowToolbar' => __DIR__ . '/../..' . '/classes/Editing/Model/User/ShowToolbar.php', 'ACP\\Editing\\Model\\User\\Url' => __DIR__ . '/../..' . '/classes/Editing/Model/User/Url.php', 'ACP\\Editing\\PaginatedOptions' => __DIR__ . '/../..' . '/classes/Editing/PaginatedOptions.php', 'ACP\\Editing\\PaginatedOptionsFactory' => __DIR__ . '/../..' . '/classes/Editing/PaginatedOptionsFactory.php', 'ACP\\Editing\\PaginatedOptions\\Posts' => __DIR__ . '/../..' . '/classes/Editing/PaginatedOptions/Posts.php', 'ACP\\Editing\\PaginatedOptions\\Users' => __DIR__ . '/../..' . '/classes/Editing/PaginatedOptions/Users.php', 'ACP\\Editing\\Preference\\EditState' => __DIR__ . '/../..' . '/classes/Editing/Preference/EditState.php', 'ACP\\Editing\\RemoteOptions' => __DIR__ . '/../..' . '/classes/Editing/RemoteOptions.php', 'ACP\\Editing\\RequestHandler' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler.php', 'ACP\\Editing\\RequestHandlerAjaxFactory' => __DIR__ . '/../..' . '/classes/Editing/RequestHandlerAjaxFactory.php', 'ACP\\Editing\\RequestHandlerFactory' => __DIR__ . '/../..' . '/classes/Editing/RequestHandlerFactory.php', 'ACP\\Editing\\RequestHandler\\BulkDelete' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/BulkDelete.php', 'ACP\\Editing\\RequestHandler\\BulkSave' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/BulkSave.php', 'ACP\\Editing\\RequestHandler\\DeleteUserSelectValues' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/DeleteUserSelectValues.php', 'ACP\\Editing\\RequestHandler\\EditState' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/EditState.php', 'ACP\\Editing\\RequestHandler\\Exception\\InvalidUserPermissionException' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Exception/InvalidUserPermissionException.php', 'ACP\\Editing\\RequestHandler\\Exception\\NotEditableException' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Exception/NotEditableException.php', 'ACP\\Editing\\RequestHandler\\InlineSave' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/InlineSave.php', 'ACP\\Editing\\RequestHandler\\InlineValues' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/InlineValues.php', 'ACP\\Editing\\RequestHandler\\Query\\Comment' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Query/Comment.php', 'ACP\\Editing\\RequestHandler\\Query\\Nullable' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Query/Nullable.php', 'ACP\\Editing\\RequestHandler\\Query\\Post' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Query/Post.php', 'ACP\\Editing\\RequestHandler\\Query\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Query/Taxonomy.php', 'ACP\\Editing\\RequestHandler\\Query\\User' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/Query/User.php', 'ACP\\Editing\\RequestHandler\\SelectValues' => __DIR__ . '/../..' . '/classes/Editing/RequestHandler/SelectValues.php', 'ACP\\Editing\\Response\\QueryRows' => __DIR__ . '/../..' . '/classes/Editing/Response/QueryRows.php', 'ACP\\Editing\\Service' => __DIR__ . '/../..' . '/classes/Editing/Service.php', 'ACP\\Editing\\ServiceFactory' => __DIR__ . '/../..' . '/classes/Editing/ServiceFactory.php', 'ACP\\Editing\\Service\\Basic' => __DIR__ . '/../..' . '/classes/Editing/Service/Basic.php', 'ACP\\Editing\\Service\\BasicStorage' => __DIR__ . '/../..' . '/classes/Editing/Service/BasicStorage.php', 'ACP\\Editing\\Service\\Comment\\Approved' => __DIR__ . '/../..' . '/classes/Editing/Service/Comment/Approved.php', 'ACP\\Editing\\Service\\Comment\\Content' => __DIR__ . '/../..' . '/classes/Editing/Service/Comment/Content.php', 'ACP\\Editing\\Service\\Comment\\Status' => __DIR__ . '/../..' . '/classes/Editing/Service/Comment/Status.php', 'ACP\\Editing\\Service\\Comment\\User' => __DIR__ . '/../..' . '/classes/Editing/Service/Comment/User.php', 'ACP\\Editing\\Service\\ComputedNumber' => __DIR__ . '/../..' . '/classes/Editing/Service/ComputedNumber.php', 'ACP\\Editing\\Service\\Date' => __DIR__ . '/../..' . '/classes/Editing/Service/Date.php', 'ACP\\Editing\\Service\\DateTime' => __DIR__ . '/../..' . '/classes/Editing/Service/DateTime.php', 'ACP\\Editing\\Service\\Editability' => __DIR__ . '/../..' . '/classes/Editing/Service/Editability.php', 'ACP\\Editing\\Service\\Media\\AlternateText' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/AlternateText.php', 'ACP\\Editing\\Service\\Media\\Caption' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/Caption.php', 'ACP\\Editing\\Service\\Media\\Date' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/Date.php', 'ACP\\Editing\\Service\\Media\\MetaData' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/MetaData.php', 'ACP\\Editing\\Service\\Media\\MetaData\\Audio' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/MetaData/Audio.php', 'ACP\\Editing\\Service\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/MimeType.php', 'ACP\\Editing\\Service\\Media\\Title' => __DIR__ . '/../..' . '/classes/Editing/Service/Media/Title.php', 'ACP\\Editing\\Service\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Service/Menu.php', 'ACP\\Editing\\Service\\Post' => __DIR__ . '/../..' . '/classes/Editing/Service/Post.php', 'ACP\\Editing\\Service\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Attachment.php', 'ACP\\Editing\\Service\\Post\\Author' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Author.php', 'ACP\\Editing\\Service\\Post\\CommentStatus' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/CommentStatus.php', 'ACP\\Editing\\Service\\Post\\Content' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Content.php', 'ACP\\Editing\\Service\\Post\\Date' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Date.php', 'ACP\\Editing\\Service\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Excerpt.php', 'ACP\\Editing\\Service\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/FeaturedImage.php', 'ACP\\Editing\\Service\\Post\\Formats' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Formats.php', 'ACP\\Editing\\Service\\Post\\Modified' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Modified.php', 'ACP\\Editing\\Service\\Post\\Order' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Order.php', 'ACP\\Editing\\Service\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/PageTemplate.php', 'ACP\\Editing\\Service\\Post\\PasswordProtected' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/PasswordProtected.php', 'ACP\\Editing\\Service\\Post\\PingStatus' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/PingStatus.php', 'ACP\\Editing\\Service\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/PostParent.php', 'ACP\\Editing\\Service\\Post\\PostStatus' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/PostStatus.php', 'ACP\\Editing\\Service\\Post\\PostType' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/PostType.php', 'ACP\\Editing\\Service\\Post\\Slug' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Slug.php', 'ACP\\Editing\\Service\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Sticky.php', 'ACP\\Editing\\Service\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/Service/Post/Taxonomy.php', 'ACP\\Editing\\Service\\Posts' => __DIR__ . '/../..' . '/classes/Editing/Service/Posts.php', 'ACP\\Editing\\Service\\SerializedMeta' => __DIR__ . '/../..' . '/classes/Editing/Service/SerializedMeta.php', 'ACP\\Editing\\Service\\Taxonomy\\Field' => __DIR__ . '/../..' . '/classes/Editing/Service/Taxonomy/Field.php', 'ACP\\Editing\\Service\\Taxonomy\\Name' => __DIR__ . '/../..' . '/classes/Editing/Service/Taxonomy/Name.php', 'ACP\\Editing\\Service\\Taxonomy\\Slug' => __DIR__ . '/../..' . '/classes/Editing/Service/Taxonomy/Slug.php', 'ACP\\Editing\\Service\\Taxonomy\\TaxonomyParent' => __DIR__ . '/../..' . '/classes/Editing/Service/Taxonomy/TaxonomyParent.php', 'ACP\\Editing\\Service\\User' => __DIR__ . '/../..' . '/classes/Editing/Service/User.php', 'ACP\\Editing\\Service\\User\\DisplayName' => __DIR__ . '/../..' . '/classes/Editing/Service/User/DisplayName.php', 'ACP\\Editing\\Service\\User\\Email' => __DIR__ . '/../..' . '/classes/Editing/Service/User/Email.php', 'ACP\\Editing\\Service\\User\\FullName' => __DIR__ . '/../..' . '/classes/Editing/Service/User/FullName.php', 'ACP\\Editing\\Service\\User\\Language' => __DIR__ . '/../..' . '/classes/Editing/Service/User/Language.php', 'ACP\\Editing\\Service\\User\\LanguageRemote' => __DIR__ . '/../..' . '/classes/Editing/Service/User/LanguageRemote.php', 'ACP\\Editing\\Service\\User\\Nicename' => __DIR__ . '/../..' . '/classes/Editing/Service/User/Nicename.php', 'ACP\\Editing\\Service\\User\\Registered' => __DIR__ . '/../..' . '/classes/Editing/Service/User/Registered.php', 'ACP\\Editing\\Service\\User\\RichEditing' => __DIR__ . '/../..' . '/classes/Editing/Service/User/RichEditing.php', 'ACP\\Editing\\Service\\User\\Role' => __DIR__ . '/../..' . '/classes/Editing/Service/User/Role.php', 'ACP\\Editing\\Service\\User\\ShowToolbar' => __DIR__ . '/../..' . '/classes/Editing/Service/User/ShowToolbar.php', 'ACP\\Editing\\Service\\User\\Url' => __DIR__ . '/../..' . '/classes/Editing/Service/User/Url.php', 'ACP\\Editing\\Service\\Users' => __DIR__ . '/../..' . '/classes/Editing/Service/Users.php', 'ACP\\Editing\\Settings' => __DIR__ . '/../..' . '/classes/Editing/Settings.php', 'ACP\\Editing\\Settings\\BulkEditing' => __DIR__ . '/../..' . '/classes/Editing/Settings/BulkEditing.php', 'ACP\\Editing\\Settings\\CreateTerms' => __DIR__ . '/../..' . '/classes/Editing/Settings/CreateTerms.php', 'ACP\\Editing\\Settings\\CustomField' => __DIR__ . '/../..' . '/classes/Editing/Settings/CustomField.php', 'ACP\\Editing\\Settings\\EditableType' => __DIR__ . '/../..' . '/classes/Editing/Settings/EditableType.php', 'ACP\\Editing\\Settings\\EditableType\\Content' => __DIR__ . '/../..' . '/classes/Editing/Settings/EditableType/Content.php', 'ACP\\Editing\\Settings\\EditableType\\Text' => __DIR__ . '/../..' . '/classes/Editing/Settings/EditableType/Text.php', 'ACP\\Editing\\Settings\\Factory\\EditableType' => __DIR__ . '/../..' . '/classes/Editing/Settings/Factory/EditableType.php', 'ACP\\Editing\\Settings\\Factory\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/Settings/Factory/Taxonomy.php', 'ACP\\Editing\\Settings\\SettingFactoryInterface' => __DIR__ . '/../..' . '/classes/Editing/Settings/SettingFactoryInterface.php', 'ACP\\Editing\\Storage' => __DIR__ . '/../..' . '/classes/Editing/Storage.php', 'ACP\\Editing\\Storage\\Comment\\Field' => __DIR__ . '/../..' . '/classes/Editing/Storage/Comment/Field.php', 'ACP\\Editing\\Storage\\Comment\\Meta' => __DIR__ . '/../..' . '/classes/Editing/Storage/Comment/Meta.php', 'ACP\\Editing\\Storage\\Comment\\Status' => __DIR__ . '/../..' . '/classes/Editing/Storage/Comment/Status.php', 'ACP\\Editing\\Storage\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Storage/Menu.php', 'ACP\\Editing\\Storage\\Meta' => __DIR__ . '/../..' . '/classes/Editing/Storage/Meta.php', 'ACP\\Editing\\Storage\\Post\\Attachments' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Attachments.php', 'ACP\\Editing\\Storage\\Post\\Date' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Date.php', 'ACP\\Editing\\Storage\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/FeaturedImage.php', 'ACP\\Editing\\Storage\\Post\\Field' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Field.php', 'ACP\\Editing\\Storage\\Post\\Format' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Format.php', 'ACP\\Editing\\Storage\\Post\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Menu.php', 'ACP\\Editing\\Storage\\Post\\Meta' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Meta.php', 'ACP\\Editing\\Storage\\Post\\MetaWithModifiedDate' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/MetaWithModifiedDate.php', 'ACP\\Editing\\Storage\\Post\\Modified' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Modified.php', 'ACP\\Editing\\Storage\\Post\\PostType' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/PostType.php', 'ACP\\Editing\\Storage\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Sticky.php', 'ACP\\Editing\\Storage\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/Storage/Post/Taxonomy.php', 'ACP\\Editing\\Storage\\Site\\Option' => __DIR__ . '/../..' . '/classes/Editing/Storage/Site/Option.php', 'ACP\\Editing\\Storage\\Taxonomy\\Field' => __DIR__ . '/../..' . '/classes/Editing/Storage/Taxonomy/Field.php', 'ACP\\Editing\\Storage\\Taxonomy\\Menu' => __DIR__ . '/../..' . '/classes/Editing/Storage/Taxonomy/Menu.php', 'ACP\\Editing\\Storage\\Taxonomy\\TaxonomyParent' => __DIR__ . '/../..' . '/classes/Editing/Storage/Taxonomy/TaxonomyParent.php', 'ACP\\Editing\\Storage\\User\\DisplayName' => __DIR__ . '/../..' . '/classes/Editing/Storage/User/DisplayName.php', 'ACP\\Editing\\Storage\\User\\Field' => __DIR__ . '/../..' . '/classes/Editing/Storage/User/Field.php', 'ACP\\Editing\\Storage\\User\\FullName' => __DIR__ . '/../..' . '/classes/Editing/Storage/User/FullName.php', 'ACP\\Editing\\Storage\\User\\Meta' => __DIR__ . '/../..' . '/classes/Editing/Storage/User/Meta.php', 'ACP\\Editing\\Storage\\User\\Role' => __DIR__ . '/../..' . '/classes/Editing/Storage/User/Role.php', 'ACP\\Editing\\Strategy' => __DIR__ . '/../..' . '/classes/Editing/Strategy.php', 'ACP\\Editing\\Strategy\\Comment' => __DIR__ . '/../..' . '/classes/Editing/Strategy/Comment.php', 'ACP\\Editing\\Strategy\\Post' => __DIR__ . '/../..' . '/classes/Editing/Strategy/Post.php', 'ACP\\Editing\\Strategy\\Site' => __DIR__ . '/../..' . '/classes/Editing/Strategy/Site.php', 'ACP\\Editing\\Strategy\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/Strategy/Taxonomy.php', 'ACP\\Editing\\Strategy\\User' => __DIR__ . '/../..' . '/classes/Editing/Strategy/User.php', 'ACP\\Editing\\TableScreen' => __DIR__ . '/../..' . '/classes/Editing/TableScreen.php', 'ACP\\Editing\\Value\\Data' => __DIR__ . '/../..' . '/classes/Editing/Value/Data.php', 'ACP\\Editing\\Value\\RowsPerIteration' => __DIR__ . '/../..' . '/classes/Editing/Value/RowsPerIteration.php', 'ACP\\Editing\\View' => __DIR__ . '/../..' . '/classes/Editing/View.php', 'ACP\\Editing\\View\\AdvancedSelect' => __DIR__ . '/../..' . '/classes/Editing/View/AdvancedSelect.php', 'ACP\\Editing\\View\\AjaxSelect' => __DIR__ . '/../..' . '/classes/Editing/View/AjaxSelect.php', 'ACP\\Editing\\View\\AjaxTrait' => __DIR__ . '/../..' . '/classes/Editing/View/AjaxTrait.php', 'ACP\\Editing\\View\\AttachmentTypeTrait' => __DIR__ . '/../..' . '/classes/Editing/View/AttachmentTypeTrait.php', 'ACP\\Editing\\View\\Audio' => __DIR__ . '/../..' . '/classes/Editing/View/Audio.php', 'ACP\\Editing\\View\\CheckboxList' => __DIR__ . '/../..' . '/classes/Editing/View/CheckboxList.php', 'ACP\\Editing\\View\\Color' => __DIR__ . '/../..' . '/classes/Editing/View/Color.php', 'ACP\\Editing\\View\\ComputedNumber' => __DIR__ . '/../..' . '/classes/Editing/View/ComputedNumber.php', 'ACP\\Editing\\View\\Date' => __DIR__ . '/../..' . '/classes/Editing/View/Date.php', 'ACP\\Editing\\View\\DateTime' => __DIR__ . '/../..' . '/classes/Editing/View/DateTime.php', 'ACP\\Editing\\View\\Email' => __DIR__ . '/../..' . '/classes/Editing/View/Email.php', 'ACP\\Editing\\View\\FullName' => __DIR__ . '/../..' . '/classes/Editing/View/FullName.php', 'ACP\\Editing\\View\\Image' => __DIR__ . '/../..' . '/classes/Editing/View/Image.php', 'ACP\\Editing\\View\\InternalLink' => __DIR__ . '/../..' . '/classes/Editing/View/InternalLink.php', 'ACP\\Editing\\View\\Legacy' => __DIR__ . '/../..' . '/classes/Editing/View/Legacy.php', 'ACP\\Editing\\View\\MaxLength' => __DIR__ . '/../..' . '/classes/Editing/View/MaxLength.php', 'ACP\\Editing\\View\\MaxlengthTrait' => __DIR__ . '/../..' . '/classes/Editing/View/MaxlengthTrait.php', 'ACP\\Editing\\View\\Media' => __DIR__ . '/../..' . '/classes/Editing/View/Media.php', 'ACP\\Editing\\View\\MediaUploadToTrait' => __DIR__ . '/../..' . '/classes/Editing/View/MediaUploadToTrait.php', 'ACP\\Editing\\View\\Menu' => __DIR__ . '/../..' . '/classes/Editing/View/Menu.php', 'ACP\\Editing\\View\\MethodTrait' => __DIR__ . '/../..' . '/classes/Editing/View/MethodTrait.php', 'ACP\\Editing\\View\\MinMaxTrait' => __DIR__ . '/../..' . '/classes/Editing/View/MinMaxTrait.php', 'ACP\\Editing\\View\\MultiInput' => __DIR__ . '/../..' . '/classes/Editing/View/MultiInput.php', 'ACP\\Editing\\View\\MultipleTrait' => __DIR__ . '/../..' . '/classes/Editing/View/MultipleTrait.php', 'ACP\\Editing\\View\\Number' => __DIR__ . '/../..' . '/classes/Editing/View/Number.php', 'ACP\\Editing\\View\\OptionsTrait' => __DIR__ . '/../..' . '/classes/Editing/View/OptionsTrait.php', 'ACP\\Editing\\View\\Password' => __DIR__ . '/../..' . '/classes/Editing/View/Password.php', 'ACP\\Editing\\View\\Placeholder' => __DIR__ . '/../..' . '/classes/Editing/View/Placeholder.php', 'ACP\\Editing\\View\\PlaceholderTrait' => __DIR__ . '/../..' . '/classes/Editing/View/PlaceholderTrait.php', 'ACP\\Editing\\View\\RemoteSelect' => __DIR__ . '/../..' . '/classes/Editing/View/RemoteSelect.php', 'ACP\\Editing\\View\\Select' => __DIR__ . '/../..' . '/classes/Editing/View/Select.php', 'ACP\\Editing\\View\\StepTrait' => __DIR__ . '/../..' . '/classes/Editing/View/StepTrait.php', 'ACP\\Editing\\View\\TagsTrait' => __DIR__ . '/../..' . '/classes/Editing/View/TagsTrait.php', 'ACP\\Editing\\View\\Taxonomy' => __DIR__ . '/../..' . '/classes/Editing/View/Taxonomy.php', 'ACP\\Editing\\View\\Text' => __DIR__ . '/../..' . '/classes/Editing/View/Text.php', 'ACP\\Editing\\View\\TextArea' => __DIR__ . '/../..' . '/classes/Editing/View/TextArea.php', 'ACP\\Editing\\View\\Toggle' => __DIR__ . '/../..' . '/classes/Editing/View/Toggle.php', 'ACP\\Editing\\View\\Url' => __DIR__ . '/../..' . '/classes/Editing/View/Url.php', 'ACP\\Editing\\View\\Video' => __DIR__ . '/../..' . '/classes/Editing/View/Video.php', 'ACP\\Editing\\View\\WeekstartTrait' => __DIR__ . '/../..' . '/classes/Editing/View/WeekstartTrait.php', 'ACP\\Editing\\View\\Wysiwyg' => __DIR__ . '/../..' . '/classes/Editing/View/Wysiwyg.php', 'ACP\\Entity\\Activation' => __DIR__ . '/../..' . '/classes/Entity/Activation.php', 'ACP\\Exception\\ControllerException' => __DIR__ . '/../..' . '/classes/Exception/ControllerException.php', 'ACP\\Exception\\DecoderNotFoundException' => __DIR__ . '/../..' . '/classes/Exception/DecoderNotFoundException.php', 'ACP\\Exception\\DirectoryNotWritableException' => __DIR__ . '/../..' . '/classes/Exception/DirectoryNotWritableException.php', 'ACP\\Exception\\FailedToCreateDirectoryException' => __DIR__ . '/../..' . '/classes/Exception/FailedToCreateDirectoryException.php', 'ACP\\Exception\\FailedToReadDirectoryException' => __DIR__ . '/../..' . '/classes/Exception/FailedToReadDirectoryException.php', 'ACP\\Exception\\FileNotWritableException' => __DIR__ . '/../..' . '/classes/Exception/FileNotWritableException.php', 'ACP\\Exception\\UndecodableListScreenException' => __DIR__ . '/../..' . '/classes/Exception/UndecodableListScreenException.php', 'ACP\\Export\\Addon' => __DIR__ . '/../..' . '/classes/Export/Addon.php', 'ACP\\Export\\Admin' => __DIR__ . '/../..' . '/classes/Export/Admin.php', 'ACP\\Export\\ApplyFilter\\ColumnActive' => __DIR__ . '/../..' . '/classes/Export/ApplyFilter/ColumnActive.php', 'ACP\\Export\\ApplyFilter\\ListScreenActive' => __DIR__ . '/../..' . '/classes/Export/ApplyFilter/ListScreenActive.php', 'ACP\\Export\\Asset\\Script\\Table' => __DIR__ . '/../..' . '/classes/Export/Asset/Script/Table.php', 'ACP\\Export\\Exportable' => __DIR__ . '/../..' . '/classes/Export/Exportable.php', 'ACP\\Export\\Exporter' => __DIR__ . '/../..' . '/classes/Export/Exporter.php', 'ACP\\Export\\Exporter\\CSV' => __DIR__ . '/../..' . '/classes/Export/Exporter/CSV.php', 'ACP\\Export\\HideOnScreen\\Export' => __DIR__ . '/../..' . '/classes/Export/HideOnScreen/Export.php', 'ACP\\Export\\ListScreen' => __DIR__ . '/../..' . '/classes/Export/ListScreen.php', 'ACP\\Export\\Model' => __DIR__ . '/../..' . '/classes/Export/Model.php', 'ACP\\Export\\Model\\AttachmentURLFromAttachmentId' => __DIR__ . '/../..' . '/classes/Export/Model/AttachmentURLFromAttachmentId.php', 'ACP\\Export\\Model\\Comment\\Author' => __DIR__ . '/../..' . '/classes/Export/Model/Comment/Author.php', 'ACP\\Export\\Model\\Comment\\AuthorAvatar' => __DIR__ . '/../..' . '/classes/Export/Model/Comment/AuthorAvatar.php', 'ACP\\Export\\Model\\Comment\\Comment' => __DIR__ . '/../..' . '/classes/Export/Model/Comment/Comment.php', 'ACP\\Export\\Model\\Comment\\Date' => __DIR__ . '/../..' . '/classes/Export/Model/Comment/Date.php', 'ACP\\Export\\Model\\Comment\\Response' => __DIR__ . '/../..' . '/classes/Export/Model/Comment/Response.php', 'ACP\\Export\\Model\\CustomField' => __DIR__ . '/../..' . '/classes/Export/Model/CustomField.php', 'ACP\\Export\\Model\\CustomField\\Date' => __DIR__ . '/../..' . '/classes/Export/Model/CustomField/Date.php', 'ACP\\Export\\Model\\CustomField\\Image' => __DIR__ . '/../..' . '/classes/Export/Model/CustomField/Image.php', 'ACP\\Export\\Model\\Disabled' => __DIR__ . '/../..' . '/classes/Export/Model/Disabled.php', 'ACP\\Export\\Model\\Media\\Title' => __DIR__ . '/../..' . '/classes/Export/Model/Media/Title.php', 'ACP\\Export\\Model\\Meta' => __DIR__ . '/../..' . '/classes/Export/Model/Meta.php', 'ACP\\Export\\Model\\PostTitleFromPostId' => __DIR__ . '/../..' . '/classes/Export/Model/PostTitleFromPostId.php', 'ACP\\Export\\Model\\Post\\Ancestors' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Ancestors.php', 'ACP\\Export\\Model\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Attachment.php', 'ACP\\Export\\Model\\Post\\Author' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Author.php', 'ACP\\Export\\Model\\Post\\ChildPages' => __DIR__ . '/../..' . '/classes/Export/Model/Post/ChildPages.php', 'ACP\\Export\\Model\\Post\\CommentCount' => __DIR__ . '/../..' . '/classes/Export/Model/Post/CommentCount.php', 'ACP\\Export\\Model\\Post\\Comments' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Comments.php', 'ACP\\Export\\Model\\Post\\Date' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Date.php', 'ACP\\Export\\Model\\Post\\ImageFileSizes' => __DIR__ . '/../..' . '/classes/Export/Model/Post/ImageFileSizes.php', 'ACP\\Export\\Model\\Post\\LastModifiedAuthor' => __DIR__ . '/../..' . '/classes/Export/Model/Post/LastModifiedAuthor.php', 'ACP\\Export\\Model\\Post\\LinkCount' => __DIR__ . '/../..' . '/classes/Export/Model/Post/LinkCount.php', 'ACP\\Export\\Model\\Post\\Meta' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Meta.php', 'ACP\\Export\\Model\\Post\\Permalink' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Permalink.php', 'ACP\\Export\\Model\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Export/Model/Post/PostParent.php', 'ACP\\Export\\Model\\Post\\Roles' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Roles.php', 'ACP\\Export\\Model\\Post\\Shortcodes' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Shortcodes.php', 'ACP\\Export\\Model\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Taxonomy.php', 'ACP\\Export\\Model\\Post\\Title' => __DIR__ . '/../..' . '/classes/Export/Model/Post/Title.php', 'ACP\\Export\\Model\\RawValue' => __DIR__ . '/../..' . '/classes/Export/Model/RawValue.php', 'ACP\\Export\\Model\\StrippedRawValue' => __DIR__ . '/../..' . '/classes/Export/Model/StrippedRawValue.php', 'ACP\\Export\\Model\\StrippedValue' => __DIR__ . '/../..' . '/classes/Export/Model/StrippedValue.php', 'ACP\\Export\\Model\\Term\\Description' => __DIR__ . '/../..' . '/classes/Export/Model/Term/Description.php', 'ACP\\Export\\Model\\Term\\Name' => __DIR__ . '/../..' . '/classes/Export/Model/Term/Name.php', 'ACP\\Export\\Model\\Term\\Posts' => __DIR__ . '/../..' . '/classes/Export/Model/Term/Posts.php', 'ACP\\Export\\Model\\Term\\Slug' => __DIR__ . '/../..' . '/classes/Export/Model/Term/Slug.php', 'ACP\\Export\\Model\\User\\Email' => __DIR__ . '/../..' . '/classes/Export/Model/User/Email.php', 'ACP\\Export\\Model\\User\\FullName' => __DIR__ . '/../..' . '/classes/Export/Model/User/FullName.php', 'ACP\\Export\\Model\\User\\Login' => __DIR__ . '/../..' . '/classes/Export/Model/User/Login.php', 'ACP\\Export\\Model\\User\\Nicename' => __DIR__ . '/../..' . '/classes/Export/Model/User/Nicename.php', 'ACP\\Export\\Model\\User\\Posts' => __DIR__ . '/../..' . '/classes/Export/Model/User/Posts.php', 'ACP\\Export\\Model\\User\\Role' => __DIR__ . '/../..' . '/classes/Export/Model/User/Role.php', 'ACP\\Export\\Model\\User\\UserPosts' => __DIR__ . '/../..' . '/classes/Export/Model/User/UserPosts.php', 'ACP\\Export\\Model\\Value' => __DIR__ . '/../..' . '/classes/Export/Model/Value.php', 'ACP\\Export\\Repository\\Filter\\ExcludeColumnNames' => __DIR__ . '/../..' . '/classes/Export/Repository/Filter/ExcludeColumnNames.php', 'ACP\\Export\\Repository\\Filter\\ExportableColumns' => __DIR__ . '/../..' . '/classes/Export/Repository/Filter/ExportableColumns.php', 'ACP\\Export\\Repository\\Filter\\IncludeColumnNames' => __DIR__ . '/../..' . '/classes/Export/Repository/Filter/IncludeColumnNames.php', 'ACP\\Export\\Repository\\Sort\\ColumnNames' => __DIR__ . '/../..' . '/classes/Export/Repository/Sort/ColumnNames.php', 'ACP\\Export\\RequestHandler\\Ajax\\FileName' => __DIR__ . '/../..' . '/classes/Export/RequestHandler/Ajax/FileName.php', 'ACP\\Export\\Settings' => __DIR__ . '/../..' . '/classes/Export/Settings.php', 'ACP\\Export\\Settings\\Column' => __DIR__ . '/../..' . '/classes/Export/Settings/Column.php', 'ACP\\Export\\Strategy' => __DIR__ . '/../..' . '/classes/Export/Strategy.php', 'ACP\\Export\\Strategy\\Comment' => __DIR__ . '/../..' . '/classes/Export/Strategy/Comment.php', 'ACP\\Export\\Strategy\\Post' => __DIR__ . '/../..' . '/classes/Export/Strategy/Post.php', 'ACP\\Export\\Strategy\\Taxonomy' => __DIR__ . '/../..' . '/classes/Export/Strategy/Taxonomy.php', 'ACP\\Export\\Strategy\\User' => __DIR__ . '/../..' . '/classes/Export/Strategy/User.php', 'ACP\\Export\\TableScreen' => __DIR__ . '/../..' . '/classes/Export/TableScreen.php', 'ACP\\Export\\UserPreference\\ExportedColumns' => __DIR__ . '/../..' . '/classes/Export/UserPreference/ExportedColumns.php', 'ACP\\Expression\\AndSpecification' => __DIR__ . '/../..' . '/classes/Expression/AndSpecification.php', 'ACP\\Expression\\ComparisonOperators' => __DIR__ . '/../..' . '/classes/Expression/ComparisonOperators.php', 'ACP\\Expression\\ComparisonSpecification' => __DIR__ . '/../..' . '/classes/Expression/ComparisonSpecification.php', 'ACP\\Expression\\ComparisonTrait' => __DIR__ . '/../..' . '/classes/Expression/ComparisonTrait.php', 'ACP\\Expression\\ContainsSpecification' => __DIR__ . '/../..' . '/classes/Expression/ContainsSpecification.php', 'ACP\\Expression\\DateComparisonSpecification' => __DIR__ . '/../..' . '/classes/Expression/DateComparisonSpecification.php', 'ACP\\Expression\\DateOperators' => __DIR__ . '/../..' . '/classes/Expression/DateOperators.php', 'ACP\\Expression\\DateRelativeDeductedSpecification' => __DIR__ . '/../..' . '/classes/Expression/DateRelativeDeductedSpecification.php', 'ACP\\Expression\\DateSpecification' => __DIR__ . '/../..' . '/classes/Expression/DateSpecification.php', 'ACP\\Expression\\EndsWithSpecification' => __DIR__ . '/../..' . '/classes/Expression/EndsWithSpecification.php', 'ACP\\Expression\\Exception\\InvalidDateFormatException' => __DIR__ . '/../..' . '/classes/Expression/Exception/InvalidDateFormatException.php', 'ACP\\Expression\\Exception\\OperatorNotFoundException' => __DIR__ . '/../..' . '/classes/Expression/Exception/OperatorNotFoundException.php', 'ACP\\Expression\\FloatComparisonSpecification' => __DIR__ . '/../..' . '/classes/Expression/FloatComparisonSpecification.php', 'ACP\\Expression\\IntegerComparisonSpecification' => __DIR__ . '/../..' . '/classes/Expression/IntegerComparisonSpecification.php', 'ACP\\Expression\\NotSpecification' => __DIR__ . '/../..' . '/classes/Expression/NotSpecification.php', 'ACP\\Expression\\OperatorTrait' => __DIR__ . '/../..' . '/classes/Expression/OperatorTrait.php', 'ACP\\Expression\\OrSpecification' => __DIR__ . '/../..' . '/classes/Expression/OrSpecification.php', 'ACP\\Expression\\Specification' => __DIR__ . '/../..' . '/classes/Expression/Specification.php', 'ACP\\Expression\\SpecificationTrait' => __DIR__ . '/../..' . '/classes/Expression/SpecificationTrait.php', 'ACP\\Expression\\StartsWithSpecification' => __DIR__ . '/../..' . '/classes/Expression/StartsWithSpecification.php', 'ACP\\Expression\\StringOperators' => __DIR__ . '/../..' . '/classes/Expression/StringOperators.php', 'ACP\\Filtering\\Addon' => __DIR__ . '/../..' . '/classes/Filtering/Addon.php', 'ACP\\Filtering\\Bookmark\\PreferredFilter' => __DIR__ . '/../..' . '/classes/Filtering/Bookmark/PreferredFilter.php', 'ACP\\Filtering\\Cache' => __DIR__ . '/../..' . '/classes/Filtering/Cache.php', 'ACP\\Filtering\\Cache\\Model' => __DIR__ . '/../..' . '/classes/Filtering/Cache/Model.php', 'ACP\\Filtering\\Filterable' => __DIR__ . '/../..' . '/classes/Filtering/Filterable.php', 'ACP\\Filtering\\Helper' => __DIR__ . '/../..' . '/classes/Filtering/Helper.php', 'ACP\\Filtering\\ListScreen' => __DIR__ . '/../..' . '/classes/Filtering/ListScreen.php', 'ACP\\Filtering\\Markup\\Dropdown' => __DIR__ . '/../..' . '/classes/Filtering/Markup/Dropdown.php', 'ACP\\Filtering\\Markup\\Ranged' => __DIR__ . '/../..' . '/classes/Filtering/Markup/Ranged.php', 'ACP\\Filtering\\Markup\\Ranged\\Date' => __DIR__ . '/../..' . '/classes/Filtering/Markup/Ranged/Date.php', 'ACP\\Filtering\\Markup\\Ranged\\Number' => __DIR__ . '/../..' . '/classes/Filtering/Markup/Ranged/Number.php', 'ACP\\Filtering\\Model' => __DIR__ . '/../..' . '/classes/Filtering/Model.php', 'ACP\\Filtering\\Model\\Comment\\Agent' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/Agent.php', 'ACP\\Filtering\\Model\\Comment\\Approved' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/Approved.php', 'ACP\\Filtering\\Model\\Comment\\Author' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/Author.php', 'ACP\\Filtering\\Model\\Comment\\AuthorEmail' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/AuthorEmail.php', 'ACP\\Filtering\\Model\\Comment\\AuthorIP' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/AuthorIP.php', 'ACP\\Filtering\\Model\\Comment\\AuthorName' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/AuthorName.php', 'ACP\\Filtering\\Model\\Comment\\AuthorUrl' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/AuthorUrl.php', 'ACP\\Filtering\\Model\\Comment\\Date' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/Date.php', 'ACP\\Filtering\\Model\\Comment\\DateGmt' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/DateGmt.php', 'ACP\\Filtering\\Model\\Comment\\PostType' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/PostType.php', 'ACP\\Filtering\\Model\\Comment\\ReplyTo' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/ReplyTo.php', 'ACP\\Filtering\\Model\\Comment\\Response' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/Response.php', 'ACP\\Filtering\\Model\\Comment\\Type' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/Type.php', 'ACP\\Filtering\\Model\\Comment\\User' => __DIR__ . '/../..' . '/classes/Filtering/Model/Comment/User.php', 'ACP\\Filtering\\Model\\CustomField' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField.php', 'ACP\\Filtering\\Model\\CustomField\\Checkmark' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Checkmark.php', 'ACP\\Filtering\\Model\\CustomField\\Date' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Date.php', 'ACP\\Filtering\\Model\\CustomField\\Hascontent' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Hascontent.php', 'ACP\\Filtering\\Model\\CustomField\\Image' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Image.php', 'ACP\\Filtering\\Model\\CustomField\\Link' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Link.php', 'ACP\\Filtering\\Model\\CustomField\\Media' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Media.php', 'ACP\\Filtering\\Model\\CustomField\\Number' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Number.php', 'ACP\\Filtering\\Model\\CustomField\\Post' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/Post.php', 'ACP\\Filtering\\Model\\CustomField\\User' => __DIR__ . '/../..' . '/classes/Filtering/Model/CustomField/User.php', 'ACP\\Filtering\\Model\\Delegated' => __DIR__ . '/../..' . '/classes/Filtering/Model/Delegated.php', 'ACP\\Filtering\\Model\\Disabled' => __DIR__ . '/../..' . '/classes/Filtering/Model/Disabled.php', 'ACP\\Filtering\\Model\\Media\\Author' => __DIR__ . '/../..' . '/classes/Filtering/Model/Media/Author.php', 'ACP\\Filtering\\Model\\Media\\Comments' => __DIR__ . '/../..' . '/classes/Filtering/Model/Media/Comments.php', 'ACP\\Filtering\\Model\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Filtering/Model/Media/MimeType.php', 'ACP\\Filtering\\Model\\Media\\PostType' => __DIR__ . '/../..' . '/classes/Filtering/Model/Media/PostType.php', 'ACP\\Filtering\\Model\\Media\\UsedAsFeaturedImage' => __DIR__ . '/../..' . '/classes/Filtering/Model/Media/UsedAsFeaturedImage.php', 'ACP\\Filtering\\Model\\Meta' => __DIR__ . '/../..' . '/classes/Filtering/Model/Meta.php', 'ACP\\Filtering\\Model\\MetaDate' => __DIR__ . '/../..' . '/classes/Filtering/Model/MetaDate.php', 'ACP\\Filtering\\Model\\Post\\Ancestors' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Ancestors.php', 'ACP\\Filtering\\Model\\Post\\AuthorName' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/AuthorName.php', 'ACP\\Filtering\\Model\\Post\\BeforeMoreTag' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/BeforeMoreTag.php', 'ACP\\Filtering\\Model\\Post\\ChildPages' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/ChildPages.php', 'ACP\\Filtering\\Model\\Post\\CommentCount' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/CommentCount.php', 'ACP\\Filtering\\Model\\Post\\CommentStatus' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/CommentStatus.php', 'ACP\\Filtering\\Model\\Post\\Content' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Content.php', 'ACP\\Filtering\\Model\\Post\\Date' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Date.php', 'ACP\\Filtering\\Model\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Excerpt.php', 'ACP\\Filtering\\Model\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/FeaturedImage.php', 'ACP\\Filtering\\Model\\Post\\Formats' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Formats.php', 'ACP\\Filtering\\Model\\Post\\ID' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/ID.php', 'ACP\\Filtering\\Model\\Post\\LastModifiedAuthor' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/LastModifiedAuthor.php', 'ACP\\Filtering\\Model\\Post\\Modified' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Modified.php', 'ACP\\Filtering\\Model\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/PageTemplate.php', 'ACP\\Filtering\\Model\\Post\\PingStatus' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/PingStatus.php', 'ACP\\Filtering\\Model\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/PostParent.php', 'ACP\\Filtering\\Model\\Post\\Roles' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Roles.php', 'ACP\\Filtering\\Model\\Post\\Status' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Status.php', 'ACP\\Filtering\\Model\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Sticky.php', 'ACP\\Filtering\\Model\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Filtering/Model/Post/Taxonomy.php', 'ACP\\Filtering\\Model\\Taxonomy\\ID' => __DIR__ . '/../..' . '/classes/Filtering/Model/Taxonomy/ID.php', 'ACP\\Filtering\\Model\\Taxonomy\\TaxonomyParent' => __DIR__ . '/../..' . '/classes/Filtering/Model/Taxonomy/TaxonomyParent.php', 'ACP\\Filtering\\Model\\User\\Email' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/Email.php', 'ACP\\Filtering\\Model\\User\\Language' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/Language.php', 'ACP\\Filtering\\Model\\User\\Registered' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/Registered.php', 'ACP\\Filtering\\Model\\User\\RichEditing' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/RichEditing.php', 'ACP\\Filtering\\Model\\User\\Role' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/Role.php', 'ACP\\Filtering\\Model\\User\\ShowToolbar' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/ShowToolbar.php', 'ACP\\Filtering\\Model\\User\\Url' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/Url.php', 'ACP\\Filtering\\Model\\User\\Username' => __DIR__ . '/../..' . '/classes/Filtering/Model/User/Username.php', 'ACP\\Filtering\\Settings' => __DIR__ . '/../..' . '/classes/Filtering/Settings.php', 'ACP\\Filtering\\Settings\\Date' => __DIR__ . '/../..' . '/classes/Filtering/Settings/Date.php', 'ACP\\Filtering\\Settings\\DatePast' => __DIR__ . '/../..' . '/classes/Filtering/Settings/DatePast.php', 'ACP\\Filtering\\Settings\\Delegated' => __DIR__ . '/../..' . '/classes/Filtering/Settings/Delegated.php', 'ACP\\Filtering\\Settings\\Ranged' => __DIR__ . '/../..' . '/classes/Filtering/Settings/Ranged.php', 'ACP\\Filtering\\Strategy' => __DIR__ . '/../..' . '/classes/Filtering/Strategy.php', 'ACP\\Filtering\\Strategy\\Comment' => __DIR__ . '/../..' . '/classes/Filtering/Strategy/Comment.php', 'ACP\\Filtering\\Strategy\\Post' => __DIR__ . '/../..' . '/classes/Filtering/Strategy/Post.php', 'ACP\\Filtering\\Strategy\\Taxonomy' => __DIR__ . '/../..' . '/classes/Filtering/Strategy/Taxonomy.php', 'ACP\\Filtering\\Strategy\\User' => __DIR__ . '/../..' . '/classes/Filtering/Strategy/User.php', 'ACP\\Filtering\\TableScreen' => __DIR__ . '/../..' . '/classes/Filtering/TableScreen.php', 'ACP\\Filtering\\TableScreen\\Comment' => __DIR__ . '/../..' . '/classes/Filtering/TableScreen/Comment.php', 'ACP\\Filtering\\TableScreen\\MSUser' => __DIR__ . '/../..' . '/classes/Filtering/TableScreen/MSUser.php', 'ACP\\Filtering\\TableScreen\\Post' => __DIR__ . '/../..' . '/classes/Filtering/TableScreen/Post.php', 'ACP\\Filtering\\TableScreen\\Taxonomy' => __DIR__ . '/../..' . '/classes/Filtering/TableScreen/Taxonomy.php', 'ACP\\Filtering\\TableScreen\\User' => __DIR__ . '/../..' . '/classes/Filtering/TableScreen/User.php', 'ACP\\Helper\\FilterButton' => __DIR__ . '/../..' . '/classes/Helper/FilterButton.php', 'ACP\\Helper\\FilterButtonFactory' => __DIR__ . '/../..' . '/classes/Helper/FilterButtonFactory.php', 'ACP\\Helper\\FilterButton\\Taxonomy' => __DIR__ . '/../..' . '/classes/Helper/FilterButton/Taxonomy.php', 'ACP\\Helper\\FilterButton\\Users' => __DIR__ . '/../..' . '/classes/Helper/FilterButton/Users.php', 'ACP\\Helper\\Select\\Entities' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities.php', 'ACP\\Helper\\Select\\Entities\\Comment' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/Comment.php', 'ACP\\Helper\\Select\\Entities\\MimeType' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/MimeType.php', 'ACP\\Helper\\Select\\Entities\\Post' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/Post.php', 'ACP\\Helper\\Select\\Entities\\PostStatus' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/PostStatus.php', 'ACP\\Helper\\Select\\Entities\\PostType' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/PostType.php', 'ACP\\Helper\\Select\\Entities\\Taxonomy' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/Taxonomy.php', 'ACP\\Helper\\Select\\Entities\\User' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/User.php', 'ACP\\Helper\\Select\\Formatter' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter.php', 'ACP\\Helper\\Select\\Formatter\\CommentSummary' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter/CommentSummary.php', 'ACP\\Helper\\Select\\Formatter\\PostTitle' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter/PostTitle.php', 'ACP\\Helper\\Select\\Formatter\\PostTypeLabel' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter/PostTypeLabel.php', 'ACP\\Helper\\Select\\Formatter\\TermName' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter/TermName.php', 'ACP\\Helper\\Select\\Formatter\\UserName' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter/UserName.php', 'ACP\\Helper\\Select\\Group\\Alphabetically' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/Alphabetically.php', 'ACP\\Helper\\Select\\Group\\Date' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/Date.php', 'ACP\\Helper\\Select\\Group\\MimeType' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/MimeType.php', 'ACP\\Helper\\Select\\Group\\PostType' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/PostType.php', 'ACP\\Helper\\Select\\Group\\PostTypeType' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/PostTypeType.php', 'ACP\\Helper\\Select\\Group\\Taxonomy' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/Taxonomy.php', 'ACP\\Helper\\Select\\Group\\UserRole' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/UserRole.php', 'ACP\\Helper\\Select\\Option' => __DIR__ . '/../..' . '/classes/Helper/Select/Option.php', 'ACP\\Helper\\Select\\Options' => __DIR__ . '/../..' . '/classes/Helper/Select/Options.php', 'ACP\\Helper\\Select\\Options\\Paginated' => __DIR__ . '/../..' . '/classes/Helper/Select/Options/Paginated.php', 'ACP\\Helper\\Select\\Options\\SinglePage' => __DIR__ . '/../..' . '/classes/Helper/Select/Options/SinglePage.php', 'ACP\\Helper\\Select\\Paginated' => __DIR__ . '/../..' . '/classes/Helper/Select/Paginated.php', 'ACP\\Helper\\Select\\Paginated\\Posts' => __DIR__ . '/../..' . '/classes/Helper/Select/Paginated/Posts.php', 'ACP\\Helper\\Select\\Paginated\\Terms' => __DIR__ . '/../..' . '/classes/Helper/Select/Paginated/Terms.php', 'ACP\\Helper\\Select\\Paginated\\Users' => __DIR__ . '/../..' . '/classes/Helper/Select/Paginated/Users.php', 'ACP\\Helper\\Select\\Value' => __DIR__ . '/../..' . '/classes/Helper/Select/Value.php', 'ACP\\Helper\\Select\\Value\\Comment' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/Comment.php', 'ACP\\Helper\\Select\\Value\\MimeType' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/MimeType.php', 'ACP\\Helper\\Select\\Value\\Post' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/Post.php', 'ACP\\Helper\\Select\\Value\\PostStatus' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/PostStatus.php', 'ACP\\Helper\\Select\\Value\\PostType' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/PostType.php', 'ACP\\Helper\\Select\\Value\\Taxonomy' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/Taxonomy.php', 'ACP\\Helper\\Select\\Value\\User' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/User.php', 'ACP\\IconPicker' => __DIR__ . '/../..' . '/classes/IconPicker.php', 'ACP\\Integration\\Filter\\IsProActive' => __DIR__ . '/../..' . '/classes/Integration/Filter/IsProActive.php', 'ACP\\LicenseKeyRepository' => __DIR__ . '/../..' . '/classes/LicenseKeyRepository.php', 'ACP\\ListScreenRepository\\Collection' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Collection.php', 'ACP\\ListScreenRepository\\File' => __DIR__ . '/../..' . '/classes/ListScreenRepository/File.php', 'ACP\\ListScreenRepository\\FileFactory' => __DIR__ . '/../..' . '/classes/ListScreenRepository/FileFactory.php', 'ACP\\ListScreen\\Comment' => __DIR__ . '/../..' . '/classes/ListScreen/Comment.php', 'ACP\\ListScreen\\MSSite' => __DIR__ . '/../..' . '/classes/ListScreen/MSSite.php', 'ACP\\ListScreen\\MSUser' => __DIR__ . '/../..' . '/classes/ListScreen/MSUser.php', 'ACP\\ListScreen\\Media' => __DIR__ . '/../..' . '/classes/ListScreen/Media.php', 'ACP\\ListScreen\\Post' => __DIR__ . '/../..' . '/classes/ListScreen/Post.php', 'ACP\\ListScreen\\Taxonomy' => __DIR__ . '/../..' . '/classes/ListScreen/Taxonomy.php', 'ACP\\ListScreen\\User' => __DIR__ . '/../..' . '/classes/ListScreen/User.php', 'ACP\\ListScreens' => __DIR__ . '/../..' . '/classes/ListScreens.php', 'ACP\\Localize' => __DIR__ . '/../..' . '/classes/Localize.php', 'ACP\\Migrate\\Admin\\Section\\Export' => __DIR__ . '/../..' . '/classes/Migrate/Admin/Section/Export.php', 'ACP\\Migrate\\Admin\\Section\\Import' => __DIR__ . '/../..' . '/classes/Migrate/Admin/Section/Import.php', 'ACP\\Migrate\\Admin\\Table\\Export' => __DIR__ . '/../..' . '/classes/Migrate/Admin/Table/Export.php', 'ACP\\Migrate\\Export\\Request' => __DIR__ . '/../..' . '/classes/Migrate/Export/Request.php', 'ACP\\Migrate\\Export\\Response' => __DIR__ . '/../..' . '/classes/Migrate/Export/Response.php', 'ACP\\Migrate\\Export\\ResponseFactory' => __DIR__ . '/../..' . '/classes/Migrate/Export/ResponseFactory.php', 'ACP\\Migrate\\Export\\Response\\File' => __DIR__ . '/../..' . '/classes/Migrate/Export/Response/File.php', 'ACP\\Migrate\\Export\\Response\\Screen' => __DIR__ . '/../..' . '/classes/Migrate/Export/Response/Screen.php', 'ACP\\Migrate\\Import\\Request' => __DIR__ . '/../..' . '/classes/Migrate/Import/Request.php', 'ACP\\Migrate\\MessageTrait' => __DIR__ . '/../..' . '/classes/Migrate/MessageTrait.php', 'ACP\\NativeTaxonomies' => __DIR__ . '/../..' . '/classes/NativeTaxonomies.php', 'ACP\\Nonce\\LayoutNonce' => __DIR__ . '/../..' . '/classes/Nonce/LayoutNonce.php', 'ACP\\Nonce\\LicenseNonce' => __DIR__ . '/../..' . '/classes/Nonce/LicenseNonce.php', 'ACP\\PluginActionLinks' => __DIR__ . '/../..' . '/classes/PluginActionLinks.php', 'ACP\\PluginRepository' => __DIR__ . '/../..' . '/classes/PluginRepository.php', 'ACP\\Plugin\\Install\\BookmarkTable' => __DIR__ . '/../..' . '/classes/Plugin/Install/BookmarkTable.php', 'ACP\\Plugin\\NetworkUpdate\\V5000' => __DIR__ . '/../..' . '/classes/Plugin/NetworkUpdate/V5000.php', 'ACP\\Plugin\\NetworkUpdate\\V5700' => __DIR__ . '/../..' . '/classes/Plugin/NetworkUpdate/V5700.php', 'ACP\\Plugin\\SetupFactory' => __DIR__ . '/../..' . '/classes/Plugin/SetupFactory.php', 'ACP\\Plugin\\Update\\V4101' => __DIR__ . '/../..' . '/classes/Plugin/Update/V4101.php', 'ACP\\Plugin\\Update\\V4301' => __DIR__ . '/../..' . '/classes/Plugin/Update/V4301.php', 'ACP\\Plugin\\Update\\V5000' => __DIR__ . '/../..' . '/classes/Plugin/Update/V5000.php', 'ACP\\Plugin\\Update\\V5104' => __DIR__ . '/../..' . '/classes/Plugin/Update/V5104.php', 'ACP\\Plugin\\Update\\V5201' => __DIR__ . '/../..' . '/classes/Plugin/Update/V5201.php', 'ACP\\Plugin\\Update\\V5300' => __DIR__ . '/../..' . '/classes/Plugin/Update/V5300.php', 'ACP\\Plugin\\Update\\V5400' => __DIR__ . '/../..' . '/classes/Plugin/Update/V5400.php', 'ACP\\Plugin\\Update\\V5700' => __DIR__ . '/../..' . '/classes/Plugin/Update/V5700.php', 'ACP\\Plugin\\Update\\V6000' => __DIR__ . '/../..' . '/classes/Plugin/Update/V6000.php', 'ACP\\Plugins' => __DIR__ . '/../..' . '/classes/Plugins.php', 'ACP\\QuickAdd\\Addon' => __DIR__ . '/../..' . '/classes/QuickAdd/Addon.php', 'ACP\\QuickAdd\\Admin\\HideOnScreen\\QuickAdd' => __DIR__ . '/../..' . '/classes/QuickAdd/Admin/HideOnScreen/QuickAdd.php', 'ACP\\QuickAdd\\Admin\\Settings' => __DIR__ . '/../..' . '/classes/QuickAdd/Admin/Settings.php', 'ACP\\QuickAdd\\Controller\\AjaxNewItem' => __DIR__ . '/../..' . '/classes/QuickAdd/Controller/AjaxNewItem.php', 'ACP\\QuickAdd\\Controller\\AjaxScreenOption' => __DIR__ . '/../..' . '/classes/QuickAdd/Controller/AjaxScreenOption.php', 'ACP\\QuickAdd\\Controller\\JsonResponse' => __DIR__ . '/../..' . '/classes/QuickAdd/Controller/JsonResponse.php', 'ACP\\QuickAdd\\Filter' => __DIR__ . '/../..' . '/classes/QuickAdd/Filter.php', 'ACP\\QuickAdd\\Model\\Create' => __DIR__ . '/../..' . '/classes/QuickAdd/Model/Create.php', 'ACP\\QuickAdd\\Model\\Create\\Post' => __DIR__ . '/../..' . '/classes/QuickAdd/Model/Create/Post.php', 'ACP\\QuickAdd\\Model\\Factory' => __DIR__ . '/../..' . '/classes/QuickAdd/Model/Factory.php', 'ACP\\QuickAdd\\Model\\ModelFactory' => __DIR__ . '/../..' . '/classes/QuickAdd/Model/ModelFactory.php', 'ACP\\QuickAdd\\Model\\PostFactory' => __DIR__ . '/../..' . '/classes/QuickAdd/Model/PostFactory.php', 'ACP\\QuickAdd\\Table\\Checkbox\\ShowButton' => __DIR__ . '/../..' . '/classes/QuickAdd/Table/Checkbox/ShowButton.php', 'ACP\\QuickAdd\\Table\\Loader' => __DIR__ . '/../..' . '/classes/QuickAdd/Table/Loader.php', 'ACP\\QuickAdd\\Table\\Preference\\ShowButton' => __DIR__ . '/../..' . '/classes/QuickAdd/Table/Preference/ShowButton.php', 'ACP\\QuickAdd\\Table\\Script\\AddNewInline' => __DIR__ . '/../..' . '/classes/QuickAdd/Table/Script/AddNewInline.php', 'ACP\\RequestAjaxHandler' => __DIR__ . '/../..' . '/classes/RequestAjaxHandler.php', 'ACP\\RequestAjaxHandlers' => __DIR__ . '/../..' . '/classes/RequestAjaxHandlers.php', 'ACP\\RequestAjaxParser' => __DIR__ . '/../..' . '/classes/RequestAjaxParser.php', 'ACP\\RequestDispatcher' => __DIR__ . '/../..' . '/classes/RequestDispatcher.php', 'ACP\\RequestHandler' => __DIR__ . '/../..' . '/classes/RequestHandler.php', 'ACP\\RequestHandlerFactory' => __DIR__ . '/../..' . '/classes/RequestHandlerFactory.php', 'ACP\\RequestHandler\\Ajax\\AddonInstaller' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/AddonInstaller.php', 'ACP\\RequestHandler\\Ajax\\ColumnOrderList' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ColumnOrderList.php', 'ACP\\RequestHandler\\Ajax\\ColumnOrderUser' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ColumnOrderUser.php', 'ACP\\RequestHandler\\Ajax\\ColumnReset' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ColumnReset.php', 'ACP\\RequestHandler\\Ajax\\ColumnWidthList' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ColumnWidthList.php', 'ACP\\RequestHandler\\Ajax\\ColumnWidthUser' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ColumnWidthUser.php', 'ACP\\RequestHandler\\Ajax\\ColumnWidthUserReset' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ColumnWidthUserReset.php', 'ACP\\RequestHandler\\Ajax\\Feedback' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/Feedback.php', 'ACP\\RequestHandler\\Ajax\\LicenseActivate' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/LicenseActivate.php', 'ACP\\RequestHandler\\Ajax\\ListScreenOrder' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ListScreenOrder.php', 'ACP\\RequestHandler\\Ajax\\ListScreenUsers' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/ListScreenUsers.php', 'ACP\\RequestHandler\\Ajax\\Permalinks' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/Permalinks.php', 'ACP\\RequestHandler\\Ajax\\SubscriptionUpdate' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/SubscriptionUpdate.php', 'ACP\\RequestHandler\\Ajax\\UpdatePlugins' => __DIR__ . '/../..' . '/classes/RequestHandler/Ajax/UpdatePlugins.php', 'ACP\\RequestHandler\\ForcePluginUpdates' => __DIR__ . '/../..' . '/classes/RequestHandler/ForcePluginUpdates.php', 'ACP\\RequestHandler\\LicenseActivate' => __DIR__ . '/../..' . '/classes/RequestHandler/LicenseActivate.php', 'ACP\\RequestHandler\\LicenseDeactivate' => __DIR__ . '/../..' . '/classes/RequestHandler/LicenseDeactivate.php', 'ACP\\RequestHandler\\LicenseUpdate' => __DIR__ . '/../..' . '/classes/RequestHandler/LicenseUpdate.php', 'ACP\\RequestHandler\\ListScreenCreate' => __DIR__ . '/../..' . '/classes/RequestHandler/ListScreenCreate.php', 'ACP\\RequestHandler\\ListScreenDelete' => __DIR__ . '/../..' . '/classes/RequestHandler/ListScreenDelete.php', 'ACP\\RequestParser' => __DIR__ . '/../..' . '/classes/RequestParser.php', 'ACP\\RolesFactory' => __DIR__ . '/../..' . '/classes/RolesFactory.php', 'ACP\\Search\\Addon' => __DIR__ . '/../..' . '/classes/Search/Addon.php', 'ACP\\Search\\Asset\\Script\\Table' => __DIR__ . '/../..' . '/classes/Search/Asset/Script/Table.php', 'ACP\\Search\\Comparison' => __DIR__ . '/../..' . '/classes/Search/Comparison.php', 'ACP\\Search\\Comparison\\Comment\\Agent' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Agent.php', 'ACP\\Search\\Comparison\\Comment\\Approved' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Approved.php', 'ACP\\Search\\Comparison\\Comment\\Author' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Author.php', 'ACP\\Search\\Comparison\\Comment\\Content' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Content.php', 'ACP\\Search\\Comparison\\Comment\\Date' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Date.php', 'ACP\\Search\\Comparison\\Comment\\Date\\Date' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Date/Date.php', 'ACP\\Search\\Comparison\\Comment\\Date\\Gmt' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Date/Gmt.php', 'ACP\\Search\\Comparison\\Comment\\Email' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Email.php', 'ACP\\Search\\Comparison\\Comment\\Field' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Field.php', 'ACP\\Search\\Comparison\\Comment\\HasReplies' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/HasReplies.php', 'ACP\\Search\\Comparison\\Comment\\ID' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/ID.php', 'ACP\\Search\\Comparison\\Comment\\IP' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/IP.php', 'ACP\\Search\\Comparison\\Comment\\IsReply' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/IsReply.php', 'ACP\\Search\\Comparison\\Comment\\Post' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Post.php', 'ACP\\Search\\Comparison\\Comment\\PostType' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/PostType.php', 'ACP\\Search\\Comparison\\Comment\\ReplyTo' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/ReplyTo.php', 'ACP\\Search\\Comparison\\Comment\\Type' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Type.php', 'ACP\\Search\\Comparison\\Comment\\Url' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/Url.php', 'ACP\\Search\\Comparison\\Comment\\User' => __DIR__ . '/../..' . '/classes/Search/Comparison/Comment/User.php', 'ACP\\Search\\Comparison\\Date' => __DIR__ . '/../..' . '/classes/Search/Comparison/Date.php', 'ACP\\Search\\Comparison\\FilterOptions' => __DIR__ . '/../..' . '/classes/Search/Comparison/FilterOptions.php', 'ACP\\Search\\Comparison\\Media\\MetaData' => __DIR__ . '/../..' . '/classes/Search/Comparison/Media/MetaData.php', 'ACP\\Search\\Comparison\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Search/Comparison/Media/MimeType.php', 'ACP\\Search\\Comparison\\Media\\PostType' => __DIR__ . '/../..' . '/classes/Search/Comparison/Media/PostType.php', 'ACP\\Search\\Comparison\\Media\\UsedAsFeaturedImage' => __DIR__ . '/../..' . '/classes/Search/Comparison/Media/UsedAsFeaturedImage.php', 'ACP\\Search\\Comparison\\Meta' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta.php', 'ACP\\Search\\Comparison\\Meta\\Checkmark' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Checkmark.php', 'ACP\\Search\\Comparison\\Meta\\DateFactory' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/DateFactory.php', 'ACP\\Search\\Comparison\\Meta\\DateTime\\ISO' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/DateTime/ISO.php', 'ACP\\Search\\Comparison\\Meta\\DateTime\\Timestamp' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/DateTime/Timestamp.php', 'ACP\\Search\\Comparison\\Meta\\Decimal' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Decimal.php', 'ACP\\Search\\Comparison\\Meta\\EmptyNotEmpty' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/EmptyNotEmpty.php', 'ACP\\Search\\Comparison\\Meta\\Image' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Image.php', 'ACP\\Search\\Comparison\\Meta\\Media' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Media.php', 'ACP\\Search\\Comparison\\Meta\\MultiSelect' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/MultiSelect.php', 'ACP\\Search\\Comparison\\Meta\\Number' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Number.php', 'ACP\\Search\\Comparison\\Meta\\Post' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Post.php', 'ACP\\Search\\Comparison\\Meta\\Posts' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Posts.php', 'ACP\\Search\\Comparison\\Meta\\Select' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Select.php', 'ACP\\Search\\Comparison\\Meta\\Serialized' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Serialized.php', 'ACP\\Search\\Comparison\\Meta\\Text' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Text.php', 'ACP\\Search\\Comparison\\Meta\\Toggle' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/Toggle.php', 'ACP\\Search\\Comparison\\Meta\\User' => __DIR__ . '/../..' . '/classes/Search/Comparison/Meta/User.php', 'ACP\\Search\\Comparison\\Post\\Ancestors' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Ancestors.php', 'ACP\\Search\\Comparison\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Attachment.php', 'ACP\\Search\\Comparison\\Post\\Author' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Author.php', 'ACP\\Search\\Comparison\\Post\\BeforeMoreTag' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/BeforeMoreTag.php', 'ACP\\Search\\Comparison\\Post\\ChildPages' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/ChildPages.php', 'ACP\\Search\\Comparison\\Post\\CommentCount' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/CommentCount.php', 'ACP\\Search\\Comparison\\Post\\CommentStatus' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/CommentStatus.php', 'ACP\\Search\\Comparison\\Post\\Content' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Content.php', 'ACP\\Search\\Comparison\\Post\\Date' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Date.php', 'ACP\\Search\\Comparison\\Post\\Date\\PostDate' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Date/PostDate.php', 'ACP\\Search\\Comparison\\Post\\Date\\PostModified' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Date/PostModified.php', 'ACP\\Search\\Comparison\\Post\\Date\\PostPublished' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Date/PostPublished.php', 'ACP\\Search\\Comparison\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Excerpt.php', 'ACP\\Search\\Comparison\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/FeaturedImage.php', 'ACP\\Search\\Comparison\\Post\\Formats' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Formats.php', 'ACP\\Search\\Comparison\\Post\\HasTerm' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/HasTerm.php', 'ACP\\Search\\Comparison\\Post\\ID' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/ID.php', 'ACP\\Search\\Comparison\\Post\\LastModifiedAuthor' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/LastModifiedAuthor.php', 'ACP\\Search\\Comparison\\Post\\Order' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Order.php', 'ACP\\Search\\Comparison\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PageTemplate.php', 'ACP\\Search\\Comparison\\Post\\PasswordProtected' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PasswordProtected.php', 'ACP\\Search\\Comparison\\Post\\PingStatus' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PingStatus.php', 'ACP\\Search\\Comparison\\Post\\PostField' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PostField.php', 'ACP\\Search\\Comparison\\Post\\PostName' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PostName.php', 'ACP\\Search\\Comparison\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PostParent.php', 'ACP\\Search\\Comparison\\Post\\PostVisibility' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/PostVisibility.php', 'ACP\\Search\\Comparison\\Post\\Status' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Status.php', 'ACP\\Search\\Comparison\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Sticky.php', 'ACP\\Search\\Comparison\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Taxonomy.php', 'ACP\\Search\\Comparison\\Post\\Title' => __DIR__ . '/../..' . '/classes/Search/Comparison/Post/Title.php', 'ACP\\Search\\Comparison\\RemoteValues' => __DIR__ . '/../..' . '/classes/Search/Comparison/RemoteValues.php', 'ACP\\Search\\Comparison\\SearchableValues' => __DIR__ . '/../..' . '/classes/Search/Comparison/SearchableValues.php', 'ACP\\Search\\Comparison\\User\\Date' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Date.php', 'ACP\\Search\\Comparison\\User\\Date\\Registered' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Date/Registered.php', 'ACP\\Search\\Comparison\\User\\Email' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Email.php', 'ACP\\Search\\Comparison\\User\\ID' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/ID.php', 'ACP\\Search\\Comparison\\User\\Languages' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Languages.php', 'ACP\\Search\\Comparison\\User\\MaxPostDate' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/MaxPostDate.php', 'ACP\\Search\\Comparison\\User\\Name' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Name.php', 'ACP\\Search\\Comparison\\User\\Nicename' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Nicename.php', 'ACP\\Search\\Comparison\\User\\Role' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Role.php', 'ACP\\Search\\Comparison\\User\\TrueFalse' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/TrueFalse.php', 'ACP\\Search\\Comparison\\User\\Url' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/Url.php', 'ACP\\Search\\Comparison\\User\\UserField' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/UserField.php', 'ACP\\Search\\Comparison\\User\\UserName' => __DIR__ . '/../..' . '/classes/Search/Comparison/User/UserName.php', 'ACP\\Search\\Comparison\\Values' => __DIR__ . '/../..' . '/classes/Search/Comparison/Values.php', 'ACP\\Search\\Filter' => __DIR__ . '/../..' . '/classes/Search/Filter.php', 'ACP\\Search\\Helper\\DateValueFactory' => __DIR__ . '/../..' . '/classes/Search/Helper/DateValueFactory.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison.php', 'ACP\\Search\\Helper\\MetaQuery\\ComparisonFactory' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/ComparisonFactory.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\BeginsWith' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/BeginsWith.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\CurrentUser' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/CurrentUser.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\EndsWith' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/EndsWith.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\Future' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/Future.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\GtDaysAgo' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/GtDaysAgo.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\IsEmpty' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/IsEmpty.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\LtDaysAgo' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/LtDaysAgo.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\NotEmpty' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/NotEmpty.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\Past' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/Past.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\Today' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/Today.php', 'ACP\\Search\\Helper\\MetaQuery\\Comparison\\WithinDays' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Comparison/WithinDays.php', 'ACP\\Search\\Helper\\MetaQuery\\Date' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/Date.php', 'ACP\\Search\\Helper\\MetaQuery\\SerializedComparisonFactory' => __DIR__ . '/../..' . '/classes/Search/Helper/MetaQuery/SerializedComparisonFactory.php', 'ACP\\Search\\Helper\\Sql\\Comparison' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison.php', 'ACP\\Search\\Helper\\Sql\\ComparisonFactory' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/ComparisonFactory.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\BeginsWith' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/BeginsWith.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Between' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Between.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Contains' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Contains.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\CurrentUser' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/CurrentUser.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\EndsWith' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/EndsWith.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Future' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Future.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\GtDaysAgo' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/GtDaysAgo.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\In' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/In.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Like' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Like.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\LtDaysAgo' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/LtDaysAgo.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Negatable' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Negatable.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\NotContains' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/NotContains.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\NotIn' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/NotIn.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\NotLike' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/NotLike.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Past' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Past.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\Today' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/Today.php', 'ACP\\Search\\Helper\\Sql\\Comparison\\WithinDays' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Comparison/WithinDays.php', 'ACP\\Search\\Helper\\Sql\\Statement' => __DIR__ . '/../..' . '/classes/Search/Helper/Sql/Statement.php', 'ACP\\Search\\Helper\\TaxQuery\\Comparison' => __DIR__ . '/../..' . '/classes/Search/Helper/TaxQuery/Comparison.php', 'ACP\\Search\\Helper\\TaxQuery\\ComparisonFactory' => __DIR__ . '/../..' . '/classes/Search/Helper/TaxQuery/ComparisonFactory.php', 'ACP\\Search\\Helper\\UserValueFactory' => __DIR__ . '/../..' . '/classes/Search/Helper/UserValueFactory.php', 'ACP\\Search\\Labels' => __DIR__ . '/../..' . '/classes/Search/Labels.php', 'ACP\\Search\\Labels\\Date' => __DIR__ . '/../..' . '/classes/Search/Labels/Date.php', 'ACP\\Search\\Middleware\\Filter' => __DIR__ . '/../..' . '/classes/Search/Middleware/Filter.php', 'ACP\\Search\\Middleware\\Mapping' => __DIR__ . '/../..' . '/classes/Search/Middleware/Mapping.php', 'ACP\\Search\\Middleware\\Mapping\\Operator' => __DIR__ . '/../..' . '/classes/Search/Middleware/Mapping/Operator.php', 'ACP\\Search\\Middleware\\Mapping\\Rule' => __DIR__ . '/../..' . '/classes/Search/Middleware/Mapping/Rule.php', 'ACP\\Search\\Middleware\\Mapping\\ValueType' => __DIR__ . '/../..' . '/classes/Search/Middleware/Mapping/ValueType.php', 'ACP\\Search\\Middleware\\Request' => __DIR__ . '/../..' . '/classes/Search/Middleware/Request.php', 'ACP\\Search\\Middleware\\Rules' => __DIR__ . '/../..' . '/classes/Search/Middleware/Rules.php', 'ACP\\Search\\Middleware\\Segment' => __DIR__ . '/../..' . '/classes/Search/Middleware/Segment.php', 'ACP\\Search\\Operators' => __DIR__ . '/../..' . '/classes/Search/Operators.php', 'ACP\\Search\\Preferences\\SmartFiltering' => __DIR__ . '/../..' . '/classes/Search/Preferences/SmartFiltering.php', 'ACP\\Search\\Query' => __DIR__ . '/../..' . '/classes/Search/Query.php', 'ACP\\Search\\QueryFactory' => __DIR__ . '/../..' . '/classes/Search/QueryFactory.php', 'ACP\\Search\\Query\\Bindings' => __DIR__ . '/../..' . '/classes/Search/Query/Bindings.php', 'ACP\\Search\\Query\\Bindings\\Comment' => __DIR__ . '/../..' . '/classes/Search/Query/Bindings/Comment.php', 'ACP\\Search\\Query\\Bindings\\Media' => __DIR__ . '/../..' . '/classes/Search/Query/Bindings/Media.php', 'ACP\\Search\\Query\\Bindings\\Post' => __DIR__ . '/../..' . '/classes/Search/Query/Bindings/Post.php', 'ACP\\Search\\Query\\Comment' => __DIR__ . '/../..' . '/classes/Search/Query/Comment.php', 'ACP\\Search\\Query\\Post' => __DIR__ . '/../..' . '/classes/Search/Query/Post.php', 'ACP\\Search\\Query\\Term' => __DIR__ . '/../..' . '/classes/Search/Query/Term.php', 'ACP\\Search\\Query\\User' => __DIR__ . '/../..' . '/classes/Search/Query/User.php', 'ACP\\Search\\RequestHandler\\Comparison' => __DIR__ . '/../..' . '/classes/Search/RequestHandler/Comparison.php', 'ACP\\Search\\RequestHandler\\Rules' => __DIR__ . '/../..' . '/classes/Search/RequestHandler/Rules.php', 'ACP\\Search\\Rule' => __DIR__ . '/../..' . '/classes/Search/Rule.php', 'ACP\\Search\\Rules' => __DIR__ . '/../..' . '/classes/Search/Rules.php', 'ACP\\Search\\Searchable' => __DIR__ . '/../..' . '/classes/Search/Searchable.php', 'ACP\\Search\\Settings' => __DIR__ . '/../..' . '/classes/Search/Settings.php', 'ACP\\Search\\Settings\\Column' => __DIR__ . '/../..' . '/classes/Search/Settings/Column.php', 'ACP\\Search\\Settings\\HideOnScreen\\SavedFilters' => __DIR__ . '/../..' . '/classes/Search/Settings/HideOnScreen/SavedFilters.php', 'ACP\\Search\\Settings\\HideOnScreen\\SmartFilters' => __DIR__ . '/../..' . '/classes/Search/Settings/HideOnScreen/SmartFilters.php', 'ACP\\Search\\TableScreen' => __DIR__ . '/../..' . '/classes/Search/TableScreen.php', 'ACP\\Search\\TableScreenFactory' => __DIR__ . '/../..' . '/classes/Search/TableScreenFactory.php', 'ACP\\Search\\TableScreenOptions' => __DIR__ . '/../..' . '/classes/Search/TableScreenOptions.php', 'ACP\\Search\\TableScreen\\Comment' => __DIR__ . '/../..' . '/classes/Search/TableScreen/Comment.php', 'ACP\\Search\\TableScreen\\MSUser' => __DIR__ . '/../..' . '/classes/Search/TableScreen/MSUser.php', 'ACP\\Search\\TableScreen\\Post' => __DIR__ . '/../..' . '/classes/Search/TableScreen/Post.php', 'ACP\\Search\\TableScreen\\Taxonomy' => __DIR__ . '/../..' . '/classes/Search/TableScreen/Taxonomy.php', 'ACP\\Search\\TableScreen\\User' => __DIR__ . '/../..' . '/classes/Search/TableScreen/User.php', 'ACP\\Search\\Value' => __DIR__ . '/../..' . '/classes/Search/Value.php', 'ACP\\Service\\Banner' => __DIR__ . '/../..' . '/classes/Service/Banner.php', 'ACP\\Service\\ForcePluginUpdate' => __DIR__ . '/../..' . '/classes/Service/ForcePluginUpdate.php', 'ACP\\Service\\IntegrationStatus' => __DIR__ . '/../..' . '/classes/Service/IntegrationStatus.php', 'ACP\\Service\\Permissions' => __DIR__ . '/../..' . '/classes/Service/Permissions.php', 'ACP\\Service\\PluginNotice' => __DIR__ . '/../..' . '/classes/Service/PluginNotice.php', 'ACP\\Service\\PluginUpdater' => __DIR__ . '/../..' . '/classes/Service/PluginUpdater.php', 'ACP\\Service\\Storage' => __DIR__ . '/../..' . '/classes/Service/Storage.php', 'ACP\\Service\\Templates' => __DIR__ . '/../..' . '/classes/Service/Templates.php', 'ACP\\Settings\\Column\\CustomField' => __DIR__ . '/../..' . '/classes/Settings/Column/CustomField.php', 'ACP\\Settings\\Column\\CustomFieldType' => __DIR__ . '/../..' . '/classes/Settings/Column/CustomFieldType.php', 'ACP\\Settings\\Column\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Settings/Column/FeaturedImage.php', 'ACP\\Settings\\Column\\FeaturedImageDisplay' => __DIR__ . '/../..' . '/classes/Settings/Column/FeaturedImageDisplay.php', 'ACP\\Settings\\Column\\Gravatar' => __DIR__ . '/../..' . '/classes/Settings/Column/Gravatar.php', 'ACP\\Settings\\Column\\Gutenberg' => __DIR__ . '/../..' . '/classes/Settings/Column/Gutenberg.php', 'ACP\\Settings\\Column\\Label' => __DIR__ . '/../..' . '/classes/Settings/Column/Label.php', 'ACP\\Settings\\Column\\LinkCount' => __DIR__ . '/../..' . '/classes/Settings/Column/LinkCount.php', 'ACP\\Settings\\Column\\NetworkSite\\CommentCount' => __DIR__ . '/../..' . '/classes/Settings/Column/NetworkSite/CommentCount.php', 'ACP\\Settings\\Column\\NetworkSite\\Options' => __DIR__ . '/../..' . '/classes/Settings/Column/NetworkSite/Options.php', 'ACP\\Settings\\Column\\NetworkSite\\Plugins' => __DIR__ . '/../..' . '/classes/Settings/Column/NetworkSite/Plugins.php', 'ACP\\Settings\\Column\\NetworkSite\\PluginsInclude' => __DIR__ . '/../..' . '/classes/Settings/Column/NetworkSite/PluginsInclude.php', 'ACP\\Settings\\Column\\NetworkSite\\PostCount' => __DIR__ . '/../..' . '/classes/Settings/Column/NetworkSite/PostCount.php', 'ACP\\Settings\\Column\\NetworkSite\\Theme' => __DIR__ . '/../..' . '/classes/Settings/Column/NetworkSite/Theme.php', 'ACP\\Settings\\Column\\Post\\TaxonomyTerm' => __DIR__ . '/../..' . '/classes/Settings/Column/Post/TaxonomyTerm.php', 'ACP\\Settings\\Column\\SerializedArray' => __DIR__ . '/../..' . '/classes/Settings/Column/SerializedArray.php', 'ACP\\Settings\\Column\\Shortcodes' => __DIR__ . '/../..' . '/classes/Settings/Column/Shortcodes.php', 'ACP\\Settings\\Column\\TaxonomyPostType' => __DIR__ . '/../..' . '/classes/Settings/Column/TaxonomyPostType.php', 'ACP\\Settings\\Column\\Term' => __DIR__ . '/../..' . '/classes/Settings/Column/Term.php', 'ACP\\Settings\\Column\\User' => __DIR__ . '/../..' . '/classes/Settings/Column/User.php', 'ACP\\Settings\\Column\\UserCustomField' => __DIR__ . '/../..' . '/classes/Settings/Column/UserCustomField.php', 'ACP\\Settings\\ListScreen\\HideOnScreen' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen.php', 'ACP\\Settings\\ListScreen\\HideOnScreenCollection' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreenCollection.php', 'ACP\\Settings\\ListScreen\\HideOnScreenFactory' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreenFactory.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\BulkActions' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/BulkActions.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\ColumnOrder' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/ColumnOrder.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\ColumnResize' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/ColumnResize.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\FilterCategory' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/FilterCategory.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\FilterCommentType' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/FilterCommentType.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\FilterMediaItem' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/FilterMediaItem.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\FilterPostDate' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/FilterPostDate.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\FilterPostFormat' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/FilterPostFormat.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\Filters' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/Filters.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\RowActions' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/RowActions.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\Search' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/Search.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\SubMenu' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/SubMenu.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\SubMenu\\CommentStatus' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/SubMenu/CommentStatus.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\SubMenu\\PostStatus' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/SubMenu/PostStatus.php', 'ACP\\Settings\\ListScreen\\HideOnScreen\\SubMenu\\Roles' => __DIR__ . '/../..' . '/classes/Settings/ListScreen/HideOnScreen/SubMenu/Roles.php', 'ACP\\Sorting\\AbstractModel' => __DIR__ . '/../..' . '/classes/Sorting/AbstractModel.php', 'ACP\\Sorting\\Addon' => __DIR__ . '/../..' . '/classes/Sorting/Addon.php', 'ACP\\Sorting\\Admin\\Section\\ResetSorting' => __DIR__ . '/../..' . '/classes/Sorting/Admin/Section/ResetSorting.php', 'ACP\\Sorting\\ApplyFilter\\DefaultSort' => __DIR__ . '/../..' . '/classes/Sorting/ApplyFilter/DefaultSort.php', 'ACP\\Sorting\\Controller\\AjaxResetSorting' => __DIR__ . '/../..' . '/classes/Sorting/Controller/AjaxResetSorting.php', 'ACP\\Sorting\\Controller\\ManageSortHandler' => __DIR__ . '/../..' . '/classes/Sorting/Controller/ManageSortHandler.php', 'ACP\\Sorting\\Controller\\RequestSetterHandler' => __DIR__ . '/../..' . '/classes/Sorting/Controller/RequestSetterHandler.php', 'ACP\\Sorting\\Controller\\ResetSorting' => __DIR__ . '/../..' . '/classes/Sorting/Controller/ResetSorting.php', 'ACP\\Sorting\\FormatValue' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue.php', 'ACP\\Sorting\\FormatValue\\AvailableSizes' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/AvailableSizes.php', 'ACP\\Sorting\\FormatValue\\ContentTotalImageSize' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/ContentTotalImageSize.php', 'ACP\\Sorting\\FormatValue\\Date' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/Date.php', 'ACP\\Sorting\\FormatValue\\Dimensions' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/Dimensions.php', 'ACP\\Sorting\\FormatValue\\Exif' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/Exif.php', 'ACP\\Sorting\\FormatValue\\FileMeta' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/FileMeta.php', 'ACP\\Sorting\\FormatValue\\FileName' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/FileName.php', 'ACP\\Sorting\\FormatValue\\FileSize' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/FileSize.php', 'ACP\\Sorting\\FormatValue\\Height' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/Height.php', 'ACP\\Sorting\\FormatValue\\PostTitle' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/PostTitle.php', 'ACP\\Sorting\\FormatValue\\Roles' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/Roles.php', 'ACP\\Sorting\\FormatValue\\SerializedKey' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/SerializedKey.php', 'ACP\\Sorting\\FormatValue\\SerializedSettingFormatter' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/SerializedSettingFormatter.php', 'ACP\\Sorting\\FormatValue\\SettingFormatter' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/SettingFormatter.php', 'ACP\\Sorting\\FormatValue\\ShortCodeCount' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/ShortCodeCount.php', 'ACP\\Sorting\\FormatValue\\StripContent' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/StripContent.php', 'ACP\\Sorting\\FormatValue\\Width' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/Width.php', 'ACP\\Sorting\\FormatValue\\WordCount' => __DIR__ . '/../..' . '/classes/Sorting/FormatValue/WordCount.php', 'ACP\\Sorting\\ListScreen' => __DIR__ . '/../..' . '/classes/Sorting/ListScreen.php', 'ACP\\Sorting\\Model' => __DIR__ . '/../..' . '/classes/Sorting/Model.php', 'ACP\\Sorting\\ModelFactory' => __DIR__ . '/../..' . '/classes/Sorting/ModelFactory.php', 'ACP\\Sorting\\Model\\Comment\\Author' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/Author.php', 'ACP\\Sorting\\Model\\Comment\\AuthorFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/AuthorFactory.php', 'ACP\\Sorting\\Model\\Comment\\Author\\FullName' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/Author/FullName.php', 'ACP\\Sorting\\Model\\Comment\\Author\\UserField' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/Author/UserField.php', 'ACP\\Sorting\\Model\\Comment\\Author\\UserMeta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/Author/UserMeta.php', 'ACP\\Sorting\\Model\\Comment\\FieldFormat' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/FieldFormat.php', 'ACP\\Sorting\\Model\\Comment\\Meta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/Meta.php', 'ACP\\Sorting\\Model\\Comment\\MetaCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/MetaCount.php', 'ACP\\Sorting\\Model\\Comment\\MetaFormat' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/MetaFormat.php', 'ACP\\Sorting\\Model\\Comment\\MetaMapping' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/MetaMapping.php', 'ACP\\Sorting\\Model\\Comment\\Response' => __DIR__ . '/../..' . '/classes/Sorting/Model/Comment/Response.php', 'ACP\\Sorting\\Model\\CustomFieldFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/CustomFieldFactory.php', 'ACP\\Sorting\\Model\\Disabled' => __DIR__ . '/../..' . '/classes/Sorting/Model/Disabled.php', 'ACP\\Sorting\\Model\\Media\\AttachmentMetaData' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/AttachmentMetaData.php', 'ACP\\Sorting\\Model\\Media\\AvailableSizes' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/AvailableSizes.php', 'ACP\\Sorting\\Model\\Media\\Dimensions' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/Dimensions.php', 'ACP\\Sorting\\Model\\Media\\Exif' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/Exif.php', 'ACP\\Sorting\\Model\\Media\\FileMeta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/FileMeta.php', 'ACP\\Sorting\\Model\\Media\\FileSize' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/FileSize.php', 'ACP\\Sorting\\Model\\Media\\Height' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/Height.php', 'ACP\\Sorting\\Model\\Media\\MetaDataText' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/MetaDataText.php', 'ACP\\Sorting\\Model\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/MimeType.php', 'ACP\\Sorting\\Model\\Media\\Width' => __DIR__ . '/../..' . '/classes/Sorting/Model/Media/Width.php', 'ACP\\Sorting\\Model\\MetaCountFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/MetaCountFactory.php', 'ACP\\Sorting\\Model\\MetaFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/MetaFactory.php', 'ACP\\Sorting\\Model\\MetaFormatFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/MetaFormatFactory.php', 'ACP\\Sorting\\Model\\MetaMappingFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/MetaMappingFactory.php', 'ACP\\Sorting\\Model\\MetaRelatedPostFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/MetaRelatedPostFactory.php', 'ACP\\Sorting\\Model\\MetaRelatedUserFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/MetaRelatedUserFactory.php', 'ACP\\Sorting\\Model\\OrderBy' => __DIR__ . '/../..' . '/classes/Sorting/Model/OrderBy.php', 'ACP\\Sorting\\Model\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Attachment.php', 'ACP\\Sorting\\Model\\Post\\AuthorFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/AuthorFactory.php', 'ACP\\Sorting\\Model\\Post\\AuthorName' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/AuthorName.php', 'ACP\\Sorting\\Model\\Post\\Author\\FullName' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Author/FullName.php', 'ACP\\Sorting\\Model\\Post\\Author\\UserField' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Author/UserField.php', 'ACP\\Sorting\\Model\\Post\\Author\\UserMeta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Author/UserMeta.php', 'ACP\\Sorting\\Model\\Post\\BeforeMoreTag' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/BeforeMoreTag.php', 'ACP\\Sorting\\Model\\Post\\CommentCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/CommentCount.php', 'ACP\\Sorting\\Model\\Post\\CommentCountFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/CommentCountFactory.php', 'ACP\\Sorting\\Model\\Post\\Depth' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Depth.php', 'ACP\\Sorting\\Model\\Post\\EstimateReadingTime' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/EstimateReadingTime.php', 'ACP\\Sorting\\Model\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Excerpt.php', 'ACP\\Sorting\\Model\\Post\\Featured' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Featured.php', 'ACP\\Sorting\\Model\\Post\\FeaturedImageSize' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/FeaturedImageSize.php', 'ACP\\Sorting\\Model\\Post\\FieldFormat' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/FieldFormat.php', 'ACP\\Sorting\\Model\\Post\\Fields' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Fields.php', 'ACP\\Sorting\\Model\\Post\\ImageFileSizes' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/ImageFileSizes.php', 'ACP\\Sorting\\Model\\Post\\LastModifiedAuthorFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/LastModifiedAuthorFactory.php', 'ACP\\Sorting\\Model\\Post\\LatestComment' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/LatestComment.php', 'ACP\\Sorting\\Model\\Post\\LinkCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/LinkCount.php', 'ACP\\Sorting\\Model\\Post\\Menu' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Menu.php', 'ACP\\Sorting\\Model\\Post\\Meta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Meta.php', 'ACP\\Sorting\\Model\\Post\\MetaCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/MetaCount.php', 'ACP\\Sorting\\Model\\Post\\MetaFormat' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/MetaFormat.php', 'ACP\\Sorting\\Model\\Post\\MetaMapping' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/MetaMapping.php', 'ACP\\Sorting\\Model\\Post\\MetaRelatedPostFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/MetaRelatedPostFactory.php', 'ACP\\Sorting\\Model\\Post\\MetaRelatedUserFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/MetaRelatedUserFactory.php', 'ACP\\Sorting\\Model\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/PageTemplate.php', 'ACP\\Sorting\\Model\\Post\\Permalink' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Permalink.php', 'ACP\\Sorting\\Model\\Post\\PostContent' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/PostContent.php', 'ACP\\Sorting\\Model\\Post\\PostExcerpt' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/PostExcerpt.php', 'ACP\\Sorting\\Model\\Post\\PostField' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/PostField.php', 'ACP\\Sorting\\Model\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/PostParent.php', 'ACP\\Sorting\\Model\\Post\\RelatedMeta\\PostField' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/RelatedMeta/PostField.php', 'ACP\\Sorting\\Model\\Post\\RelatedMeta\\PostMeta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/RelatedMeta/PostMeta.php', 'ACP\\Sorting\\Model\\Post\\RelatedMeta\\UserField' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/RelatedMeta/UserField.php', 'ACP\\Sorting\\Model\\Post\\RelatedMeta\\UserMeta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/RelatedMeta/UserMeta.php', 'ACP\\Sorting\\Model\\Post\\Shortcodes' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Shortcodes.php', 'ACP\\Sorting\\Model\\Post\\Status' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Status.php', 'ACP\\Sorting\\Model\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Sticky.php', 'ACP\\Sorting\\Model\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/Taxonomy.php', 'ACP\\Sorting\\Model\\Post\\WordCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/Post/WordCount.php', 'ACP\\Sorting\\Model\\SqlOrderByFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/SqlOrderByFactory.php', 'ACP\\Sorting\\Model\\Taxonomy\\Menu' => __DIR__ . '/../..' . '/classes/Sorting/Model/Taxonomy/Menu.php', 'ACP\\Sorting\\Model\\Taxonomy\\Meta' => __DIR__ . '/../..' . '/classes/Sorting/Model/Taxonomy/Meta.php', 'ACP\\Sorting\\Model\\Taxonomy\\MetaCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/Taxonomy/MetaCount.php', 'ACP\\Sorting\\Model\\Taxonomy\\MetaFormat' => __DIR__ . '/../..' . '/classes/Sorting/Model/Taxonomy/MetaFormat.php', 'ACP\\Sorting\\Model\\Taxonomy\\MetaMapping' => __DIR__ . '/../..' . '/classes/Sorting/Model/Taxonomy/MetaMapping.php', 'ACP\\Sorting\\Model\\User\\CommentCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/CommentCount.php', 'ACP\\Sorting\\Model\\User\\FullName' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/FullName.php', 'ACP\\Sorting\\Model\\User\\MaxPostDate' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/MaxPostDate.php', 'ACP\\Sorting\\Model\\User\\Meta' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/Meta.php', 'ACP\\Sorting\\Model\\User\\MetaCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/MetaCount.php', 'ACP\\Sorting\\Model\\User\\MetaFormat' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/MetaFormat.php', 'ACP\\Sorting\\Model\\User\\MetaMapping' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/MetaMapping.php', 'ACP\\Sorting\\Model\\User\\MetaRelatedPostFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/MetaRelatedPostFactory.php', 'ACP\\Sorting\\Model\\User\\MetaRelatedUserFactory' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/MetaRelatedUserFactory.php', 'ACP\\Sorting\\Model\\User\\PostCount' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/PostCount.php', 'ACP\\Sorting\\Model\\User\\RelatedMeta\\PostField' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/RelatedMeta/PostField.php', 'ACP\\Sorting\\Model\\User\\RelatedMeta\\UserField' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/RelatedMeta/UserField.php', 'ACP\\Sorting\\Model\\User\\RelatedMeta\\UserMeta' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/RelatedMeta/UserMeta.php', 'ACP\\Sorting\\Model\\User\\Roles' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/Roles.php', 'ACP\\Sorting\\Model\\User\\UserField' => __DIR__ . '/../..' . '/classes/Sorting/Model/User/UserField.php', 'ACP\\Sorting\\Model\\WarningAware' => __DIR__ . '/../..' . '/classes/Sorting/Model/WarningAware.php', 'ACP\\Sorting\\NativeSortableFactory' => __DIR__ . '/../..' . '/classes/Sorting/NativeSortableFactory.php', 'ACP\\Sorting\\NativeSortable\\NativeSortableRepository' => __DIR__ . '/../..' . '/classes/Sorting/NativeSortable/NativeSortableRepository.php', 'ACP\\Sorting\\NativeSortable\\Storage' => __DIR__ . '/../..' . '/classes/Sorting/NativeSortable/Storage.php', 'ACP\\Sorting\\Request\\Sort' => __DIR__ . '/../..' . '/classes/Sorting/Request/Sort.php', 'ACP\\Sorting\\Settings' => __DIR__ . '/../..' . '/classes/Sorting/Settings.php', 'ACP\\Sorting\\Settings\\ListScreen\\PreferredSegmentSort' => __DIR__ . '/../..' . '/classes/Sorting/Settings/ListScreen/PreferredSegmentSort.php', 'ACP\\Sorting\\Settings\\ListScreen\\PreferredSort' => __DIR__ . '/../..' . '/classes/Sorting/Settings/ListScreen/PreferredSort.php', 'ACP\\Sorting\\Sortable' => __DIR__ . '/../..' . '/classes/Sorting/Sortable.php', 'ACP\\Sorting\\Sorter' => __DIR__ . '/../..' . '/classes/Sorting/Sorter.php', 'ACP\\Sorting\\Strategy' => __DIR__ . '/../..' . '/classes/Sorting/Strategy.php', 'ACP\\Sorting\\Strategy\\Comment' => __DIR__ . '/../..' . '/classes/Sorting/Strategy/Comment.php', 'ACP\\Sorting\\Strategy\\Media' => __DIR__ . '/../..' . '/classes/Sorting/Strategy/Media.php', 'ACP\\Sorting\\Strategy\\Post' => __DIR__ . '/../..' . '/classes/Sorting/Strategy/Post.php', 'ACP\\Sorting\\Strategy\\Taxonomy' => __DIR__ . '/../..' . '/classes/Sorting/Strategy/Taxonomy.php', 'ACP\\Sorting\\Strategy\\User' => __DIR__ . '/../..' . '/classes/Sorting/Strategy/User.php', 'ACP\\Sorting\\Table\\Filter\\DisabledOriginalColumns' => __DIR__ . '/../..' . '/classes/Sorting/Table/Filter/DisabledOriginalColumns.php', 'ACP\\Sorting\\Table\\Filter\\SortableColumns' => __DIR__ . '/../..' . '/classes/Sorting/Table/Filter/SortableColumns.php', 'ACP\\Sorting\\Table\\ResetButton' => __DIR__ . '/../..' . '/classes/Sorting/Table/ResetButton.php', 'ACP\\Sorting\\Table\\Screen' => __DIR__ . '/../..' . '/classes/Sorting/Table/Screen.php', 'ACP\\Sorting\\Type\\CastType' => __DIR__ . '/../..' . '/classes/Sorting/Type/CastType.php', 'ACP\\Sorting\\Type\\ComputationType' => __DIR__ . '/../..' . '/classes/Sorting/Type/ComputationType.php', 'ACP\\Sorting\\Type\\DataType' => __DIR__ . '/../..' . '/classes/Sorting/Type/DataType.php', 'ACP\\Sorting\\Type\\EmptyValues' => __DIR__ . '/../..' . '/classes/Sorting/Type/EmptyValues.php', 'ACP\\Sorting\\Type\\SortType' => __DIR__ . '/../..' . '/classes/Sorting/Type/SortType.php', 'ACP\\Sorting\\UserPreference\\SortType' => __DIR__ . '/../..' . '/classes/Sorting/UserPreference/SortType.php', 'ACP\\Storage\\Directory' => __DIR__ . '/../..' . '/classes/Storage/Directory.php', 'ACP\\Storage\\ListScreenRepositoryFactory' => __DIR__ . '/../..' . '/classes/Storage/ListScreenRepositoryFactory.php', 'ACP\\Storage\\ListScreen\\Decoder' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Decoder.php', 'ACP\\Storage\\ListScreen\\DecoderFactory' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/DecoderFactory.php', 'ACP\\Storage\\ListScreen\\Decoder\\Version510' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Decoder/Version510.php', 'ACP\\Storage\\ListScreen\\EncodedCollection' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/EncodedCollection.php', 'ACP\\Storage\\ListScreen\\Encoder' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Encoder.php', 'ACP\\Storage\\ListScreen\\LegacyCollectionDecoder' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/LegacyCollectionDecoder.php', 'ACP\\Storage\\ListScreen\\LegacyCollectionDecoderAggregate' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/LegacyCollectionDecoderAggregate.php', 'ACP\\Storage\\ListScreen\\LegacyCollectionDecoder\\Version332' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/LegacyCollectionDecoder/Version332.php', 'ACP\\Storage\\ListScreen\\LegacyCollectionDecoder\\Version384' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/LegacyCollectionDecoder/Version384.php', 'ACP\\Storage\\ListScreen\\LegacyCollectionDecoder\\Version400' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/LegacyCollectionDecoder/Version400.php', 'ACP\\Storage\\ListScreen\\Serializer' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Serializer.php', 'ACP\\Storage\\ListScreen\\SerializerTypes' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/SerializerTypes.php', 'ACP\\Storage\\ListScreen\\Serializer\\JsonSerializer' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Serializer/JsonSerializer.php', 'ACP\\Storage\\ListScreen\\Serializer\\PhpSerializer' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Serializer/PhpSerializer.php', 'ACP\\Storage\\ListScreen\\Serializer\\PhpSerializer\\File' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Serializer/PhpSerializer/File.php', 'ACP\\Storage\\ListScreen\\Unserializer' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Unserializer.php', 'ACP\\Storage\\ListScreen\\Unserializer\\JsonUnserializer' => __DIR__ . '/../..' . '/classes/Storage/ListScreen/Unserializer/JsonUnserializer.php', 'ACP\\Storage\\PluginsData' => __DIR__ . '/../..' . '/classes/Storage/PluginsData.php', 'ACP\\Table\\HideElement' => __DIR__ . '/../..' . '/classes/Table/HideElement.php', 'ACP\\Table\\HideElement\\ActionsBar' => __DIR__ . '/../..' . '/classes/Table/HideElement/ActionsBar.php', 'ACP\\Table\\HideElement\\BulkActions' => __DIR__ . '/../..' . '/classes/Table/HideElement/BulkActions.php', 'ACP\\Table\\HideElement\\FilterCommentTypes' => __DIR__ . '/../..' . '/classes/Table/HideElement/FilterCommentTypes.php', 'ACP\\Table\\HideElement\\FilterMediaItems' => __DIR__ . '/../..' . '/classes/Table/HideElement/FilterMediaItems.php', 'ACP\\Table\\HideElement\\FilterPostCategories' => __DIR__ . '/../..' . '/classes/Table/HideElement/FilterPostCategories.php', 'ACP\\Table\\HideElement\\FilterPostDate' => __DIR__ . '/../..' . '/classes/Table/HideElement/FilterPostDate.php', 'ACP\\Table\\HideElement\\FilterPostFormats' => __DIR__ . '/../..' . '/classes/Table/HideElement/FilterPostFormats.php', 'ACP\\Table\\HideElement\\Filters' => __DIR__ . '/../..' . '/classes/Table/HideElement/Filters.php', 'ACP\\Table\\HideElement\\RowActions' => __DIR__ . '/../..' . '/classes/Table/HideElement/RowActions.php', 'ACP\\Table\\HideElement\\Search' => __DIR__ . '/../..' . '/classes/Table/HideElement/Search.php', 'ACP\\Table\\HideElement\\SubMenu' => __DIR__ . '/../..' . '/classes/Table/HideElement/SubMenu.php', 'ACP\\Table\\HideElements' => __DIR__ . '/../..' . '/classes/Table/HideElements.php', 'ACP\\Table\\HorizontalScrolling' => __DIR__ . '/../..' . '/classes/Table/HorizontalScrolling.php', 'ACP\\Table\\PrimaryColumn' => __DIR__ . '/../..' . '/classes/Table/PrimaryColumn.php', 'ACP\\Table\\Scripts' => __DIR__ . '/../..' . '/classes/Table/Scripts.php', 'ACP\\Table\\StickyTableRow' => __DIR__ . '/../..' . '/classes/Table/StickyTableRow.php', 'ACP\\Table\\Switcher' => __DIR__ . '/../..' . '/classes/Table/Switcher.php', 'ACP\\TermQueryInformation' => __DIR__ . '/../..' . '/classes/TermQueryInformation.php', 'ACP\\Transient\\LicenseCheckTransient' => __DIR__ . '/../..' . '/classes/Transient/LicenseCheckTransient.php', 'ACP\\Transient\\UpdateCheckTransient' => __DIR__ . '/../..' . '/classes/Transient/UpdateCheckTransient.php', 'ACP\\Transient\\UpdateCheckTransientHourly' => __DIR__ . '/../..' . '/classes/Transient/UpdateCheckTransientHourly.php', 'ACP\\Type\\ActivationToken' => __DIR__ . '/../..' . '/classes/Type/ActivationToken.php', 'ACP\\Type\\Activation\\ExpiryDate' => __DIR__ . '/../..' . '/classes/Type/Activation/ExpiryDate.php', 'ACP\\Type\\Activation\\Key' => __DIR__ . '/../..' . '/classes/Type/Activation/Key.php', 'ACP\\Type\\Activation\\Products' => __DIR__ . '/../..' . '/classes/Type/Activation/Products.php', 'ACP\\Type\\Activation\\RenewalMethod' => __DIR__ . '/../..' . '/classes/Type/Activation/RenewalMethod.php', 'ACP\\Type\\Activation\\Status' => __DIR__ . '/../..' . '/classes/Type/Activation/Status.php', 'ACP\\Type\\ApiStatus' => __DIR__ . '/../..' . '/classes/Type/ApiStatus.php', 'ACP\\Type\\LicenseKey' => __DIR__ . '/../..' . '/classes/Type/LicenseKey.php', 'ACP\\Type\\SetupStep' => __DIR__ . '/../..' . '/classes/Type/SetupStep.php', 'ACP\\Type\\SiteUrl' => __DIR__ . '/../..' . '/classes/Type/SiteUrl.php', 'ACP\\Type\\Url\\Changelog' => __DIR__ . '/../..' . '/classes/Type/Url/Changelog.php', 'ACP\\Updates\\PeriodicUpdateCheck' => __DIR__ . '/../..' . '/classes/Updates/PeriodicUpdateCheck.php', 'ACP\\Updates\\PluginDataUpdater' => __DIR__ . '/../..' . '/classes/Updates/PluginDataUpdater.php', 'ACP\\Updates\\UpdatePlugin' => __DIR__ . '/../..' . '/classes/Updates/UpdatePlugin.php', 'ACP\\Updates\\ViewPluginDetails' => __DIR__ . '/../..' . '/classes/Updates/ViewPluginDetails.php', 'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace ACA\GravityForms\Editing\Storage {
    class Entry implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $field_id;
        public function __construct($field_id)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\GravityForms\Editing\Storage\Entry {
    class Checkbox implements \ACP\Editing\Storage
    {
        /**
         * @var Field
         */
        private $field;
        public function __construct(\ACA\GravityForms\Field\Field $field)
        {
        }
        public function get(int $id)
        {
        }
        private function get_id_for_value($value) : ?string
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class MultiSelect extends \ACA\GravityForms\Editing\Storage\Entry
    {
        /**
         * @var Field
         */
        private $field;
        public function __construct(\ACA\GravityForms\Field\Field $field)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\GravityForms\Editing\RequestHandler\Query {
    class Entry implements \ACP\Editing\RequestHandler
    {
        /**
         * @var GF_Entry_List_Table
         */
        private $list_table;
        /**
         * @var Request
         */
        private $request;
        public function __construct(\GF_Entry_List_Table $list_table)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
        public function register()
        {
        }
        /**
         * @return int
         */
        private function get_rows_per_iteration()
        {
        }
        /**
         * @return int
         */
        protected function get_offset()
        {
        }
        public function send()
        {
        }
        public function set_query_vars($args)
        {
        }
    }
}
namespace ACA\GravityForms\Editing\TableRows {
    class Entry extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
    }
}
namespace ACA\GravityForms\Editing\Strategy {
    class Entry implements \ACP\Editing\Strategy
    {
        /**
         * @var GF_Entry_List_Table
         */
        private $list_table;
        public function __construct(\GF_Entry_List_Table $list_table)
        {
        }
        public function user_can_edit()
        {
        }
        public function user_can_edit_item($object_id)
        {
        }
        public function get_query_request_handler()
        {
        }
    }
}
namespace ACA\GravityForms\Editing {
    class EntryServiceFactory
    {
        /**
         * @param Field $field
         *
         * @return ACP\Editing\Service|false
         */
        public function create(\ACA\GravityForms\Field\Field $field)
        {
        }
        /**
         * @param Field $field
         *
         * @return View
         */
        private function create_view(\ACA\GravityForms\Field\Field $field)
        {
        }
        /**
         * @param Field $field
         *
         * @return View
         */
        private function create_basic_view(\ACA\GravityForms\Field\Field $field)
        {
        }
        private function set_default_view_properties(\ACA\GravityForms\Field\Field $field, \ACP\Editing\View $view)
        {
        }
    }
}
namespace ACA\GravityForms {
    final class FieldFactory
    {
        /**
         * @param string $field_id
         * @param int    $form_id
         *
         * @return Field\Field|null
         */
        public function create($field_id, $form_id)
        {
        }
        /**
         * @param GF_Field $gf_field
         * @param int      $form_id
         * @param string   $field_id
         *
         * @return Field\Field
         */
        private function get_field_for_gf_field(\GF_Field $gf_field, $form_id, $field_id)
        {
        }
        private function is_sub_field($field_id)
        {
        }
    }
    interface MetaTypes
    {
        const GRAVITY_FORMS_ENTRY = 'gravity_forms_entry';
    }
}
namespace ACA\GravityForms\Utils {
    class FormField
    {
        /**
         * @param mixed $choices
         *
         * @return array
         */
        public static function formatChoices($choices)
        {
        }
    }
    class Hooks
    {
        public static function get_load_form_entries()
        {
        }
    }
}
namespace ACA\GravityForms {
    interface FieldTypes
    {
        const ADDRESS = 'address';
        const CHECKBOX = 'checkbox';
        const COUNTRY = 'country';
        const CONSENT = 'consent';
        const DATE = 'date';
        const EMAIL = 'email';
        const FILE_UPLOAD = 'fileupload';
        const HIDDEN = 'hidden';
        const LISTS = 'list';
        const MULTI_SELECT = 'multiselect';
        const NAME = 'name';
        const NUMBER = 'number';
        const PAGE = 'page';
        const PHONE = 'phone';
        const PRODUCT = 'product';
        const POST_TITLE = 'post_title';
        const POST_CONTENT = 'post_content';
        const POST_EXCERPT = 'post_excerpt';
        const POST_TAGS = 'post_tags';
        const POST_CATEGORIES = 'post_categories';
        const QUANTITY = 'quantity';
        const RADIO = 'radio';
        const SELECT = 'select';
        const SHIPPING = 'shipping';
        const TEXT = 'text';
        const TEXTAREA = 'textarea';
        const TIME = 'time';
        const TOTAL = 'total';
        const WEBSITE = 'website';
    }
}
namespace ACA\GravityForms\Settings {
    /**
     * @property Column\Entry $column
     */
    class ChoiceDisplay extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $choice_display;
        /**
         * @var array
         */
        private $choices;
        public function __construct(\ACA\GravityForms\Column\Entry $column, $choices)
        {
        }
        /**
         * @return string
         */
        public function get_choice_display()
        {
        }
        /**
         * @param string $choice_display
         */
        public function set_choice_display($choice_display)
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function format($value, $original_value)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function format_labels($value)
        {
        }
    }
}
namespace ACA\GravityForms\Column {
    final class EntryConfigurator implements \AC\Registerable
    {
        private $form_id;
        private $column_factory;
        private $field_factory;
        public function __construct($form_id, \ACA\GravityForms\Column\EntryFactory $column_factory, \ACA\GravityForms\FieldFactory $field_factory)
        {
        }
        public function register()
        {
        }
        public function configure_column(\AC\Column $column)
        {
        }
        private function get_field_id_by_type($type)
        {
        }
        public function register_entry_columns(\ACA\GravityForms\ListScreen\Entry $list_screen) : void
        {
        }
    }
    final class EntryFactory
    {
        /**
         * @var FieldFactory
         */
        private $field_factory;
        /**
         * @param FieldFactory $field_factory
         */
        public function __construct(\ACA\GravityForms\FieldFactory $field_factory)
        {
        }
        /**
         * @param string $field_id
         * @param int    $form_id
         *
         * @return GravityForms\Field|null
         */
        private function get_field($field_id, $form_id)
        {
        }
        /**
         * @param string $field_id
         * @param int    $form_id
         *
         * @return bool
         */
        public function has_field($field_id, $form_id)
        {
        }
        /**
         * @param string $field_id
         * @param int    $form_id
         *
         * @return GravityForms\Column\Entry
         */
        public function create($field_id, $form_id)
        {
        }
    }
    class Entry extends \AC\Column implements \ACP\Export\Exportable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        /**
         * @var GravityForms\Field\Field
         */
        private $field;
        public function __construct()
        {
        }
        public function set_field(\ACA\GravityForms\Field\Field $field)
        {
        }
        public function get_value($id)
        {
        }
        public function get_entry_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function get_field()
        {
        }
        public function get_form_id()
        {
        }
        public function get_field_id()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\GravityForms\Column\Entry {
    class Choices extends \ACA\GravityForms\Column\Entry
    {
        public function register_settings()
        {
        }
    }
    class Address extends \ACA\GravityForms\Column\Entry
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\GravityForms\Column\Entry\Original {
    class DatePayment extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
        protected function register_settings()
        {
        }
    }
    class UserIp extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
    class SourceUrl extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function register_settings()
        {
        }
        public function search()
        {
        }
    }
    class EntryId extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
    class DateCreated extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
    }
    class User extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
    class PaymentAmount extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
    class Starred extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
    class TransactionId extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\GravityForms\Column\Entry {
    class Name extends \ACA\GravityForms\Column\Entry
    {
        public function get_value($id)
        {
        }
    }
    class Product extends \ACA\GravityForms\Column\Entry
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\GravityForms\Column\Entry\Custom {
    class User extends \AC\Column implements \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function register_settings()
        {
        }
    }
}
namespace ACA\GravityForms\Column\Entry {
    class ProductSelect extends \ACA\GravityForms\Column\Entry
    {
        public function get_value($id)
        {
        }
    }
    class MultipleChoices extends \ACA\GravityForms\Column\Entry\Choices
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\GravityForms\HideOnScreen {
    class WordPressNotifications extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
    class EntryFilters extends \ACP\Settings\ListScreen\HideOnScreen
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\GravityForms\Search\TableScreen {
    class Entry extends \ACP\Search\TableScreen
    {
        public function register()
        {
        }
    }
}
namespace ACA\GravityForms\Search {
    final class Query extends \ACP\Search\Query
    {
        /**
         * @var int
         */
        private $form_id;
        /**
         * @var string
         */
        private $status;
        public function register()
        {
        }
        public function catch_list_details(array $args)
        {
        }
        public function parse_search_query(array $query)
        {
        }
    }
}
namespace ACA\GravityForms\Search\Comparison {
    final class EntryFactory
    {
        public function create(\ACA\GravityForms\Field\Field $field)
        {
        }
    }
    abstract class Entry extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        protected $meta_key;
        public function __construct($meta_key, \ACP\Search\Operators $operators, $value_type = null, $labels = null)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @return Bindings
         */
        protected function create_empty_query_bindings()
        {
        }
    }
}
namespace ACA\GravityForms\Search\Comparison\Entry {
    class Consent extends \ACA\GravityForms\Search\Comparison\Entry
    {
        public function __construct($field)
        {
        }
    }
    class DateColumn extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        private $column;
        public function __construct($column)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Number extends \ACA\GravityForms\Search\Comparison\Entry
    {
        public function __construct($field)
        {
        }
    }
    class Choice extends \ACA\GravityForms\Search\Comparison\Entry implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $choices;
        public function __construct($field, array $choices)
        {
        }
        public function get_values()
        {
        }
    }
    class Choices extends \ACA\GravityForms\Search\Comparison\Entry\Choice
    {
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Date extends \ACA\GravityForms\Search\Comparison\Entry
    {
        public function __construct($field)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class EntryId extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Checkbox extends \ACA\GravityForms\Search\Comparison\Entry
    {
        public function __construct($field)
        {
        }
    }
    class CheckboxGroup extends \ACA\GravityForms\Search\Comparison\Entry implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $choices;
        /**
         * @var Checkbox[]
         */
        private $sub_fields;
        public function __construct($field, array $choices, array $sub_fields)
        {
        }
        private function get_field_id_for_value(\ACP\Search\Value $value)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class Text extends \ACA\GravityForms\Search\Comparison\Entry
    {
        public function __construct($field)
        {
        }
    }
    class User extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class PaymentAmount extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Starred extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class TextColumn extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        private $column;
        public function __construct($column)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\GravityForms\Search\Query {
    class Bindings extends \ACP\Search\Query\Bindings
    {
        /**
         * @return string
         */
        public function get_entry_meta_table_name()
        {
        }
        /**
         * @return string
         */
        public function get_entry_meta_table_name_alias()
        {
        }
        /**
         * @return string
         */
        public function get_entry_table()
        {
        }
        public function join_entry_meta_table($join_alias, $meta_key, $join_type = null)
        {
        }
    }
}
namespace ACA\GravityForms {
    final class Admin implements \AC\Registerable
    {
        public function register()
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACA\GravityForms\TableScreen {
    class Entry implements \AC\Registerable
    {
        public function register()
        {
        }
        public function hide_entry_filters(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return bool
         */
        private function has_stored_default_columns(\AC\ListScreen $list_screen)
        {
        }
        public function hide_wordpress_notifications(\AC\ListScreen $list_screen)
        {
        }
        public function register_table_rows(\AC\ListScreen $list_screen)
        {
        }
        public function get_editing_ajax_value($result, $id, $column)
        {
        }
        public function create_default_list_screen(\AC\ListScreen $list_screen)
        {
        }
        public function store_active_gf_columns(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function remove_selector_column($columns)
        {
        }
        /**
         * @return array
         */
        private function get_default_table_column_names()
        {
        }
        private function get_unsupported_field_types()
        {
        }
        /**
         * @param array $form
         *
         * @return array
         */
        private function get_field_ids($form)
        {
        }
    }
}
namespace ACA\GravityForms\Field {
    interface Number
    {
        /**
         * @return string
         */
        public function get_range_min();
        /**
         * @return string
         */
        public function get_range_max();
        /**
         * @return string
         */
        public function get_step();
    }
}
namespace ACA\GravityForms {
    interface Field
    {
        /**
         * @return int
         */
        public function get_form_id();
        /**
         * @return string
         */
        public function get_id();
        /**
         * @return bool
         */
        public function is_required();
    }
}
namespace ACA\GravityForms\Field {
    class Field implements \ACA\GravityForms\Field
    {
        /**
         * @var int
         */
        private $form_id;
        /**
         * @var string
         */
        private $field_id;
        /**
         * @var GF_Field
         */
        protected $gf_field;
        public function __construct($form_id, $field_id, \GF_Field $gf_field)
        {
        }
        public function get_form_id()
        {
        }
        public function get_id()
        {
        }
        public function is_required()
        {
        }
    }
}
namespace ACA\GravityForms\Field\Type {
    class Consent extends \ACA\GravityForms\Field\Field
    {
        public function get_consent_text()
        {
        }
    }
    class Input extends \ACA\GravityForms\Field\Field
    {
        /**
         * @return string
         */
        public function get_input_type()
        {
        }
    }
    class ItemList extends \ACA\GravityForms\Field\Field
    {
    }
    class Number extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Number
    {
        private function get_range($key)
        {
        }
        public function has_range_min()
        {
        }
        public function has_range_max()
        {
        }
        public function get_range_min()
        {
        }
        public function get_range_max()
        {
        }
        public function get_step()
        {
        }
    }
}
namespace ACA\GravityForms\Field {
    interface Options
    {
        /**
         * @return array
         */
        public function get_options();
    }
}
namespace ACA\GravityForms\Field\Type {
    class Radio extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Options
    {
        public function get_options()
        {
        }
    }
}
namespace ACA\GravityForms\Field {
    interface Container
    {
        /**
         * @return Field[]
         */
        public function get_sub_fields();
        /**
         * @param string $id
         *
         * @return Field
         */
        public function get_sub_field($id);
    }
}
namespace ACA\GravityForms\Field\Type {
    class Address extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Container
    {
        /**
         * @return GravityForms\Field[]
         */
        public function get_sub_fields()
        {
        }
        public function get_sub_field($id)
        {
        }
    }
    class Unsupported extends \ACA\GravityForms\Field\Field
    {
    }
    class Name extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Container
    {
        public function get_sub_fields()
        {
        }
        public function get_sub_field($id)
        {
        }
    }
    class Date extends \ACA\GravityForms\Field\Field
    {
        public function get_stored_date_format()
        {
        }
    }
    class Product extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Container
    {
        public function get_sub_fields()
        {
        }
        public function get_sub_field($id)
        {
        }
    }
    class Checkbox extends \ACA\GravityForms\Field\Field
    {
        /**
         * @var string
         */
        private $value;
        /**
         * @var string
         */
        private $label;
        public function __construct($form_id, $field_id, \GF_Field $field, $value, $label)
        {
        }
        public function get_value()
        {
        }
        public function get_label()
        {
        }
    }
    class CheckboxGroup extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Options, \ACA\GravityForms\Field\Container
    {
        public function get_options()
        {
        }
        /**
         * @return Checkbox[]
         */
        public function get_sub_fields()
        {
        }
        public function get_sub_field($id)
        {
        }
    }
    class Email extends \ACA\GravityForms\Field\Type\Input
    {
        /**
         * @return string
         */
        public function get_input_type()
        {
        }
    }
    class Textarea extends \ACA\GravityForms\Field\Field
    {
        /**
         * @return string
         */
        public function get_input_type()
        {
        }
    }
}
namespace ACA\GravityForms\Field {
    interface Multiple extends \ACA\GravityForms\Field\Options
    {
        /**
         * @return bool
         */
        public function is_multiple();
    }
}
namespace ACA\GravityForms\Field\Type {
    class ProductSelect extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Multiple
    {
        public function get_options()
        {
        }
        public function is_multiple()
        {
        }
    }
    class Select extends \ACA\GravityForms\Field\Field implements \ACA\GravityForms\Field\Options, \ACA\GravityForms\Field\Multiple
    {
        /**
         * @var array
         */
        private $choices;
        /**
         * @var bool
         */
        private $multiple;
        public function __construct($form_id, $field_id, \GF_Field $gf_field, array $choices, $multiple)
        {
        }
        public function get_options()
        {
        }
        public function is_multiple()
        {
        }
    }
}
namespace ACA\GravityForms {
    interface Capabilities
    {
        const EDIT_ENTRIES = 'gravityforms_edit_entries';
    }
}
namespace ACA\GravityForms\Export\Model {
    class EntryFactory
    {
        /**
         * @return ACP\Export\Model
         */
        public function create(\ACA\GravityForms\Column\Entry $column, \ACA\GravityForms\Field\Field $field)
        {
        }
    }
}
namespace ACA\GravityForms\Export\Model\Entry {
    class ItemList extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    class Address extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    class Check extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\GravityForms\Export\Strategy {
    class Entry extends \ACP\Export\Strategy
    {
        public function __construct(\ACA\GravityForms\ListScreen\Entry $list_screen)
        {
        }
        protected function ajax_export() : void
        {
        }
        public function delayed_export() : void
        {
        }
        public function set_pagination_args(array $args) : array
        {
        }
        protected function get_list_table() : ?\AC\ListTable
        {
        }
    }
}
namespace ACA\GravityForms {
    class TableFactory
    {
        /**
         * @param string $screen_id
         * @param int    $form_id
         *
         * @return GF_Entry_List_Table
         */
        public function create($screen_id, $form_id)
        {
        }
    }
}
namespace ACA\GravityForms\ListScreen {
    class Entry extends \AC\ListScreenWP implements \ACP\Editing\ListScreen, \ACP\Export\ListScreen
    {
        /**
         * @var int $form_id
         */
        private $form_id;
        /**
         * @var EntryConfigurator
         */
        private $column_configurator;
        public function __construct($form_id, \ACA\GravityForms\Column\EntryConfigurator $column_configurator)
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function get_heading_hookname()
        {
        }
        protected function get_object($id)
        {
        }
        public function set_manage_value_callback()
        {
        }
        /**
         * @param string $original_value
         * @param int    $form_id
         * @param string $field_id
         * @param array  $entry
         *
         * @return string
         */
        public function manage_value_entry($original_value, $form_id, $field_id, $entry)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @return int
         */
        public function get_form_id()
        {
        }
        public function is_current_screen($wp_screen) : bool
        {
        }
        /**
         * @return int
         */
        private function get_current_form_id()
        {
        }
        protected function get_admin_url()
        {
        }
        public function get_screen_link()
        {
        }
        public function get_list_table() : \GF_Entry_List_Table
        {
        }
        public function register_column_types() : void
        {
        }
    }
}
namespace AC {
    /**
     * Adapter for the WP List Table
     */
    interface ListTable
    {
        /**
         * @param string $column
         * @param int    $id
         *
         * @return string
         */
        public function get_column_value($column, $id);
        /**
         * @return int
         */
        public function get_total_items();
    }
}
namespace ACA\GravityForms {
    class ListTable implements \AC\ListTable
    {
        private $listTable;
        public function __construct(\GF_Entry_List_Table $listTable)
        {
        }
        public function get_column_value($column, $id)
        {
        }
        public function get_total_items()
        {
        }
    }
    final class GravityForms implements \AC\Registerable
    {
        const GROUP = 'gravity_forms';
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        /**
         * Register hooks
         */
        public function register()
        {
        }
        public function register_list_screen()
        {
        }
        public function register_list_screen_group(\AC\Groups $groups)
        {
        }
        public function register_column_group($groups)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function is_acp_asset($key)
        {
        }
        /**
         * @param array $objects
         *
         * @return array
         */
        public function allowed_acp_styles($objects)
        {
        }
        /**
         * @param array $objects
         *
         * @return array
         */
        public function allowed_acp_scripts($objects)
        {
        }
        public function admin_scripts()
        {
        }
        public function table_scripts()
        {
        }
    }
    interface Value
    {
        /**
         * @param int $id
         *
         * @return mixed
         */
        public function get_value($id);
    }
}
namespace ACA\GravityForms\Value {
    class EntryValue implements \ACA\GravityForms\Value
    {
        /**
         * @var Field
         */
        private $field;
        public function __construct(\ACA\GravityForms\Field\Field $field)
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACA\ACF\Editing {
    trait EditableTrait
    {
        /**
         * @var EditingModelFactory
         */
        protected $editing_factory;
        public function set_editing_model_factory(\ACA\ACF\Editing\EditingModelFactory $factory)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\ACF\Editing\Storage {
    interface ReadStorage
    {
        public function get(int $id);
    }
    final class Group implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $group_key;
        /**
         * @var string
         */
        private $sub_key;
        /**
         * @var string
         */
        private $id_prefix;
        /**
         * @var ReadStorage
         */
        private $read_storage;
        public function __construct($group_key, $sub_key, $id_prefix, \ACA\ACF\Editing\Storage\ReadStorage $read_storage)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\ACF\Editing\Storage\Read {
    class Column implements \ACA\ACF\Editing\Storage\ReadStorage
    {
        /**
         * @var AC\Column
         */
        private $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function get(int $id)
        {
        }
    }
}
namespace ACA\ACF\Editing\Storage {
    class Field implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $field_key;
        /**
         * @var string
         */
        private $id_prefix;
        /**
         * @var ReadStorage
         */
        private $read_storage;
        public function __construct($field_key, $id_prefix, \ACA\ACF\Editing\Storage\ReadStorage $read_storage)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    final class CloneField implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $clone_hash;
        /**
         * @var string
         */
        private $field_hash;
        /**
         * @var string
         */
        private $id_prefix;
        /**
         * @var ReadStorage
         */
        private $read_storage;
        /**
         * @var acf_field_clone
         */
        private $acf_clone_field;
        public function __construct($clone_hash, $field_hash, $id_prefix, \ACA\ACF\Editing\Storage\ReadStorage $read_storage)
        {
        }
        private function validate()
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\ACF\Editing\Service {
    class Taxonomy extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(string $taxonomy, \ACP\Editing\Storage $storage)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value(int $id)
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class MultipleSelect extends \ACP\Editing\Service\Basic
    {
        public function __construct(\ACP\Editing\View\AdvancedSelect $view, \ACP\Editing\Storage $storage)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function get_current_values($id) : array
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Taxonomies extends \ACA\ACF\Editing\Service\Taxonomy
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        private function add_term_ids($id, array $add_term_ids)
        {
        }
        private function remove_term_ids($id, array $remove_term_ids)
        {
        }
        protected function sanitize_term_ids(array $term_ids)
        {
        }
        private function get_current_term_ids($id) : array
        {
        }
    }
}
namespace ACA\ACF\Editing {
    interface EditingModelFactory
    {
        /**
         * @param Field  $field
         * @param Column $column
         *
         * @return ACP\Editing\Service
         */
        public function create(\ACA\ACF\Field $field, \ACA\ACF\Column $column);
    }
}
namespace ACA\ACF\Editing\View {
    class Range extends \ACP\Editing\View
    {
        use \ACP\Editing\View\StepTrait, \ACP\Editing\View\MinMaxTrait;
        public function __construct()
        {
        }
        public function set_default_value($default_value)
        {
        }
    }
    class Link extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\ACF\Editing {
    class StorageFactory
    {
        public function create(\ACA\ACF\Column $column)
        {
        }
        private function get_group_key($column_type)
        {
        }
        private function get_sub_key($column_type)
        {
        }
        private function get_clone_hash($column_type)
        {
        }
        private function get_clone_field_hash($column_type)
        {
        }
        /**
         * @param string $column_type
         *
         * @return bool
         */
        private function is_clone($column_type)
        {
        }
        /**
         * @param string $column_type
         *
         * @return bool
         */
        private function is_group($column_type)
        {
        }
        private function id_prefix(\ACA\ACF\Column $column)
        {
        }
    }
    interface EditingFactoryAware extends \ACP\Editing\Editable
    {
        public function set_editing_model_factory(\ACA\ACF\Editing\EditingModelFactory $factory);
    }
    class ModelViewFactory
    {
        public function create(\ACA\ACF\Field $field)
        {
        }
        /**
         * @param Field $field
         *
         * @return View
         */
        private function create_view_type(\ACA\ACF\Field $field)
        {
        }
    }
    class ModelFactory implements \ACA\ACF\Editing\EditingModelFactory
    {
        /**
         * @var ModelViewFactory
         */
        private $view_factory;
        /**
         * @var StorageFactory
         */
        private $storage_factory;
        public function __construct()
        {
        }
        public function create(\ACA\ACF\Field $field, \ACA\ACF\Column $column)
        {
        }
    }
}
namespace ACA\ACF {
    class FieldFactory
    {
        public function create(array $settings)
        {
        }
    }
}
namespace ACA\ACF\RequestHandler {
    class MapLegacyListScreen implements \ACP\RequestHandler
    {
        /**
         * @var ListScreenRepository\Storage
         */
        private $list_screen_repository;
        /**
         * @param ListScreenRepository\Storage $list_screen_repository
         */
        public function __construct(\AC\ListScreenRepository\Storage $list_screen_repository)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace ACA\ACF\Service {
    class AddColumns implements \AC\Registerable
    {
        /**
         * @var FieldRepository
         */
        private $field_repository;
        /**
         * @var FieldsFactory
         */
        private $fields_factory;
        /**
         * @var ColumnFactory
         */
        private $column_factory;
        public function __construct(\ACA\ACF\FieldRepository $field_repository, \ACA\ACF\FieldsFactory $fields_factory, \ACA\ACF\ColumnFactory $column_factory)
        {
        }
        public function register()
        {
        }
        public function add_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    class InitColumn implements \AC\Registerable
    {
        /**
         * @var ColumnInstantiator
         */
        private $column_initiator;
        public function __construct(\ACA\ACF\ColumnInstantiator $column_initiator)
        {
        }
        public function register()
        {
        }
        public function initiate_column(\AC\Column $column)
        {
        }
    }
    class EditingFix implements \AC\Registerable
    {
        public function register()
        {
        }
        public function remove_acf_statuses_for_editing($statuses)
        {
        }
    }
    /**
     * Class that converts the old ACF column to the new V3 version.
     * This is useful when the migration script (update) cannot be performed on read-only list screens.
     * Inline Editing is currently not support for the migrated columns
     */
    class LegacyColumnMapper implements \AC\Registerable
    {
        public function register()
        {
        }
        private function has_deprecated_columns(\AC\ListScreen $list_screen)
        {
        }
        public function render_deprecated_columns_notice(\AC\ListScreen $list_screen)
        {
        }
    }
    class ColumnSettings implements \AC\Registerable
    {
        public function register()
        {
        }
        public function add_edit_field_link_to_column_type(\AC\Column $column)
        {
        }
    }
    class Scripts implements \AC\Registerable
    {
        /**
         * @var Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function table_scripts_editing()
        {
        }
        public function admin_scripts()
        {
        }
    }
    class RemoveDeprecatedColumnFromTypeSelector implements \AC\Registerable
    {
        public function register()
        {
        }
        public function remove_from_type_selector(array $column_types, \AC\Column $column)
        {
        }
    }
}
namespace ACA\ACF {
    class CloneColumnFactory
    {
        const CLONE_PREFIX = 'acfclone__';
        /**
         * @var ColumnFactory
         */
        private $column_factory;
        public function __construct(\ACA\ACF\ColumnFactory $column_factory)
        {
        }
        /**
         * @param array $settings
         *
         * @return Column|null
         */
        public function create(array $settings)
        {
        }
        private function create_seamless_clone(array $clone_setting, $label)
        {
        }
        private function create_prefixed_clone(array $settings)
        {
        }
    }
    class ColumnFactory
    {
        /**
         * @var ColumnInstantiator
         */
        private $column_initiator;
        /**
         * @var CloneColumnFactory
         */
        private $clone_column_factory;
        public function __construct(\ACA\ACF\ColumnInstantiator $column_initiator)
        {
        }
        /**
         * @param array $settings
         *
         * @return Column|null
         */
        public function create(array $settings)
        {
        }
        private function create_column(\ACA\ACF\Column $column, array $settings)
        {
        }
    }
}
namespace ACA\ACF\Utils {
    class V2ToV3Migration
    {
        public function migrate_list_screen_settings(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACA\ACF\FieldGroup {
    interface Query
    {
        public function get_groups();
    }
}
namespace ACA\ACF\FieldGroup\Location {
    class Media implements \ACA\ACF\FieldGroup\Query
    {
        public function get_groups()
        {
        }
    }
    class Taxonomy implements \ACA\ACF\FieldGroup\Query
    {
        public function get_groups()
        {
        }
    }
    class Post implements \ACA\ACF\FieldGroup\Query
    {
        const POST = 'post';
        const PAGE = 'page';
        /**
         * @var string
         */
        private $post_type;
        public function __construct($post_type)
        {
        }
        public function get_groups()
        {
        }
    }
    class Comment implements \ACA\ACF\FieldGroup\Query
    {
        public function get_groups()
        {
        }
    }
    class User implements \ACA\ACF\FieldGroup\Query
    {
        public function get_groups()
        {
        }
    }
}
namespace ACA\ACF\FieldGroup {
    final class QueryFactory
    {
        /**
         * @param ListScreen $list_screen
         *
         * @return Query|null
         */
        public function create(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACA\ACF {
    interface Configurable
    {
        const FIELD = 'field';
        const META_KEY = 'meta_key';
        const FIELD_HASH = 'field_hash';
        const FIELD_TYPE = 'field_type';
        /**
         * @param string $column_type
         *
         * @return array|null
         */
        public function create($column_type);
    }
    class ConfigFactory
    {
        /**
         * @var Configurable\ClonePrefixedField
         */
        private $clone_prefixed_config;
        /**
         * @var Configurable\Group
         */
        private $group_config;
        /**
         * @var Configurable\Column
         */
        private $default_config;
        public function __construct(\ACA\ACF\FieldFactory $field_factory)
        {
        }
        /**
         * @param string $column
         *
         * @return bool
         */
        private function is_clone($column_type)
        {
        }
        /**
         * @param string $column
         *
         * @return bool
         */
        private function is_group($column_type)
        {
        }
        /**
         * @param string $column_type
         *
         * @return array|null
         */
        public function create($column_type)
        {
        }
    }
    class FieldRepository
    {
        /**
         * @var FieldGroup\QueryFactory
         */
        private $query_factory;
        public function __construct(\ACA\ACF\FieldGroup\QueryFactory $query_factory)
        {
        }
        public function find_by_list_screen(\AC\ListScreen $list_screen)
        {
        }
    }
    class Helper
    {
        /**
         * @param string $field_hash
         *
         * @return string|null
         */
        public function get_field_edit_link($field_hash)
        {
        }
        /**
         * @param string $field_hash
         *
         * @return array|null
         */
        public function get_field_group($field_hash)
        {
        }
    }
}
namespace ACA\ACF\Settings {
    class SettingFactory
    {
        /**
         * @param Field  $field
         * @param Column $column
         *
         * @return array
         */
        public function create(\ACA\ACF\Field $field, \ACA\ACF\Column $column)
        {
        }
    }
}
namespace ACA\ACF\Settings\Column {
    /**
     * @property Column $column
     */
    class RepeaterDisplay extends \AC\Settings\Column
    {
        const KEY = 'repeater_display';
        const DISPLAY_SUBFIELD = 'subfield';
        const DISPLAY_COUNT = 'count';
        /**
         * @var string
         */
        private $repeater_display;
        public function __construct(\ACA\ACF\Column $column)
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function get_repeater_display()
        {
        }
        public function set_repeater_display($repeater_display)
        {
        }
    }
}
namespace AC\Settings\Column {
    class TermLink extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        protected $term_link_to;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_link_options()
        {
        }
        /**
         * @return string
         */
        public function get_term_link_to()
        {
        }
        /**
         * @param string $term_link_to
         *
         * @return bool
         */
        public function set_term_link_to($term_link_to)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace ACA\ACF\Settings\Column {
    class TermLink extends \AC\Settings\Column\TermLink
    {
        protected function get_link_options()
        {
        }
    }
    /**
     * @property Column $column
     */
    class RepeaterSubField extends \AC\Settings\Column
    {
        const KEY = 'sub_field';
        /**
         * @var string
         */
        private $sub_field;
        /**
         * @var Field
         */
        private $field;
        public function __construct(\ACA\ACF\Column $column)
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        protected function get_sub_fields_options()
        {
        }
        public function get_sub_field_object() : ?\ACA\ACF\Field
        {
        }
        /**
         * @return array|null
         */
        protected function get_sub_field_settings()
        {
        }
        private function get_unsupported_sub_types()
        {
        }
        protected function get_setting_field()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function get_sub_field()
        {
        }
        public function set_sub_field($sub_field)
        {
        }
    }
    class Color extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
    }
    class HiddenDeprecated extends \AC\Settings\Column
    {
        private $value;
        public function __construct(\AC\Column $column, $setting_name)
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_value($option = null)
        {
        }
        public function set_values(array $values)
        {
        }
    }
    class Unsupported extends \AC\Settings\Column
    {
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_message()
        {
        }
    }
}
namespace AC\Settings\Column {
    abstract class DateTimeFormat extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'date';
        private $date_format;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        protected abstract function get_custom_format_options();
        protected abstract function get_wp_default_format();
        /**
         * @param string $label
         * @param string $date_format
         * @param string $description
         *
         * @return string
         */
        protected function get_default_html_label($label, $date_format = '', $description = '')
        {
        }
        public function create_view()
        {
        }
        protected function get_custom_formats()
        {
        }
        public function get_html_label_from_date_format($date_format)
        {
        }
        /**
         * @param array $formats
         *
         * @return array
         */
        protected function get_formatted_date_options($formats)
        {
        }
        /**
         * @param string $label
         * @param string $date_format
         * @param string $description
         *
         * @return string
         */
        protected function get_html_label($label, $date_format = '', $description = '')
        {
        }
        protected function get_date_options()
        {
        }
        /**
         * @return mixed
         */
        public function get_date_format()
        {
        }
        /**
         * @param mixed $date_format
         *
         * @return bool
         */
        public function set_date_format($date_format)
        {
        }
        /**
         * @param $date
         *
         * @return false|int
         */
        protected function get_timestamp($date)
        {
        }
        /**
         * @param string $date
         * @param        $original_value
         *
         * @return string
         */
        public function format($date, $original_value)
        {
        }
    }
    class Date extends \AC\Settings\Column\DateTimeFormat
    {
        private function get_diff_html_label()
        {
        }
        protected function get_custom_format_options()
        {
        }
        protected function get_wp_default_format()
        {
        }
        /**
         * @param string $date
         * @param        $original_value
         *
         * @return string
         */
        public function format($date, $original_value)
        {
        }
        /**
         * @param int $timestamp Unix time stamp
         *
         * @return string
         */
        public function format_human_time_diff($timestamp)
        {
        }
    }
}
namespace ACA\ACF\Settings\Column {
    /**
     * @property Column $column
     */
    class Date extends \AC\Settings\Column\Date
    {
        public function __construct(\ACA\ACF\Column $column)
        {
        }
        protected function get_acf_date_format()
        {
        }
        protected function get_custom_formats()
        {
        }
        protected function get_custom_format_options()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    /**
     * @property Column $column
     */
    class FlexibleContent extends \AC\Settings\Column
    {
        const NAME = 'flex_display';
        /**
         * @var string
         */
        private $flex_display;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_flex_display()
        {
        }
        public function set_flex_display($flex_display)
        {
        }
    }
}
namespace AC\Settings\Column {
    class Time extends \AC\Settings\Column\DateTimeFormat
    {
        public function create_view()
        {
        }
        protected function get_custom_format_options()
        {
        }
        protected function get_wp_default_format()
        {
        }
    }
}
namespace ACA\ACF\Settings\Column {
    /**
     * @property Column $column
     */
    class Time extends \AC\Settings\Column\Time
    {
        public function __construct(\ACA\ACF\Column $column)
        {
        }
        protected function get_acf_date_format()
        {
        }
        protected function get_custom_formats()
        {
        }
        protected function get_custom_format_options()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings\Column {
    class Post extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'post';
        const PROPERTY_AUTHOR = 'author';
        const PROPERTY_FEATURED_IMAGE = 'thumbnail';
        const PROPERTY_ID = 'id';
        const PROPERTY_TITLE = 'title';
        const PROPERTY_DATE = 'date';
        /**
         * @var string
         */
        private $post_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @param int   $id
         * @param mixed $original_value
         *
         * @return string|int
         */
        public function format($id, $original_value)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_post_property_display()
        {
        }
        /**
         * @param string $post_property
         *
         * @return bool
         */
        public function set_post_property_display($post_property)
        {
        }
    }
}
namespace ACA\ACF\Settings\Column {
    class PageLink extends \AC\Settings\Column\Post
    {
        public function format($id, $original_value)
        {
        }
    }
    class Oembed extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $oembed;
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_oembed()
        {
        }
        /**
         * @param string $display
         *
         * @return $this
         */
        public function set_oembed($display)
        {
        }
    }
}
namespace ACA\ACF\Filtering {
    interface FilteringFactoryAware extends \ACP\Filtering\Filterable
    {
        public function set_filtering_model_factory(\ACA\ACF\Filtering\FilteringModelFactory $factory);
    }
}
namespace ACA\ACF\Search {
    interface SearchFactoryAware extends \ACP\Search\Searchable
    {
        public function set_search_comparison_factory(\ACA\ACF\Search\SearchComparisonFactory $factory);
    }
}
namespace ACA\ACF\Sorting {
    interface SortingFactoryAware extends \ACP\Sorting\Sortable
    {
        public function set_sorting_model_factory(\ACA\ACF\Sorting\SortingModelFactory $factory);
    }
}
namespace ACA\ACF\ConditionalFormatting {
    interface FormattableFactoryAware extends \ACP\ConditionalFormat\Formattable
    {
        public function set_formattable_factory(\ACA\ACF\ConditionalFormatting\FormattableFactory $factory);
    }
}
namespace ACA\ACF\Filtering {
    trait FilteringTrait
    {
        /**
         * @var FilteringModelFactory
         */
        protected $filtering_factory;
        public function set_filtering_model_factory(\ACA\ACF\Filtering\FilteringModelFactory $factory)
        {
        }
        public function filtering()
        {
        }
    }
}
namespace ACA\ACF\Search {
    trait SearchableTrait
    {
        /**
         * @var SearchComparisonFactory
         */
        protected $search_factory;
        public function set_search_comparison_factory(\ACA\ACF\Search\SearchComparisonFactory $factory)
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\ACF\Sorting {
    trait SortableTrait
    {
        /**
         * @var SortingModelFactory
         */
        protected $sorting_factory;
        public function set_sorting_model_factory(\ACA\ACF\Sorting\SortingModelFactory $factory)
        {
        }
        public function sorting()
        {
        }
    }
}
namespace ACA\ACF\ConditionalFormatting {
    trait FormattableTrait
    {
        protected $formatting_factory;
        public function set_formattable_factory(\ACA\ACF\ConditionalFormatting\FormattableFactory $factory) : void
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACA\ACF {
    class Column extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACA\ACF\Filtering\FilteringFactoryAware, \ACA\ACF\Search\SearchFactoryAware, \ACA\ACF\Sorting\SortingFactoryAware, \ACA\ACF\Editing\EditingFactoryAware, \ACA\ACF\ConditionalFormatting\FormattableFactoryAware
    {
        use \ACA\ACF\Filtering\FilteringTrait, \ACA\ACF\Search\SearchableTrait, \ACA\ACF\Sorting\SortableTrait, \ACA\ACF\Editing\EditableTrait, \ACA\ACF\ConditionalFormatting\FormattableTrait;
        /**
         * @var string
         */
        protected $field_hash;
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @var Field
         */
        protected $field;
        /**
         * @var string
         */
        private $field_type;
        public function __construct()
        {
        }
        public function set_config(array $config)
        {
        }
        private function validate() : void
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_formatted_id($id)
        {
        }
        protected function register_settings()
        {
        }
        public function export()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_field_hash()
        {
        }
        public function get_field_type()
        {
        }
        /**
         * @return Field
         */
        public function get_field()
        {
        }
        /**
         * @return array
         * @deprecated 6.0
         */
        public function get_acf_field()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         * @deprecated 6.0
         */
        public function get_acf_field_option($name)
        {
        }
    }
}
namespace ACA\ACF\Column {
    class Unsupported extends \ACA\ACF\Column
    {
        public function get_value($id)
        {
        }
        public function export()
        {
        }
        protected function register_settings()
        {
        }
    }
    class Deprecated extends \AC\Column
    {
        public function __construct()
        {
        }
        protected function register_settings()
        {
        }
        public function get_available_acf_settings()
        {
        }
    }
    class Repeater extends \ACA\ACF\Column
    {
        public function get_value($id)
        {
        }
        /**
         * @return string
         */
        private function get_display()
        {
        }
        /**
         * @return string|null
         */
        protected function get_sub_field_key()
        {
        }
        protected function get_sub_field()
        {
        }
        public function get_separator()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace ACA\ACF\Search {
    interface SearchComparisonFactory
    {
        public function create(\ACA\ACF\Field $field, $meta_key, $meta_type);
    }
    class ComparisonFactory implements \ACA\ACF\Search\SearchComparisonFactory
    {
        /**
         * @param Field  $field
         * @param string $meta_key
         * @param string $meta_type
         *
         * @return ACP\Search\Comparison|false
         */
        public function create(\ACA\ACF\Field $field, $meta_key, $meta_type)
        {
        }
    }
}
namespace ACA\ACF\Search\Comparison {
    class Taxonomy extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct($meta_key, $meta_type, $taxonomy)
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class Link extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
    }
    class Select extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $choices;
        public function __construct($meta_key, $type, $choices)
        {
        }
        public function get_values()
        {
        }
    }
    class MultiSelect extends \ACA\ACF\Search\Comparison\Select
    {
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class User extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct($meta_key, $meta_type)
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class Users extends \ACA\ACF\Search\Comparison\User
    {
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Repeater extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        protected $meta_type;
        /**
         * @var string
         */
        protected $parent_key;
        /**
         * @var string
         */
        protected $sub_key;
        /**
         * @var boolean
         */
        protected $serialized;
        public function __construct($meta_type, $parent_key, $sub_key, $operators, $value_type = null, $serialized = false, $labels = null)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function map_serialize_operators($operator)
        {
        }
        protected function serialize_value(\ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\ACF\Search\Comparison\Repeater {
    class Posts extends \ACA\ACF\Search\Comparison\Repeater implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var array
         */
        private $post_type;
        public function __construct($meta_type, $parent_key, $sub_key, $post_type, $multiple = false)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Media extends \ACA\ACF\Search\Comparison\Repeater implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $mime_type;
        public function __construct($meta_type, $parent_key, $sub_key, $mime_type = null)
        {
        }
        protected function get_search_entities($s, $paged)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class Number extends \ACA\ACF\Search\Comparison\Repeater
    {
        public function __construct($meta_type, $parent_key, $sub_key)
        {
        }
    }
    class Date extends \ACA\ACF\Search\Comparison\Repeater
    {
        public function __construct($meta_type, $parent_key, $sub_key)
        {
        }
        private function map_value(\ACP\Search\Value $value, $operator)
        {
        }
        private function map_operator($operator)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param array|string $value
         *
         * @return array|string
         */
        private function format_date($value)
        {
        }
    }
    class Text extends \ACA\ACF\Search\Comparison\Repeater
    {
        public function __construct($meta_type, $parent_key, $sub_key)
        {
        }
    }
    class DateTime extends \ACA\ACF\Search\Comparison\Repeater
    {
        public function __construct($meta_type, $parent_key, $sub_key)
        {
        }
    }
    class User extends \ACA\ACF\Search\Comparison\Repeater implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct($meta_type, $parent_key, $sub_key, $multiple)
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class Image extends \ACA\ACF\Search\Comparison\Repeater\Media
    {
        public function __construct($meta_type, $parent_key, $sub_key)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class Toggle extends \ACA\ACF\Search\Comparison\Repeater
    {
        public function __construct($meta_type, $parent_key, $sub_key)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Select extends \ACA\ACF\Search\Comparison\Repeater implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $choices;
        public function __construct($meta_type, $parent_key, $sub_key, $choices, $multiple = false)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\ACF\Search\Comparison {
    class Taxonomies extends \ACA\ACF\Search\Comparison\Taxonomy
    {
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class DatePicker extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
        private function map_value(\ACP\Search\Value $value, $operator)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param array|string $value
         *
         * @return array|string
         */
        private function format_date($value)
        {
        }
    }
}
namespace ACA\ACF\Search\ComparisonFactory {
    class Repeater
    {
        /**
         * @param Field  $field
         * @param string $parent_meta_key
         * @param string $meta_type
         *
         * @return ACP\Search\Comparison|null
         */
        public function create(\ACA\ACF\Field $field, $parent_meta_key, $meta_type)
        {
        }
    }
}
namespace ACA\ACF\Sorting\FormatValue {
    class Taxonomy implements \ACP\Sorting\FormatValue
    {
        public function format_value($term_ids)
        {
        }
    }
    class File implements \ACP\Sorting\FormatValue
    {
        public function format_value($media_id)
        {
        }
    }
    class Select implements \ACP\Sorting\FormatValue
    {
        /**
         * @var array
         */
        private $options;
        public function __construct($options)
        {
        }
        public function format_value($value)
        {
        }
    }
}
namespace ACA\ACF\Sorting {
    interface SortingModelFactory
    {
        /**
         * @param Field  $field
         * @param string $meta_key
         * @param Column $column
         *
         * @return AbstractModel
         */
        public function create(\ACA\ACF\Field $field, $meta_key, \ACA\ACF\Column $column);
    }
}
namespace ACA\ACF\Sorting\ModelFactory {
    class Taxonomy implements \ACA\ACF\Sorting\SortingModelFactory
    {
        public function create(\ACA\ACF\Field $field, $meta_key, \ACA\ACF\Column $column)
        {
        }
    }
    class Relation implements \ACA\ACF\Sorting\SortingModelFactory
    {
        /**
         * @var MetaFormatFactory
         */
        private $meta_format_factory;
        public function __construct()
        {
        }
        public function create(\ACA\ACF\Field $field, $meta_key, \ACA\ACF\Column $column)
        {
        }
        private function create_single_relation_model(\ACA\ACF\Column $column, $meta_key)
        {
        }
        private function create_multiple_relation_model(\ACA\ACF\Column $column, $meta_key)
        {
        }
    }
    class User implements \ACA\ACF\Sorting\SortingModelFactory
    {
        /**
         * @var ACP\Sorting\Model\MetaFormatFactory
         */
        private $meta_format_factory;
        public function __construct()
        {
        }
        public function create(\ACA\ACF\Field $field, $meta_key, \ACA\ACF\Column $column)
        {
        }
        private function create_single_relation_model(\ACA\ACF\Column $column, $meta_key)
        {
        }
        private function create_multiple_relation_model(\ACA\ACF\Column $column, $meta_key)
        {
        }
    }
}
namespace ACA\ACF\Sorting {
    class ModelFactory implements \ACA\ACF\Sorting\SortingModelFactory
    {
        public function create(\ACA\ACF\Field $field, $meta_key, \ACA\ACF\Column $column)
        {
        }
    }
}
namespace ACA\ACF\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\ACF\Configurable {
    class Group implements \ACA\ACF\Configurable
    {
        /**
         * @var FieldFactory
         */
        private $field_factory;
        public function __construct(\ACA\ACF\FieldFactory $field_factory)
        {
        }
        private function get_group_field_key_by_type($column_type)
        {
        }
        private function get_sub_field_key_by_type($column_type)
        {
        }
        public function create($column_type)
        {
        }
    }
    final class ClonePrefixedField implements \ACA\ACF\Configurable
    {
        /**
         * @var FieldFactory
         */
        private $field_factory;
        public function __construct(\ACA\ACF\FieldFactory $field_factory)
        {
        }
        private function remove_prefix($column_type)
        {
        }
        private function get_clone_hash($column_type)
        {
        }
        private function get_field_hash($column_type)
        {
        }
        public function create($column_type)
        {
        }
    }
    final class Column implements \ACA\ACF\Configurable
    {
        /**
         * @var FieldFactory
         */
        private $field_factory;
        public function __construct(\ACA\ACF\FieldFactory $field_factory)
        {
        }
        public function create($column_type)
        {
        }
    }
}
namespace ACA\ACF\Field {
    interface Library
    {
        /**
         * @return bool
         */
        public function is_upload_media_only();
    }
    interface DisplayFormat
    {
        /**
         * @return string
         */
        public function get_display_format();
    }
    interface Number
    {
        /**
         * @return string
         */
        public function get_step();
        /**
         * @return int|null
         */
        public function get_min();
        /**
         * @return int|null
         */
        public function get_max();
    }
    interface Choices
    {
        /**
         * @return array
         */
        public function get_choices();
    }
    interface Placeholder
    {
        /**
         * @return string
         */
        public function get_placeholder();
    }
}
namespace ACA\ACF\Field\Type {
    trait MultipleTrait
    {
        public function is_multiple()
        {
        }
    }
    trait TaxonomyFilterableTrait
    {
        public function get_taxonomies()
        {
        }
    }
}
namespace ACA\ACF\Field {
    interface DefaultValue
    {
        /**
         * @return string
         */
        public function get_default_value();
    }
}
namespace ACA\ACF {
    class Field
    {
        /**
         * @var array
         */
        protected $settings;
        public function __construct(array $settings)
        {
        }
        public function validate()
        {
        }
        public function is_required()
        {
        }
        public function get_settings()
        {
        }
        public function get_label()
        {
        }
        public function get_type()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_hash()
        {
        }
    }
}
namespace ACA\ACF\Field\Type {
    trait DefaultValueTrait
    {
        public function get_default_value()
        {
        }
    }
    class Wysiwyg extends \ACA\ACF\Field implements \ACA\ACF\Field\DefaultValue
    {
        use \ACA\ACF\Field\Type\DefaultValueTrait;
    }
    trait PlaceholderTrait
    {
        public function get_placeholder()
        {
        }
    }
}
namespace ACA\ACF\Field {
    interface ValueWrapper
    {
        /**
         * @return string
         */
        public function get_append();
        /**
         * @return string
         */
        public function get_prepend();
    }
}
namespace ACA\ACF\Field\Type {
    trait ValueDecoratorTrait
    {
        public function get_append()
        {
        }
        public function get_prepend()
        {
        }
    }
    trait NumberTrait
    {
        public function get_min()
        {
        }
        public function get_max()
        {
        }
        public function get_step()
        {
        }
    }
    class Number extends \ACA\ACF\Field implements \ACA\ACF\Field\Number, \ACA\ACF\Field\DefaultValue, \ACA\ACF\Field\ValueWrapper
    {
        use \ACA\ACF\Field\Type\DefaultValueTrait, \ACA\ACF\Field\Type\ValueDecoratorTrait, \ACA\ACF\Field\Type\NumberTrait;
    }
    trait ChoicesTrait
    {
        public function get_choices()
        {
        }
    }
    class Radio extends \ACA\ACF\Field implements \ACA\ACF\Field\Choices
    {
        use \ACA\ACF\Field\Type\ChoicesTrait;
    }
}
namespace ACA\ACF\Field {
    interface Multiple
    {
        /**
         * @return bool
         */
        public function is_multiple();
    }
    interface TermRelation
    {
        /**
         * @return array
         */
        public function uses_native_term_relation();
    }
}
namespace ACA\ACF\Field\Type {
    class Taxonomy extends \ACA\ACF\Field implements \ACA\ACF\Field\Multiple, \ACA\ACF\Field\TermRelation
    {
        /**
         * @return bool
         */
        public function uses_native_term_relation()
        {
        }
        /**
         * @return bool
         */
        public function is_multiple()
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy()
        {
        }
    }
    trait MaxLengthTrait
    {
        /**
         * @return int|null
         */
        public function get_maxlength()
        {
        }
    }
    class Color extends \ACA\ACF\Field implements \ACA\ACF\Field\DefaultValue
    {
        use \ACA\ACF\Field\Type\DefaultValueTrait;
    }
    class ButtonGroup extends \ACA\ACF\Field implements \ACA\ACF\Field\Choices
    {
        use \ACA\ACF\Field\Type\ChoicesTrait;
    }
    class Range extends \ACA\ACF\Field implements \ACA\ACF\Field\Number, \ACA\ACF\Field\DefaultValue, \ACA\ACF\Field\ValueWrapper
    {
        use \ACA\ACF\Field\Type\DefaultValueTrait, \ACA\ACF\Field\Type\ValueDecoratorTrait, \ACA\ACF\Field\Type\NumberTrait;
    }
}
namespace ACA\ACF\Field {
    interface Date
    {
        /**
         * @return string
         */
        public function get_display_format();
        /**
         * @return integer
         */
        public function get_first_day();
    }
    interface SaveFormat
    {
        /**
         * @return string
         */
        public function get_save_format();
    }
}
namespace ACA\ACF\Field\Type {
    class Date extends \ACA\ACF\Field implements \ACA\ACF\Field\Date, \ACA\ACF\Field\SaveFormat
    {
        public function get_display_format()
        {
        }
        public function get_first_day()
        {
        }
        public function get_save_format()
        {
        }
    }
    class FlexibleContent extends \ACA\ACF\Field
    {
        /**
         * @return array
         */
        public function get_layouts()
        {
        }
    }
    class Gallery extends \ACA\ACF\Field
    {
    }
}
namespace ACA\ACF\Field {
    interface PostTypeFilterable
    {
        /**
         * @return array
         */
        public function get_post_type();
    }
    interface TaxonomyFilterable
    {
        /**
         * @return array
         */
        public function get_taxonomies();
    }
}
namespace ACA\ACF\Field\Type {
    trait PostTypeTrait
    {
        public function get_post_type()
        {
        }
    }
    class PostObject extends \ACA\ACF\Field implements \ACA\ACF\Field\PostTypeFilterable, \ACA\ACF\Field\TaxonomyFilterable, \ACA\ACF\Field\Multiple
    {
        use \ACA\ACF\Field\Type\MultipleTrait, \ACA\ACF\Field\Type\TaxonomyFilterableTrait, \ACA\ACF\Field\Type\PostTypeTrait;
    }
    class Password extends \ACA\ACF\Field implements \ACA\ACF\Field\Placeholder, \ACA\ACF\Field\ValueWrapper
    {
        use \ACA\ACF\Field\Type\PlaceholderTrait, \ACA\ACF\Field\Type\ValueDecoratorTrait;
    }
    class Link extends \ACA\ACF\Field
    {
    }
    class Checkbox extends \ACA\ACF\Field implements \ACA\ACF\Field\Choices
    {
        use \ACA\ACF\Field\Type\ChoicesTrait;
    }
    class PageLinks extends \ACA\ACF\Field implements \ACA\ACF\Field\PostTypeFilterable, \ACA\ACF\Field\TaxonomyFilterable, \ACA\ACF\Field\Multiple
    {
        use \ACA\ACF\Field\Type\MultipleTrait, \ACA\ACF\Field\Type\PostTypeTrait, \ACA\ACF\Field\Type\TaxonomyFilterableTrait;
    }
    class GoogleMap extends \ACA\ACF\Field
    {
        public function get_zoom()
        {
        }
    }
}
namespace ACA\ACF\Field {
    interface MaxLength
    {
        /**
         * @return int
         */
        public function get_maxlength();
    }
}
namespace ACA\ACF\Field\Type {
    class Text extends \ACA\ACF\Field implements \ACA\ACF\Field\Placeholder, \ACA\ACF\Field\DefaultValue, \ACA\ACF\Field\MaxLength, \ACA\ACF\Field\ValueWrapper
    {
        use \ACA\ACF\Field\Type\PlaceholderTrait, \ACA\ACF\Field\Type\DefaultValueTrait, \ACA\ACF\Field\Type\MaxLengthTrait, \ACA\ACF\Field\Type\ValueDecoratorTrait;
    }
    class File extends \ACA\ACF\Field
    {
        /**
         * @return bool
         */
        public function is_all_file_types_allowed()
        {
        }
        /**
         * @return array
         */
        public function get_allowed_file_types()
        {
        }
    }
    class DateTime extends \ACA\ACF\Field implements \ACA\ACF\Field\Date, \ACA\ACF\Field\SaveFormat
    {
        public function get_display_format()
        {
        }
        public function get_first_day()
        {
        }
        public function get_save_format()
        {
        }
    }
}
namespace ACA\ACF\Field {
    interface RoleFilterable
    {
        /**
         * @return array
         */
        public function get_roles();
        /**
         * @return bool
         */
        public function has_roles();
    }
}
namespace ACA\ACF\Field\Type {
    class User extends \ACA\ACF\Field implements \ACA\ACF\Field\Multiple, \ACA\ACF\Field\RoleFilterable
    {
        use \ACA\ACF\Field\Type\MultipleTrait;
        /**
         * @return bool
         */
        public function has_roles()
        {
        }
        /**
         * @return array
         */
        public function get_roles()
        {
        }
    }
    class Email extends \ACA\ACF\Field implements \ACA\ACF\Field\Placeholder, \ACA\ACF\Field\DefaultValue, \ACA\ACF\Field\ValueWrapper
    {
        use \ACA\ACF\Field\Type\PlaceholderTrait, \ACA\ACF\Field\Type\ValueDecoratorTrait, \ACA\ACF\Field\Type\DefaultValueTrait;
    }
}
namespace ACA\ACF\Field {
    interface Textarea
    {
        /**
         * @return int
         */
        public function get_rows();
    }
}
namespace ACA\ACF\Field\Type {
    class Textarea extends \ACA\ACF\Field implements \ACA\ACF\Field\Placeholder, \ACA\ACF\Field\DefaultValue, \ACA\ACF\Field\MaxLength, \ACA\ACF\Field\Textarea
    {
        use \ACA\ACF\Field\Type\PlaceholderTrait, \ACA\ACF\Field\Type\DefaultValueTrait, \ACA\ACF\Field\Type\MaxLengthTrait;
        public function get_rows()
        {
        }
    }
    class Time extends \ACA\ACF\Field
    {
        public function get_display_format()
        {
        }
    }
}
namespace ACA\ACF\Field {
    interface Subfields
    {
        /**
         * @return array
         */
        public function get_sub_fields();
        /**
         * @param string $key
         *
         * @return array|null
         */
        public function get_sub_field($key);
    }
}
namespace ACA\ACF\Field\Type {
    class Repeater extends \ACA\ACF\Field implements \ACA\ACF\Field\Subfields
    {
        public function get_sub_fields()
        {
        }
        public function get_sub_field($key)
        {
        }
    }
    class Image extends \ACA\ACF\Field implements \ACA\ACF\Field\Library
    {
        public function is_upload_media_only()
        {
        }
    }
    class Relationship extends \ACA\ACF\Field implements \ACA\ACF\Field\PostTypeFilterable, \ACA\ACF\Field\TaxonomyFilterable, \ACA\ACF\Field\Multiple
    {
        use \ACA\ACF\Field\Type\PostTypeTrait, \ACA\ACF\Field\Type\TaxonomyFilterableTrait;
        public function is_multiple()
        {
        }
    }
    class Url extends \ACA\ACF\Field implements \ACA\ACF\Field\Placeholder, \ACA\ACF\Field\DefaultValue
    {
        use \ACA\ACF\Field\Type\PlaceholderTrait, \ACA\ACF\Field\Type\DefaultValueTrait;
    }
    class Oembed extends \ACA\ACF\Field
    {
    }
    class Boolean extends \ACA\ACF\Field
    {
    }
    class CloneField extends \ACA\ACF\Field
    {
        public function is_prefixed()
        {
        }
    }
    class Select extends \ACA\ACF\Field implements \ACA\ACF\Field\Multiple, \ACA\ACF\Field\Choices
    {
        use \ACA\ACF\Field\Type\MultipleTrait;
        use \ACA\ACF\Field\Type\ChoicesTrait;
    }
}
namespace ACA\ACF\Export\Model {
    /**
     * @property Column/Repeater $column
     */
    class RepeaterSubField extends \ACP\Export\Model
    {
        public function __construct(\ACA\ACF\Column\Repeater $column)
        {
        }
        public function get_value($id)
        {
        }
    }
    class Date extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    class Link extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\ACF\Export {
    class ModelFactory
    {
        public function create($type, \AC\Column $column)
        {
        }
    }
}
namespace ACA\ACF {
    final class AdvancedCustomFields implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
    class FieldsFactory
    {
        /**
         * @param array $field
         *
         * @return array All fields (incl. subfields from grouped or cloned)
         */
        public function create(array $field)
        {
        }
        private function get_fields_from_group(array $field)
        {
        }
    }
    class ColumnGroup implements \AC\Registerable
    {
        const SLUG = 'acf';
        public function register()
        {
        }
        public function register_column_groups(\AC\Groups $groups)
        {
        }
    }
}
namespace ACA\ACF\Nonce {
    class UpdateDeprecatedNonce extends \AC\Form\Nonce
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\ACF\ConditionalFormatting {
    interface FormattableFactory
    {
        public function create(\ACA\ACF\Field $field) : ?\ACP\ConditionalFormat\FormattableConfig;
    }
    class FieldFormattableFactory implements \ACA\ACF\ConditionalFormatting\FormattableFactory
    {
        public function create(\ACA\ACF\Field $field) : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACA\ACF\Filtering\Model {
    class Number extends \ACP\Filtering\Model\Meta
    {
        public function get_data_type()
        {
        }
        public function is_ranged()
        {
        }
    }
    class Choices extends \ACP\Filtering\Model\Meta
    {
        /**
         * @var Field
         */
        private $field;
        public function __construct(\AC\Column\Meta $column, \ACA\ACF\Field $field)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class SerializedChoices extends \ACP\Filtering\Model\Meta
    {
        /**
         * @var Field
         */
        private $field;
        public function __construct(\AC\Column\Meta $column, \ACA\ACF\Field $field)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class DateTimePicker extends \ACP\Filtering\Model\MetaDate
    {
        public function __construct($column)
        {
        }
    }
    class Unformatted extends \ACP\Filtering\Model\Meta
    {
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
    }
    class Link extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\AC\Column\Meta $column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class FormattedRelation extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class FormattedRelations extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\AC\Column\Meta $column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class File extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class Image extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class Toggle extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class DatePicker extends \ACP\Filtering\Model\MetaDate
    {
        public function __construct($column)
        {
        }
    }
}
namespace ACA\ACF\Filtering {
    interface FilteringModelFactory
    {
        /**
         * @param Field  $field
         * @param Column $column
         *
         * @return Model
         */
        public function create(\ACA\ACF\Field $field, \ACA\ACF\Column $column);
    }
    class ModelFactory implements \ACA\ACF\Filtering\FilteringModelFactory
    {
        public function create(\ACA\ACF\Field $field, \ACA\ACF\Column $column)
        {
        }
    }
}
namespace ACA\ACF {
    class GroupColumnFactory
    {
        const GROUP_PREFIX = 'acfgroup__';
        /**
         * @var ColumnFactory
         */
        private $column_factory;
        public function __construct(\ACA\ACF\ColumnFactory $column_factory)
        {
        }
        /**
         * @param array $settings
         *
         * @return Column|null
         */
        public function create(array $settings)
        {
        }
    }
    interface FieldType
    {
        const TYPE_BUTTON_GROUP = 'button_group';
        const TYPE_BOOLEAN = 'true_false';
        const TYPE_CHECKBOX = 'checkbox';
        const TYPE_CLONE = 'clone';
        const TYPE_COLOR_PICKER = 'color_picker';
        const TYPE_DATE_PICKER = 'date_picker';
        const TYPE_DATE_TIME_PICKER = 'date_time_picker';
        const TYPE_EMAIL = 'email';
        const TYPE_FILE = 'file';
        const TYPE_FLEXIBLE_CONTENT = 'flexible_content';
        const TYPE_GOOGLE_MAP = 'google_map';
        const TYPE_GROUP = 'group';
        const TYPE_GALLERY = 'gallery';
        const TYPE_IMAGE = 'image';
        const TYPE_LINK = 'link';
        const TYPE_NUMBER = 'number';
        const TYPE_OEMBED = 'oembed';
        const TYPE_PAGE_LINK = 'page_link';
        const TYPE_PASSWORD = 'password';
        const TYPE_POST = 'post_object';
        const TYPE_RADIO = 'radio';
        const TYPE_RANGE = 'range';
        const TYPE_REPEATER = 'repeater';
        const TYPE_RELATIONSHIP = 'relationship';
        const TYPE_SELECT = 'select';
        const TYPE_TAXONOMY = 'taxonomy';
        const TYPE_TEXT = 'text';
        const TYPE_TEXTAREA = 'textarea';
        const TYPE_TIME_PICKER = 'time_picker';
        const TYPE_URL = 'url';
        const TYPE_USER = 'user';
        const TYPE_WYSIWYG = 'wysiwyg';
        const TYPE_TAB = 'tab';
        const TYPE_MESSAGE = 'message';
        const TYPE_SEPARATOR = 'separator';
        const TYPE_OUTPUT = 'output';
        // 3rd party
        const TYPE_IMAGE_CROP = 'image_crop';
    }
    final class ColumnInstantiator
    {
        /**
         * @var ConfigFactory
         */
        private $config_factory;
        /**
         * @var Search\ComparisonFactory
         */
        private $search_factory;
        /**
         * @var Sorting\ModelFactory
         */
        private $sorting_factory;
        /**
         * @var Editing\EditingModelFactory
         */
        private $editing_factory;
        /**
         * @var Filtering\ModelFactory
         */
        private $filtering_factory;
        /**
         * @var ConditionalFormatting\FormattableFactory
         */
        private $formattable_factory;
        public function __construct(\ACA\ACF\ConfigFactory $config_factory, \ACA\ACF\Search\ComparisonFactory $search_factory, \ACA\ACF\Sorting\ModelFactory $sorting_factory, \ACA\ACF\Editing\EditingModelFactory $editing_factory, \ACA\ACF\Filtering\ModelFactory $filtering_factory, \ACA\ACF\ConditionalFormatting\FormattableFactory $formattable_factory)
        {
        }
        public function initiate(\ACA\ACF\Column $column)
        {
        }
    }
}
namespace ACA\ACF\Value {
    abstract class Formatter
    {
        /**
         * @var Column
         */
        protected $column;
        /**
         * @var Field $field
         */
        protected $field;
        public function __construct(\ACA\ACF\Column $column, \ACA\ACF\Field $field)
        {
        }
        public abstract function format($value, $id = null);
    }
    class FormatterFactory
    {
        /**
         * @param Column $column
         * @param Field  $field
         *
         * @return Formatter
         */
        public function create(\ACA\ACF\Column $column, \ACA\ACF\Field $field)
        {
        }
    }
}
namespace ACA\ACF\Value\Formatter {
    class FlexStructure extends \ACA\ACF\Value\Formatter
    {
        public function format($values, $id = null)
        {
        }
        /**
         * @return array
         */
        private function get_layout_labels()
        {
        }
        /**
         * @param $name
         *
         * @return string|false
         */
        private function get_layout_by_name($name)
        {
        }
    }
    class DefaultFormatter extends \ACA\ACF\Value\Formatter
    {
        public function format($value, $id = null)
        {
        }
    }
    class Color extends \ACA\ACF\Value\Formatter
    {
        public function format($value, $id = null)
        {
        }
    }
    class Maps extends \ACA\ACF\Value\Formatter
    {
        public function format($maps_data, $id = null)
        {
        }
        private function get_maps_url($data)
        {
        }
    }
    class Link extends \ACA\ACF\Value\Formatter
    {
        public function format($link, $id = null)
        {
        }
    }
    class MultipleFormatted extends \ACA\ACF\Value\Formatter
    {
        public function format($value, $id = null)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        private function is_not_empty($value)
        {
        }
        /**
         * @return string
         */
        private function get_separator()
        {
        }
        /**
         * @return int
         */
        private function get_limit()
        {
        }
    }
    class File extends \ACA\ACF\Value\Formatter
    {
        public function format($attachment_id, $id = null)
        {
        }
    }
    class FlexCount extends \ACA\ACF\Value\Formatter
    {
        public function __construct(\ACA\ACF\Column $column, \ACA\ACF\Field\Type\FlexibleContent $field)
        {
        }
        public function format($values, $id = null)
        {
        }
        /**
         * @return array
         */
        private function get_layout_labels()
        {
        }
    }
    class Boolean extends \ACA\ACF\Value\Formatter
    {
        public function format($value, $id = null)
        {
        }
    }
    class Select extends \ACA\ACF\Value\Formatter
    {
        public function format($value, $id = null)
        {
        }
    }
}
namespace ACA\BbPress\Editing\Service\Topic {
    class Forum implements \ACP\Editing\PaginatedOptions, \ACP\Editing\Service
    {
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
}
namespace ACA\BbPress\Service {
    class Columns implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param AC\Groups $groups
         */
        public function register_column_group(\AC\Groups $groups)
        {
        }
    }
    class ListScreens implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_list_screen_group(\AC\Groups $groups) : void
        {
        }
        public function register_list_screens() : void
        {
        }
    }
    class Editing implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param $group
         * @param $role
         *
         * @return string
         */
        public function editing_role_group($group, $role)
        {
        }
    }
}
namespace ACA\BbPress\Column\Topic {
    class Forum extends \AC\Column implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function is_valid()
        {
        }
    }
}
namespace ACA\BbPress\ListScreen {
    class Forum extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
    }
    class Reply extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
    }
    class Topic extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
}
namespace ACA\BbPress {
    class BbPress implements \AC\Registerable
    {
        public function register()
        {
        }
    }
}
namespace ACA\YoastSeo\Editing\Storage\Post {
    class SocialImage implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $meta_key_id;
        /**
         * @var string
         */
        private $meta_key_url;
        public function __construct($meta_key_id, $meta_key_url)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\YoastSeo\Editing\Service\Post {
    class PrimaryTaxonomy implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var Storage
         */
        private $storage;
        public function __construct($taxonomy)
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class IsIndexed extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var bool
         */
        private $default_value;
        /**
         * @var string
         */
        private $post_type;
        public function __construct($post_type, $default_value)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\YoastSeo\Editing\Service\User {
    class ToggleOn extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct($meta_key)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\YoastSeo\Editing\Service\Taxonomy {
    class SeoMeta implements \ACP\Editing\Service
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var Editing\View
         */
        private $view;
        public function __construct($taxonomy, $meta_key, \ACP\Editing\View $view = null)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\YoastSeo\Service {
    final class HideFilters implements \AC\Registerable
    {
        /**
         * @var FilterSeoScores
         */
        private $seo_scores;
        /**
         * @var FilterReadabilityScore
         */
        private $readability_score;
        public function register()
        {
        }
        public function hide_filter(\AC\Table\Screen $table)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_post_type_supported($post_type)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_analysis_enabled($post_type)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_readability_enabled($post_type)
        {
        }
        public function add_hide_filter(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
    }
    final class Admin implements \AC\Registerable
    {
        /**
         * @var Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
    }
    final class Columns implements \AC\Registerable
    {
        public function register() : void
        {
        }
        public function add_columns(\AC\ListScreen $list_screen) : void
        {
        }
        private function register_post_columns(\AC\ListScreen\Post $list_screen) : void
        {
        }
        private function register_taxonomy_columns(\ACP\ListScreen\Taxonomy $list_screen) : void
        {
        }
        private function register_user_columns(\AC\ListScreen\User $list_screen) : void
        {
        }
    }
    class Table implements \AC\Registerable
    {
        public function register() : void
        {
        }
        /**
         * @param ListScreen $list_screen
         */
        public function remove_link_column_on_ajax($list_screen)
        {
        }
        /**
         * Replace key & Maintain Order
         *
         * @param array  $array
         * @param string $oldkey
         * @param string $newkey
         *
         * @return array
         */
        private function replace_key_maintain_order(array $array, $oldkey, $newkey)
        {
        }
        public function fix_yoast_heading_tooltips()
        {
        }
    }
    final class ColumnGroups implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_column_groups(\AC\Groups $groups)
        {
        }
    }
}
namespace ACA\YoastSeo {
    class YoastSeo implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        /**
         * Register hooks
         */
        public function register()
        {
        }
    }
}
namespace ACA\YoastSeo\Settings\ListScreen\HideOnScreen {
    class FilterReadabilityScore extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_yoast_readability_score';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterSeoScores extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_yoast_seo_scores';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
}
namespace ACA\YoastSeo\Column\Post {
    class Score extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        // The display value is handled by the native column
        public function get_value($id)
        {
        }
        public function register_settings()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        /**
         * @inheritDoc
         */
        public function sorting()
        {
        }
    }
    class FacebookTitle extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class FacebookImage extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        private function get_meta_key_id()
        {
        }
        private function get_meta_key_url()
        {
        }
        public function get_meta_key()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class Readability extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        // The display value is handled by the native column
        public function get_value($id)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        /**
         * @inheritDoc
         */
        public function sorting()
        {
        }
    }
    class PrimaryTaxonomy extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy()
        {
        }
    }
    class FacebookDescription extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class TwitterDescription extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class TwitterTitle extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class FocusKeywordCount extends \AC\Column
    {
        public function __construct()
        {
        }
        private function get_focus_keyword($id)
        {
        }
        public function get_value($id)
        {
        }
        private function calculate_occurrence($content, $key)
        {
        }
    }
    class TwitterImage extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        private function get_meta_key_id()
        {
        }
        private function get_meta_key_url()
        {
        }
        public function get_meta_key()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class IsIndexed extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function get_default_post_type_index()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Title extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class Linked extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    class Links extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    class MetaDesc extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class FocusKW extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\YoastSeo\Column\User {
    class DisableSeoAnalysis extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class NoIndexAuthor extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class AuthorPageTitle extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        private function get_wp_seo_author_title($user_id)
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
    }
    class AuthorPageMetaDesc extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class DisableReadabilityAnalysis extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\YoastSeo\Column {
    abstract class TermMeta extends \AC\Column
    {
        /**
         * @return string;
         */
        protected abstract function get_meta_key();
        public function is_valid()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
}
namespace ACA\YoastSeo\Column\Taxonomy {
    class IncludeInSitemap extends \ACA\YoastSeo\Column\TermMeta
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        protected function get_meta_key()
        {
        }
    }
    class FocusKeyword extends \ACA\YoastSeo\Column\TermMeta implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        protected function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
    class MetaTitle extends \ACA\YoastSeo\Column\TermMeta implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        protected function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
    class NoIndex extends \ACA\YoastSeo\Column\TermMeta implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        protected function get_meta_key()
        {
        }
    }
    class CanonicalUrl extends \ACA\YoastSeo\Column\TermMeta implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        protected function get_meta_key()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
    }
    class MetaDesc extends \ACA\YoastSeo\Column\TermMeta implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        protected function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\YoastSeo\Search\Post {
    class IsIndexed extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var int
         */
        private $null_value;
        public function __construct($meta_key, $null_value = null)
        {
        }
        public function is_valid()
        {
        }
        public function get_values()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\YoastSeo\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\YoastSeo\Export\Post {
    class Title extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\YoastSeo\Filtering\Post {
    class PrimaryTaxonomy extends \ACP\Filtering\Model\Meta
    {
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\YoastSeo\Setting {
    class PrimaryTaxonomy extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $primary_taxonomy;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return array
         */
        private function get_taxonomies()
        {
        }
        /**
         * @return string
         */
        public function get_primary_taxonomy()
        {
        }
        /**
         * @param string $primary_taxonomy
         *
         * @return bool
         */
        public function set_primary_taxonomy($primary_taxonomy)
        {
        }
    }
}
namespace ACA\Polylang\Service {
    class ColumnReplacement implements \AC\Registerable
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        /**
         * @var []
         */
        private $polylang_columns;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function register()
        {
        }
        public function set_dynamic_columns($headings)
        {
        }
        private function get_placeholder_column_key()
        {
        }
        private function get_placeholder_columns()
        {
        }
        public function remove_placeholder_columns($headings)
        {
        }
        public function re_add_dynamic_columns($headings)
        {
        }
        private function replace_placeholder_column($headings, $replacement_key)
        {
        }
    }
    class Admin implements \AC\Registerable
    {
        public function register()
        {
        }
        public function admin_style()
        {
        }
    }
    class Columns implements \AC\Registerable
    {
        const GROUP_NAME = 'polylang';
        public function register()
        {
        }
        public function register_column_groups(\AC\Groups $groups) : void
        {
        }
        public function add_columns(\AC\ListScreen $list_screen) : void
        {
        }
    }
}
namespace ACA\Polylang\Column {
    class Language extends \AC\Column
    {
        const TYPE = 'polylang_flag_placeholder';
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        protected function register_settings()
        {
        }
    }
}
namespace ACA\Polylang {
    class Polylang implements \AC\Registerable
    {
        public function register()
        {
        }
    }
}
namespace ACA\MLA {
    class MediaLibraryAssistant implements \AC\Registerable
    {
        public function register()
        {
        }
        private function register_service(\AC\Registerable $service) : void
        {
        }
    }
}
namespace ACA\MLA\Service {
    class IntegratedMlaSupport implements \AC\Registerable
    {
        private $plugin_information;
        public function __construct(\AC\PluginInformation $plugin_information)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\MetaBox\Editing\Storage {
    class Field implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        protected $meta_key;
        /**
         * @var MetaType
         */
        protected $meta_type;
        /**
         * @var array
         */
        protected $field_settings;
        /**
         * @var bool
         */
        protected $single;
        public function __construct($meta_key, \AC\MetaType $meta_type, array $field_settings, $single = true)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class TermField extends \ACA\MetaBox\Editing\Storage\Field
    {
        public function get(int $id)
        {
        }
        public function get_single_term($id) : ?int
        {
        }
        public function get_multiple_terms($id) : array
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        private function update_single_term($id, $value) : bool
        {
        }
        private function update_multiple_terms($id, $value) : bool
        {
        }
    }
    class CustomTable implements \ACP\Editing\Storage
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var string
         */
        private $table;
        public function __construct(\MetaBox\CustomTable\Storage $storage, $table, $meta_key)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\MetaBox\Editing\Service {
    abstract class Relation implements \ACP\Editing\PaginatedOptions, \ACP\Editing\Service
    {
        /**
         * @var Entity\Relation
         */
        protected $relation;
        public function __construct(\ACA\MetaBox\Entity\Relation $relation)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        protected function replace($id, array $relation_ids)
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACA\MetaBox\Editing\Service\Relation {
    class Term extends \ACA\MetaBox\Editing\Service\Relation
    {
        public function get_value($id)
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
    class Post extends \ACA\MetaBox\Editing\Service\Relation
    {
        public function get_value($id)
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
    class User extends \ACA\MetaBox\Editing\Service\Relation
    {
        public function get_value($id)
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
}
namespace ACA\MetaBox\Editing\Service {
    class Taxonomy implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string|array
         */
        protected $taxonomy;
        /**
         * @var ACP\Editing\Storage
         */
        private $storage;
        public function __construct(\ACP\Editing\Storage $storage, $taxonomy)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_value($id)
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
    class TaxonomiesAdvanced implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var ACP\Editing\Storage
         */
        private $storage;
        /**
         * @var string|array
         */
        protected $taxonomy;
        public function __construct(\ACP\Editing\Storage $storage, $taxonomy)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class Taxonomies implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var ACP\Service\Storage
         */
        private $storage;
        /**
         * @var string|array
         */
        private $taxonomy;
        public function __construct(\ACP\Editing\Storage $storage, $taxonomy)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_value($id)
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
}
namespace ACA\MetaBox\Editing {
    final class StorageFactory
    {
        public function create(\ACA\MetaBox\Column $column, $single = true) : \ACP\Editing\Storage
        {
        }
        public function create_table_storage(\ACA\MetaBox\Column $column) : \ACP\Editing\Storage
        {
        }
        private function create_field_storage(\ACA\MetaBox\Column $column, $single)
        {
        }
    }
}
namespace ACA\MetaBox\Editing\ServiceFactory {
    final class Input
    {
        public function create(\ACA\MetaBox\Column $column) : \ACP\Editing\Service
        {
        }
        private function get_view(\ACA\MetaBox\Column $column)
        {
        }
        private function get_input_type(\ACA\MetaBox\Column $column) : string
        {
        }
    }
    final class Number
    {
        public function create(\ACA\MetaBox\Column $column) : \ACP\Editing\Service
        {
        }
        private function create_view(\ACA\MetaBox\Column $column) : \ACP\Editing\View
        {
        }
    }
    final class Slider
    {
        public function create(\ACA\MetaBox\Column $column) : \ACP\Editing\Service
        {
        }
        private function create_view(\ACA\MetaBox\Column $column) : \ACP\Editing\View
        {
        }
    }
    final class File
    {
        public function create(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Autocomplete
    {
        public function create(\ACA\MetaBox\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox\Service {
    class Columns implements \AC\Registerable
    {
        /**
         * @var ColumnFactory
         */
        private $column_factory;
        /**
         * @var RelationColumnFactory
         */
        private $relation_column_factory;
        /**
         * @var RelationshipRepository
         */
        private $relationship_repository;
        public function __construct(\ACA\MetaBox\ColumnFactory $column_factory, \ACA\MetaBox\RelationColumnFactory $relation_column_factory, \ACA\MetaBox\RelationshipRepository $relationship_repository)
        {
        }
        public function register()
        {
        }
        public function register_column_groups(\AC\Groups $groups)
        {
        }
        public function add_columns(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return array
         */
        private function get_fields_by_list_screen($list_screen)
        {
        }
        /**
         * @return array
         */
        private function get_comment_fields()
        {
        }
        public function add_relation_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    final class QuickAdd implements \AC\Registerable
    {
        public function register()
        {
        }
        public function disable_quick_add($enabled, \AC\ListScreen $list_screen)
        {
        }
    }
    final class Scripts implements \AC\Registerable
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
        public function table_scripts_editing()
        {
        }
    }
    final class Storage implements \AC\Registerable
    {
        public function register()
        {
        }
        public function set_storage_table_to_field($meta_box)
        {
        }
    }
    final class ColumnInstantiate implements \AC\Registerable
    {
        /**
         * @var RelationshipRepository
         */
        private $relationship_repository;
        public function __construct(\ACA\MetaBox\RelationshipRepository $relationship_repository)
        {
        }
        public function register()
        {
        }
        public function configure_column(\AC\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox {
    interface StorageAware
    {
        public const META_BOX = 'meta_box';
        public const CUSTOM_TABLE = 'custom_table';
        /**
         * @return string
         */
        public function get_storage();
    }
    final class ColumnFactory
    {
        /**
         * @param array $field_settings
         *
         * @return Column|false
         */
        public function create(array $field_settings)
        {
        }
        /**
         * @return Column|false
         */
        private function get_column($field_settings)
        {
        }
        private function is_multiple($field_settings)
        {
        }
    }
    class MetaBox implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register() : void
        {
        }
    }
    class Column extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACA\MetaBox\StorageAware
    {
        /**
         * @var array
         */
        private $field_settings;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function format_single_value($value, $id = null)
        {
        }
        public function get_storage()
        {
        }
        /**
         * @return string|false
         */
        public function get_storage_table()
        {
        }
        /**
         * @return string
         */
        protected function get_clone_divider()
        {
        }
        public function get_multiple_values($id)
        {
        }
        public function get_field_setting($key)
        {
        }
        public function get_field_settings()
        {
        }
        /**
         * @return array
         */
        public function get_meta_type_field_settings()
        {
        }
        /**
         * @return bool
         */
        public function is_multiple()
        {
        }
        /**
         * @return bool
         */
        public function is_clonable()
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\MetaBox\Column {
    class Post extends \ACA\MetaBox\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class Posts extends \ACA\MetaBox\Column\Post
    {
        public function format_single_value($value, $id = null)
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
    }
    abstract class Relation extends \AC\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        /**
         * @var Entity\Relation
         */
        protected $relation;
        public function __construct()
        {
        }
        public function set_relation(\ACA\MetaBox\Entity\Relation $relation)
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\MetaBox\Column\Relation {
    class Term extends \ACA\MetaBox\Column\Relation
    {
        public function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class Post extends \ACA\MetaBox\Column\Relation
    {
        public function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class User extends \ACA\MetaBox\Column\Relation
    {
        public function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\MetaBox\Column {
    class Text extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class Number extends \ACA\MetaBox\Column\Text
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
    }
    class Taxonomy extends \ACA\MetaBox\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function format_single_value($value, $id = null)
        {
        }
        public function format_term(\WP_Term $term)
        {
        }
        public function get_taxonomy()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Background extends \ACA\MetaBox\Column
    {
        public function format_single_value($value, $id = null)
        {
        }
    }
    class Color extends \ACA\MetaBox\Column\Text
    {
        public function format_single_value($value, $id = null)
        {
        }
    }
    class Taxonomies extends \ACA\MetaBox\Column\Taxonomy
    {
        public function format_single_value($value, $id = null)
        {
        }
        public function editing()
        {
        }
        protected function register_settings()
        {
        }
    }
    class AdvancedTaxonomies extends \ACA\MetaBox\Column\Taxonomies implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class FieldsetText extends \ACA\MetaBox\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function format_single_value($values, $id = null)
        {
        }
    }
    class ButtonGroup extends \ACA\MetaBox\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function format_single_value($value, $id = null)
        {
        }
    }
    class Date extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        protected function register_settings()
        {
        }
        public function get_saved_format()
        {
        }
        protected function is_timestamp()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class AdvancedTaxonomy extends \ACA\MetaBox\Column\Taxonomy implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function sorting()
        {
        }
        public function editing()
        {
        }
    }
    class Map extends \ACA\MetaBox\Column
    {
        public function format_single_value($value, $id = null)
        {
        }
        protected function get_link($value)
        {
        }
    }
    class Slider extends \ACA\MetaBox\Column\Number
    {
        public function editing()
        {
        }
    }
    class Video extends \ACA\MetaBox\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function format_single_value($value, $id = null)
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Checkbox extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function format_single_value($value, $id = null)
        {
        }
        public function get_multiple_values($id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Select extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function get_raw_value($id)
        {
        }
        public function format_single_value($value, $id = null)
        {
        }
        protected function get_label_for_option($key)
        {
        }
        public function get_field_options()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class SelectAdvanced extends \ACA\MetaBox\Column\Select
    {
        public function editing()
        {
        }
    }
    class Osm extends \ACA\MetaBox\Column\Map
    {
        protected function get_link($value)
        {
        }
    }
    class TextList extends \ACA\MetaBox\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function format_single_value($value, $id = null)
        {
        }
        protected function register_settings()
        {
        }
    }
    class File extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function format_single_value($value, $id = null)
        {
        }
        public function is_multiple()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class DateTime extends \ACA\MetaBox\Column\Date
    {
        public function get_saved_format()
        {
        }
        public function editing()
        {
        }
    }
    class KeyValue extends \ACA\MetaBox\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function format_single_value($value, $id = null)
        {
        }
    }
    class User extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
    }
    class Textarea extends \ACA\MetaBox\Column\Text
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        protected function register_settings()
        {
        }
    }
    class Users extends \ACA\MetaBox\Column\User
    {
        public function format_single_value($value, $id = null)
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function is_multiple()
        {
        }
    }
    class Autocomplete extends \ACA\MetaBox\Column\Select
    {
        public function is_multiple()
        {
        }
        public function is_ajax()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class CheckboxList extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function get_raw_value($id)
        {
        }
        public function format_single_value($value, $id = null)
        {
        }
        protected function get_label_for_option($key)
        {
        }
        public function get_field_options()
        {
        }
        protected function register_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class ImageSelect extends \ACA\MetaBox\Column\Select
    {
        public function format_single_value($value, $id = null)
        {
        }
        public function editing()
        {
        }
        public function get_field_options()
        {
        }
    }
    class Image extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function format_single_value($value, $id = null)
        {
        }
        public function is_multiple()
        {
        }
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class SingleImage extends \ACA\MetaBox\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function format_single_value($value, $id = null)
        {
        }
        public function is_multiple()
        {
        }
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class Url extends \ACA\MetaBox\Column\Text
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function get_value($id)
        {
        }
    }
}
namespace ACA\MetaBox\Search {
    interface TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default);
    }
}
namespace ACA\MetaBox {
    abstract class Factory
    {
        public abstract function create(\ACA\MetaBox\Column $column);
        public abstract function create_disabled(\ACA\MetaBox\Column $column);
        public abstract function create_default(\ACA\MetaBox\Column $column);
    }
}
namespace ACA\MetaBox\Search {
    abstract class Factory extends \ACA\MetaBox\Factory
    {
        public function create(\ACA\MetaBox\Column $column)
        {
        }
        public function create_disabled(\ACA\MetaBox\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox\Search\Factory {
    final class Taxonomy extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox\Search {
    interface CloneableFactory
    {
        public function create_cloneable(\ACA\MetaBox\Column $column);
    }
}
namespace ACA\MetaBox\Search\Factory {
    final class Date extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Post extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Meta extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        private function get_mimetype_by_comparison(\ACP\Search\Comparison $comparison)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Video extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class User extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Autocomplete extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class CheckboxList extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Select extends \ACA\MetaBox\Search\Factory implements \ACA\MetaBox\Search\CloneableFactory, \ACA\MetaBox\Search\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Search\Comparison $default)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox\Search\Comparison {
    abstract class Relation extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var Entity\Relation
         */
        protected $relation;
        public function __construct(\ACA\MetaBox\Entity\Relation $relation)
        {
        }
        public function get_related_object_id($item)
        {
        }
        /**
         * @param array $objects
         *
         * @return int[]
         */
        private function pluck_ids(array $objects)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\MetaBox\Search\Comparison\Relation {
    class Term extends \ACA\MetaBox\Search\Comparison\Relation
    {
        public function get_values($search, $page)
        {
        }
    }
    class Post extends \ACA\MetaBox\Search\Comparison\Relation
    {
        public function get_values($search, $page)
        {
        }
    }
    class User extends \ACA\MetaBox\Search\Comparison\Relation
    {
        public function get_values($search, $paged)
        {
        }
    }
}
namespace ACA\MetaBox\Search\Comparison {
    class Taxonomy extends \ACP\Search\Comparison\Post\Taxonomy
    {
        /**
         *
         */
        private function get_term_by_id($term_id)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class TaxonomyAdvanced extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        protected $taxonomy;
        public function __construct($taxonomy, $meta_key, $meta_type)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Video extends \ACP\Search\Comparison\Meta\Image
    {
        public function get_values($s, $paged)
        {
        }
    }
    class Select extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $choices;
        public function __construct($meta_key, $type, $choices)
        {
        }
        public function get_values()
        {
        }
    }
    class MultiSelect extends \ACA\MetaBox\Search\Comparison\Select
    {
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\MetaBox\Search\Comparison\Table {
    class TableStorage extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        protected $table;
        /**
         * @var string
         */
        protected $column;
        public function __construct($operators, $table, $column, $value_type = null, \ACP\Search\Labels $labels = null)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_subquery($operator, \ACP\Search\Value $value)
        {
        }
    }
    trait MultiMapTrait
    {
        protected function map_operator($operator)
        {
        }
        protected function map_value(\ACP\Search\Value $value, $operator)
        {
        }
    }
    class Media extends \ACA\MetaBox\Search\Comparison\Table\TableStorage implements \ACP\Search\Comparison\SearchableValues
    {
        use \ACA\MetaBox\Search\Comparison\Table\MultiMapTrait;
        /**
         * @var
         */
        private $mime_type;
        public function __construct($operators, $table, $column, $mime_type = [], $value_type = null, \ACP\Search\Labels $labels = null)
        {
        }
        public function get_values($s, $paged)
        {
        }
        protected function get_subquery($operator, \ACP\Search\Value $value)
        {
        }
    }
    class DateIso extends \ACA\MetaBox\Search\Comparison\Table\TableStorage
    {
        public function __construct($operators, $table, $column)
        {
        }
        protected function get_subquery($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Post extends \ACA\MetaBox\Search\Comparison\Table\TableStorage implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var mixed
         */
        private $post_type;
        /**
         * @var array
         */
        private $query_args;
        public function __construct($operators, $table, $column, $post_type, $query_args = [])
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Select extends \ACA\MetaBox\Search\Comparison\Table\TableStorage implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        protected $choices;
        public function __construct($operators, $table, $column, $choices)
        {
        }
        public function get_values()
        {
        }
    }
    class MultiSelect extends \ACA\MetaBox\Search\Comparison\Table\Select
    {
        use \ACA\MetaBox\Search\Comparison\Table\MultiMapTrait;
        protected function get_subquery($operator, \ACP\Search\Value $value)
        {
        }
    }
    class User extends \ACA\MetaBox\Search\Comparison\Table\TableStorage implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var array
         */
        protected $query_args;
        public function __construct($operators, $table, $column, $query_args = [], $value_type = \ACP\Search\Value::INT)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Users extends \ACA\MetaBox\Search\Comparison\Table\User
    {
        use \ACA\MetaBox\Search\Comparison\Table\MultiMapTrait;
        protected function get_subquery($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Timestamp extends \ACA\MetaBox\Search\Comparison\Table\TableStorage
    {
        public function __construct($operators, $table, $column)
        {
        }
        protected function get_subquery($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param string $value
         *
         * @return int
         */
        private function to_time($value)
        {
        }
    }
}
namespace ACA\MetaBox\Sorting\Model\Post {
    class Table extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $table_name;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($table_name, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
}
namespace ACA\MetaBox\Sorting\Model\User {
    class Table extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $table_name;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($table_name, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
}
namespace ACA\MetaBox\Sorting\Model\Taxonomy {
    class Table extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $table_name;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($table_name, $meta_key, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_term_query_callback($clauses)
        {
        }
    }
}
namespace ACA\MetaBox\Sorting {
    interface CloneableFactory
    {
        public function create_cloneable(\ACA\MetaBox\Column $column);
    }
    interface TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column);
    }
    abstract class Factory
    {
        /**
         * @return ACP\Sorting\AbstractModel
         */
        public function create(\ACA\MetaBox\Column $column)
        {
        }
        /**
         * @return ACP\Sorting\AbstractModel
         */
        protected abstract function create_default(\ACA\MetaBox\Column $column);
    }
}
namespace ACA\MetaBox\Sorting\Factory {
    final class Date extends \ACA\MetaBox\Sorting\Factory implements \ACA\MetaBox\Sorting\CloneableFactory, \ACA\MetaBox\Sorting\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column)
        {
        }
        protected function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class AdvancedTaxonomy extends \ACA\MetaBox\Sorting\Factory implements \ACA\MetaBox\Sorting\CloneableFactory, \ACA\MetaBox\Sorting\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column)
        {
        }
        protected function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_cloneable(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Post extends \ACA\MetaBox\Sorting\Factory implements \ACA\MetaBox\Sorting\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column)
        {
        }
        protected function create_default(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
    }
    class Meta extends \ACA\MetaBox\Sorting\Factory implements \ACA\MetaBox\Sorting\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column)
        {
        }
        protected function create_default(\ACA\MetaBox\Column $column)
        {
        }
        private function get_data_type(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class User extends \ACA\MetaBox\Sorting\Factory implements \ACA\MetaBox\Sorting\TableStorageFactory
    {
        public function create_table_storage(\ACA\MetaBox\Column $column)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
    }
    final class Select extends \ACA\MetaBox\Sorting\Factory\Meta
    {
        protected function create_default(\ACA\MetaBox\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox\Sorting\FormatValue {
    class Taxonomy implements \ACP\Sorting\FormatValue
    {
        public function format_value($term_ids)
        {
        }
    }
}
namespace ACA\MetaBox\Sorting {
    class TableOrderByFactory
    {
        public static function create($meta_key, \ACP\Sorting\Type\DataType $data_type, $order)
        {
        }
    }
}
namespace ACA\MetaBox\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\MetaBox\Entity {
    class Relation
    {
        /**
         * @var MBR_Relationship
         */
        private $relation;
        /**
         * @var string
         */
        private $type;
        /**
         * @param MBR_Relationship $relation
         * @param 'from'|'to' $relation
         */
        public function __construct(\MBR_Relationship $relation, $type)
        {
        }
        public function get_id()
        {
        }
        public function get_type()
        {
        }
        public function get_related_type()
        {
        }
        public function get_meta_type()
        {
        }
        public function get_related_meta_type()
        {
        }
        public function get_title()
        {
        }
        /**
         * @return array
         */
        public function get_related_field_settings()
        {
        }
        /**
         * @param $object_id
         *
         * @return int[]
         */
        public function get_related_ids($object_id)
        {
        }
        public function add_relation($from_id, $to_id)
        {
        }
        public function delete_relation($from_id, $to_id)
        {
        }
    }
}
namespace ACA\MetaBox\Export\Model {
    /**
     * @property Column $column
     */
    class Raw extends \ACP\Export\Model\RawValue
    {
        public function __construct(\ACA\MetaBox\Column $column)
        {
        }
        public function get_value($id)
        {
        }
        public function format_single_value($value, $id = null)
        {
        }
        public function get_multiple_values($id)
        {
        }
    }
    /**
     * @property Column $column
     */
    class FieldsetText extends \ACA\MetaBox\Export\Model\Raw
    {
        public function format_single_value($value, $id = null)
        {
        }
    }
    /**
     * @property Column $column
     */
    class Formatted extends \ACA\MetaBox\Export\Model\Raw
    {
        public function format_single_value($value, $id = null)
        {
        }
    }
    /**
     * @property Column $column
     */
    class File extends \ACA\MetaBox\Export\Model\Raw
    {
        public function format_single_value($value, $id = null)
        {
        }
    }
}
namespace ACA\MetaBox\Export {
    class Factory extends \ACA\MetaBox\Factory
    {
        public function create(\ACA\MetaBox\Column $column)
        {
        }
        public function create_default(\ACA\MetaBox\Column $column)
        {
        }
        public function create_disabled(\ACA\MetaBox\Column $column)
        {
        }
    }
}
namespace ACA\MetaBox {
    final class RelationColumnFactory
    {
        /**
         * @return MetaBox\Column\Relation|null
         */
        public function create(\ACA\MetaBox\Entity\Relation $relation)
        {
        }
    }
    class RelationshipRepository
    {
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return Relation[]
         */
        public function get_by_list_screen(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @return Relation|null
         */
        public function get_by_column(\ACA\MetaBox\Column\Relation $column)
        {
        }
        private function is_relation_type_for_list_screen($type, \AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACA\BP\Editing\Storage {
    class Group implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $field;
        public function __construct($field)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        public function get(int $id)
        {
        }
    }
    class Profile implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $field;
        public function __construct($field)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        public function get(int $id)
        {
        }
    }
}
namespace ACA\BP\Editing\Storage\Profile {
    class MultiChoices extends \ACA\BP\Editing\Storage\Profile
    {
        public function get(int $id)
        {
        }
    }
}
namespace ACA\BP\Editing\RequestHandler\Query {
    class Groups implements \ACP\Editing\RequestHandler
    {
        public function handle(\AC\Request $request)
        {
        }
        public function send_editable_rows()
        {
        }
        /**
         * @return int
         */
        private function get_rows_per_iteration()
        {
        }
        /**
         * @return int
         */
        protected function get_offset()
        {
        }
    }
}
namespace ACA\BP\Editing\Service\Group {
    class NameOnly extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Description extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Status extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\BP\Editing\Service\User {
    class Membertype implements \ACP\Editing\Service
    {
        /**
         * @var array
         */
        private $options;
        public function __construct(array $options)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Status implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\BP\Editing\Strategy {
    class Group implements \ACP\Editing\Strategy
    {
        /**
         * @param int|object $entry_id
         *
         * @return bool|int
         */
        public function user_can_edit_item($entry_id)
        {
        }
        public function user_can_edit()
        {
        }
        public function get_query_request_handler()
        {
        }
    }
}
namespace ACA\BP\Editing\Ajax\TableRows {
    class Groups extends \ACP\Editing\Ajax\TableRows
    {
        public function register()
        {
        }
    }
}
namespace ACA\BP\Service {
    class Admin implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        /**
         * @param AC\Asset\Location\Absolute $location
         */
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
    }
    class Columns implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * Add custom columns
         *
         * @param AC\ListScreen $list_screen
         *
         * @throws ReflectionException
         */
        public function register_columns(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\Groups $groups
         */
        public function register_column_groups(\AC\Groups $groups)
        {
        }
    }
    class Table implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        /**
         * @param AC\Asset\Location\Absolute $location
         */
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        private function is_bp_list_screen($list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         */
        public function table_scripts(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         */
        public function init_editable_table(\AC\ListScreen $list_screen)
        {
        }
    }
    final class ListScreens implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param AC\AdminColumns $admin_columns
         */
        public function register_list_screens(\AC\ListScreens $list_screens)
        {
        }
        /**
         * @param AC\Groups $groups
         */
        public function register_list_screen_group(\AC\Groups $groups)
        {
        }
    }
}
namespace ACA\BP\Settings {
    class Group extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $group_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_group_property_display()
        {
        }
        /**
         * @param string $group_property
         *
         * @return bool
         */
        public function set_group_property_display($group_property)
        {
        }
    }
    /**
     * class ActivityType
     * @since 1.3
     */
    class ActivityType extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $activity_type;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_activity_type()
        {
        }
        /**
         * @param string $activity_type
         *
         * @return bool
         */
        public function set_activity_type($activity_type)
        {
        }
    }
    class Date extends \AC\Settings\Column\Date
    {
        public function __construct($column)
        {
        }
        protected function get_date_options()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class GroupLink extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $group_link_to;
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
        private function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_group_link_to()
        {
        }
        /**
         * @param string $group_link_to
         *
         * @return bool
         */
        public function set_group_link_to($group_link_to)
        {
        }
    }
    /**
     * @property Column\Profile $column
     */
    class Profile extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $profile_field;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @return string
         */
        public function get_profile_field()
        {
        }
        /**
         * @param string $profile_field
         *
         * @return true
         */
        public function set_profile_field($profile_field)
        {
        }
        /**
         * @return string
         */
        private function get_first_profile_field()
        {
        }
        private function get_field_types()
        {
        }
    }
}
namespace ACA\BP\Column\Group {
    class NameOnly extends \AC\Column implements \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($group_id)
        {
        }
        public function editing()
        {
        }
    }
    class Avatar extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($group_id)
        {
        }
    }
    class Creator extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($group_id)
        {
        }
        public function register_settings()
        {
        }
    }
    class Name extends \AC\Column implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
    }
    class Description extends \AC\Column implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($group_id)
        {
        }
        public function editing()
        {
        }
    }
    class Id extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_raw_value($group_id)
        {
        }
    }
    class Status extends \AC\Column implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\BP\Column\User {
    class MemberType extends \AC\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function is_valid()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        private function get_member_types()
        {
        }
    }
    class LastSeen extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class Groups extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \AC\Column\AjaxValue, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_ajax_value($id)
        {
        }
        protected function register_settings()
        {
        }
        public function is_valid()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class Friends extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function is_valid()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function filtering()
        {
        }
    }
    class ActivityUpdates extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function register_settings()
        {
        }
        public function get_activity_type()
        {
        }
        public function is_valid()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    class LastActivity extends \AC\Column implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        private $actions;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function is_valid()
        {
        }
        private function get_last_activity($user_id)
        {
        }
        private function get_actions()
        {
        }
        private function get_action($item)
        {
        }
        public function export()
        {
        }
    }
    class Status extends \AC\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
    }
}
namespace ACA\BP\Column {
    class Profile extends \AC\Column implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function is_valid()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        protected function register_settings()
        {
        }
        public function get_raw_value($id)
        {
        }
        /**
         * @return false|Field\Profile
         */
        public function get_field()
        {
        }
        public function get_buddypress_field()
        {
        }
        public function get_buddypress_field_id()
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function get_buddypress_field_option($property)
        {
        }
    }
}
namespace ACA\BP\Search\User {
    class Date extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Groups extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        /**
         * @inheritDoc
         */
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class ActivityUpdates extends \ACP\Search\Comparison
    {
        /** @var string */
        private $activity;
        public function __construct($activity)
        {
        }
        /**
         * @inheritDoc
         */
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class MemberTypes extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $options;
        public function get_meta_type()
        {
        }
        public function __construct(array $options)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class Status extends \ACP\Search\Comparison\User\UserField implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
        /**
         * @inheritdoc
         */
        public function get_values()
        {
        }
    }
}
namespace ACA\BP\Search {
    class Profile extends \ACP\Search\Comparison
    {
        /**
         * @var string
         */
        protected $field;
        /**
         * Profile constructor.
         *
         * @param Operators $operators
         * @param string    $field
         * @param string    $value
         * @param Labels    $labels
         */
        public function __construct($operators, $field, $value, $labels = null)
        {
        }
        /**
         * @inheritDoc
         */
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function create_empty_bindings()
        {
        }
    }
}
namespace ACA\BP\Search\Profile {
    class Number extends \ACA\BP\Search\Profile
    {
        public function __construct($meta_key)
        {
        }
    }
    class Date extends \ACA\BP\Search\Profile
    {
        public function __construct($meta_key)
        {
        }
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Choice extends \ACA\BP\Search\Profile implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $options;
        public function __construct($meta_key, $options)
        {
        }
        public function get_values()
        {
        }
    }
    class Text extends \ACA\BP\Search\Profile
    {
        public function __construct($meta_key)
        {
        }
    }
    class MultipleChoice extends \ACA\BP\Search\Profile implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $options;
        public function __construct($meta_key, $options)
        {
        }
        public function get_values()
        {
        }
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\BP\Sorting\User {
    class ActivityUpdates extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $activity_type;
        public function __construct($activity_type)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
}
namespace ACA\BP\Sorting {
    class Profile extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var Column\Profile
         */
        protected $column;
        protected $datatype;
        public function __construct(\ACA\BP\Column\Profile $column, \ACP\Sorting\Type\DataType $data_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
}
namespace ACA\BP\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\BP\Field {
    class Profile implements \ACP\Search\Searchable
    {
        /**
         * @var Column\Profile
         */
        protected $column;
        public function __construct(\ACA\BP\Column\Profile $column)
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_dependent_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function get($key)
        {
        }
        private function set_column(\ACA\BP\Column\Profile $column)
        {
        }
    }
}
namespace ACA\BP\Field\Profile {
    class Radio extends \ACA\BP\Field\Profile
    {
        public function editing()
        {
        }
        public function search()
        {
        }
        private function get_options()
        {
        }
    }
    class Selectbox extends \ACA\BP\Field\Profile\Radio
    {
    }
    class Number extends \ACA\BP\Field\Profile
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class Telephone extends \ACA\BP\Field\Profile
    {
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Checkbox extends \ACA\BP\Field\Profile
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        private function get_options()
        {
        }
    }
    class Datebox extends \ACA\BP\Field\Profile
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class Textarea extends \ACA\BP\Field\Profile
    {
        public function get_dependent_settings()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Multiselectbox extends \ACA\BP\Field\Profile\Checkbox
    {
    }
    class URL extends \ACA\BP\Field\Profile
    {
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Textbox extends \ACA\BP\Field\Profile
    {
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\BP\Export {
    /**
     * @property Column\Profile $column
     */
    class MultipleValues extends \ACP\Export\Model
    {
        public function __construct(\ACA\BP\Column\Profile $column)
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACA\BP\Helper\Select\Entities {
    class Group extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        /** @var int */
        private $per_page;
        /**
         * @var WP_Query
         */
        protected $query;
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
}
namespace ACA\BP\Helper\Select\Formatter {
    class Group extends \AC\Helper\Select\Formatter
    {
        /**
         * @param BP_Groups_Group $group
         *
         * @return string
         */
        public function get_label($group)
        {
        }
    }
}
namespace ACA\BP\Helper\Select\Value {
    final class Group implements \AC\Helper\Select\Value
    {
        /**
         * @param BP_Groups_Group $group
         *
         * @return int
         */
        public function get_value($group)
        {
        }
    }
}
namespace ACA\BP\ListScreen {
    class Group extends \AC\ListScreenWP implements \ACP\Editing\ListScreen
    {
        public function __construct()
        {
        }
        public function get_heading_hookname()
        {
        }
        /**
         * @param string $value
         * @param string $column_name
         * @param array  $group
         *
         * @return string
         */
        public function manage_value($value, $column_name, $group)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        protected function get_object($id)
        {
        }
        public function set_manage_value_callback()
        {
        }
        public function is_current_screen($wp_screen)
        {
        }
        public function get_screen_link()
        {
        }
        /**
         * @return BP_Groups_List_Table
         */
        public function get_list_table()
        {
        }
        /**
         * @throws ReflectionException
         */
        protected function register_column_types()
        {
        }
        public function get_table_attr_id()
        {
        }
        public function editing()
        {
        }
    }
    class Email extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\BP\Filtering\User {
    class LastSeen extends \ACP\Filtering\Model\MetaDate
    {
        public function __construct($column)
        {
        }
    }
    class Groups extends \ACP\Filtering\Model
    {
        /**
         * @param WP_User_Query $query
         */
        public function filter_by_groups($query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Friends extends \ACP\Filtering\Model\Meta
    {
        public function __construct($column)
        {
        }
        public function is_ranged()
        {
        }
    }
    /**
     * @property Column\User\ActivityUpdates $column
     */
    class ActivityUpdates extends \ACP\Filtering\Model
    {
        public function __construct($column)
        {
        }
        public function get_filtering_data()
        {
        }
        /**
         * @param $query WP_User_Query
         */
        public function filter_by_activity_update($query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
    }
    class Status extends \ACP\Filtering\Model
    {
        /**
         * @param $query
         *
         * @return WP_Query
         */
        public function filter_by_user_status($query)
        {
        }
        /**
         * @param array $vars
         *
         * @return array
         */
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\BP\Filtering {
    /**
     * @property Column\Profile $column
     */
    class Profile extends \ACP\Filtering\Model
    {
        public function __construct(\ACA\BP\Column\Profile $column)
        {
        }
        /**
         * @param WP_User_Query $query
         */
        public function filter_by_callback($query)
        {
        }
        /**
         * @param WP_User_Query $query
         * @param string        $where
         */
        protected function add_sql_where($query, $where)
        {
        }
        /**
         * @param WP_User_Query $query
         * @param string        $type
         */
        protected function filter_by_ranged($query, $type = 'numeric')
        {
        }
        private function add_sql_empty($query)
        {
        }
        /**
         * @param WP_User_Query $query
         */
        public function filter_by_empty_value($query)
        {
        }
        /**
         * @return bool
         */
        private function is_empty_value()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
        // Utility
        protected function get_xprofile_values()
        {
        }
    }
}
namespace ACA\BP\Filtering\Profile {
    class Number extends \ACA\BP\Filtering\Profile
    {
        public function __construct($column)
        {
        }
        /**
         * @param WP_User_Query $query
         */
        public function filter_by_callback($query)
        {
        }
    }
    class Date extends \ACA\BP\Filtering\Profile
    {
        public function __construct($column)
        {
        }
        public function register_settings()
        {
        }
        public function get_filtering_data()
        {
        }
        public function filter_by_callback($query)
        {
        }
        /**
         * @param string $date   Input
         * @param string $format Output
         *
         * @return false|string
         */
        private function get_date_format($date, $format)
        {
        }
        private function get_filter_format()
        {
        }
    }
    class Serialized extends \ACA\BP\Filtering\Profile
    {
        /**
         * @param WP_User_Query $query
         */
        public function filter_by_callback($query)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\BP {
    final class BuddyPress implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        private function register_service($service)
        {
        }
    }
}
namespace ACA\Types\Editing\Storage {
    class Checkboxes extends \ACP\Editing\Storage\Meta
    {
        /**
         * @var array
         */
        private $options;
        public function __construct($meta_key, \AC\MetaType $meta_type, $options)
        {
        }
        public function get($id)
        {
        }
        private function get_single_value($value)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Repeater implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var MetaType
         */
        private $meta_type;
        public function __construct($meta_key, \AC\MetaType $meta_type)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class RepeatableDate extends \ACA\Types\Editing\Storage\Repeater
    {
        public function get($id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        private function time_to_date($timestamp)
        {
        }
    }
    abstract class Relationship implements \ACP\Editing\Storage
    {
        /**
         * @var Types\Column\Post\Relationship
         */
        private $column;
        /**
         * @var string
         */
        protected $relationship;
        protected abstract function connect_post($source_id, $connect_id);
        protected abstract function disconnect_post($source_id, $connect_id);
        public function __construct(\ACA\Types\Column\Post\Relationship $column, $relationship)
        {
        }
        private function get_ids(int $id)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\Types\Editing\Storage\Relationship {
    class ParentRelation extends \ACA\Types\Editing\Storage\Relationship
    {
        protected function connect_post($source_id, $connect_id)
        {
        }
        protected function disconnect_post($source_id, $connect_id)
        {
        }
    }
    class ChildRelation extends \ACA\Types\Editing\Storage\Relationship
    {
        protected function connect_post($source_id, $connect_id)
        {
        }
        protected function disconnect_post($source_id, $connect_id)
        {
        }
    }
}
namespace ACA\Types\Editing\Storage {
    class File extends \ACP\Editing\Storage\Meta
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class RepeatableFile extends \ACA\Types\Editing\Storage\Repeater
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\Types\Editing\Service {
    class Relationship extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        protected $related_post_type;
        public function __construct(\ACP\Editing\Storage $storage, $related_post_type)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
}
namespace ACA\Types {
    class FieldFactory
    {
        /**
         * @param string $type
         * @param Column $column
         *
         * @return Field
         */
        public function create($type, \ACA\Types\Column $column)
        {
        }
    }
}
namespace ACA\Types\Service {
    final class Columns implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_columns(\AC\ListScreen $list_screen)
        {
        }
        public function register_column_groups(\AC\Groups $groups)
        {
        }
    }
    final class Scripts implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        /**
         * @param AC\Asset\Location\Absolute $location
         */
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
    }
}
namespace ACA\Types\Settings {
    /**
     * @property Column\Post\ParentPost $column
     */
    class ParentPostType extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $post_type;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @param string $post_type
         *
         * @return true
         */
        public function set_post_type($post_type)
        {
        }
        /**
         * @return string
         */
        private function get_first_post_type()
        {
        }
        private function get_post_types()
        {
        }
    }
    /**
     * @property Column $column
     */
    class Field extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $types_field;
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_types_field()
        {
        }
        /**
         * @param string $types_field
         *
         * @return true
         */
        public function set_types_field($types_field)
        {
        }
        /**
         * @return string
         */
        private function get_first_types_field()
        {
        }
        // Common
        private function get_field_types()
        {
        }
    }
    class Relationship extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $relationship;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @return string
         */
        public function get_relationship()
        {
        }
        /**
         * @param string $relationship
         *
         * @return true
         */
        public function set_relationship($relationship)
        {
        }
        /**
         * @return string
         */
        private function get_first_relationship()
        {
        }
        /**
         * @return IToolset_Relationship_Definition|null
         */
        public function get_relationship_object()
        {
        }
        private function get_relationships()
        {
        }
    }
    /**
     * @property Column\Post\Children $column
     */
    class ChildPostType extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $post_type;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @param string $post_type
         *
         * @return true
         */
        public function set_post_type($post_type)
        {
        }
        /**
         * @return string
         */
        private function get_first_post_type()
        {
        }
        /**
         * @param string $post_type
         *
         * @return string
         */
        private function get_post_type_label($post_type)
        {
        }
        /**
         * @return array
         */
        private function get_post_types()
        {
        }
    }
    class IntermediaryRelationship extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $intermediary_relationship;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        private function get_relationships()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @return string
         */
        public function get_intermediary_relationship()
        {
        }
        /**
         * @param string $relationship
         *
         * @return true
         */
        public function set_intermediary_relationship($relationship)
        {
        }
        /**
         * @return string
         */
        private function get_first_relationship()
        {
        }
    }
}
namespace ACA\Types\Column\Post {
    class Intermediary extends \AC\Column implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        /**
         * @param IToolset_Relationship_Definition $relationship
         *
         * @return bool|string
         */
        private function get_relationship_type()
        {
        }
        /**
         * @return null|Settings\IntermediaryRelationship
         */
        private function get_relationship_setting()
        {
        }
        /**
         * @return string
         */
        private function get_current_post_type()
        {
        }
        /**
         * @return IToolset_Relationship_Definition|null
         */
        private function get_relationship_object()
        {
        }
        public function is_valid()
        {
        }
        public function register_settings()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class Relationship extends \AC\Column implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function is_valid()
        {
        }
        private function has_relationships()
        {
        }
        public function register_settings()
        {
        }
        /**
         * @return IToolset_Relationship_Definition|null
         */
        private function get_relationship_object()
        {
        }
        /**
         * @param IToolset_Relationship_Definition $relationship
         *
         * @return bool|string
         */
        private function get_relationship_type()
        {
        }
        /**
         * @return null|Settings\Relationship
         */
        public function get_relationship_setting()
        {
        }
        /**
         * @return string
         */
        private function get_related_post_type()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types {
    abstract class Column extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        /**
         * @return array
         */
        public abstract function get_fields();
        /**
         * @param int $id
         *
         * @return string
         */
        public abstract function get_render_value($id);
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        protected function get_type_name()
        {
        }
        /**
         * @param string $property
         *
         * @return array|string|false
         */
        public function get_type_field_option($property)
        {
        }
        public function is_repeatable()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function is_serialized()
        {
        }
        /**
         * Register settings
         */
        protected function register_settings()
        {
        }
        public function get_raw_value($id)
        {
        }
        /**
         * @return Field
         */
        public function get_field()
        {
        }
        /**
         * @return array|false
         */
        public function get_type_field()
        {
        }
        public function get_type_field_id()
        {
        }
    }
}
namespace ACA\Types\Column {
    class Taxonomy extends \ACA\Types\Column
    {
        protected function get_type_name()
        {
        }
        public function get_fields()
        {
        }
        public function get_render_value($id)
        {
        }
    }
    class Post extends \ACA\Types\Column
    {
        protected function get_group_name()
        {
        }
        public function get_fields()
        {
        }
        public function get_render_value($id)
        {
        }
    }
    class User extends \ACA\Types\Column
    {
        protected function get_type_name()
        {
        }
        public function get_fields()
        {
        }
        public function get_render_value($id)
        {
        }
    }
}
namespace ACA\Types\Search\Post {
    class Relationship extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $related_post_type;
        /**
         * @var string
         */
        private $relationship;
        /**
         * @var string
         */
        private $role;
        /**
         * @var string
         */
        private $return_role;
        public function __construct($relationship, $related_post_type, $role, $return_role)
        {
        }
        protected function get_default_operators()
        {
        }
        /**
         * @return int
         */
        private function get_relationship_id()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function get_associated_bindings($operator)
        {
        }
        /**
         * @param $search
         * @param $page
         *
         * @return AC\Helper\Select\Options\Paginated
         */
        public function get_values($search, $page)
        {
        }
    }
    class IntermediaryRelationship extends \ACA\Types\Search\Post\Relationship
    {
        public function __construct($relationship, $related_post_type, $role)
        {
        }
        protected function get_default_operators()
        {
        }
    }
}
namespace ACA\Types\Search {
    class Skype extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
    }
    class Checkboxes extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array options */
        private $options;
        public function __construct($meta_key, $type, array $options)
        {
        }
        public function get_values()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Checkbox extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct($meta_key, $type)
        {
        }
        public function get_values()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class File extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key, $type)
        {
        }
    }
    class Select extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array options */
        private $options;
        public function __construct($meta_key, $type, array $options)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\Types\Sorting {
    trait DisabledSortingTrait
    {
        public function sorting()
        {
        }
    }
}
namespace ACA\Types\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\Types {
    class FieldRepeatableFactory
    {
        /**
         * @param string $type
         * @param Column $column
         *
         * @return Field
         */
        public function create($type, \ACA\Types\Column $column)
        {
        }
    }
    class Field implements \ACP\ConditionalFormat\Formattable
    {
        /**
         * @var Column
         */
        protected $column;
        public function __construct(\ACA\Types\Column $column)
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_meta_type()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function is_serialized()
        {
        }
        public function is_required()
        {
        }
        public function get($key)
        {
        }
        public function set_column(\ACA\Types\Column $column)
        {
        }
        public function get_repeatable_value($id)
        {
        }
        public function get_meta_key()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Textarea extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class Wysiwyg extends \ACA\Types\Field\Textarea
    {
    }
    class Number extends \ACA\Types\Field
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Number extends \ACA\Types\Field\Number
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Textfield extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Textfield extends \ACA\Types\Field\Textfield
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class File extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        /**
         * @param string $image_url
         *
         * @return int|null
         */
        public function get_attachment_id_by_url($image_url)
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class File extends \ACA\Types\Field\File
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
    class Audio extends \ACA\Types\Field\Repeatable\File
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Date extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        /**
         * @return bool
         */
        private function has_time()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Date extends \ACA\Types\Field\Date
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        private function format_single_value($value)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Skype extends \ACA\Types\Field
    {
        public function is_serialized()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        /**
         * @param array $skype
         *
         * @return string
         */
        protected function format($skype)
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Skype extends \ACA\Types\Field\Skype
    {
        public function get_value($id)
        {
        }
        public function export()
        {
        }
    }
    class Video extends \ACA\Types\Field\File
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Embed extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Embed extends \ACA\Types\Field\Embed
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Email extends \ACA\Types\Field
    {
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Email extends \ACA\Types\Field\Email
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
    class Textarea extends \ACA\Types\Field\Textarea
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Phone extends \ACA\Types\Field
    {
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Phone extends \ACA\Types\Field\Phone
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Image extends \ACA\Types\Field\File
    {
        public function get_value($id)
        {
        }
        public function get_dependent_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Image extends \ACA\Types\Field\Image
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Url extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Url extends \ACA\Types\Field\Url
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Colorpicker extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Field\Repeatable {
    class Colorpicker extends \ACA\Types\Field\Colorpicker
    {
        use \ACA\Types\Sorting\DisabledSortingTrait;
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\Types\Field {
    class Select extends \ACA\Types\Field
    {
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        /**
         * @return array
         */
        private function get_field_options()
        {
        }
    }
    class Radio extends \ACA\Types\Field\Select
    {
    }
    class Audio extends \ACA\Types\Field\File
    {
        public function editing()
        {
        }
    }
    class Checkboxes extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function get_values_as_labels($id)
        {
        }
        public function is_serialized()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        private function get_field_options()
        {
        }
    }
    class Video extends \ACA\Types\Field\File
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
    }
    class Checkbox extends \ACA\Types\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Types\Export {
    /**
     * @property Column $column
     */
    class Field extends \ACP\Export\Model
    {
        /**
         * @param Column $column
         */
        public function __construct(\ACA\Types\Column $column)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
    }
}
namespace ACA\Types\Export\Field {
    class Date extends \ACA\Types\Export\Field
    {
        /**
         * @var string
         */
        private $date_format;
        public function __construct(\ACA\Types\Column $column, $date_format = 'Y-m-d')
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * @property Column $column
     */
    class Skype extends \ACA\Types\Export\Field
    {
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
    }
    /**
     * @property Column $column
     */
    class Checkboxes extends \ACA\Types\Export\Field
    {
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
    }
}
namespace ACA\Types {
    final class Types implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        private function register_service($service)
        {
        }
        private function has_minimum_required_types() : bool
        {
        }
        /**
         * Load Types API functions
         * @return bool
         */
        private function load_types_api()
        {
        }
    }
}
namespace ACA\Types\ConditionalFormatting {
    class FormattableConfigFactory
    {
        public function create(\ACA\Types\Field $field) : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACA\Types\Filtering\Post {
    /**
     * @property Column $column
     */
    class ParentPost extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\Types {
    /**
     * @property Column $column
     */
    class Filtering extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\Types\Column $column)
        {
        }
    }
}
namespace ACA\Types\Filtering {
    /**
     * @property Column $column
     */
    class Number extends \ACA\Types\Filtering
    {
        public function __construct($column)
        {
        }
        public function is_ranged()
        {
        }
    }
    class Date extends \ACP\Filtering\Model\MetaDate
    {
        public function __construct($column)
        {
        }
    }
    /**
     * @property Column $column
     */
    class Skype extends \ACA\Types\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
    class Checkboxes extends \ACA\Types\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column $column
     */
    class Checkbox extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column $column
     */
    class File extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column $column
     */
    class Image extends \ACA\Types\Filtering
    {
        /**
         * @return array
         */
        public function get_filtering_data()
        {
        }
    }
    class Select extends \ACA\Types\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\Types {
    /**
     * @property Column $column
     */
    class Editing extends \ACP\Editing\Model
    {
        public function __construct(\ACA\Types\Column $column)
        {
        }
        public function get_view_settings()
        {
        }
        /**
         * @param int $id
         *
         * @return array|mixed|string
         */
        public function get_edit_value($id)
        {
        }
        /**
         * @param int          $id
         * @param array|string $value
         *
         * @return bool
         */
        public function save($id, $value)
        {
        }
        /**
         * @param int   $id
         * @param array $values
         *
         * @return bool
         */
        public function save_multi_input($id, $values)
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function delete_metadata($id)
        {
        }
        /**
         * @param int   $id
         * @param mixed $value
         *
         * @return false|int
         */
        public function add_metadata($id, $value)
        {
        }
        /**
         * @param int   $id
         * @param mixed $value
         *
         * @return bool|int
         */
        public function update_metadata($id, $value)
        {
        }
    }
}
namespace ACA\Pods\Editing\Storage {
    interface ReadStorage
    {
        /**
         * @return mixed
         */
        public function get(int $id);
    }
    class Field implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        protected $pod;
        /**
         * @var string
         */
        protected $field_name;
        /**
         * @var ReadStorage
         */
        protected $read_storage;
        public function __construct($pod, $field_name, \ACA\Pods\Editing\Storage\ReadStorage $read)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Date extends \ACA\Pods\Editing\Storage\Field
    {
        /**
         * @var string
         */
        private $date_format;
        public function __construct($pod, $field_name, \ACA\Pods\Editing\Storage\ReadStorage $read, $date_format)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\Pods\Editing\Storage\Read {
    class DbRaw implements \ACA\Pods\Editing\Storage\ReadStorage
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var string
         */
        private $meta_type;
        public function __construct($meta_key, $meta_type)
        {
        }
        public function get(int $id)
        {
        }
    }
    class PodsRaw implements \ACA\Pods\Editing\Storage\ReadStorage
    {
        /**
         * @var string
         */
        private $pod;
        /**
         * @var string
         */
        private $field_name;
        public function __construct($pod, $field_name)
        {
        }
        public function get(int $id)
        {
        }
    }
}
namespace ACA\Pods\Editing\Storage {
    class File extends \ACA\Pods\Editing\Storage\Field
    {
        public function __construct($pod, $field_name, $meta_type)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\Pods\Editing\Service {
    class PickComments implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var boolean
         */
        private $multiple;
        public function __construct(\ACP\Editing\Storage $storage, $multiple)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $paged, $id = null)
        {
        }
    }
    class PickTaxonomy implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var boolean
         */
        private $multiple;
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var string
         */
        private $storage;
        public function __construct(\ACP\Editing\Storage $storage, $multiple, $taxonomy)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class FieldStorage extends \ACP\Editing\Service\BasicStorage
    {
        /**
         * @var View
         */
        private $view;
        public function __construct(\ACP\Editing\Storage $storage, \ACP\Editing\View $view = null)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\Pods\Editing {
    final class ViewFactory
    {
        public function create_by_field(\ACA\Pods\Field $field) : \ACP\Editing\View
        {
        }
        private function set_clear_button(\ACP\Editing\View $view)
        {
        }
        private function create_view_type(\ACA\Pods\Field $field)
        {
        }
        public function get_media_type_view_by_field(\ACA\Pods\Field $field)
        {
        }
        private function check_max_length_for_property(\ACP\Editing\View\MaxLength $view, \ACA\Pods\Field $field, $property) : void
        {
        }
    }
    trait DefaultServiceTrait
    {
        public function editing()
        {
        }
    }
    final class StorageFactory
    {
        public function create_by_field(\ACA\Pods\Field $field)
        {
        }
    }
}
namespace ACA\Pods {
    class FieldFactory
    {
        /**
         * @param string $type
         * @param Column $column
         * @param string $subtype
         *
         * @return Field
         */
        public function create($type, \ACA\Pods\Column $column, $subtype = null)
        {
        }
    }
}
namespace ACA\Pods\Service {
    final class Columns implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param AC\Groups $groups
         */
        public function register_column_groups($groups)
        {
        }
        /**
         * Add custom columns
         *
         * @param AC\ListScreen $list_screen
         */
        public function add_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    final class Scripts implements \AC\Registerable
    {
        /**
         * @var Absolute
         */
        private $location;
        /**
         * @param Absolute $location
         */
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
    }
}
namespace ACA\Pods {
    class Pods implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
    abstract class Column extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        /**
         * @var array Pod settings
         */
        private $pod;
        /**
         * @return string
         */
        protected abstract function get_pod_name();
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_separator()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        protected function register_settings()
        {
        }
        /**
         * Current Pod field settings
         * @return false|array Field settings
         */
        public function get_pod_field()
        {
        }
        /**
         * @param string $property
         *
         * @return mixed|false
         */
        public function get_pod_field_option($property)
        {
        }
        /**
         * @return string|false
         */
        public function get_field_type()
        {
        }
        private function set_pod()
        {
        }
        /**
         * @return array
         */
        public function get_pod()
        {
        }
        /**
         * @return Field
         */
        public function get_field()
        {
        }
        /**
         * @return false|array Field settings
         */
        public function get_pod_fields()
        {
        }
    }
}
namespace ACA\Pods\Column {
    class Media extends \ACA\Pods\Column
    {
        protected function get_pod_name()
        {
        }
    }
    class Taxonomy extends \ACA\Pods\Column
    {
        protected function get_pod_name()
        {
        }
    }
    class Post extends \ACA\Pods\Column
    {
        protected function get_pod_name()
        {
        }
    }
    class Comment extends \ACA\Pods\Column
    {
        protected function get_pod_name()
        {
        }
    }
    class User extends \ACA\Pods\Column
    {
        protected function get_pod_name()
        {
        }
    }
}
namespace ACA\Pods\Search {
    class PickComment extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct($meta_key, $type)
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class PickPost extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /** @var array */
        private $post_type;
        public function __construct($meta_key, $type, array $post_type)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Pick extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $options;
        public function __construct($meta_key, $type, $options)
        {
        }
        public function get_values()
        {
        }
    }
    class PickTaxonomy extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /** @var array */
        private $taxonomy;
        public function __construct($meta_key, $type, array $taxonomy)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class PickUser extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /** @var array */
        private $roles;
        public function __construct($meta_key, $type, $roles)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
}
namespace ACA\Pods\Sorting {
    trait DefaultSortingTrait
    {
        public function sorting()
        {
        }
    }
}
namespace ACA\Pods\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\Pods {
    class Field implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        /**
         * @var Column
         */
        protected $column;
        public function __construct(\ACA\Pods\Column $column)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        /**
         * @return AC\Settings\Column[]
         */
        public function get_dependent_settings()
        {
        }
        /**
         * @return Column
         */
        protected function column()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @return string
         */
        public function get_pod()
        {
        }
        /**
         * @return string
         */
        public function get_field_name()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_meta_type()
        {
        }
        /**
         * Get the raw DB value
         *
         * @param int $id
         *
         * @return array|false
         */
        protected function get_db_value($id)
        {
        }
        public function get_separator()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|false
         */
        public function get($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|false
         */
        public function get_option($key)
        {
        }
        protected function get_meta_key()
        {
        }
    }
}
namespace ACA\Pods\Field {
    class Wysiwyg extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function get_value($id)
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class Number extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    class Code extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function get_value($id)
        {
        }
        public function search()
        {
        }
    }
    class Color extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Currency extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Date extends \ACA\Pods\Field
    {
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class Pick extends \ACA\Pods\Field
    {
        public function get_value($id)
        {
        }
        public function get_options()
        {
        }
        protected function get_pick_field()
        {
        }
        protected function is_multiple()
        {
        }
        public function export()
        {
        }
        protected function get_ids_from_array($array, $id_name = 'ID')
        {
        }
    }
    class Password extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function get_value($id)
        {
        }
        public function get_dependent_settings()
        {
        }
        public function search()
        {
        }
    }
    class Text extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class File extends \ACA\Pods\Field
    {
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_separator()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
}
namespace ACA\Pods\Field\Pick {
    class Media extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class Taxonomy extends \ACA\Pods\Field\Pick
    {
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class CustomSimple extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class PostFormat extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class NavMenu extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class Country extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function get_options()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class PostType extends \ACA\Pods\Field\Pick
    {
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class UsState extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class MonthsOfYear extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class Comment extends \ACA\Pods\Field\Pick
    {
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class User extends \ACA\Pods\Field\Pick
    {
        public function sorting()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_users($user_ids)
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class DaysOfWeek extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class ImageSize extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class PostStatus extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class Role extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
    class Capability extends \ACA\Pods\Field\Pick
    {
        use \ACA\Pods\Editing\DefaultServiceTrait;
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_options()
        {
        }
    }
}
namespace ACA\Pods\Field {
    class Email extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Website extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Time extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function search()
        {
        }
    }
    class Datetime extends \ACA\Pods\Field
    {
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class Phone extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Paragraph extends \ACA\Pods\Field
    {
        use \ACA\Pods\Editing\DefaultServiceTrait, \ACA\Pods\Sorting\DefaultSortingTrait;
        public function get_value($id)
        {
        }
        public function search()
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    class Boolean extends \ACA\Pods\Field
    {
        use \ACA\Pods\Sorting\DefaultSortingTrait, \ACA\Pods\Editing\DefaultServiceTrait;
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\Pods {
    class FieldPickFactory
    {
        /**
         * @param string $type
         * @param Column $column
         *
         * @return Field\Pick
         */
        public function create($type, \ACA\Pods\Column $column)
        {
        }
    }
}
namespace ACA\Pods\Export {
    class File extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\Pods\ConditionalFormatting {
    class FormattableConfigFactory
    {
        public function create(\ACA\Pods\Field $field) : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACA\Pods {
    /**
     * @property Column $column
     */
    class Filtering extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\Pods\Column $column)
        {
        }
    }
}
namespace ACA\Pods\Filtering {
    class Number extends \ACA\Pods\Filtering
    {
        public function __construct($column)
        {
        }
        public function is_ranged()
        {
        }
    }
    class PickPosts extends \ACA\Pods\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
    class PickUsers extends \ACA\Pods\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
    class Pick extends \ACA\Pods\Filtering
    {
        public function get_filtering_data()
        {
        }
        /**
         * @param WP_Post[] | int[] $post_ids
         *
         * @return array
         */
        protected function get_titles($post_ids)
        {
        }
        protected function format_options_by_dataset($values, $dataset)
        {
        }
    }
    class PickTaxonomy extends \ACA\Pods\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
    class TrueFalse extends \ACA\Pods\Filtering
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Disabled extends \ACP\Filtering\Model
    {
        public function is_active()
        {
        }
        public function register_settings()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * Class PickCustom
     * @property Column $column
     */
    class PickCustom extends \ACA\Pods\Filtering
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\Pods\Setting {
    /**
     * @property Column $column
     */
    class Date extends \AC\Settings\Column\Date
    {
        public function __construct(\ACA\Pods\Column $column)
        {
        }
        private function format_pods_date($date_format)
        {
        }
    }
    /**
     * @property Column $column
     */
    class Field extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $pods_field;
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        private function get_link_create_pod_field()
        {
        }
        /**
         * @return string
         */
        public function get_pods_field()
        {
        }
        /**
         * @return bool|mixed
         */
        public function get_first_pods_field()
        {
        }
        /**
         * @param string $field
         *
         * @return $this
         */
        public function set_pods_field($field)
        {
        }
        private function get_field_types()
        {
        }
    }
}
namespace ACA\Pods\Value {
    class DbRaw
    {
        /**
         * @var string
         */
        private $meta_key;
        /**
         * @var string
         */
        private $meta_type;
        public function __construct($meta_key, $meta_type)
        {
        }
        /**
         * Get the raw DB value
         *
         * @param int $id
         *
         * @return array|false
         */
        public function get_value($id)
        {
        }
    }
}
namespace ACA\EC\Editing\Storage\Field {
    class Checkbox extends \ACP\Editing\Storage\Post\Meta
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\EC\Editing\Storage\Event {
    class EndDate implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class StartDate implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\EC\Editing\Service\Event {
    class Venue implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        const META_KEY = '_EventVenueID';
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $page, $id = null) : \AC\Helper\Select\Options\Paginated
        {
        }
    }
    class Sticky extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Organizer implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        const META_KEY = '_EventOrganizerID';
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
    class AllDayEvent implements \ACP\Editing\Service
    {
        const META_KEY = '_EventAllDay';
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class HideFromUpcoming implements \ACP\Editing\Service
    {
        private const META_KEY = '_EventHideFromUpcoming';
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\EC\Service {
    class TableScreen implements \AC\Registerable
    {
        /**
         * @var array
         */
        private $notices;
        /**
         * @var array
         */
        private $filter_vars;
        /**
         * @var Location\Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function table_scripts()
        {
        }
        /**
         * @param WP_Query $query
         */
        public function parse_query(\WP_Query $query)
        {
        }
        public function add_events_filter_vars($list_screen)
        {
        }
        /**
         * @param WP_Query $wp_query
         */
        public function events_query_callback(\WP_Query $wp_query)
        {
        }
        public function display_notices()
        {
        }
        private function filter_on_venue($value)
        {
        }
        private function filter_on_organizer($value)
        {
        }
        private function filter_on_past_events()
        {
        }
        private function filter_on_future_events()
        {
        }
        public function register_event_sorting_fix(\AC\ListScreen $list_screen)
        {
        }
    }
    final class Scripts implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
    }
    final class ListScreens implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_list_screen_groups(\AC\Groups $groups) : void
        {
        }
        public function register_list_screens(\AC\ListScreens $list_screens) : void
        {
        }
    }
    final class ColumnGroups implements \AC\Registerable
    {
        const EVENTS_CALENDAR = 'events_calendar';
        const EVENTS_CALENDAR_FIELDS = 'events_calendar_fields';
        public function register()
        {
        }
        /**
         * @param AC\Groups $groups
         */
        public function register_column_groups($groups)
        {
        }
    }
}
namespace ACA\EC {
    /**
     * Class ACA_EC_API
     * Interface to the EC API that works across the free and pro version
     */
    class API
    {
        /**
         * @return bool
         */
        public static function is_pro()
        {
        }
        /**
         * @return array
         */
        public static function get_additional_fields()
        {
        }
        /**
         * @param string $meta_key
         *
         * @return array
         */
        public static function get_field($meta_key)
        {
        }
        /**
         * @param string $meta_key
         * @param string $var
         *
         * @return false|mixed
         */
        public static function get($meta_key, $var)
        {
        }
    }
}
namespace ACA\EC\Settings {
    class EventDisplay extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $event_display;
        /**
         * @return string
         */
        public function get_event_display()
        {
        }
        /**
         * @param string $event_display
         */
        public function set_event_display($event_display)
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_date_options()
        {
        }
    }
    class EventDates extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $event_date;
        /**
         * @return string
         */
        public function get_event_date()
        {
        }
        /**
         * @param string $event_date
         */
        public function set_event_date($event_date)
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_date_options()
        {
        }
    }
    class Venue extends \AC\Settings\Column\Post
    {
        const PROPERTY_ADDRESS = 'address';
        const PROPERTY_CITY = 'city';
        const PROPERTY_COUNTRY = 'country';
        const PROPERTY_PHONE = 'phone';
        const PROPERTY_WEBSITE = 'website';
        const PROPERTY_ZIP = 'zip';
        public function get_dependent_settings()
        {
        }
        protected function get_display_options()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings\Column {
    abstract class Toggle extends \AC\Settings\Column
    {
        public function create_view()
        {
        }
    }
}
namespace ACA\EC\Settings {
    class ShowFilterLink extends \AC\Settings\Column\Toggle implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $show_filter_link;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_show_filter_link()
        {
        }
        /**
         * @param string $show_filter_link
         *
         * @return bool
         */
        public function set_show_filter_link($show_filter_link)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class ShowEventDate extends \AC\Settings\Column\Toggle
    {
        /**
         * @var string
         */
        private $show_event_date;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_show_event_date()
        {
        }
        /**
         * @param string $show_event_date
         *
         * @return bool
         */
        public function set_show_event_date($show_event_date)
        {
        }
    }
}
namespace AC\Settings\Column {
    class PostLink extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        protected $post_link_to;
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_post_link_to()
        {
        }
        /**
         * @param string $post_link_to
         *
         * @return bool
         */
        public function set_post_link_to($post_link_to)
        {
        }
    }
}
namespace ACA\EC\Settings {
    class NonPublicPostLink extends \AC\Settings\Column\PostLink
    {
        protected function get_display_options()
        {
        }
    }
    class EventLink extends \AC\Settings\Column\PostLink
    {
        protected function get_display_options()
        {
        }
    }
    class OrganizerDisplay extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'display';
        const PROPERTY_EMAIL = 'email';
        const PROPERTY_ID = 'id';
        const PROPERTY_TITLE = 'title';
        const PROPERTY_PHONE = 'phone';
        const PROPERTY_WEBSITE = 'website';
        /**
         * @var string
         */
        private $post_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @param int   $id
         * @param mixed $original_value
         *
         * @return string|int
         */
        public function format($id, $original_value)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_organizer_display()
        {
        }
        /**
         * @param string $post_property
         *
         * @return bool
         */
        public function set_organizer_display($post_property)
        {
        }
    }
    class OrganizerLink extends \ACA\EC\Settings\NonPublicPostLink
    {
        protected function get_display_options()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace ACA\EC\Column {
    abstract class Meta extends \ACP\Column\Meta
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
    }
}
namespace ACA\EC\Column\Venue {
    class City extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
    }
    class Address extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
    }
    class Country extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function get_countries()
        {
        }
    }
}
namespace AC\Column {
    interface Relation
    {
        /**
         * Return information about the relation this column has.
         * @return AC\Relation
         */
        public function get_relation_object();
    }
}
namespace ACA\EC\Column {
    abstract class Events extends \AC\Column
    {
        public function __construct()
        {
        }
        /**
         * @param int   $id
         * @param array $args
         *
         * @return array
         */
        protected abstract function get_events_by_id($id, array $args = []);
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        protected function get_events(array $args)
        {
        }
        protected function get_upcoming_events(array $args)
        {
        }
    }
    abstract class UpcomingEvent extends \ACA\EC\Column\Events implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\EC\Column\Venue {
    class UpcomingEvent extends \ACA\EC\Column\UpcomingEvent implements \AC\Column\Relation, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_relation_object()
        {
        }
        protected function get_events_by_id($id, array $args = [])
        {
        }
        public function filtering()
        {
        }
    }
    class Events extends \ACA\EC\Column\Events
    {
        public function __construct()
        {
        }
        protected function get_events_by_id($id, array $args = [])
        {
        }
    }
    class StateProvince extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
    }
    class Website extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Phone extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
    }
    class PostalCode extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\EC\Column\Organizer {
    class UpcomingEvent extends \ACA\EC\Column\UpcomingEvent implements \AC\Column\Relation, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_relation_object()
        {
        }
        protected function get_events_by_id($id, array $args = [])
        {
        }
        public function filtering()
        {
        }
    }
    class Events extends \ACA\EC\Column\Events
    {
        public function __construct()
        {
        }
        protected function get_events_by_id($id, array $args = [])
        {
        }
    }
    class Email extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Website extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Phone extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\EC\Column\Event {
    class EndDate extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class DisplayDate extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class Venue extends \ACA\EC\Column\Meta implements \AC\Column\Relation, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_relation_object()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class ParentEvent extends \ACP\Column\Post\PostParent
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
        public function editing()
        {
        }
    }
    class Duration extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function sorting()
        {
        }
        public function get_value($id)
        {
        }
    }
    class Sticky extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Organizer extends \ACA\EC\Column\Meta implements \AC\Column\Relation, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_relation_object()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class Recurring extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.1.2
     */
    class Field extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
        /**
         * @return false|array
         */
        public function get_field()
        {
        }
        /**
         * @return string
         */
        public function get_meta_key()
        {
        }
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function get($var)
        {
        }
        public function is_valid()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\EC\Column\Event\Field {
    /**
     * @since 1.1.2
     */
    class Dropdown extends \ACA\EC\Column\Event\Field
    {
        public function editing()
        {
        }
        public function search()
        {
        }
        /**
         * @return array
         */
        private function get_field_options()
        {
        }
    }
    /**
     * @since 1.1.2
     */
    class Radio extends \ACA\EC\Column\Event\Field
    {
        public function editing()
        {
        }
        public function search()
        {
        }
        private function get_field_options()
        {
        }
    }
    /**
     * @since 1.1.2
     */
    class Checkbox extends \ACA\EC\Column\Event\Field
    {
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        private function get_field_options()
        {
        }
    }
    /**
     * @since 1.1.2
     */
    class Text extends \ACA\EC\Column\Event\Field
    {
    }
    /**
     * @since 1.1.2
     */
    class Textarea extends \ACA\EC\Column\Event\Field
    {
        public function editing()
        {
        }
    }
    /**
     * @since 1.1.2
     */
    class Url extends \ACA\EC\Column\Event\Field
    {
        public function editing()
        {
        }
    }
}
namespace ACA\EC\Column\Event {
    class AllDayEvent extends \ACA\EC\Column\Meta implements \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class HideFromUpcoming extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Categories extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        // Overwrite the Edit setting with a new dependent setting
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class Website extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class StartDate extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Featured extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class Costs extends \ACA\EC\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACA\EC\Column\EventSeries {
    class Events extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\EC\Search\Venue {
    class Country extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $options;
        public function __construct($meta_key, $meta_type, array $options)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\EC\Search\Event {
    class Sticky extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
        public function get_values()
        {
        }
    }
    class Relation extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /** @var Relation */
        private $relation;
        public function __construct($meta_key, $meta_type, \AC\Relation\Post $relation)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Recurring extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\EC\Search\Event\Field {
    class Options extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $options;
        public function __construct($meta_key, $meta_type, array $options)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\EC\Search\Event {
    class Featured extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct($meta_key, $meta_type)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\EC\ImportListscreens {
    final class ImportedSetting
    {
        const IMPORTED_KEY = 'aca_ec_layouts_imported';
        public function is_imported()
        {
        }
        public function mark_as_imported()
        {
        }
        public function delete()
        {
        }
    }
    class Message implements \AC\Registerable
    {
        /**
         * @var ImportedSetting
         */
        private $setting;
        public function __construct(\ACA\EC\ImportListscreens\ImportedSetting $setting)
        {
        }
        public function register()
        {
        }
        public function display(\AC\ListScreen $list_screen)
        {
        }
        public function display_import_layout_message()
        {
        }
    }
    class Controller implements \AC\Registerable
    {
        const ACTION_KEY = 'aca_ec_action';
        const IMPORT_METHOD_KEY = 'import-sets';
        const DISMISS_METHOD_KEY = 'dismiss-import';
        /**
         * @var AC\Request
         */
        private $request;
        /**
         * @var ImportedSetting
         */
        private $setting;
        /**
         * @var DecoderFactory
         */
        private $decoder_factory;
        /**
         * @var AC\ListScreenRepository\Storage
         */
        private $storage;
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        public function __construct(\AC\Request $request, \AC\ListScreenRepository\Storage $storage, \ACP\Storage\ListScreen\DecoderFactory $decoder_factory, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function handle_request()
        {
        }
        private function import()
        {
        }
    }
}
namespace ACA\EC {
    final class EventsCalendar implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        private function register_service(\AC\Registerable $service)
        {
        }
    }
}
namespace ACA\EC\Sorting {
    class EventSortingFix
    {
        /**
         * @var AC\ListScreen
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function register()
        {
        }
        public function deregister_tribe_sorting_hooks(\WP_Query $wp_query)
        {
        }
    }
}
namespace ACA\EC\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\EC\Export\Model {
    /**
     * Export Model for Upcoming Event column
     * @since 1.0.2
     */
    class UpcomingEvent extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\EC\Export\Model\Event {
    /**
     * Export Model for AllDayEvent column
     * @since 1.0.2
     */
    class AllDayEvent extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\EC\Export\Model\EventSeries {
    /**
     * Export Model for AllDayEvent column
     * @since 1.0.2
     */
    class Events extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\EC\Export\Strategy {
    /**
     * Exportability class for events list screen
     * @since 1.0.2
     */
    class Event extends \ACP\Export\Strategy\Post
    {
        public function __construct(\ACA\EC\ListScreen\Event $list_screen)
        {
        }
        /**
         * @since 1.0
         * @see   ACP_Export_ExportableListScreen::ajax_export()
         */
        protected function ajax_export() : void
        {
        }
        public function modify_posts_limit($limit) : string
        {
        }
    }
}
namespace ACA\EC\ListScreen {
    class Venue extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class EventSeries extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class Organizer extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class Event extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
        public function get_column_by_field_type(string $type) : ?\ACA\EC\Column\Event\Field
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\EC\Filtering {
    abstract class UpcomingEvent extends \ACP\Filtering\Model
    {
        protected abstract function get_related_meta_key();
        /**
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function filter_by_relation($where, $query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_related_post_ids()
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\EC\Filtering\Venue {
    class UpcomingEvent extends \ACA\EC\Filtering\UpcomingEvent
    {
        protected function get_related_meta_key()
        {
        }
    }
}
namespace ACA\EC\Filtering\Organizer {
    class UpcomingEvent extends \ACA\EC\Filtering\UpcomingEvent
    {
        protected function get_related_meta_key()
        {
        }
    }
}
namespace ACA\EC\Filtering {
    abstract class Toggle extends \ACP\Filtering\Model\Meta
    {
        public abstract function get_on_value();
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\EC\Filtering\Event {
    class HiddenFromUpcoming extends \ACA\EC\Filtering\Toggle
    {
        public function get_on_value()
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Date extends \ACP\Filtering\Model\MetaDate
    {
        public function __construct($column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Sticky extends \ACP\Filtering\Model
    {
        public function get_filtering_data()
        {
        }
        public function filter_by_menu_order($where)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
    }
}
namespace ACA\EC\Filtering\Event\Field {
    /**
     * @property Column\Event\Field $column
     */
    class Checkbox extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        private function get_options()
        {
        }
    }
}
namespace ACA\EC\Filtering\Event {
    class AllDayEvent extends \ACA\EC\Filtering\Toggle
    {
        public function get_on_value()
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Featured extends \ACA\EC\Filtering\Toggle
    {
        public function get_on_value()
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\EC\Filtering {
    class RelatedPost extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\JetEngine\Editing {
    trait EditableTrait
    {
        /**
         * @return ACP\Editing\Service|false
         */
        public function editing()
        {
        }
    }
}
namespace ACA\JetEngine\Editing\Storage\Meta {
    class Media extends \ACP\Editing\Storage\Meta
    {
        /**
         * @var string
         */
        private $value_format;
        public function __construct($meta_key, \AC\MetaType $meta_type, $value_format)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Gallery extends \ACP\Editing\Storage\Meta
    {
        /**
         * @var string
         */
        private $value_format;
        public function __construct($meta_key, \AC\MetaType $meta_type, $value_format)
        {
        }
        public function get(int $id)
        {
        }
        private function format_single_value($value)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Checkbox extends \ACP\Editing\Storage\Meta
    {
        /**
         * @var array
         */
        private $choices;
        /**
         * @var boolean
         */
        private $store_array;
        public function __construct($meta_key, \AC\MetaType $meta_type, array $choices, $store_array = false)
        {
        }
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\JetEngine\Editing\Storage {
    class RelationshipChildren implements \ACP\Editing\Storage
    {
        /**
         * @var Relation
         */
        private $relation;
        public function __construct(\Jet_Engine\Relations\Relation $relation)
        {
        }
        public function get($id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class RelationshipParents implements \ACP\Editing\Storage
    {
        /**
         * @var Relation
         */
        private $relation;
        public function __construct(\Jet_Engine\Relations\Relation $relation)
        {
        }
        public function get($id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\JetEngine\Editing\Service {
    abstract class Relationship extends \ACP\Editing\Service\BasicStorage implements \ACP\Editing\PaginatedOptions
    {
        /**
         * @var boolean
         */
        private $multiple;
        public function __construct(\ACP\Editing\Storage $storage, $multiple)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\JetEngine\Editing\Service\Relation {
    class Term extends \ACA\JetEngine\Editing\Service\Relationship
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(\ACP\Editing\Storage $storage, $multiple, $taxonomy)
        {
        }
        public function get_value($id)
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class Post extends \ACA\JetEngine\Editing\Service\Relationship
    {
        /**
         * @var string
         */
        private $related_post_type;
        public function __construct(\ACP\Editing\Storage $storage, $multiple, $related_post_type)
        {
        }
        public function get_value($id)
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class User extends \ACA\JetEngine\Editing\Service\Relationship
    {
        public function get_value($id)
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
}
namespace ACA\JetEngine\Editing\Service {
    class RelationshipLegacy implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var string
         */
        private $related_key;
        /**
         * @var string
         */
        private $current_post_type;
        /**
         * @var string
         */
        private $related_post_type;
        /**
         * @var boolean
         */
        private $multiple;
        public function __construct($related_key, $current_post_type, $related_post_type, $multiple)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
}
namespace ACA\JetEngine\Editing {
    final class MetaViewFactory
    {
        /**
         * @param Field $field
         *
         * @return ACP\Editing\View|null
         */
        public function create(\ACA\JetEngine\Field\Field $field)
        {
        }
        /**
         * @param Field $field
         *
         * @return ACP\Editing\View|null
         */
        private function get_view(\ACA\JetEngine\Field\Field $field)
        {
        }
    }
    final class MetaServiceFactory
    {
        /**
         * @return ACP\Editing\Service|false
         */
        public function create(\ACA\JetEngine\Field\Field $field, \AC\MetaType $meta_type)
        {
        }
        private function create_meta_storage(\ACA\JetEngine\Field\Field $field, \AC\MetaType $meta_type) : \ACP\Editing\Storage\Meta
        {
        }
    }
}
namespace ACA\JetEngine {
    final class FieldFactory
    {
        public function create(array $settings) : ?\ACA\JetEngine\Field\Field
        {
        }
        private function get_mapping() : array
        {
        }
    }
}
namespace ACA\JetEngine\Service {
    final class MetaColumns implements \AC\Registerable
    {
        public function register()
        {
        }
        public function add_meta_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    final class Admin implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        /**
         * @param AC\Asset\Location\Absolute $location
         */
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
    }
    final class RelationalColumns implements \AC\Registerable
    {
        public function register()
        {
        }
        public function add_legacy_relational_columns(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param $post_type
         *
         * @return Relation[]
         */
        private function get_relations_for_list_screen(\AC\ListScreen $list_screen)
        {
        }
        public function add_relational_columns(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param $type
         *
         * @return Relation[]
         */
        private function get_relations_for_meta_type($type, $value)
        {
        }
    }
    final class ColumnGroups implements \AC\Registerable
    {
        const JET_ENGINE = 'jet_engine';
        const JET_ENGINE_RELATION = 'jet_engine_relation';
        public function register()
        {
        }
        public function register_column_groups(\AC\Groups $groups)
        {
        }
    }
    final class ColumnInstantiate implements \AC\Registerable
    {
        public function register()
        {
        }
        public function configure_column(\AC\Column $column)
        {
        }
    }
}
namespace ACA\JetEngine {
    final class ColumnFactory
    {
        /**
         * @param Field $field
         *
         * @return Column\Meta
         */
        public function create(\ACA\JetEngine\Field\Field $field)
        {
        }
        /**
         * @return string[]
         */
        private function get_field_mapping()
        {
        }
    }
}
namespace ACA\JetEngine\Utils {
    final class Relations
    {
        const RELATION_ONE_TO_ONE = 'one_to_one';
        const RELATION_ONE_TO_MANY = 'one_to_many';
        const RELATION_MANY_TO_MANY = 'many_to_many';
        /**
         * @param array  $relation
         * @param string $current_post_type
         *
         * @return string|null
         */
        static function get_related_post_type($relation, $current_post_type)
        {
        }
        /**
         * @param array  $relation
         * @param string $current_post_type
         *
         * @return boolean
         */
        static function has_multiple_relations($relation, $current_post_type)
        {
        }
    }
    final class Api
    {
        static function Relations() : \Jet_Engine\Relations\Manager
        {
        }
        static function MetaBox() : \Jet_Engine_Meta_Boxes
        {
        }
        static function GlossariesMeta() : \Jet_Engine\Glossaries\Meta_Fields
        {
        }
    }
    final class FieldOptions
    {
        /**
         * @param array $options
         *
         * @return array
         */
        static function get_checked_options($options)
        {
        }
    }
}
namespace ACA\JetEngine {
    final class FieldRepository
    {
        /**
         * @var FieldFactory
         */
        private $field_factory;
        public function __construct()
        {
        }
        public function find_by_column(\ACA\JetEngine\Column\Meta $column) : ?\ACA\JetEngine\Field\Field
        {
        }
        /**
         * @return Field[]
         */
        public function find_by_list_screen(\AC\ListScreen $list_screen) : array
        {
        }
        /**
         * @return Field[]
         */
        private function map_meta_types(array $meta_types) : array
        {
        }
    }
}
namespace ACA\JetEngine\Settings {
    final class SettingFactory
    {
        public function create(\ACA\JetEngine\Field\Field $field, \ACA\JetEngine\Column\Meta $column) : array
        {
        }
    }
}
namespace ACA\JetEngine\Settings\Column {
    /** @property Meta $column */
    class RepeaterField extends \AC\Settings\Column
    {
        const KEY = 'sub_field';
        /**
         * @var string
         */
        private $sub_field;
        /**
         * @var Repeater
         */
        private $field;
        public function __construct(\ACA\JetEngine\Column\Meta $column, \ACA\JetEngine\Field\Type\Repeater $field)
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        protected function get_sub_fields_options()
        {
        }
        /**
         * @return Field
         */
        public function get_sub_field_object()
        {
        }
        protected function get_setting_field()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function get_sub_field()
        {
        }
        public function set_sub_field($sub_field)
        {
        }
    }
}
namespace ACA\JetEngine\Column {
    abstract class Relation extends \AC\Column implements \ACP\Export\Exportable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        /**
         * @var JetEngineRelation
         */
        protected $relation;
        public function __construct()
        {
        }
        public function set_config(\Jet_Engine\Relations\Relation $relation)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function has_many()
        {
        }
        /**
         * @return string
         */
        protected function get_related_object()
        {
        }
        public function is_relation_parent()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\JetEngine\Column\Relation {
    class Term extends \ACA\JetEngine\Column\Relation
    {
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class Post extends \ACA\JetEngine\Column\Relation
    {
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class User extends \ACA\JetEngine\Column\Relation
    {
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\JetEngine\Column {
    class RelationLegacy extends \AC\Column implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        /**
         * @var array
         */
        protected $relation_information;
        public function __construct()
        {
        }
        public function get_relation_key()
        {
        }
        public function set_config($relationInfo)
        {
        }
        /**
         * @return string|null
         */
        protected function get_related_post_type()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class Meta extends \AC\Column implements \ACP\Export\Exportable
    {
        /**
         * @var Field
         */
        protected $field;
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        protected function get_meta_type()
        {
        }
        // Delayed constructor
        public function set_field(\ACA\JetEngine\Field\Field $field)
        {
        }
        protected function get_meta_key()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\JetEngine\Search {
    trait SearchableTrait
    {
        /**
         * @return ACP\Search\Comparison|false
         */
        public function search()
        {
        }
    }
}
namespace ACA\JetEngine\Sorting {
    trait SortableTrait
    {
        /**
         * @return ACP\Sorting\AbstractModel
         */
        public function sorting()
        {
        }
    }
}
namespace ACA\JetEngine\Column\Meta {
    class Wysiwyg extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        protected function register_settings()
        {
        }
    }
}
namespace ACA\JetEngine\Value {
    trait DefaultValueFormatterTrait
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\JetEngine\Column\Meta {
    class Media extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait, \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
    }
    class Number extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACP\ConditionalFormat\IntegerFormattableTrait;
        protected function register_settings()
        {
        }
    }
    /**
     * @property Field\Type\Radio $field
     */
    class Radio extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait;
    }
    /**
     * @property Field\Type\Date $field
     */
    class Date extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait;
        protected function register_settings()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    /**
     * @property Field\Type\Gallery $field
     */
    class Gallery extends \ACA\JetEngine\Column\Meta implements \ACP\Editing\Editable
    {
        use \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait;
        protected function register_settings()
        {
        }
    }
    /**
     * @property Field\Type\Posts $field
     */
    class Post extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait, \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        protected function register_settings()
        {
        }
        /**
         * @return Settings\Column\Post
         */
        private function get_post_setting()
        {
        }
        public function sorting()
        {
        }
    }
    class Switcher extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait;
        public function get_values($id)
        {
        }
    }
    class IconPicker extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\Editing\Editable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait;
    }
    /**
     * @property Field\Type\Checkbox $field
     */
    class Checkbox extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACP\ConditionalFormat\ConditionalFormatTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait, \ACA\JetEngine\Editing\EditableTrait;
        protected function register_settings()
        {
        }
    }
    /**
     * @property Field\Type\Select $field
     */
    class Select extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait, \ACP\ConditionalFormat\ConditionalFormatTrait;
    }
    class MultiSelect extends \ACA\JetEngine\Column\Meta\Select
    {
        protected function register_settings()
        {
        }
    }
    class Text extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACP\ConditionalFormat\ConditionalFormatTrait;
        protected function register_settings()
        {
        }
    }
    /**
     * @property Field\Type\DateTime $field
     */
    class DateTime extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait;
        protected function register_settings()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class Textarea extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACP\ConditionalFormat\ConditionalFormatTrait;
        protected function register_settings()
        {
        }
    }
    class Time extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Sorting\Sortable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait;
    }
    class Repeater extends \ACA\JetEngine\Column\Meta implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        protected function register_settings()
        {
        }
        public function get_value($id)
        {
        }
        public function get_separator()
        {
        }
        private function get_value_collection($id) : \AC\Collection
        {
        }
        public function get_raw_value($id)
        {
        }
        private function get_value_formatter() : \ACA\JetEngine\Value\ValueFormatter
        {
        }
        private function get_sub_field()
        {
        }
    }
    class ColorPicker extends \ACA\JetEngine\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\Sorting\Sortable
    {
        use \ACA\JetEngine\Search\SearchableTrait, \ACA\JetEngine\Sorting\SortableTrait, \ACA\JetEngine\Editing\EditableTrait, \ACA\JetEngine\Value\DefaultValueFormatterTrait;
    }
}
namespace ACA\JetEngine\Search {
    final class ComparisonFactory
    {
        /**
         * @param Field  $field
         * @param string $meta_type
         *
         * @return ACP\Search\Comparison|false
         */
        public function create(\ACA\JetEngine\Field\Field $field, $meta_type)
        {
        }
    }
}
namespace ACA\JetEngine\Search\Comparison {
    abstract class Relation extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var JetEngineRelation
         */
        private $relation;
        /**
         * @var bool
         */
        private $is_parent;
        public function __construct(\Jet_Engine\Relations\Relation $relation, $is_parent)
        {
        }
        private function get_db_id_column()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_related_ids(\ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\JetEngine\Search\Comparison\Relation {
    class Term extends \ACA\JetEngine\Search\Comparison\Relation
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(\Jet_Engine\Relations\Relation $relation, $is_parent, $taxonomy)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Post extends \ACA\JetEngine\Search\Comparison\Relation
    {
        /**
         * @var string
         */
        private $post_type;
        public function __construct(\Jet_Engine\Relations\Relation $relation, $is_parent, $post_type)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class User extends \ACA\JetEngine\Search\Comparison\Relation
    {
        public function get_values($search, $page)
        {
        }
    }
}
namespace ACA\JetEngine\Search\Comparison {
    class ParentRelation extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var JetEngineRelation
         */
        private $relation;
        /**
         * @var string
         */
        private $related_post_type;
        public function __construct(\Jet_Engine\Relations\Relation $relation, $post_type)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_related_ids(\ACP\Search\Value $value)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class ChildRelation extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var JetEngineRelation
         */
        private $relation;
        /**
         * @var string
         */
        private $related_post_type;
        public function __construct(\Jet_Engine\Relations\Relation $relation, $post_type)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_related_ids(\ACP\Search\Value $value)
        {
        }
        public function get_values($search, $page)
        {
        }
    }
    class Checkbox extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $choices;
        /**
         * @var bool
         */
        private $value_is_array;
        public function __construct($meta_key, $meta_type, array $choices, $value_is_array)
        {
        }
        private function map_default_value($operator, $value)
        {
        }
        private function map_array_value(\ACP\Search\Value $value)
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\JetEngine\Sorting\FormatValue {
    class Media implements \ACP\Sorting\FormatValue
    {
        public function format_value($value)
        {
        }
    }
    class Select implements \ACP\Sorting\FormatValue
    {
        /**
         * @var array
         */
        private $options;
        public function __construct(array $options)
        {
        }
        public function format_value($value)
        {
        }
    }
}
namespace ACA\JetEngine\Sorting\ModelFactory {
    final class Post
    {
        public function create($meta_type, $meta_key, $multiple, \AC\Settings\Column\Post $setting)
        {
        }
        private function create_single_relation_model($meta_type, $meta_key, \AC\Settings\Column\Post $setting)
        {
        }
        private function create_multiple_relation_model($meta_type, $meta_key, \AC\Settings\Column\Post $setting)
        {
        }
    }
}
namespace ACA\JetEngine\Sorting {
    final class ModelFactory
    {
        /**
         * @param Field  $field
         * @param string $meta_type
         *
         * @return ACP\Sorting\AbstractModel
         */
        public function create(\ACA\JetEngine\Field\Field $field, $meta_type)
        {
        }
    }
}
namespace ACA\JetEngine\Asset\Script {
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\JetEngine\Field {
    trait MultipleTrait
    {
        public function is_multiple()
        {
        }
    }
    trait GlossaryOptionsTrait
    {
        public function has_glossary_options()
        {
        }
        public function get_glossary_options()
        {
        }
    }
    trait MaxLengthTrait
    {
        public function get_maxlength()
        {
        }
        public function has_maxlength()
        {
        }
    }
    interface RelatedPostTypes
    {
        /**
         * @return string[]|null
         */
        public function get_related_post_types();
    }
    interface Multiple
    {
        /**
         * @return bool
         */
        public function is_multiple();
    }
    class Field
    {
        /**
         * @var array
         */
        protected $settings;
        public function __construct($settings)
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return bool
         */
        public function is_required()
        {
        }
    }
}
namespace ACA\JetEngine\Field\Type {
    class Posts extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\Multiple, \ACA\JetEngine\Field\RelatedPostTypes
    {
        use \ACA\JetEngine\Field\MultipleTrait;
        const TYPE = 'posts';
        public function get_related_post_types()
        {
        }
    }
}
namespace ACA\JetEngine\Field {
    interface DefaultValue
    {
        /**
         * @return mixed
         */
        public function get_default_value();
        /**
         * @return bool
         */
        public function has_default_value();
    }
    trait DefaultValueTrait
    {
        /**
         * @return bool
         */
        public function has_default_value()
        {
        }
        /**
         * @return string|null
         */
        public function get_default_value()
        {
        }
    }
}
namespace ACA\JetEngine\Field\Type {
    class Wysiwyg extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\DefaultValue
    {
        const TYPE = 'wysiwyg';
        use \ACA\JetEngine\Field\DefaultValueTrait;
    }
}
namespace ACA\JetEngine\Field {
    interface ValueFormat
    {
        const FORMAT_ID = 'id';
        const FORMAT_URL = 'url';
        const FORMAT_BOTH = 'both';
        /**
         * @return string
         */
        public function get_value_format();
    }
}
namespace ACA\JetEngine\Field\Type {
    class Media extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\ValueFormat
    {
        const TYPE = 'media';
        public function get_value_format()
        {
        }
    }
}
namespace ACA\JetEngine\Field {
    interface NumberInput
    {
        /**
         * @return bool
         */
        public function has_step();
        /**
         * @return string
         */
        public function get_step();
        /**
         * @return bool
         */
        public function has_min_value();
        /**
         * @return string
         */
        public function get_min_value();
        /**
         * @return bool
         */
        public function has_max_value();
        /**
         * @return string
         */
        public function get_max_value();
    }
    trait NumberInputTrait
    {
        public function has_step()
        {
        }
        public function get_step()
        {
        }
        public function has_min_value()
        {
        }
        public function get_min_value()
        {
        }
        public function has_max_value()
        {
        }
        public function get_max_value()
        {
        }
    }
}
namespace ACA\JetEngine\Field\Type {
    class Number extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\DefaultValue, \ACA\JetEngine\Field\NumberInput
    {
        const TYPE = 'number';
        use \ACA\JetEngine\Field\DefaultValueTrait, \ACA\JetEngine\Field\NumberInputTrait;
    }
}
namespace ACA\JetEngine\Field {
    interface Options
    {
        /**
         * @return array
         */
        public function get_options();
    }
    interface GlossaryOptions
    {
        /**
         * @return bool
         */
        public function has_glossary_options();
        /**
         * @return array
         */
        public function get_glossary_options();
    }
    trait OptionsTrait
    {
        public function get_options()
        {
        }
    }
}
namespace ACA\JetEngine\Field\Type {
    class Radio extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\Options, \ACA\JetEngine\Field\GlossaryOptions
    {
        use \ACA\JetEngine\Field\OptionsTrait, \ACA\JetEngine\Field\GlossaryOptionsTrait;
        const TYPE = 'radio';
    }
}
namespace ACA\JetEngine\Field {
    interface TimeStamp
    {
        /**
         * @return bool
         */
        public function is_timestamp();
    }
    trait TimestampTrait
    {
        public function is_timestamp()
        {
        }
    }
}
namespace ACA\JetEngine\Field\Type {
    class Date extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\TimeStamp, \ACA\JetEngine\Field\DefaultValue
    {
        const TYPE = 'date';
        use \ACA\JetEngine\Field\TimestampTrait, \ACA\JetEngine\Field\DefaultValueTrait;
    }
    class Gallery extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\ValueFormat
    {
        const TYPE = 'gallery';
        public function get_value_format()
        {
        }
    }
    class Switcher extends \ACA\JetEngine\Field\Field
    {
        const TYPE = 'switcher';
    }
    class IconPicker extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\DefaultValue
    {
        use \ACA\JetEngine\Field\DefaultValueTrait;
        const TYPE = 'iconpicker';
    }
    class Checkbox extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\Options, \ACA\JetEngine\Field\GlossaryOptions
    {
        use \ACA\JetEngine\Field\OptionsTrait, \ACA\JetEngine\Field\GlossaryOptionsTrait;
        const TYPE = 'checkbox';
        public function value_is_array()
        {
        }
    }
}
namespace ACA\JetEngine\Field {
    interface MaxLength
    {
        /**
         * @return int
         */
        public function get_maxlength();
        /**
         * @return bool
         */
        public function has_maxlength();
    }
}
namespace ACA\JetEngine\Field\Type {
    class Text extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\MaxLength, \ACA\JetEngine\Field\DefaultValue
    {
        const TYPE = 'text';
        use \ACA\JetEngine\Field\MaxLengthTrait, \ACA\JetEngine\Field\DefaultValueTrait;
    }
    class DateTime extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\TimeStamp
    {
        const TYPE = 'datetime-local';
        use \ACA\JetEngine\Field\TimestampTrait;
    }
    class Textarea extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\MaxLength, \ACA\JetEngine\Field\DefaultValue
    {
        const TYPE = 'textarea';
        use \ACA\JetEngine\Field\MaxLengthTrait, \ACA\JetEngine\Field\DefaultValueTrait;
    }
    class Time extends \ACA\JetEngine\Field\Field
    {
        const TYPE = 'time';
    }
    class Repeater extends \ACA\JetEngine\Field\Field
    {
        const TYPE = 'repeater';
        /**
         * @return Field[];
         */
        public function get_repeated_fields()
        {
        }
    }
    class ColorPicker extends \ACA\JetEngine\Field\Field
    {
        const TYPE = 'colorpicker';
    }
    class Select extends \ACA\JetEngine\Field\Field implements \ACA\JetEngine\Field\Options, \ACA\JetEngine\Field\GlossaryOptions, \ACA\JetEngine\Field\Multiple
    {
        const TYPE = 'select';
        use \ACA\JetEngine\Field\OptionsTrait, \ACA\JetEngine\Field\GlossaryOptionsTrait, \ACA\JetEngine\Field\MultipleTrait;
    }
}
namespace ACA\JetEngine\Mapping {
    final class MediaId
    {
        public static function to_array($id)
        {
        }
        public static function from_array($entry)
        {
        }
        public static function from_url($url)
        {
        }
        public static function to_url($id)
        {
        }
    }
    final class Options
    {
        public static function from_glossary_options(array $options)
        {
        }
        public static function from_field_options(array $options)
        {
        }
    }
}
namespace ACA\JetEngine\Export {
    final class ModelFactory
    {
        /**
         * @param Column\Meta $column
         * @param Field       $field
         *
         * @return ACP\Export\Model|false
         */
        public function create(\ACA\JetEngine\Column\Meta $column, \ACA\JetEngine\Field\Field $field)
        {
        }
    }
}
namespace ACA\JetEngine {
    final class RelationColumnFactory
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        private function is_parent(\Jet_Engine\Relations\Relation $relation)
        {
        }
        /**
         * @param Relations\Relation $relation
         *
         * @return Relation
         */
        public function create(\Jet_Engine\Relations\Relation $relation)
        {
        }
    }
    class JetEngine implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        private function check_minimum_jet_engine_version() : bool
        {
        }
    }
}
namespace ACA\JetEngine\Value {
    interface ValueFormatter
    {
        public function format($raw_value) : ?string;
    }
    abstract class Formatter implements \ACA\JetEngine\Value\ValueFormatter
    {
        /**
         * @var Meta
         */
        protected $column;
        /**
         * @var Field
         */
        protected $field;
        public function __construct(\ACA\JetEngine\Column\Meta $column, \ACA\JetEngine\Field\Field $field)
        {
        }
        public abstract function format($raw_value) : ?string;
    }
    class ValueFormatterFactory
    {
        public function create(\ACA\JetEngine\Column\Meta $column, \ACA\JetEngine\Field\Field $field) : \ACA\JetEngine\Value\ValueFormatter
        {
        }
    }
}
namespace ACA\JetEngine\Value\Format {
    class Posts extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
        private function format_post($post_id)
        {
        }
    }
    class Media extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
        private function get_media_url_by_value($value)
        {
        }
    }
    class DefaultFormatter extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
    }
    class Color extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
    }
    class Date extends \ACA\JetEngine\Value\Formatter
    {
        /**
         * @var string
         */
        private $date_format;
        public function __construct(\ACA\JetEngine\Column\Meta $column, \ACA\JetEngine\Field\Field $field, $date_format = 'Y-m-d')
        {
        }
        public function format($raw_value) : ?string
        {
        }
    }
    class MultipleOptions extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
    }
    class Gallery extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
        private function get_media_id_by_value($value)
        {
        }
    }
    class Switcher extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
    }
    class Checkbox extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
    }
    class Options extends \ACA\JetEngine\Value\Formatter
    {
        public function format($raw_value) : ?string
        {
        }
    }
    class DateTime extends \ACA\JetEngine\Value\Format\Date
    {
        public function __construct(\ACA\JetEngine\Column\Meta $column, \ACA\JetEngine\Field\Field $field)
        {
        }
    }
}
namespace ACA\BeaverBuilder\Service {
    class PostTypes implements \AC\Registerable
    {
        public const POST_TYPE_TEMPLATE = 'fl-builder-template';
        public function register()
        {
        }
        public function deregister_global_post_type($post_types)
        {
        }
    }
    class ListScreens implements \AC\Registerable
    {
        public function register() : void
        {
        }
        public function register_beaver_builder_group(\AC\Groups $groups) : void
        {
        }
        public function register_list_screens(\AC\ListScreens $list_screens) : void
        {
        }
    }
}
namespace ACA\BeaverBuilder {
    class BeaverBuilder implements \AC\Registerable
    {
        public function register()
        {
        }
    }
}
namespace ACA\BeaverBuilder\ListScreen {
    class Template extends \ACP\ListScreen\Post
    {
        /*
         * @var string
         */
        private $template_page;
        /*
         * @var string
         */
        private $page_label;
        public function __construct($page, $label)
        {
        }
        public function is_current_screen($wp_screen)
        {
        }
        public function get_label()
        {
        }
        public function get_screen_link()
        {
        }
    }
}
namespace ACA\WC\Editing\Storage\Coupon {
    class IncludedProducts implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class IncludedProductCategories implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class ExcludedProductCategories implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class ExcludedProducts implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\WC\Editing\Storage\Product {
    class UpSells implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    abstract class Attributes implements \ACP\Editing\Storage
    {
        /**
         * @var string
         */
        protected $attribute;
        public function __construct(string $attribute)
        {
        }
        /**
         * @return false|WC_Product_Attribute
         */
        protected abstract function create_attribute();
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
        /**
         * @param int $id
         *
         * @return false|WC_Product_Attribute
         */
        protected function get_attribute_object($id)
        {
        }
    }
}
namespace ACA\WC\Editing\Storage\Product\Attributes {
    class Custom extends \ACA\WC\Editing\Storage\Product\Attributes
    {
        /**
         * @var array
         */
        private $custom_labels;
        public function __construct($attribute, $custom_labels)
        {
        }
        protected function create_attribute()
        {
        }
    }
}
namespace ACA\WC\Editing\Storage\Product {
    class Gallery implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class CrossSells implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
    class Sku implements \ACP\Editing\Storage
    {
        public function get(int $id)
        {
        }
        public function update(int $id, $data) : bool
        {
        }
    }
}
namespace ACA\WC\Editing\ShopOrder {
    class NotesPrivate implements \ACP\Editing\Service
    {
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function get_date_formatted(\WC_DateTime $date)
        {
        }
        public function get_value(int $id)
        {
        }
    }
    class NotesToCustomer implements \ACP\Editing\Service
    {
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function get_date_formatted(\WC_DateTime $date)
        {
        }
        public function get_value(int $id)
        {
        }
    }
    class NotesSystem implements \ACP\Editing\Service
    {
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function get_note_ids($id) : array
        {
        }
        private function get_date_formatted(\WC_DateTime $date) : string
        {
        }
        public function get_value(int $id)
        {
        }
    }
    class AddressFactory
    {
        /**
         * @param string      $address_property
         * @param Column\Meta $column
         *
         * @return ACP\Editing\Service|false
         */
        public function create($address_property, \AC\Column\Meta $column)
        {
        }
    }
    class LastNote implements \ACP\Editing\Service
    {
        /**
         * @var WC\Column\ShopOrder\Notes
         */
        private $column;
        public function __construct(\ACA\WC\Column\ShopOrder\Notes $column)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        private function get_last_note_for_order($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Status implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class PaymentMethod implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value(int $id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\WC\Editing\Product {
    trait ProductNotSupportedReasonTrait
    {
        public function get_not_editable_reason(int $id) : string
        {
        }
    }
}
namespace ACA\WC\Editing\ProductSubscription {
    trait ProductSubscriptionEditableTrait
    {
        public function is_editable(int $id) : bool
        {
        }
    }
    class Expires extends \ACP\Editing\Service\Basic implements \ACP\Editing\PaginatedOptions, \ACP\Editing\Service\Editability
    {
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        use \ACA\WC\Editing\ProductSubscription\ProductSubscriptionEditableTrait;
        public function __construct()
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
    class Limit implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        use \ACA\WC\Editing\ProductSubscription\ProductSubscriptionEditableTrait;
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        /**
         * @var array
         */
        private $options;
        public function __construct($options)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Period implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        use \ACA\WC\Editing\ProductSubscription\ProductSubscriptionEditableTrait;
        const KEY_INTERVAL = '_subscription_period_interval';
        const KEY_PERIOD = '_subscription_period';
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\WC\Editing\View {
    class Usage extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
    }
    class Dimensions extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
    }
    class Type extends \ACP\Editing\View
    {
        public function __construct(array $simple_types)
        {
        }
    }
    class Notes extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
        public function set_mode($mode)
        {
        }
    }
    class SubscriptionPeriod extends \ACP\Editing\View
    {
        public function __construct($interval_options, $period_options)
        {
        }
    }
    class Variation extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
    }
    class Stock extends \ACP\Editing\View
    {
        public function __construct()
        {
        }
        public function set_manage_stock($enable)
        {
        }
    }
    class Price extends \ACP\Editing\View
    {
        public function __construct($default_type)
        {
        }
        public function set_default_type($default_type)
        {
        }
    }
}
namespace ACA\WC\Editing {
    trait PostTrait
    {
        /**
         * @param int[]|int $post_ids
         * @param string    $field
         *
         * @return array [ int $post_id => string $post_field ]
         */
        protected function get_editable_posts_values($post_ids, string $field = 'post_title') : array
        {
        }
    }
    abstract class ProductRelations implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        use \ACA\WC\Editing\PostTrait;
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\ACP\Editing\Storage $storage)
        {
        }
        public function get_value(int $id)
        {
        }
        private function get_relation_ids($id)
        {
        }
        /**
         * @param array $ids
         *
         * @return int[]
         */
        private function sanitize_ids($ids) : array
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
    }
}
namespace ACA\WC\Editing\ShopCoupon {
    class IncludeProducts extends \ACA\WC\Editing\ProductRelations
    {
        public function __construct()
        {
        }
    }
    class ExpiryDate implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class EmailRestrictions implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Usage implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Amount implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class MinimumAmount implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class MaximumAmount implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Type implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\WC\Editing {
    class ProductCategories implements \ACP\Editing\Service, \ACP\Editing\PaginatedOptions
    {
        /**
         * @var Storage
         */
        private $storage;
        public function __construct(\ACP\Editing\Storage $storage)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param array $term_ids
         *
         * @return int[]
         */
        private function sanitize_ids($term_ids) : array
        {
        }
        private function get_term_ids($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function get_paginated_options($search, $page, $id = null)
        {
        }
    }
}
namespace ACA\WC\Editing\ShopCoupon {
    class ExcludeProductCategories extends \ACA\WC\Editing\ProductCategories
    {
        public function __construct()
        {
        }
    }
    class Description extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class ExcludeProducts extends \ACA\WC\Editing\ProductRelations
    {
        public function __construct()
        {
        }
    }
    class ProductCategories extends \ACA\WC\Editing\ProductCategories
    {
        public function __construct()
        {
        }
    }
    class FreeShipping implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\WC\Editing\Product {
    class Visibility implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class BackordersAllowed implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        private function get_backorder_options() : array
        {
        }
    }
    class Weight implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Upsells extends \ACA\WC\Editing\ProductRelations
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\WC\Editing\Product\Attributes {
    class Taxonomy extends \ACP\Editing\Service\Post\Taxonomy
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
        /**
         * Attach attribute to product only if was not attached.
         */
        private function maybe_attach_taxonomy_attribute($id) : void
        {
        }
    }
}
namespace ACA\WC\Editing\Product {
    class Dimensions implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        private function get_product_type_label($type)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Type implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        /**
         * @var array
         */
        private $simple_product_types;
        public function __construct(array $simple_product_types)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class GroupedProducts implements \ACP\Editing\Service, \ACP\Editing\Service\Editability, \ACP\Editing\PaginatedOptions
    {
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        use \ACA\WC\Editing\PostTrait;
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_paginated_options($s, $paged, $id = null)
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Crosssells extends \ACA\WC\Editing\ProductRelations
    {
        public function __construct()
        {
        }
    }
    class TaxClass implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class TaxStatus implements \ACP\Editing\Service
    {
        /**
         * @var array
         */
        private $statuses;
        public function __construct($statuses)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class SoldIndividually implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Attributes extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct(\ACP\Editing\Storage $storage)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class ReviewsEnabled extends \ACP\Editing\Service\BasicStorage
    {
        public function __construct()
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class ShippingClass implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        private function needs_shipping($id) : bool
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Stock implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        protected function is_manage_stock_enabled() : bool
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        private function set_stock_quantity(\WC_Product $product, $type, $stock) : void
        {
        }
    }
    class Price implements \ACP\Editing\Service, \ACP\Editing\Service\Editability
    {
        use \ACA\WC\Editing\Product\ProductNotSupportedReasonTrait;
        const TYPE_SALE = 'sale';
        const TYPE_REGULAR = 'regular';
        private $default_type;
        public function __construct($default_type = 'regular')
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        public function is_editable(int $id) : bool
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
}
namespace ACA\WC\Editing\EditValue\Product {
    class Price
    {
        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $price_type;
        /**
         * @var string
         */
        private $price;
        /**
         * @var string
         */
        private $percentage;
        /**
         * @var bool
         */
        private $rounding;
        /**
         * @var string
         */
        private $rounding_type;
        /**
         * @var int
         */
        private $rounding_decimals;
        /**
         * @param array $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string
         */
        public function get_price_type()
        {
        }
        /**
         * @return string
         */
        public function get_price()
        {
        }
        /**
         * @return float
         */
        public function get_percentage()
        {
        }
        /**
         * @return bool
         */
        public function is_rounded()
        {
        }
        /**
         * @return string
         */
        public function get_rounding_type()
        {
        }
        /**
         * @return int
         */
        public function get_rounding_decimals()
        {
        }
    }
    class SalePrice extends \ACA\WC\Editing\EditValue\Product\Price
    {
        /**
         * @var bool
         */
        private $price_based_on_regular;
        /**
         * @var bool
         */
        private $scheduled;
        /**
         * @var string
         */
        private $schedule_from;
        /**
         * @var string
         */
        private $schedule_to;
        /**
         * @param array $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return bool
         */
        public function is_price_based_on_regular()
        {
        }
        /**
         * @return bool
         */
        public function is_scheduled()
        {
        }
        /**
         * @return string
         */
        public function get_schedule_from()
        {
        }
        /**
         * @return string
         */
        public function get_schedule_to()
        {
        }
    }
}
namespace ACA\WC\Editing\Comment {
    class Rating implements \ACP\Editing\Service\Editability, \ACP\Editing\Service
    {
        public function is_editable(int $id) : bool
        {
        }
        public function get_not_editable_reason(int $id) : string
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\WC\Editing\ShopSubscription {
    class Date implements \ACP\Editing\Service
    {
        /**
         * @var string
         */
        private $date_key;
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($date_key, $meta_key)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
}
namespace ACA\WC\Editing\Strategy {
    class Product extends \ACP\Editing\Strategy\Post
    {
        public function user_can_edit()
        {
        }
    }
}
namespace ACA\WC\Editing\ProductVariation {
    class Weight implements \ACP\Editing\Service
    {
        public function get_value($id)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Downloadable implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class TaxClass implements \ACP\Editing\Service
    {
        /**
         * @var array
         */
        private $tax_classes;
        public function __construct($tax_classes)
        {
        }
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Description implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Enabled implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class Virtual implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
    }
    class ShippingClass extends \ACA\WC\Editing\Product\ShippingClass
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
    }
    class Variation implements \ACP\Editing\Service
    {
        public function get_view(string $context) : ?\ACP\Editing\View
        {
        }
        public function get_value($id)
        {
        }
        public function update(int $id, $data) : void
        {
        }
        private function get_product_variation_options(\WC_Product $product) : array
        {
        }
        private function get_attribute_label(\WC_Product_Attribute $attribute) : string
        {
        }
    }
    class Stock extends \ACA\WC\Editing\Product\Stock
    {
        public function is_editable(int $id) : bool
        {
        }
    }
}
namespace ACA\WC\Editing\StorageModel\Product {
    class Price
    {
        /**
         * @var WC_Product
         */
        protected $product;
        /**
         * @var EditValue\Product\Price
         */
        protected $value;
        /**
         * @var Rounding
         */
        protected $rounding;
        public function __construct(\WC_Product $product, \ACA\WC\Editing\EditValue\Product\Price $value)
        {
        }
        /**
         * @return int|WP_Error
         */
        public function save()
        {
        }
        /**
         * @param float $price
         *
         * @return float
         */
        protected function round_price($price)
        {
        }
        /**
         * @return float
         */
        protected function get_calculated_price()
        {
        }
        /**
         * @param float $price
         * @param float $percentage
         *
         * @return float
         */
        protected function increase_price_by_percentage($price, $percentage)
        {
        }
        /**
         * @param float $price
         * @param float $percentage
         *
         * @return float
         */
        protected function decrease_price_by_percentage($price, $percentage)
        {
        }
        /**
         * @return float
         */
        protected function get_price()
        {
        }
    }
    /**
     * @property EditValue\Product\SalePrice $value
     */
    class SalePrice extends \ACA\WC\Editing\StorageModel\Product\Price
    {
        public function __construct(\WC_Product $product, \ACA\WC\Editing\EditValue\Product\SalePrice $value)
        {
        }
        /**
         * @return int|WP_Error
         */
        public function save()
        {
        }
        /**
         * @return int
         */
        private function remove_sale_price()
        {
        }
        /**
         * @return string
         */
        public function get_price()
        {
        }
    }
}
namespace ACA\WC\Service {
    class Columns implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    class QuickAdd implements \AC\Registerable
    {
        public function register()
        {
        }
        public function disable_quick_add($enabled, \AC\ListScreen $list_screen)
        {
        }
    }
    class Table implements \AC\Registerable
    {
        public function register()
        {
        }
        public function fix_manual_product_sort(\AC\ListScreen $list_screen)
        {
        }
        public function disable_sticky_headers($enabled)
        {
        }
        public function disable_product_sorting_mode_preference($enabled, \AC\ListScreen $list_screen)
        {
        }
    }
    class ListScreens implements \AC\Registerable
    {
        /**
         * @var bool
         */
        private $use_product_variations;
        public function __construct($use_product_variations)
        {
        }
        public function register()
        {
        }
        public function register_list_screens()
        {
        }
    }
    class ListScreenGroups implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_list_screen_groups(\AC\Groups $groups)
        {
        }
    }
    class ColumnGroups implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_column_groups(\AC\Groups $groups)
        {
        }
    }
    class Editing implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @param array  $statuses
         * @param Column $column
         *
         * @return array
         */
        public function remove_woocommerce_statuses_for_editing($statuses, $column)
        {
        }
    }
}
namespace ACA\WC\PostType {
    class ProductVariation implements \AC\Registerable
    {
        const POST_TYPE = 'product_variation';
        /**
         * @var Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function product_variation_edit_link($link, $product_id)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function enable_variation_list_table($args)
        {
        }
        /**
         * Place variations menu under products
         */
        public function admin_menu()
        {
        }
        /**
         * Load List Table
         */
        public function setup_screen()
        {
        }
        /**
         * @return false|string
         */
        private function get_current_screen_id()
        {
        }
    }
}
namespace ACA\WC\Type {
    class ProductAttribute
    {
        const TAXONOMY_PREFIX = 'pa_';
        /**
         * @var string
         */
        private $name;
        /**
         * @param string $name 'pa_color', 'pa_material', 'color'
         */
        public function __construct($name)
        {
        }
        /**
         * @return bool
         */
        public function is_taxonomy()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy_name()
        {
        }
        /**
         * @param string $prefix
         * @param string $string
         *
         * @return string
         */
        private function remove_prefix($prefix, $string)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
    }
}
namespace ACA\WC\Settings\ShopOrder {
    class ShippingMethodType extends \AC\Settings\Column
    {
        const NAME = 'shipping_method_type';
        const METHOD_TITLE = 'method_title';
        const METHOD_ID = 'method_id';
        /**
         * @var string
         */
        private $shipping_method_type;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_shipping_method_type()
        {
        }
        /**
         * @param string $shipping_method_type
         */
        public function set_shipping_method_type($shipping_method_type)
        {
        }
    }
    class ProductMeta extends \AC\Settings\Column\CustomField
    {
        protected function get_post_type()
        {
        }
    }
    class Product extends \AC\Settings\Column\Post
    {
        const GROUP_DEFAULT = 'default';
        const GROUP_PRODUCT = 'product';
        const GROUP_META = 'custom_field';
        const TYPE_SKU = 'sku';
        const TYPE_META = 'custom_field';
        protected function get_post_type()
        {
        }
        protected function get_display_options()
        {
        }
        public function format($post_id, $original_value)
        {
        }
        /**
         * @param int   $id
         * @param mixed $original_value
         *
         * @return string|int
         */
        private function deferred_format($value, $original_value)
        {
        }
        public function get_dependent_settings()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Totals extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $order_total_property;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_order_total_property()
        {
        }
        /**
         * @param string $order_total_property
         */
        public function set_order_total_property($order_total_property)
        {
        }
    }
    class Notes extends \AC\Settings\Column
    {
        const NAME = 'note_property';
        const COUNT_VALUE = 'count';
        const LATEST_VALUE = 'latest';
        /**
         * @var string
         */
        private $note_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_note_property()
        {
        }
        /**
         * @param string $note_property
         */
        public function set_note_property($note_property)
        {
        }
    }
}
namespace ACA\WC\Settings {
    abstract class DateType extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $date_type;
        /**
         * @return array
         */
        protected abstract function get_display_options();
        /**
         * @return array
         */
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @param string $date_type
         */
        public function set_date_type($date_type)
        {
        }
        /**
         * @return string
         */
        public function get_date_type()
        {
        }
        /**
         * @param string $value
         * @param int    $id
         *
         * @return string|false
         */
        public function format($value, $id)
        {
        }
    }
}
namespace ACA\WC\Settings\ShopOrder {
    /**
     * @since 3.0
     * @property Column\ShopOrder\OrderDate $column
     */
    class OrderDate extends \ACA\WC\Settings\DateType
    {
        public function __construct(\ACA\WC\Column\ShopOrder\OrderDate $column)
        {
        }
        /**
         * @return array
         */
        protected function get_display_options()
        {
        }
    }
    class Customer extends \ACP\Settings\Column\User
    {
        protected function get_display_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @param string $country_code
         *
         * @return string|null
         */
        private function get_country($country_code)
        {
        }
        /**
         * @param int $user_id
         * @param int $order_id
         *
         * @return string|false
         */
        public function format($user_id, $order_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return int[]|false
         */
        private function get_order_ids_for_user($user_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return int|false
         */
        private function get_first_order_for_user($user_id)
        {
        }
        /**
         * @param $user_id
         *
         * @return false|string
         */
        private function get_total_spent_for_user($user_id)
        {
        }
    }
    /**
     * @since 3.0
     */
    class IP extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $ip_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_ip_property()
        {
        }
        /**
         * @param string $ip_property
         */
        public function set_ip_property($ip_property)
        {
        }
    }
    class NoteType extends \AC\Settings\Column
    {
        const NAME = 'note_type';
        const SYSTEM_NOTE = 'system';
        const PRIVATE_NOTE = 'private';
        const CUSTOMER_NOTE = 'customer';
        /**
         * @var string
         */
        private $note_type;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_note_type()
        {
        }
        /**
         * @param string $note_type
         */
        public function set_note_type($note_type)
        {
        }
    }
}
namespace ACA\WC\Settings {
    /**
     * @since 3.0
     */
    class Address extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $address_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        /**
         * @return string
         */
        public function get_address_property_label()
        {
        }
        /**
         * @return string
         */
        public function get_address_property()
        {
        }
        /**
         * @param string $address_property
         */
        public function set_address_property($address_property)
        {
        }
    }
}
namespace ACA\WC\Settings\User {
    /**
     * @since 3.1
     */
    class Country extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $address_type;
        public function format($country_code, $original_value)
        {
        }
        protected function define_options()
        {
        }
        protected function get_display_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_address_type()
        {
        }
        /**
         * @param string $address_type
         */
        public function set_address_type($address_type)
        {
        }
    }
    /**
     * @since 3.0.4
     */
    class AddressType extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $address_type;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_address_type()
        {
        }
        /**
         * @param string $address_type
         */
        public function set_address_type($address_type)
        {
        }
    }
    class Meta extends \AC\Settings\Column\CustomField
    {
        protected function get_post_type()
        {
        }
        protected function get_meta_type()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Products extends \AC\Settings\Column
    {
        const NAME = 'user_products';
        /**
         * @var string
         */
        private $user_products;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_user_products()
        {
        }
        /**
         * @param string $user_products
         */
        public function set_user_products($user_products)
        {
        }
    }
    class Order extends \AC\Settings\Column
    {
        const NAME = 'order';
        const TYPE_DATE = 'date';
        const TYPE_AMOUNT = 'order';
        const TYPE_STATUS = 'status';
        /**
         * @var string
         */
        private $order_display;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_order_display()
        {
        }
        /**
         * @param string $order_display
         *
         * @return bool
         */
        public function set_order_display($order_display)
        {
        }
        private function render_value($value, $id)
        {
        }
        private function render_order_number(\WC_Order $order)
        {
        }
        private function get_status_label(string $status)
        {
        }
        /**
         * @param WC_Order $order
         * @param mixed    $original_value
         *
         * @return string|int
         */
        public function format($order, $original_value)
        {
        }
    }
    /**
     * @since 3.0
     */
    class Ratings extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $rating_display;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_rating_display()
        {
        }
        /**
         * @param string $rating_display
         */
        public function set_rating_display($rating_display)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace ACA\WC\Settings\ShopCoupon {
    /**
     * @since 3.0.3
     */
    class Limit extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $coupon_limit;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_coupon_limit()
        {
        }
        /**
         * @param string $coupon_limit
         */
        public function set_coupon_limit($coupon_limit)
        {
        }
    }
}
namespace ACA\WC\Settings\Product {
    class UseIcon extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var bool
         */
        private $use_icon;
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return bool
         */
        public function get_use_icon()
        {
        }
        /**
         * @param bool $use_icon
         *
         * @return true
         */
        public function set_use_icon($use_icon)
        {
        }
        /**
         * @param string $value
         * @param int    $post_id
         *
         * @return string
         */
        public function format($value, $post_id)
        {
        }
    }
    /**
     * @since 3.0
     */
    class Period extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $period;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return int
         */
        public function get_period()
        {
        }
        /**
         * @param string $period
         */
        public function set_period($period)
        {
        }
    }
    class Attributes extends \AC\Settings\Column
    {
        /**
         * @var int
         */
        private $product_taxonomy_display;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return array
         */
        public function get_attributes_taxonomy_labels()
        {
        }
        /**
         * @return array
         */
        private function get_raw_attributes()
        {
        }
        /**
         * @return array
         */
        public function get_attributes_custom_labels()
        {
        }
        /**
         * @return array|false
         */
        private function get_attribute_options()
        {
        }
        /**
         * @return int
         */
        public function get_product_taxonomy_display()
        {
        }
        /**
         * @param int $product_taxonomy_display
         *
         * @return $this
         */
        public function set_product_taxonomy_display($product_taxonomy_display)
        {
        }
    }
}
namespace ACA\WC\Settings\Address {
    /**
     * @since 3.0
     */
    class Billing extends \ACA\WC\Settings\Address
    {
        public function get_display_options()
        {
        }
    }
}
namespace ACA\WC\Settings\HideOnScreen {
    class FilterSubscriptionProduct extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_subscription_products';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterProductType extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_product_type';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterProductCategory extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_product_category';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterSubscriptionPayment extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_subscription_payment';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterSubscriptionCustomer extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_subscription_customer';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterProductStockStatus extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_product_stock_status';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
    class FilterOrderCustomer extends \ACP\Settings\ListScreen\HideOnScreen
    {
        const NAME = 'hide_filter_order_customer';
        public function __construct()
        {
        }
        public function get_dependent_on()
        {
        }
    }
}
namespace ACA\WC\Settings\ShopSubscription {
    /**
     * @property Column\ShopSubscription\SubscriptionDate $column
     */
    class SubscriptionDate extends \ACA\WC\Settings\DateType
    {
        public function __construct(\ACA\WC\Column\ShopSubscription\SubscriptionDate $column)
        {
        }
        /**
         * @return array
         */
        protected function get_display_options()
        {
        }
    }
}
namespace ACA\WC\Settings\ProductVariation {
    class Attribute extends \AC\Settings\Column
    {
        const NAME = 'variation_attribute';
        /**
         * @var string
         */
        private $variation_attribute;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        private function get_attributes_meta_keys()
        {
        }
        /**
         * @return ProductAttribute|null
         */
        public function get_product_attribute()
        {
        }
        private function remove_attribute_prefix($meta_key)
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_variation_attribute()
        {
        }
        /**
         * @param string $variation_attribute
         */
        public function set_variation_attribute($variation_attribute)
        {
        }
    }
    /**
     * @since 3.0
     */
    class Variation extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $variation_display;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_variation_display()
        {
        }
        /**
         * @param string $variation_display
         */
        public function set_variation_display($variation_display)
        {
        }
        /**
         * @param string $value
         * @param int    $variation_id
         *
         * @return string
         */
        public function format($value, $variation_id)
        {
        }
        /**
         * @param WC_Product_Variation $variation
         * @param string               $attribute_name
         *
         * @return string
         */
        private function get_attribute_label_by_variation(\WC_Product_Variation $variation, $attribute_name)
        {
        }
        /**
         * @param WC_Product_Attribute $attribute
         *
         * @return string
         */
        public function get_attribute_label(\WC_Product_Attribute $attribute)
        {
        }
        /**
         * @param WC_Product $product
         * @param string     $attribute_name
         *
         * @return false|WC_Product_Attribute
         */
        private function get_product_attribute(\WC_Product $product, $attribute_name)
        {
        }
    }
}
namespace ACA\WC\Settings {
    class OrderStatuses extends \AC\Settings\Column
    {
        const NAME = 'order_status';
        /**
         * @var string[]
         */
        private $default_status;
        public function __construct(\AC\Column $column, array $default_status = ['wc-completed'])
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_order_status()
        {
        }
        public function set_order_status($status)
        {
        }
    }
}
namespace ACA\WC\Column\ShopOrder {
    /**
     * @since 3.6
     */
    class Tax extends \AC\Column implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.0
     */
    class TotalWeight extends \AC\Column implements \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.0
     * @Deprecated
     */
    class CustomerMessage extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.0
     */
    class OrderNumber extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 3.0
     */
    abstract class Address extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        /**
         * @param WC_Order $order
         *
         * @return string
         */
        protected abstract function get_formatted_address(\WC_Order $order);
        /**
         * @return string
         */
        protected abstract function get_meta_key_prefix();
        /**
         * @return Settings\Address
         */
        protected abstract function get_setting_address_object();
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        /**
         * @return false|string
         */
        protected function get_address_property()
        {
        }
        public function get_meta_key()
        {
        }
        /**
         * @return bool
         */
        protected function is_single_meta_key()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    class BillingAddress extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Total extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        protected function register_settings()
        {
        }
        public function get_meta_key()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    class CustomerNote extends \ACP\Column\Post\Excerpt
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
    }
    class Discount extends \ACP\Column\Meta implements \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 1.4
     */
    class ProductDetails extends \AC\Column implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($order_id)
        {
        }
        public function get_raw_value($order_id)
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Currency extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\ConditionalFormat {
    trait FilteredHtmlIntegerFormatterTrait
    {
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
}
namespace ACA\WC\Column\ShopOrder {
    /**
     * @since 2.0
     */
    class Purchased extends \AC\Column implements \AC\Column\AjaxValue, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\WC\ConditionalFormat\FilteredHtmlIntegerFormatterTrait;
        public function __construct()
        {
        }
        /**
         * @param int $id
         *
         * @return bool|string
         */
        public function get_value($id)
        {
        }
        /**
         * @param int $order_id
         *
         * @return int
         */
        private function get_item_count($order_id)
        {
        }
        /**
         * @param int $order_id
         */
        public function get_ajax_value($order_id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.6
     */
    class Shipping extends \AC\Column\Meta implements \ACP\Search\Searchable, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Date extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        protected function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.3
     */
    class CouponsUsed extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\WC\Column\ShopOrder\Address {
    /**
     * @since 3.0
     */
    class Shipping extends \ACA\WC\Column\ShopOrder\Address
    {
        public function __construct()
        {
        }
        protected function get_meta_key_prefix()
        {
        }
        protected function get_formatted_address(\WC_Order $order)
        {
        }
        public function get_setting_address_object()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Billing extends \ACA\WC\Column\ShopOrder\Address
    {
        public function __construct()
        {
        }
        protected function get_meta_key_prefix()
        {
        }
        protected function get_formatted_address(\WC_Order $order)
        {
        }
        public function get_setting_address_object()
        {
        }
    }
}
namespace ACA\WC\Column\ShopOrder {
    /**
     * @since 1.3.1
     */
    class Product extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        private function get_product_or_variation_ids_by_order($order_id)
        {
        }
        public function get_raw_value($order_id)
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @return string
         */
        public function get_separator()
        {
        }
        /**
         * @return int
         */
        private function get_items_limit()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function register_settings()
        {
        }
        public function get_product_property()
        {
        }
    }
    abstract class ProductTaxonomy extends \AC\Column implements \ACP\Export\Exportable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        protected $taxonomy;
        public function __construct()
        {
        }
        public function get_value($order_id)
        {
        }
        public function get_raw_value($order_id)
        {
        }
        public function export()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Totals extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        /**
         * @var WC_Order[]
         */
        private $orders;
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return WC_Order
         */
        private function get_order($id)
        {
        }
        /**
         * @return string|false
         */
        private function get_setting_total_property()
        {
        }
        public function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class TransactionID extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    class Subtotal extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.3
     */
    class Notes extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function search()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return object|null
         */
        public function get_last_order_note($id)
        {
        }
        /**
         * @param int $order_id
         *
         * @return object[]
         */
        private function get_order_notes($order_id)
        {
        }
        /**
         * @param object $note
         *
         * @return bool
         */
        private function is_private_note($note)
        {
        }
        /**
         * @param object $note
         *
         * @return bool
         */
        private function is_system_note($note)
        {
        }
        /**
         * @param object $note
         *
         * @return bool
         */
        private function is_customer_note($note)
        {
        }
        /**
         * @return string
         */
        private function get_note_type()
        {
        }
        /**
         * @return string
         */
        private function get_display_property()
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        private function get_count_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        private function get_latest_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    class Downloads extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
        /**
         * @param $download
         *
         * @return string
         */
        private function get_description($download)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.4
     */
    class ShippingMethod extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function get_method_property()
        {
        }
        public function get_raw_value($order_id)
        {
        }
        private function get_method_title($data)
        {
        }
        private function get_method_type_label($data)
        {
        }
        private function get_formatted_method($data)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        protected function register_settings()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Actions extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.1
     */
    class Status extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        protected function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_order_status_options()
        {
        }
    }
    /**
     * @since 3.0.3
     */
    class StatusIcon extends \ACA\WC\Column\ShopOrder\Status
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function register_settings()
        {
        }
        private function get_status_label($key)
        {
        }
    }
    /**
     * @since 3.0
     */
    class OrderDate extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        /**
         * @var ShopOrder\OrderDate
         */
        private $field;
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        private function set_field()
        {
        }
        /**
         * @return ShopOrder\OrderDate|false
         */
        public function get_field()
        {
        }
        /**
         * @return OrderDate[]
         */
        public function get_fields()
        {
        }
    }
    /**
     * @since 3.6
     */
    class Refunds extends \AC\Column implements \ACP\Search\Searchable, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 2.0
     */
    class OrderNotes extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Order extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.5.1
     */
    class IsCustomer extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @return ACP\Export\Model
         */
        public function export()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    class Customer extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function register_settings()
        {
        }
        /**
         * @return ACP\Export\Model
         */
        public function export()
        {
        }
        public function editing()
        {
        }
        /**
         * @return ACP\Filtering\Model
         */
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
        /**
         * @return string
         */
        public function get_user_property()
        {
        }
        private function get_roles()
        {
        }
        public function get_related_meta_key()
        {
        }
    }
    class WcActions extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.1
     */
    class ProductCategories extends \ACA\WC\Column\ShopOrder\ProductTaxonomy
    {
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.6
     */
    class PaidAmount extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 2.0
     */
    class ShippingAddress extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    class PaymentMethod extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        private function get_payment_method($method)
        {
        }
    }
    class ProductTags extends \ACA\WC\Column\ShopOrder\ProductTaxonomy
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class IP extends \ACP\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0.4
     */
    class OrderNumberOriginal extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        protected function register_settings()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Column\ProductSubscription {
    /**
     * @since 3.4
     */
    class LimitSubscription extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($product_id)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return string|null
         */
        protected function get_limit_label(\WC_Product $product)
        {
        }
        private function get_limit_options()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.4
     */
    class Expires extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return string|null
         */
        protected function get_period_label(\WC_Product $product)
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.4
     */
    class FreeTrial extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return string|null
         */
        private function get_trial_label(\WC_Product $product)
        {
        }
    }
    /**
     * @since 3.4
     */
    class Period extends \AC\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_period_meta_key()
        {
        }
        public function get_interval_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param WC_Product_Subscription $product
         *
         * @return string|null
         */
        protected function get_interval_label(\WC_Product_Subscription $product)
        {
        }
        /**
         * @param WC_Product_Subscription $product
         *
         * @return string|null
         */
        protected function get_period_label(\WC_Product_Subscription $product)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Column\User {
    /**
     * @since 3.0.4
     */
    class Address extends \ACP\Column\Meta implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        /**
         * @return string e.g. billing or shipping
         */
        private function get_address_type()
        {
        }
        /**
         * @return string e.g. city, country etc.
         */
        private function get_address_property()
        {
        }
        /**
         * @return Settings\Address|false
         */
        public function get_setting_address_property()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 3.1
     */
    class Country extends \ACP\Column\Meta implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        private function get_address_type()
        {
        }
        public function register_settings()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 1.3
     */
    class CouponsUsed extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        private function get_orders_by_user($user_id)
        {
        }
        public function get_value($user_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return int Count
         */
        public function get_raw_value($user_id)
        {
        }
    }
    /**
     * @since 3.0
     */
    class CustomerSince extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_raw_value($customer_id)
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Products extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\WC\ConditionalFormat\FilteredHtmlIntegerFormatterTrait;
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_raw_value($id)
        {
        }
        /**
         * @param int $id User ID
         *
         * @return stdClass[] [ $product_id, $order_id, $qty ]
         */
        private function get_products($id)
        {
        }
        /**
         * @param array $parts
         *
         * @return string
         */
        private function built_sql($parts)
        {
        }
        /**
         * @return bool
         */
        private function is_uniquely_purchased()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.3
     */
    class TotalSales extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        /**
         * @return string[]
         */
        private function get_order_statuses()
        {
        }
        public function get_value($user_id)
        {
        }
        protected function register_settings()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.3
     */
    class Orders extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        private function get_limit() : int
        {
        }
        public function get_raw_value($user_id)
        {
        }
        private function get_order_statuses() : array
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        private function get_order_tooltip(\WC_Order $order) : string
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Reviews extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\WC\ConditionalFormat\FilteredHtmlIntegerFormatterTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 3.0
     */
    class FirstOrder extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        protected function get_first_order($user_id)
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.0
     */
    class LastOrder extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        protected function get_last_order($user_id)
        {
        }
        private function get_order_statuses() : array
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Ratings extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\WC\ConditionalFormat\FilteredHtmlIntegerFormatterTrait;
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        /**
         * @return string
         */
        private function get_rating_type()
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 1.3
     */
    class OrderCount extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACA\WC\ConditionalFormat\FilteredHtmlIntegerFormatterTrait;
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        private function get_order_status() : array
        {
        }
        public function register_settings() : void
        {
        }
    }
}
namespace ACA\WC\Column\ShopCoupon {
    /**
     * @since 1.1
     */
    class IncludeProducts extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.0
     */
    class ExpiryDate extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 2.0
     */
    class UsedBy extends \AC\Column implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        public function get_raw_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 2.2
     */
    class EmailRestrictions extends \AC\Column implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 2.2
     */
    class Coupon extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.0
     */
    class Usage extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\WC\Column {
    /**
     * @since 3.0
     */
    abstract class CouponProductCategories extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_value($id)
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\WC\Column\ShopCoupon {
    /**
     * @since 3.0
     */
    class ExcludeProductsCategories extends \ACA\WC\Column\CouponProductCategories implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 2.2
     */
    class Products extends \AC\Column implements \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.0
     */
    class Amount extends \ACP\Column\Meta implements \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.1
     */
    class MinimumAmount extends \ACP\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 1.1
     */
    class MaximumAmount extends \ACP\Column\Meta implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * Class Column\ShopCoupon\CouponDescription
     * Custom Implementation of the description column
     */
    class CouponDescription extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.0
     */
    class Type extends \ACP\Column\Meta implements \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function get_coupon_types()
        {
        }
    }
    class Limit extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        protected function register_settings()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 1.0
     */
    class CouponCode extends \AC\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.0
     */
    class Description extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.1
     */
    class ExcludeProducts extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Orders extends \AC\Column implements \AC\Column\AjaxValue, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function get_order_ids_by_coupon_id($id) : array
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_ajax_value($id)
        {
        }
        public function export()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    /**
     * @since 3.0
     */
    class ProductsCategories extends \ACA\WC\Column\CouponProductCategories implements \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.0
     */
    class FreeShipping extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Column\Product {
    /**
     * @since 1.2
     */
    class Visibility extends \AC\Column implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_value($product_id)
        {
        }
        public function get_raw_value($product_id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class BackordersAllowed extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_backorders($id)
        {
        }
    }
    /**
     * @since 1.0
     */
    class StockStatus extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function get_supported_types()
        {
        }
    }
    class Weight extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function is_valid()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.1
     */
    class Upsells extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.2
     */
    class Name extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class Date extends \ACP\Column\Post\Date
    {
        // uses pro date column
    }
    /**
     * @since 2.0
     */
    class Gallery extends \AC\Column\Meta implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Rating extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function get_meta_key()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    class SKU extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.1
     */
    class OrderTotal extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
    }
    /**
     * @since 1.0
     */
    class Dimensions extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
        /**
         * @param int $post_id
         *
         * @return array|false
         */
        public function get_dimensions($post_id)
        {
        }
        /**
         * @param string $dimension
         *
         * @return string
         */
        private function get_dimension_label($dimension)
        {
        }
        /**
         * @param array $dimensions
         *
         * @return array
         */
        public function dimensions_used($dimensions)
        {
        }
        /**
         * @param array $dimensions
         *
         * @return string
         */
        private function human_readable_surface($dimensions)
        {
        }
        /**
         * @return string
         */
        private function get_dimension_unit()
        {
        }
    }
    /**
     * @since 3.0
     */
    class AvgOrderInterval extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        private $start_order;
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($post_id)
        {
        }
        /**
         * @throws Exception
         */
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
        /**
         * @param $post_id
         *
         * @return false|int
         * @throws Exception
         */
        public function get_product_order_count($post_id)
        {
        }
        /**
         * @return false|int
         * @throws Exception
         */
        private function get_start_order()
        {
        }
        /**
         * @return int|false
         */
        private function get_period_in_days()
        {
        }
    }
    class PurchaseNote extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 2.0
     */
    class Type extends \AC\Column implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.1
     */
    class ProductType extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        private function get_simple_product_types()
        {
        }
        /**
         * @param string $product_type
         *
         * @return bool
         */
        private function is_simple_product_type($product_type)
        {
        }
        public function get_value($post_id)
        {
        }
        private function get_product_type_label($product_type)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.0
     */
    class GroupedProducts extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class LowOnStock extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        private function get_low_on_stock_amount($post_id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class ShortDescription extends \ACP\Column\Post\Excerpt
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        public function get_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        private function get_inline_editable_type()
        {
        }
    }
    class ProductTag extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        // Overwrite the Edit setting with a new dependent setting
        public function register_settings()
        {
        }
        public function get_taxonomy()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    class Crosssells extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0.3
     */
    class Sales extends \AC\Column implements \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($product_id)
        {
        }
        protected function get_order_statuses() : array
        {
        }
        protected function register_settings() : void
        {
        }
        public function get_raw_value($product_id)
        {
        }
    }
    /**
     * @since 3.0
     */
    class MenuOrder extends \ACP\Column\Post\Order
    {
        public function __construct()
        {
        }
        public function is_valid()
        {
        }
    }
    /**
     * @since 1.0
     */
    class Downloads extends \AC\Column implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        private function get_description($id)
        {
        }
        /**
         * @param int $id
         *
         * @return WC_Product_Download[]
         */
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.4
     */
    class TaxClass extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function get_tax_classes()
        {
        }
    }
    /**
     * Deprecated: Column does not exist anymore in WooCommerce
     */
    class Comments extends \AC\Column
    {
        public function __construct()
        {
        }
    }
    /**
     * @since 3.0
     */
    class ProductParent extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Sale extends \AC\Column implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function format_scheduled_label($label, \WC_DateTime $date_time = null)
        {
        }
        /**
         * Returns a formatted period
         *
         * @param WC_Product $product
         *
         * @return string
         */
        private function get_scheduled_label(\WC_Product $product)
        {
        }
        /**
         * Sales price is scheduled for future
         *
         * @param WC_Product $product
         *
         * @return bool
         */
        public function is_future_sale(\WC_Product $product)
        {
        }
        public function is_scheduled(\WC_Product $product)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    /**
     * @since 3.5.7
     */
    class DefaultFormValues extends \AC\Column implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.2
     */
    class Featured extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    class Coupons extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        public function get_raw_value($id)
        {
        }
        public function search()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.4
     */
    class TaxStatus extends \AC\Column\Meta implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($post_id)
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function get_tax_status()
        {
        }
    }
    /**
     * @since 3.0
     */
    class SoldIndividually extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.1
     */
    class Attributes extends \AC\Column implements \ACP\Export\Exportable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable, \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        public function get_value($product_id)
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        private function render_single_attribute($product_id)
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        private function render_multiple_attributes($product_id)
        {
        }
        /**
         * @param $id
         *
         * @return WC_Product_Attribute[]
         */
        private function get_attributes_by_product_id($id)
        {
        }
        /**
         * @param int    $product_id
         * @param string $attribute
         *
         * @return WC_Product_Attribute|false
         */
        private function get_attribute_object($product_id, $attribute)
        {
        }
        private function is_single_attribute()
        {
        }
        /**
         * @param WC_Product_Attribute $attribute
         *
         * @return string
         */
        private function get_tooltip(\WC_Product_Attribute $attribute)
        {
        }
        /**
         * @param int $id
         *
         * @return WC_Product_Attribute[]
         */
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
        /**
         * @return false|string
         */
        public function get_taxonomy()
        {
        }
        /**
         * @return Settings\Product\Attributes|false
         */
        public function get_setting_attribute()
        {
        }
        /**
         * @return string
         */
        public function get_attribute()
        {
        }
        /**
         * @return bool
         */
        private function is_taxonomy_attribute()
        {
        }
        /**
         * @return bool
         */
        private function is_custom_attribute()
        {
        }
    }
    class ProductCat extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        // Overwrite the Edit setting with a new dependent setting
        public function register_settings()
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Reviews extends \AC\Column\Meta implements \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function get_meta_key()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
    }
    /**
     * @since 1.0
     */
    class Thumb extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.0
     */
    class ReviewsEnabled extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function is_valid()
        {
        }
        private function get_comment_status($id)
        {
        }
    }
    /**
     * @since 1.1
     */
    class ShippingClass extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function sorting()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.3
     */
    class Variation extends \AC\Column implements \AC\Column\AjaxValue, \ACP\Sorting\Sortable, \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function get_ajax_value($id)
        {
        }
        /**
         * @param WC_Product_Variation $variation
         *
         * @return string
         */
        protected function get_variation_label(\WC_Product_Variation $variation)
        {
        }
        /**
         * @param WC_Product_Variation $variation
         *
         * @return string
         */
        protected function get_variation_stock_status(\WC_Product_Variation $variation)
        {
        }
        /**
         * @param WC_Product_Variation $variation
         *
         * @return bool|string
         */
        protected function get_variation_price(\WC_Product_Variation $variation)
        {
        }
        /**
         * @param WC_Product_Variation $variation
         *
         * @return string
         */
        protected function get_tooltip_variation($variation)
        {
        }
        /**
         * @param WC_Product_Variation $variation
         *
         * @return bool|string
         */
        protected function get_dimensions($variation)
        {
        }
        /**
         * @param $product_id
         *
         * @return array
         */
        public function get_variation_ids($product_id)
        {
        }
        /**
         * @param int $product_id
         *
         * @return WC_Product_Variation[]
         */
        protected function get_variations($product_id)
        {
        }
        public function sorting()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.1
     */
    class OrderCount extends \AC\Column implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 1.1
     */
    class Stock extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 1.0
     */
    class Price extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Customers extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\IntegerFormattableTrait;
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_value($id)
        {
        }
        public function sorting()
        {
        }
    }
}
namespace ACA\WC\Column\ProductCategory {
    class Image extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Column\Comment {
    /**
     * @since 3.0
     */
    class ProductReview extends \AC\Column implements \ACP\Filtering\Filterable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Rating extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable, \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Column\ShopSubscription {
    /**
     * @since 3.4
     */
    class EndDate extends \AC\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.4
     */
    class OrderItems extends \AC\Column implements \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.4
     */
    class NextPaymentDate extends \AC\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    class SubscriptionDate extends \AC\Column\Meta implements \ACP\Export\Exportable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        /**
         * @var WC\Field\ShopSubscription\SubscriptionDate
         */
        private $field;
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        private function set_field()
        {
        }
        /**
         * @return WC\Field\ShopSubscription\SubscriptionDate|false
         */
        public function get_field()
        {
        }
        /**
         * @return WC\Field\ShopSubscription\SubscriptionDate[]
         */
        public function get_fields()
        {
        }
    }
    /**
     * @since 3.4
     */
    class AutoRenewal extends \AC\Column implements \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.4
     */
    class TrailEndDate extends \AC\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.4
     */
    class TotalRevenue extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 3.4
     */
    class RecurringTotal extends \AC\Column implements \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.4
     */
    class LastPaymentDate extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function export()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    /**
     * @since 3.4
     */
    class StartDate extends \AC\Column\Meta implements \ACP\Search\Searchable, \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function search()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.4
     */
    class Orders extends \AC\Column implements \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_raw_value($id)
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.4
     */
    class Status extends \AC\Column implements \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\WC\Column\ProductVariation {
    /**
     * @since 3.5.1
     */
    class Taxonomy extends \AC\Column implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function register_settings()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Weight extends \ACA\WC\Column\Product\Weight
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 3.0
     */
    class ID extends \ACP\Column\Post\ID
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    class Attribute extends \AC\Column implements \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        /**
         * @return Type\ProductAttribute|null
         */
        private function get_attribute()
        {
        }
        private function get_attrribute_label($id, \ACA\WC\Type\ProductAttribute $attribute)
        {
        }
        public function get_value($id)
        {
        }
        public function register_settings()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class SKU extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Export\Exportable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Dimensions extends \ACA\WC\Column\Product\Dimensions
    {
        public function __construct()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Product extends \AC\Column implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 3.0.3
     */
    class Sales extends \ACA\WC\Column\Product\Sales
    {
    }
    /**
     * @since 3.0
     */
    class Downloadable extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 3.5.7
     */
    class TaxClass extends \ACA\WC\Column\Product\TaxClass
    {
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function search()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Description extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\ConditionalFormatTrait;
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Enabled extends \AC\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
    }
    class Order extends \ACP\Column\Post\Order
    {
        public function is_valid()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Image extends \ACP\Column\Post\FeaturedImage
    {
        public function __construct()
        {
        }
        public function register_settings()
        {
        }
        public function is_valid()
        {
        }
        public function editing()
        {
        }
    }
    class Thumb extends \AC\Column\Meta implements \ACP\Editing\Editable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function editing()
        {
        }
        public function register_settings()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Virtual extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Filtering\Filterable
    {
        public function __construct()
        {
        }
        public function get_meta_key()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function filtering()
        {
        }
    }
    /**
     * @since 3.5.7
     */
    class ShippingClass extends \AC\Column implements \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\Editing\Editable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_value($post_id)
        {
        }
        public function get_raw_value($post_id)
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Variation extends \AC\Column implements \ACP\Editing\Editable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        /**
         * @return Settings\ProductVariation\Variation|false
         */
        public function get_setting_variation()
        {
        }
        public function register_settings()
        {
        }
        public function editing()
        {
        }
        public function export()
        {
        }
    }
    /**
     * @since 1.1
     */
    class Stock extends \AC\Column implements \ACP\Editing\Editable, \ACP\Search\Searchable, \ACP\Export\Exportable, \ACP\Sorting\Sortable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        public function editing()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function sorting()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Price extends \AC\Column\Meta implements \ACP\Editing\Editable, \ACP\Sorting\Sortable, \ACP\Filtering\Filterable, \ACP\Export\Exportable, \ACP\Search\Searchable, \ACP\ConditionalFormat\Formattable
    {
        public function __construct()
        {
        }
        public function conditional_format() : ?\ACP\ConditionalFormat\FormattableConfig
        {
        }
        public function get_value($id)
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function export()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Column\UserSubscription {
    class InactiveSubscriber extends \AC\Column implements \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function format_date(\DateTime $date) : string
        {
        }
        private function get_subscription_description(\WC_Subscription $subscription) : ?string
        {
        }
        private function get_inactive_subscription_date(\WC_Subscription $subscription) : ?\DateTime
        {
        }
        private function get_order_tooltip(\WC_Subscription $subscription) : string
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class ActiveSubscriber extends \AC\Column implements \ACP\Search\Searchable, \ACP\Export\Exportable
    {
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
    }
    class Subscriptions extends \AC\Column implements \ACP\Export\Exportable, \ACP\ConditionalFormat\Formattable
    {
        use \ACP\ConditionalFormat\FilteredHtmlFormatTrait;
        public function __construct()
        {
        }
        public function get_value($user_id)
        {
        }
        public function get_raw_value($user_id)
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder {
    class ProductCount extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function get_filtered_order_ids($operator, \ACP\Search\Value $value)
        {
        }
    }
    class NotesPrivate extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Total extends \ACP\Search\Comparison\Meta
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder\Customer {
    class Meta extends \ACP\Search\Comparison\Meta
    {
        /** @var string */
        protected $related_meta_key;
        public function __construct($related_meta_key)
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        public function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param string $value
         *
         * @return array
         */
        protected function get_user_ids($value)
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder\Customer\Meta {
    abstract class Serialized extends \ACA\WC\Search\ShopOrder\Customer\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @param string $value
         *
         * @return array
         */
        protected function get_user_ids($value)
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder\Customer\Meta\Serialized {
    class Role extends \ACA\WC\Search\ShopOrder\Customer\Meta\Serialized
    {
        /** @var array */
        private $roles;
        public function __construct($roles)
        {
        }
        /**
         * @return AC\Helper\Select\Options
         */
        public function get_values()
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder {
    class Currency extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\RemoteValues
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
    }
    class CouponsUsed extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        protected function get_order_with_coupon_sub_query(string $operator, \ACP\Search\Value $coupon)
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder\Address {
    class Country extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\RemoteValues
    {
        public function __construct($meta_key)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\WC\Search\ShopOrder {
    class NotesToCustomer extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class ShippingMethodLabel extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class NotesSystem extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Product extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $post_type;
        public function __construct($post_type = 'shop_order')
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        public function get_where($product_id, $operator)
        {
        }
        public function get_values($s, $paged)
        {
        }
        /**
         * Get All orders IDs for a given product ID.
         *
         * @param integer $product_id
         *
         * @return array
         */
        protected function get_orders_ids_by_product_id($product_id)
        {
        }
    }
    class ProductTaxonomy extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct($taxonomy)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        public function get_where($product_id)
        {
        }
        public function get_values($s, $paged)
        {
        }
        /**
         * Get All orders IDs for a given product ID.
         *
         * @param integer $product_id
         *
         * @return array
         */
        protected function get_orders_ids_by_product_cat($term_id)
        {
        }
    }
    class AddressFactory
    {
        /**
         * @param string $address_property
         * @param string $meta_key
         *
         * @return ACP\Search\Comparison
         */
        public function create($address_property, $meta_key)
        {
        }
    }
    class ShippingMethod extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class Refunds extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class IsCustomer extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
    }
    class Customer extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        public function get_values($search, $paged)
        {
        }
    }
    class OrderWeight extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_where($operator, $value)
        {
        }
        public function get_order_ids($operator, \ACP\Search\Value $value)
        {
        }
    }
    class ProductCategories extends \ACA\WC\Search\ShopOrder\ProductTaxonomy
    {
        public function __construct()
        {
        }
    }
    class PaymentMethod extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
    }
    class ProductTags extends \ACA\WC\Search\ShopOrder\ProductTaxonomy
    {
        public function __construct()
        {
        }
    }
}
namespace ACA\WC\Search\ProductSubscription {
    class Options extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $options;
        public function __construct($meta_key, $options)
        {
        }
        public function get_values()
        {
        }
    }
    class Period extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        private function get_delimiter()
        {
        }
        private function get_period_options()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\WC\Search\User {
    class Country extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $countries;
        public function __construct($meta_key, $countries)
        {
        }
        public function get_values()
        {
        }
    }
    class Products extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        /**
         * @inheritDoc
         */
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($s, $paged)
        {
        }
        /**
         * @param integer $product_id
         *
         * @return array
         */
        protected function get_user_ids_by_product($product_id)
        {
        }
    }
    class TotalSales extends \ACP\Search\Comparison
    {
        /**
         * @var string[]
         */
        private $statuses;
        public function __construct($statuses)
        {
        }
        /**
         * @inheritDoc
         */
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        protected function get_user_ids($operator, $value)
        {
        }
    }
    class OrderCount extends \ACP\Search\Comparison
    {
        /**
         * @var array
         */
        protected $status;
        public function __construct(array $status = [])
        {
        }
        /**
         * @inheritDoc
         */
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\WC\Search\ShopCoupon {
    class Products extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct($meta_key)
        {
        }
        public function get_values($s, $paged)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Type extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /** @var array [ $key => $label ] */
        private $types;
        public function __construct($types)
        {
        }
        public function get_values()
        {
        }
    }
    class EmailRestriction extends \ACP\Search\Comparison\Meta
    {
        public function __construct()
        {
        }
    }
    class Categories extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct($meta_key)
        {
        }
        public function get_values($s, $paged)
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class FreeShipping extends \ACP\Search\Comparison\Meta
    {
        public function __construct()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\WC\Search\Product {
    class Visibility extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        /** @var array */
        private $visibility_options;
        public function __construct($visibility_options)
        {
        }
        public function get_values()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_tax_query(\ACP\Search\Value $value)
        {
        }
    }
    class BackordersAllowed extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
    }
    class StockStatus extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
    }
    class Upsells extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class Rating extends \ACP\Search\Comparison\Meta
    {
        public function __construct()
        {
        }
    }
    class GroupedProducts extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class LowOnStock extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
    class Crosssells extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        /**
         * Template function that should work most of the cases
         *
         * @param string $operator
         * @param Value  $value
         *
         * @return array
         */
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class TaxClass extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $tax_classes;
        public function __construct(array $tax_classes)
        {
        }
        public function get_values()
        {
        }
    }
    class Sale extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_meta_query(\ACP\Search\Value $value)
        {
        }
        public function get_where(\ACP\Search\Value $value)
        {
        }
    }
    class Featured extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param string $operator
         *
         * @return array
         */
        public function get_tax_query($operator)
        {
        }
    }
    class Coupons extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @return array
         */
        private function get_products_with_coupon_applied()
        {
        }
    }
    class TaxStatus extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        /**
         * @var array
         */
        private $statuses;
        public function __construct(array $statuses)
        {
        }
        public function get_values()
        {
        }
    }
    class SoldIndividually extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
        protected function get_meta_query($operator, \ACP\Search\Value $value)
        {
        }
    }
    class ReviewsEnabled extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class OrderCount extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
}
namespace ACA\WC\Search\Meta\Date {
    class ISO extends \ACP\Search\Comparison\Meta\DateTime\ISO
    {
        public function __construct($meta_key, $type)
        {
        }
    }
    class Timestamp extends \ACP\Search\Comparison\Meta\DateTime\Timestamp
    {
        public function __construct($meta_key, $type)
        {
        }
    }
}
namespace ACA\WC\Search\Comment {
    class ProductReview extends \ACP\Search\Comparison implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\WC\Search\ShopSubscription {
    class AutoRenewal extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\WC\Search\ProductVariation {
    class AttributeTaxonomy extends \ACP\Search\Comparison\Meta implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        protected $taxonomy;
        public function __construct($taxonomy)
        {
        }
        public function get_values($search, $page)
        {
        }
        public function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
    }
    class Attribute extends \ACP\Search\Comparison\Meta
    {
        public function __construct($meta_key)
        {
        }
    }
    class SKU extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function get_comparison_meta_value(string $alias, string $operator, \ACP\Search\Value $value) : string
        {
        }
    }
    class Product extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\SearchableValues
    {
        public function __construct()
        {
        }
        protected function get_field()
        {
        }
        public function get_values($s, $paged)
        {
        }
    }
    class ProductTaxonomy extends \ACP\Search\Comparison implements \ACP\Search\Comparison\SearchableValues
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct($taxonomy)
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        public function get_where($product_id)
        {
        }
        public function get_values($s, $paged)
        {
        }
        protected function get_product_ids_by_term_id($term_id)
        {
        }
    }
    class Enabled extends \ACP\Search\Comparison\Post\PostField implements \ACP\Search\Comparison\Values
    {
        public function __construct()
        {
        }
        /**
         * @return string
         */
        protected function get_field()
        {
        }
        public function get_values()
        {
        }
    }
}
namespace ACA\WC\Search\UserSubscription {
    class InactiveSubscriber extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function get_inactive_subscribers_ids()
        {
        }
    }
    class ActiveSubscriber extends \ACP\Search\Comparison
    {
        public function __construct()
        {
        }
        protected function create_query_bindings($operator, \ACP\Search\Value $value)
        {
        }
        private function get_active_subscribers_ids()
        {
        }
    }
}
namespace ACA\WC {
    class Admin implements \AC\Registerable
    {
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function admin_scripts()
        {
        }
        public function add_hide_on_screen(\ACP\Settings\ListScreen\HideOnScreenCollection $collection, \AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACA\WC\Sorting\ShopOrder {
    class ItemCount extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        /**
         * Setup clauses to sort by parent
         *
         * @param array $clauses array
         *
         * @return array
         * @since 4.0
         */
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class ShippingMethodLabel extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class ShippingMethod extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        /**
         * Setup clauses to sort by parent
         *
         * @param array $clauses array
         *
         * @return array
         * @since 4.0
         */
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class OrderWeight extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        public function get_sorted_order_ids()
        {
        }
    }
}
namespace ACA\WC\Sorting\User {
    class ProductCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var array
         */
        private $status;
        public function __construct(array $status = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    abstract class OrderDate extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $status;
        public function __construct(array $status = ['wc-completed'])
        {
        }
        protected abstract function get_order_by() : string;
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        private function esc_sql_array($array)
        {
        }
    }
    class TotalSales extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var array
         */
        private $status;
        public function __construct(array $status = ['wc-completed'])
        {
        }
        public function get_sorting_vars() : array
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        private function built_sql(array $parts) : string
        {
        }
    }
    class ProductCountUnique extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var array
         */
        private $status;
        public function __construct(array $status = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
}
namespace ACA\WC\Sorting\User\OrderDate {
    class FirstOrder extends \ACA\WC\Sorting\User\OrderDate
    {
        protected function get_order_by() : string
        {
        }
    }
    class LastOrder extends \ACA\WC\Sorting\User\OrderDate
    {
        protected function get_order_by() : string
        {
        }
    }
}
namespace ACA\WC\Sorting\User {
    class Ratings extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string 'AVG' or 'COUNT
         */
        private $sort_type;
        public function __construct($sort_type = null)
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
    }
    class OrderCount extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var array
         */
        private $status;
        public function __construct(array $status = [])
        {
        }
        public function get_sorting_vars()
        {
        }
        public function pre_user_query_callback(\WP_User_Query $query)
        {
        }
        private function built_sql(array $parts) : string
        {
        }
    }
}
namespace ACA\WC\Sorting\ShopCoupon {
    class ExpiryDate extends \ACP\Sorting\Model\Post\Meta
    {
        public function __construct($meta_key)
        {
        }
    }
    class Type extends \ACP\Sorting\Model\Post\MetaMapping
    {
        public function __construct()
        {
        }
        private function get_sorted_fields()
        {
        }
    }
}
namespace ACA\WC\Sorting\Product {
    class BackordersAllowed extends \ACP\Sorting\Model\Post\Meta
    {
        public function __construct()
        {
        }
    }
    class Dimensions extends \ACP\Sorting\AbstractModel implements \ACP\Sorting\Model\WarningAware
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class ProductType extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        private function get_product_types_from_database()
        {
        }
        public function get_sorted_product_ids()
        {
        }
    }
    class Featured extends \ACP\Sorting\Model\Post\Featured
    {
        protected function get_featured_ids()
        {
        }
    }
    class Variation extends \ACP\Sorting\AbstractModel implements \ACP\Sorting\Model\WarningAware
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    class Customers extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        /**
         * Setup clauses to sort by parent
         *
         * @param array $clauses array
         *
         * @return array
         * @since 4.0
         */
        public function sorting_clauses_callback($clauses)
        {
        }
    }
}
namespace ACA\WC\Sorting\Comment {
    class Rating extends \ACP\Sorting\AbstractModel
    {
        /**
         * @var string
         */
        private $meta_key;
        public function __construct($meta_key)
        {
        }
        public function get_sorting_vars()
        {
        }
    }
}
namespace ACA\WC\Sorting\ProductVariation {
    class SKU extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
    /**
     * @property Post $strategy
     */
    class SkuNaturalSort extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
        /**
         * @return int[]
         */
        private function get_sorted_ids()
        {
        }
    }
    class Stock extends \ACP\Sorting\AbstractModel
    {
        public function get_sorting_vars()
        {
        }
        public function sorting_clauses_callback($clauses)
        {
        }
    }
}
namespace ACA\WC\Asset\Script {
    class TableVariation extends \AC\Asset\Script
    {
        const TABLE = 'product_variation';
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        /**
         * @return string
         */
        private function get_referer_link()
        {
        }
        /**
         * Checks if the referer came from another list table
         *
         * @param string $post_type
         *
         * @return false|string Return referer link
         */
        private function check_referer($post_type)
        {
        }
    }
    class Admin extends \AC\Asset\Script
    {
        /**
         * @var string
         */
        private $assets_url;
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
    class Table extends \AC\Asset\Script
    {
        public function __construct($handle, \AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
    }
}
namespace ACA\WC\TableScreen {
    class HideSubscriptionsFilter implements \AC\Registerable
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var HideOnScreen
         */
        private $hide_on_screen;
        public function __construct(\AC\ListScreen $list_screen, \ACP\Settings\ListScreen\HideOnScreen $hide_on_screen)
        {
        }
        public function register()
        {
        }
        public function hide_filter($class)
        {
        }
    }
    class HideProductFilter implements \AC\Registerable
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var HideOnScreen
         */
        private $hide_on_screen;
        /**
         * @var string
         */
        private $filter_name;
        public function __construct(\AC\ListScreen $list_screen, \ACP\Settings\ListScreen\HideOnScreen $hide_on_screen, $filter_name)
        {
        }
        public function register()
        {
        }
        public function hide_filter($filters)
        {
        }
    }
}
namespace ACA\WC {
    /**
     * @since 3.0
     */
    abstract class Field
    {
        /**
         * @var AC\Column
         */
        protected $column;
        /**
         * @var string
         */
        protected $label;
        /**
         * @return string
         */
        public abstract function set_label();
        /**
         * @param int $id
         *
         * @return string
         */
        public abstract function get_value($id);
        /**
         * @param AC\Column $column
         */
        public function __construct(\AC\Column $column)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @return string
         */
        public function get_key()
        {
        }
    }
}
namespace ACA\WC\Field\ShopOrder {
    /**
     * @since 3.0
     * @property Column\ShopOrder\OrderDate $column
     */
    abstract class OrderDate extends \ACA\WC\Field implements \ACP\Export\Exportable
    {
        /**
         * @param WC_Order $order
         *
         * @return WC_DateTime|false
         */
        public abstract function get_date(\WC_Order $order);
        public function get_value($id)
        {
        }
        public function get_meta_key()
        {
        }
        public function export()
        {
        }
    }
}
namespace ACA\WC\Field\ShopOrder\OrderDate {
    /**
     * @since 3.0
     */
    class Modified extends \ACA\WC\Field\ShopOrder\OrderDate implements \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Order $order)
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Completed extends \ACA\WC\Field\ShopOrder\OrderDate implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Filtering\Filterable
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Order $order)
        {
        }
        public function get_meta_key()
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Created extends \ACA\WC\Field\ShopOrder\OrderDate implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Filtering\Filterable
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Order $order)
        {
        }
        public function sorting()
        {
        }
        public function filtering()
        {
        }
        public function search()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Paid extends \ACA\WC\Field\ShopOrder\OrderDate implements \ACP\Sorting\Sortable, \ACP\Search\Searchable
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Order $order)
        {
        }
        public function get_meta_key()
        {
        }
        public function sorting()
        {
        }
        public function search()
        {
        }
    }
}
namespace ACA\WC\Field\ShopSubscription {
    /**
     * @property Column\ShopSubscription\SubscriptionDate $column
     */
    abstract class SubscriptionDate extends \ACA\WC\Field implements \ACP\Sorting\Sortable, \ACP\Search\Searchable, \ACP\Export\Exportable, \ACP\Editing\Editable
    {
        public function get_value($id)
        {
        }
        public abstract function get_meta_key();
        public function sorting()
        {
        }
        public function search()
        {
        }
        public function export()
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\WC\Field\ShopSubscription\SubscriptionDate {
    class EndDate extends \ACA\WC\Field\ShopSubscription\SubscriptionDate
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Subscription $subscription)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
    class TrialEnd extends \ACA\WC\Field\ShopSubscription\SubscriptionDate
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Subscription $subscription)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
    class NextPayment extends \ACA\WC\Field\ShopSubscription\SubscriptionDate
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Subscription $subscription)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
    class StartDate extends \ACA\WC\Field\ShopSubscription\SubscriptionDate
    {
        public function set_label()
        {
        }
        public function get_date(\WC_Subscription $subscription)
        {
        }
        public function get_meta_key()
        {
        }
        public function editing()
        {
        }
    }
}
namespace ACA\WC {
    final class TableScreen implements \AC\Registerable
    {
        /**
         * @var AC\ListScreen
         */
        private $current_list_screen;
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        /**
         * @var bool
         */
        private $use_product_variations;
        public function __construct(\AC\Asset\Location\Absolute $location, $use_product_variations)
        {
        }
        public function register()
        {
        }
        public function hide_filters(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         */
        public function set_current_list_screen($list_screen)
        {
        }
        public function get_current_list_screen()
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @return bool
         */
        private function is_wc_list_screen($list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         */
        public function table_scripts_editing($list_screen)
        {
        }
        /**
         * @param AC\ListScreen $list_screen
         *
         * @since 1.3
         */
        public function table_scripts($list_screen)
        {
        }
        /**
         * Single product scripts
         *
         * @param string $hook
         */
        public function product_scripts($hook)
        {
        }
        /**
         * @param string $group
         * @param string $role
         *
         * @return string
         */
        public function set_editing_role_group($group, $role)
        {
        }
        /**
         * @param int $product_id
         *
         * @return string
         */
        private function get_list_table_link($product_id)
        {
        }
        /**
         * Add a quick action on the product overview which links to the product variations page.
         *
         * @param array   $actions
         * @param WP_Post $post
         *
         * @return array
         */
        public function add_quick_action_variation($actions, $post)
        {
        }
        /**
         * Display an icon on the product name column which links to the product variations page.
         *
         * @param string $column
         * @param int    $post_id
         *
         * @see \WP_Posts_List_Table::column_default
         */
        public function add_quick_link_variation($column, $post_id)
        {
        }
        /**
         * Applies the width setting to the table headers
         */
        public function display_width_styles()
        {
        }
    }
}
namespace ACA\WC\QuickAdd\Create {
    class Coupon implements \ACP\QuickAdd\Model\Create
    {
        public function create()
        {
        }
        private function generate_code()
        {
        }
        public function has_permission(\WP_User $user)
        {
        }
    }
    class Product implements \ACP\QuickAdd\Model\Create
    {
        public function create()
        {
        }
        public function has_permission(\WP_User $user)
        {
        }
    }
}
namespace ACA\WC\QuickAdd {
    class Factory implements \ACP\QuickAdd\Model\ModelFactory
    {
        public function create(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace ACA\WC\Export\ShopOrder {
    class ProductCount extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order customer message (default column) exportability model
     * @since 2.2.1
     */
    class CustomerMessage extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order billing address (default column) exportability model
     * @since 2.2.1
     */
    class BillingAddress extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 3.0
     */
    class Downloads extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order shipping address (default column) exportability model
     * @since 2.2.1
     */
    class ProductThumbnails extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @property Column\ShopOrder\OrderDate $column
     */
    class OrderDate extends \ACP\Export\Model
    {
        public function __construct(\ACA\WC\Column\ShopOrder\OrderDate $column)
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order customer role (default column) exportability model
     * @since 2.2.1
     */
    class CustomerRole extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order title (default column) exportability model
     * @since 2.2.1
     */
    class OrderNotes extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order title (default column) exportability model
     * @since 2.2.1
     */
    class Order extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce order shipping address (default column) exportability model
     * @since 2.2.1
     */
    class ShippingAddress extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 2.2.1
     */
    class ProductCustomField extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\WC\Export\User {
    /**
     * @property Column\User\TotalSales $column
     * @since 2.2.1
     */
    class TotalSales extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @property WC\Column\User\Orders $column
     */
    class Orders extends \ACP\Export\Model
    {
        public function __construct(\ACA\WC\Column\User\Orders $column)
        {
        }
        public function get_value($id)
        {
        }
    }
}
namespace ACA\WC\Export\ShopCoupon {
    /**
     * @since 2.2.1
     */
    class EmailRestrictions extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce coupon basic information (default column) exportability model
     * @since 2.2.1
     */
    class Coupon extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce coupon usage (default column) exportability model
     * @since 2.2.1
     */
    class Usage extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce coupon product IDs (default column) exportability model
     * @since 2.2.1
     */
    class Products extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce coupon amount (default column) exportability model
     * @since 2.2.1
     */
    class Amount extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce coupon type (default column) exportability model
     * @since 2.2.1
     */
    class Type extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce coupon description (default column) exportability model
     * @since 2.2.1
     */
    class Description extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 2.2.1
     */
    class Orders extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\WC\Export\Product {
    /**
     * WooCommerce product SKU (default column) exportability model
     * @since 2.2.1
     */
    class SKU extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce product type (default column) exportability model
     * @since 2.2.1
     */
    class Type extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 3.0
     * @property Column\Product\Downloads $column
     */
    class Downloads extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @since 3.0
     * @property Column\Product\Sale $column
     */
    class Sale extends \ACP\Export\Model
    {
        public function __construct(\ACA\WC\Column\Product\Sale $column)
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * @since 3.0
     * @property Column\Product\Attributes $column
     */
    class Attributes extends \ACP\Export\Model
    {
        public function __construct(\ACA\WC\Column\Product\Attributes $column)
        {
        }
        /**
         * @return string
         */
        private function get_delimiter()
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce product variation (default column) exportability model
     * @since 2.2.1
     */
    class Variation extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * WooCommerce product stock (default column) exportability model
     * @since 2.2.1
     */
    class Stock extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\WC\Export\ShopSubscription {
    /**
     * @since 3.4
     */
    class OrderItems extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
    /**
     * @property Column\ShopOrder\OrderDate $column
     */
    class SubscriptionDate extends \ACP\Export\Model
    {
        public function __construct(\ACA\WC\Column\ShopSubscription\SubscriptionDate $column)
        {
        }
        public function get_value($id)
        {
        }
    }
    /**
     * @since 3.4
     */
    class Status extends \ACP\Export\Model
    {
        public function get_value($id)
        {
        }
    }
}
namespace ACA\WC\Export\UserSubscription {
    class ActiveSubscriber extends \ACP\Export\Model
    {
        public function get_value($user_id)
        {
        }
    }
}
namespace ACA\WC\Helper\Select\Entities {
    class Product extends \ACP\Helper\Select\Entities\Post
    {
        /**
         * @var WP_Query
         */
        protected $query;
        /**
         * @var array
         */
        protected $search_fields = [];
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function add_search_fields($search_where, \WP_Query $wp_query)
        {
        }
        public function join_postmeta($join)
        {
        }
        /**
         * @return string
         */
        public function group_post_ids()
        {
        }
    }
}
namespace ACA\WC\Helper\Select {
    class SinglePage implements \AC\Helper\Select\Paginated
    {
        public function get_total_pages()
        {
        }
        public function is_last_page()
        {
        }
        public function get_page()
        {
        }
    }
}
namespace ACA\WC\Helper\Select\Paginated {
    class Products extends \AC\Helper\Select\Options\Paginated
    {
        public function __construct(string $search, int $paged, array $post_types = [])
        {
        }
    }
}
namespace ACA\WC\Helper\Select\Formatter {
    class ProductTitleAndSKU extends \AC\Helper\Select\Formatter
    {
        /**
         * @param WP_Post $post
         *
         * @return string
         */
        public function get_label($post)
        {
        }
        protected function get_label_unique($label, $entity)
        {
        }
    }
    class ProductIDTitleAndSKU extends \AC\Helper\Select\Formatter
    {
        /**
         * @param WP_Post $post
         *
         * @return string
         */
        public function get_label($post)
        {
        }
    }
}
namespace ACA\WC\Helper {
    final class User
    {
        /**
         * @param int               $user_id
         * @param string|array|null $status
         *
         * @return array
         */
        public function get_totals_for_user($user_id, $status = null)
        {
        }
        /**
         * @param int          $user_id
         * @param string|array $status
         *
         * @return int[]
         */
        public function get_order_ids_by_user($user_id, $status)
        {
        }
        /**
         * @param int          $user_id
         * @param string|array $status
         *
         * @return \WC_Order[]|array
         */
        public function get_orders_by_user($user_id, $status = ['wc-completed', 'wc-processing'])
        {
        }
    }
}
namespace ACA\WC\Helper\Price {
    class Rounding
    {
        /**
         * @param float $price
         * @param int   $decimals
         *
         * @return float
         */
        public function up($price, $decimals = 0)
        {
        }
        /**
         * @param float $price
         * @param int   $decimals
         *
         * @return float
         */
        public function down($price, $decimals = 0)
        {
        }
        /**
         * @param float $price
         * @param int   $decimals
         *
         * @return bool
         */
        private function price_digits_are_same($price, $decimals)
        {
        }
    }
}
namespace ACA\WC\ListScreen {
    class ShopCoupon extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class Product extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        public function editing()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class ShopOrder extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class ProductVariation extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class Subscriptions extends \ACP\ListScreen\Post
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
    class ProductCategory extends \ACP\ListScreen\Taxonomy
    {
        public function __construct()
        {
        }
        protected function register_column_types()
        {
        }
    }
}
namespace ACA\WC\Filtering {
    class Number extends \ACP\Filtering\Model\Meta
    {
        public function __construct($column)
        {
        }
    }
}
namespace ACA\WC\Filtering\ShopOrder {
    class CustomerMessage extends \ACP\Filtering\Model
    {
        public function filter_by_excerpt($where, \WP_Query $query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class CouponUsed extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC\Filtering {
    abstract class ShopOrder extends \ACP\Filtering\Model
    {
        /**
         * @return string
         */
        protected function get_meta_alias()
        {
        }
        /**
         * @param string   $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function join_by_order_itemmeta($join, \WP_Query $query)
        {
        }
        /**
         * @param string   $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function join_by_postmeta($join, \WP_Query $query)
        {
        }
        /**
         * @return string
         */
        public function groupby_wc_product_ids()
        {
        }
    }
}
namespace ACA\WC\Filtering\ShopOrder {
    /**
     * @property Column\ShopOrder\Product $column
     */
    class Product extends \ACA\WC\Filtering\ShopOrder
    {
        public function __construct(\ACA\WC\Column\ShopOrder\Product $column)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function filter_by_wc_product_title($where, \WP_Query $query)
        {
        }
        public function filter_by_wc_product_sku($where, \WP_Query $query)
        {
        }
        public function get_filtering_data()
        {
        }
        public function register_settings()
        {
        }
        private function show_variations()
        {
        }
        /**
         * @since 1.3.2
         */
        private function get_all_ordered_products()
        {
        }
    }
    /**
     * @property Column\ShopOrder\ProductCategories $column
     */
    class ProductTaxonomy extends \ACA\WC\Filtering\ShopOrder
    {
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(\AC\Column $column, $taxonomy)
        {
        }
        public function get_filtering_data()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function filter_by_wc_product_ids($where, \WP_Query $query)
        {
        }
        private function get_products_for_category($cat_id)
        {
        }
    }
    class MetaDate extends \ACP\Filtering\Model\MetaDate
    {
        public function __construct($column)
        {
        }
    }
    /**
     * @property Column\ShopOrder\ShippingMethod $column
     */
    class ShippingMethod extends \ACA\WC\Filtering\ShopOrder
    {
        public function __construct(\ACA\WC\Column\ShopOrder\ShippingMethod $column)
        {
        }
        public function filter_by_wc_shipping_method($where, \WP_Query $query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column\ShopOrder\Customer $column
     */
    class CustomerRole extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\WC\Column\ShopOrder\Customer $column)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Refunds extends \ACP\Filtering\Model
    {
        public function get_filtering_data()
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function filter_by_found_refunds($where, \WP_Query $query)
        {
        }
    }
    /**
     * @property Column\ShopOrder\ProductCategories $column
     */
    class ProductCategories extends \ACA\WC\Filtering\ShopOrder\ProductTaxonomy
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
    /**
     * @property Column\ShopOrder\Status $column
     */
    class Status extends \ACA\WC\Filtering\ShopOrder
    {
        public function __construct(\ACA\WC\Column\ShopOrder\Status $column)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class PaymentMethod extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC\Filtering\ShopCoupon {
    /**
     * @property Column\ShopCoupon\Type $column
     */
    class Type extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\WC\Column\ShopCoupon\Type $column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column\CouponProductCategories $column
     */
    class ProductCategories extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\WC\Column\CouponProductCategories $column)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        protected function get_filtering_vars_empty_nonempty($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class FreeShipping extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC\Filtering\Product {
    class Visibility extends \ACP\Filtering\Model\Post\Taxonomy
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class BackordersAllowed extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class StockStatus extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    /**
     * @since 3.0
     */
    class PurchaseNote extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class GroupedProducts extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_grouped_products()
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @since 3.0
     */
    class ShortDescription extends \ACP\Filtering\Model\Post\Excerpt
    {
        public function get_filtering_data()
        {
        }
    }
    class ProductTag extends \ACP\Filtering\Model\Post\Taxonomy
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column\Product\TaxClass $column
     */
    class TaxClass extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\WC\Column\Product\TaxClass $column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace {
    class ProductParent extends \ACP\Filtering\Model\Post\PostParent
    {
        public function get_filtering_request_vars($vars, $value)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC\Filtering\Product {
    class Sale extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Featured extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @since 3.0
     */
    class Coupons extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        /**
         * @return array
         */
        private function get_products_with_coupon_applied()
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @property Column\Product\TaxStatus $column
     */
    class TaxStatus extends \ACP\Filtering\Model\Meta
    {
        public function __construct(\ACA\WC\Column\Product\TaxStatus $column)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    /**
     * @since 3.0
     */
    class SoldIndividually extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Thumb extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class ReviewsEnabled extends \ACP\Filtering\Model
    {
        public function filter_by_wc_reviews_enabled($where, \WP_Query $query)
        {
        }
        public function get_filtering_vars($vars)
        {
        }
        public function get_filtering_data()
        {
        }
    }
    class Price extends \ACP\Filtering\Model\Meta
    {
        public function __construct($column)
        {
        }
        public function is_ranged()
        {
        }
    }
}
namespace ACA\WC\Filtering\Settings {
    class ShowVariableProducts extends \ACP\Filtering\Settings
    {
        private $filter_allow_variations;
        protected function define_options()
        {
        }
        /**
         * @return string
         */
        public function get_filter_allow_variations()
        {
        }
        /**
         * @param string $filter_allow_variations
         *
         * @return $this
         */
        public function set_filter_allow_variations($filter_allow_variations)
        {
        }
        public function create_view()
        {
        }
    }
}
namespace ACA\WC\Filtering\Comment {
    class ProductReview extends \ACP\Filtering\Model
    {
        public function get_filtering_vars($vars)
        {
        }
        public function filter_on_product_reviews($comments_clauses)
        {
        }
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC\Filtering\ProductVariation {
    class Downloadable extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
    class Virtual extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC\Filtering {
    class MetaWithoutEmptyOption extends \ACP\Filtering\Model\Meta
    {
        public function get_filtering_data()
        {
        }
    }
}
namespace ACA\WC {
    final class WooCommerce implements \AC\Registerable
    {
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        /**
         * @return bool
         */
        private function use_product_variations()
        {
        }
        /**
         * @param string $version
         *
         * @return bool
         */
        private function is_wc_version_gte($version)
        {
        }
    }
}
namespace ACA\WC\ListTable {
    class ProductVariation extends \WC_Admin_List_Table
    {
        /**
         * Post type.
         * @var string
         */
        protected $list_table_type = 'product_variation';
        /**
         * @var AC\Asset\Location\Absolute
         */
        private $location;
        /**
         * Constructor.
         */
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function define_bulk_actions($actions)
        {
        }
        public function admin_scripts()
        {
        }
        /**
         * @param array $views
         *
         * @return array
         */
        public function get_views($views)
        {
        }
        public function woocommerce_scripts()
        {
        }
        /**
         * Get row actions to show in the list table.
         *
         * @param array   $actions
         * @param WP_Post $post
         *
         * @return array
         */
        protected function get_row_actions($actions, $post)
        {
        }
        /**
         * Define primary column.
         * @return string
         */
        protected function get_primary_column()
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function define_sortable_columns($columns)
        {
        }
        /**
         * Define which columns to show on this screen.
         *
         * @param array $columns Existing columns.
         *
         * @return array
         */
        public function define_columns($columns)
        {
        }
        /**
         * Query vars for custom searches.
         *
         * @param mixed $public_query_vars Array of query vars.
         *
         * @return array
         */
        public function add_custom_query_var($public_query_vars)
        {
        }
        /**
         * Pre-fetch any data for the row each column has access to it. the_product global is there for bw compat.
         *
         * @param int $post_id Post ID being shown.
         */
        protected function prepare_row_data($post_id)
        {
        }
        /**
         * @param array $query_vars
         *
         * @return array
         */
        protected function query_filters($query_vars)
        {
        }
        /**
         * @return array
         */
        private function get_variable_product_options()
        {
        }
        /**
         * Render any custom filters and search inputs for the list table.
         */
        protected function render_filters()
        {
        }
        protected function render_blank_state()
        {
        }
    }
}
namespace ACA\WC {
    /**
     * @since 3.4
     */
    final class Subscriptions implements \AC\Registerable
    {
        /**
         * @return bool
         */
        private function is_wc_subscriptions_active()
        {
        }
        public function register()
        {
        }
        public function register_list_screens(\AC\ListScreens $list_screens)
        {
        }
        /**
         * @param AC\Groups $groups
         */
        public function register_column_groups($groups)
        {
        }
        public function add_product_columns(\AC\ListScreen $list_screen)
        {
        }
        public function add_user_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    final class Rounding implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        protected function get_ajax_handler()
        {
        }
        public function ajax_send_feedback()
        {
        }
    }
}
namespace ACA\WC\ConditionalFormat\Formatter\ShopOrder {
    class TaxFormatter implements \ACP\ConditionalFormat\Formatter
    {
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
}
namespace ACA\WC\ConditionalFormat\Formatter\User {
    class TotalSalesFormatter extends \ACP\ConditionalFormat\Formatter\FloatFormatter
    {
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
}
namespace ACA\WC\ConditionalFormat\Formatter\Product {
    class AvgOrderIntervalFormatter implements \ACP\ConditionalFormat\Formatter
    {
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
    class SaleFormatter implements \ACP\ConditionalFormat\Formatter
    {
        public function get_type() : string
        {
        }
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
}
namespace ACA\WC\ConditionalFormat\Formatter\ProductVariation {
    class PriceFormatter extends \ACP\ConditionalFormat\Formatter\FloatFormatter
    {
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
}
namespace ACA\WC\ConditionalFormat\Formatter {
    class PriceFormatter extends \ACP\ConditionalFormat\Formatter\FloatFormatter
    {
        public function format(string $value, int $id, \AC\Column $column, string $operator_group) : string
        {
        }
    }
}
namespace AC {
    class Screen implements \AC\Registerable
    {
        /**
         * @var WP_Screen
         */
        protected $screen;
        public function register()
        {
        }
        /**
         * @param WP_Screen $screen
         */
        public function init(\WP_Screen $screen)
        {
        }
        /**
         * @param $id
         *
         * @return bool
         */
        public function is_screen($id)
        {
        }
        /**
         * @param WP_Screen $screen
         *
         * @return $this
         */
        public function set_screen(\WP_Screen $screen)
        {
        }
        /**
         * @return WP_Screen
         */
        public function get_screen()
        {
        }
        /**
         * @return bool
         */
        public function has_screen()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_base()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @return string|null
         */
        public function get_list_screen()
        {
        }
        /**
         * @return bool
         */
        private function is_admin_network()
        {
        }
        /**
         * @return bool
         */
        public function is_list_screen()
        {
        }
        /**
         * Check if current screen is plugins screen
         * @return bool
         */
        public function is_plugin_screen()
        {
        }
        /**
         * @param string|null $slug
         *
         * @return bool
         */
        public function is_admin_screen($slug = null)
        {
        }
        /**
         * @return bool
         */
        private function is_main_admin_screen()
        {
        }
    }
}
namespace AC\Storage {
    class UserColumnOrder
    {
        /**
         * @var Site
         */
        private $user_preference;
        public function __construct()
        {
        }
        /**
         * @param array $column_names
         */
        public function save(\AC\Type\ListScreenId $id, array $column_names)
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return bool
         */
        public function exists(\AC\Type\ListScreenId $id)
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return array
         */
        public function get(\AC\Type\ListScreenId $id)
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return void
         */
        public function delete(\AC\Type\ListScreenId $id)
        {
        }
    }
    final class Transaction
    {
        const START = 1;
        const COMMIT = 2;
        const ROLLBACK = 3;
        /**
         * @var bool
         */
        private $started = false;
        /**
         * @param bool $start Will start a transaction on creation if true
         */
        public function __construct($start = true)
        {
        }
        /**
         * @param integer $type
         */
        private function statement($type)
        {
        }
        /**
         * Start a MySQL transaction
         */
        public function start()
        {
        }
        /**
         * Commit a MySQL transaction
         */
        public function commit()
        {
        }
        /**
         * Rollback a MySQL transaction
         */
        public function rollback()
        {
        }
    }
    class ListScreenOrder
    {
        const KEY = 'ac_list_screens_order';
        public function get($key)
        {
        }
        public function set($key, array $list_screen_ids)
        {
        }
        public function add($key, $id)
        {
        }
        private function get_data()
        {
        }
    }
    interface KeyValueFactory
    {
        /**
         * @param string $key
         *
         * @return KeyValuePair
         */
        public function create($key);
    }
    class NetworkOptionFactory implements \AC\Storage\KeyValueFactory
    {
        public function create($key)
        {
        }
    }
    class UserMeta implements \AC\Storage\KeyValuePair
    {
        const OPTION_SINGLE = 'single';
        /**
         * @var int
         */
        protected $user_id;
        /**
         * @var string
         */
        protected $key;
        /**
         * @param int    $user_id
         * @param string $key
         *
         * @throws LogicException
         */
        public function __construct($key, $user_id = null)
        {
        }
        /**
         * @param array $args
         *
         * @return mixed
         */
        public function get(array $args = [])
        {
        }
        /**
         * @param $value
         *
         * @return bool|int
         */
        public function save($value)
        {
        }
        /**
         * @return bool
         */
        public function delete()
        {
        }
    }
    class SiteOption implements \AC\Storage\KeyValuePair
    {
        const OPTION_DEFAULT = 'default';
        /**
         * @var string
         */
        protected $key;
        /**
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * @param array $args
         *
         * @return mixed
         */
        public function get(array $args = [])
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        public function save($value)
        {
        }
        /**
         * @return bool
         */
        public function delete()
        {
        }
    }
    class ListColumnOrder
    {
        /**
         * @var ListScreenRepository
         */
        private $list_screen_repository;
        public function __construct(\AC\ListScreenRepository $list_screen_repository)
        {
        }
        /**
         * @param ListScreenId $list_id
         * @param array        $column_names
         */
        public function save(\AC\Type\ListScreenId $list_id, array $column_names)
        {
        }
    }
    class OptionFactory implements \AC\Storage\KeyValueFactory
    {
        public function create($key)
        {
        }
    }
    final class Timestamp implements \AC\Storage\KeyValuePair, \AC\Expirable
    {
        /**
         * @var KeyValuePair
         */
        private $storage;
        /**
         * @param KeyValuePair $storage
         */
        public function __construct(\AC\Storage\KeyValuePair $storage)
        {
        }
        /**
         * @param int|null $time
         *
         * @return bool
         */
        public function is_expired($time = null)
        {
        }
        /**
         * @param int $value
         *
         * @return bool
         */
        public function validate($value)
        {
        }
        /**
         * @param array $args
         *
         * @return mixed
         */
        public function get(array $args = [])
        {
        }
        public function delete()
        {
        }
        /**
         * @param int $value
         *
         * @return bool
         * @throws LogicException
         */
        public function save($value)
        {
        }
    }
}
namespace AC {
    abstract class Relation
    {
        /**
         * @var string
         */
        protected $id;
        /**
         * @param string $id
         */
        public function __construct($id)
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public abstract function get_type();
        /**
         * @return false|object
         */
        public abstract function get_labels();
    }
}
namespace AC\Relation {
    class Taxonomy extends \AC\Relation
    {
        /**
         * @var object
         */
        private $taxonomy;
        public function __construct($id)
        {
        }
        public function get_type()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_labels()
        {
        }
    }
    class Post extends \AC\Relation
    {
        /**
         * @var object
         */
        private $post_type_object;
        public function __construct($id)
        {
        }
        public function get_type()
        {
        }
        /**
         * @return WP_Post_Type
         */
        public function get_post_type_object()
        {
        }
        public function get_labels()
        {
        }
    }
}
namespace AC\Service {
    final class Colors implements \AC\Registerable
    {
        private $shipped_colors_updater;
        private $style_injector;
        public function __construct(\AC\Admin\Colors\Shipped\ColorUpdater $shipped_colors_updater, \AC\Admin\Colors\StyleInjector $style_injector)
        {
        }
        public function register() : void
        {
        }
    }
    final class IntegrationColumns implements \AC\Registerable
    {
        /**
         * @var IntegrationRepository
         */
        private $repository;
        public function __construct(\AC\IntegrationRepository $repository)
        {
        }
        public function register()
        {
        }
        public function register_integration_columns(\AC\ListScreen $list_screen)
        {
        }
    }
    class NoticeChecks implements \AC\Registerable
    {
        /**
         * @var Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        /**
         * @return Registerable[]
         */
        private function get_checks()
        {
        }
    }
    final class Setup implements \AC\Registerable
    {
        /**
         * @var Plugin\Setup
         */
        private $setup;
        public function __construct(\AC\Plugin\Setup $setup)
        {
        }
        public function register()
        {
        }
        public function run()
        {
        }
    }
}
namespace AC {
    class PluginUpdate
    {
        /**
         * @var Version
         */
        private $version;
        /**
         * @var string|null
         */
        private $package;
        public function __construct(\AC\Plugin\Version $version, $package = null)
        {
        }
        public function get_version()
        {
        }
        public function has_package()
        {
        }
        public function get_package()
        {
        }
    }
    class Transient implements \AC\Expirable
    {
        /**
         * @var Storage\Option
         */
        protected $option;
        /**
         * @var Storage\Timestamp
         */
        protected $timestamp;
        public function __construct($key, $network_only = false)
        {
        }
        /**
         * @param int|null $value
         *
         * @return bool
         */
        public function is_expired($value = null)
        {
        }
        /**
         * @return bool
         */
        public function has_expiration_time()
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        public function delete()
        {
        }
        /**
         * @param mixed $data
         * @param int   $expiration Time until expiration in seconds.
         *
         * @return bool
         * @throws LogicException
         */
        public function save($data, $expiration)
        {
        }
    }
}
namespace AC\Transient {
    class User extends \AC\Transient
    {
        /**
         * @param string $key
         */
        public function __construct($key)
        {
        }
    }
}
namespace AC\ColumnSize {
    class UserStorage
    {
        const OPTION_UNIT = 'unit';
        const OPTION_VALUE = 'value';
        /**
         * @var UserPreference
         */
        private $user_preference;
        public function __construct(\AC\ColumnSize\UserPreference $user_preference)
        {
        }
        /**
         * @param ListScreenId $list_id
         * @param string       $column_name
         * @param ColumnWidth  $column_width
         */
        public function save(\AC\Type\ListScreenId $list_id, $column_name, \AC\Type\ColumnWidth $column_width)
        {
        }
        public function exists(\AC\Type\ListScreenId $list_id)
        {
        }
        /**
         * @param ListScreenId $list_id
         * @param string       $column_name
         *
         * @return ColumnWidth|null
         */
        public function get(\AC\Type\ListScreenId $list_id, $column_name)
        {
        }
        /**
         * @param ListScreenId $list_id
         *
         * @return ColumnWidth[]
         */
        public function get_all(\AC\Type\ListScreenId $list_id)
        {
        }
        /**
         * @param ListScreenId $list_id
         * @param string       $column_name
         */
        public function delete(\AC\Type\ListScreenId $list_id, $column_name)
        {
        }
        /**
         * @param ListScreenId $list_id
         */
        public function delete_by_list_id(\AC\Type\ListScreenId $list_id)
        {
        }
    }
    class ListStorage
    {
        /**
         * @var ListScreenRepository
         */
        private $list_screen_repository;
        public function __construct(\AC\ListScreenRepository $list_screen_repository)
        {
        }
        /**
         * @param ListScreenId $list_id
         * @param string       $column_name
         * @param ColumnWidth  $column_width
         */
        public function save(\AC\Type\ListScreenId $list_id, $column_name, \AC\Type\ColumnWidth $column_width)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return ColumnWidth[]
         */
        public function get_all(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param ListScreen $list_screen
         * @param string     $column_name
         *
         * @return ColumnWidth|null
         */
        public function get(\AC\ListScreen $list_screen, $column_name)
        {
        }
    }
    class UserPreference extends \AC\Preferences\Site
    {
        public function __construct($user_id = null)
        {
        }
    }
}
namespace AC {
    abstract class Promo
    {
        /**
         * @var string
         */
        private $slug;
        /**
         * @var string
         */
        private $title;
        /**
         * @var int
         */
        private $discount;
        /**
         * @var DateRange
         */
        private $date_range;
        public function __construct($slug, $title, $discount, \AC\Type\DateRange $date_range)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return int
         */
        public function get_discount()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return AC\Type\Url
         */
        public function get_url()
        {
        }
        /**
         * @return Type\DateRange
         */
        public function get_date_range()
        {
        }
        /**
         * @return bool True when promo is active
         */
        public function is_active()
        {
        }
    }
}
namespace AC\ListScreenRepository {
    interface Sort
    {
        /**
         * @param ListScreenCollection $list_screens
         *
         * @return ListScreenCollection
         */
        public function sort(\AC\ListScreenCollection $list_screens);
    }
}
namespace AC\ListScreenRepository\Storage {
    class ListScreenRepository implements \AC\ListScreenRepositoryWritable, \AC\ListScreenRepository\SourceAware
    {
        /**
         * @var AC\ListScreenRepository
         */
        private $repository;
        /**
         * @var bool
         */
        private $writable;
        /**
         * @var Rules
         */
        private $rules;
        /**
         * @param AC\ListScreenRepository $repository
         * @param bool|null               $writable
         * @param Rules|null              $rules
         */
        public function __construct(\AC\ListScreenRepository $repository, $writable = null, \AC\ListScreenRepository\Rules $rules = null)
        {
        }
        /**
         * @return bool
         */
        public function is_writable()
        {
        }
        /**
         * @param bool $writable
         *
         * @return self
         */
        public function with_writable($writable)
        {
        }
        /**
         * @return Rules
         */
        public function get_rules()
        {
        }
        /**
         * @return bool
         */
        public function has_rules()
        {
        }
        public function find(\AC\Type\ListScreenId $id)
        {
        }
        public function exists(\AC\Type\ListScreenId $id)
        {
        }
        public function find_all(array $args = [])
        {
        }
        public function save(\AC\ListScreen $list_screen)
        {
        }
        public function delete(\AC\ListScreen $list_screen)
        {
        }
        public function get_source(\AC\Type\ListScreenId $id)
        {
        }
        public function has_source(\AC\Type\ListScreenId $id)
        {
        }
    }
}
namespace AC\ListScreenRepository {
    interface Filter
    {
        /**
         * @param ListScreenCollection $list_screens
         *
         * @return ListScreenCollection
         */
        public function filter(\AC\ListScreenCollection $list_screens);
    }
}
namespace AC\ListScreenRepository\Filter {
    class Permission implements \AC\ListScreenRepository\Filter
    {
        /**
         * @var PermissionChecker
         */
        protected $permission_checker;
        public function __construct(\AC\PermissionChecker $permission_checker)
        {
        }
        public function filter(\AC\ListScreenCollection $list_screens)
        {
        }
    }
    class HasKey implements \AC\ListScreenRepository\Filter
    {
        /**
         * @var string
         */
        private $key;
        public function __construct($key)
        {
        }
        public function filter(\AC\ListScreenCollection $list_screens)
        {
        }
    }
    class ExcludeNetwork implements \AC\ListScreenRepository\Filter
    {
        public function filter(\AC\ListScreenCollection $list_screens)
        {
        }
    }
    class Network implements \AC\ListScreenRepository\Filter
    {
        const KEYS = ['wp-ms_sites', 'wp-ms_users'];
        public function filter(\AC\ListScreenCollection $list_screens)
        {
        }
    }
}
namespace AC\ListScreenRepository\Sort {
    class ManualOrder implements \AC\ListScreenRepository\Sort
    {
        /**
         * @var Storage\ListScreenOrder
         */
        private $list_screen_order;
        public function __construct()
        {
        }
        public function sort(\AC\ListScreenCollection $list_screens)
        {
        }
    }
    class Label implements \AC\ListScreenRepository\Sort
    {
        public function sort(\AC\ListScreenCollection $list_screens)
        {
        }
    }
}
namespace AC\ListScreenRepository {
    final class Database implements \AC\ListScreenRepositoryWritable
    {
        const TABLE = 'admin_columns';
        /**
         * @var ListScreenTypes
         */
        private $list_screen_types;
        public function __construct(\AC\ListScreenTypes $list_screen_types)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function find_all_from_database(array $args = [])
        {
        }
        /**
         * @param array $args
         *
         * @return ListScreenCollection
         */
        public function find_all(array $args = [])
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return object|null
         */
        private function find_from_database(\AC\Type\ListScreenId $id)
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return ListScreen|null
         */
        public function find(\AC\Type\ListScreenId $id)
        {
        }
        /**
         * @param ListScreenId $list_screen_id
         *
         * @return bool
         */
        public function exists(\AC\Type\ListScreenId $list_screen_id)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return void
         */
        public function save(\AC\ListScreen $list_screen)
        {
        }
        public function delete(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param $data
         *
         * @return ListScreen
         */
        private function create_list_screen($data)
        {
        }
    }
    interface Rule
    {
        const TYPE = 'type';
        const ID = 'id';
        const GROUP = 'group';
        /**
         * @param array $args
         *
         * @return bool
         */
        public function match(array $args);
    }
}
namespace AC\ListScreenRepository\Rule {
    class EqualGroup implements \AC\ListScreenRepository\Rule
    {
        /**
         * @var string
         */
        private $group;
        /**
         * @param string $group
         */
        public function __construct($group)
        {
        }
        public function match(array $args)
        {
        }
    }
    class EqualId implements \AC\ListScreenRepository\Rule
    {
        /**
         * @var ListScreenId
         */
        private $id;
        public function __construct(\AC\Type\ListScreenId $id)
        {
        }
        public function match(array $args)
        {
        }
    }
    class EqualType implements \AC\ListScreenRepository\Rule
    {
        /**
         * @var string
         */
        private $type;
        /**
         * @param string $type
         */
        public function __construct($type)
        {
        }
        public function match(array $args)
        {
        }
    }
}
namespace AC\ListScreenRepository {
    final class Storage implements \AC\ListScreenRepositoryWritable
    {
        const ARG_FILTER = 'filter';
        const ARG_SORT = 'sort';
        /**
         * @var Storage\ListScreenRepository[]
         */
        private $repositories = [];
        /**
         * @return Storage\ListScreenRepository[]
         */
        public function get_repositories()
        {
        }
        public function set_repositories(array $repositories)
        {
        }
        public function has_repository($key)
        {
        }
        public function get_repository($key)
        {
        }
        /**
         * @param array $args
         *
         * @return ListScreenCollection
         */
        public function find_all(array $args = [])
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return ListScreen|null
         */
        public function find(\AC\Type\ListScreenId $id)
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return bool
         */
        public function exists(\AC\Type\ListScreenId $id)
        {
        }
        public function save(\AC\ListScreen $list_screen)
        {
        }
        public function delete(\AC\ListScreen $list_screen)
        {
        }
        private function get_writable_repositories(\AC\ListScreen $list_screen)
        {
        }
    }
    final class Rules
    {
        const MATCH_ALL = 'all';
        const MATCH_ANY = 'any';
        /**
         * @var string
         */
        private $match_decision;
        /**
         * @var Rule[]
         */
        private $rules = [];
        public function __construct($match_decision = null)
        {
        }
        private function validate()
        {
        }
        /**
         * @param Rule $rule
         *
         * @return $this
         */
        public function add_rule(\AC\ListScreenRepository\Rule $rule)
        {
        }
        public function match(array $args)
        {
        }
    }
}
namespace AC\Preferences {
    class User extends \AC\Preferences
    {
        /**
         * @return bool
         */
        public function save()
        {
        }
        /**
         * @return false|array
         */
        protected function load()
        {
        }
    }
    class Network extends \AC\Preferences\Site
    {
        protected function get_key()
        {
        }
    }
}
namespace AC {
    class ListScreenTypes
    {
        const ARG_NETWORK = 'network_only';
        const ARG_SITE = 'site_only';
        /** @var ListScreenTypes */
        private static $instance;
        /** @var ListScreen[] */
        private $list_screens = [];
        /**
         * @return ListScreenTypes
         */
        public static function instance()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return $this
         */
        public function register_list_screen(\AC\ListScreen $list_screen)
        {
        }
        public function get_list_screens(array $args = [])
        {
        }
        /**
         * @param ListScreen[] $list_screens
         *
         * @return ListScreen[]
         */
        private function filter_by_network(array $list_screens)
        {
        }
        /**
         * @param ListScreen[] $list_screens
         *
         * @return ListScreen[]
         */
        private function filter_by_non_network(array $list_screens)
        {
        }
        /**
         * @param string $key
         * @param bool   $network_only False is site only. True is network only.
         *
         * @return ListScreen|null
         */
        public function get_list_screen_by_key($key, $network_only = null)
        {
        }
    }
    final class ListScreenCollection implements \Iterator, \Countable
    {
        /**
         * @var ListScreen[]
         */
        private $data = [];
        public function __construct(array $list_screens = [])
        {
        }
        public function add(\AC\ListScreen $list_screen)
        {
        }
        public function remove(\AC\ListScreen $list_screen)
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * @return ListScreen
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        public function get_first()
        {
        }
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        /**
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return bool
         */
        public function contains(\AC\ListScreen $list_screen)
        {
        }
    }
    class Integrations extends \AC\ArrayIterator
    {
        /**
         * @return Integration[]
         */
        public function all()
        {
        }
        public function add(\AC\Integration $integration)
        {
        }
        public function exists()
        {
        }
    }
}
namespace AC\Type {
    class DateRange
    {
        /**
         * @var DateTime
         */
        private $start;
        /**
         * @var DateTime
         */
        private $end;
        public function __construct(\DateTime $start, \DateTime $end)
        {
        }
        /**
         * @return DateTime
         */
        public function get_start()
        {
        }
        /**
         * @return DateTime
         */
        public function get_end()
        {
        }
        /**
         * @param DateTime|null $date
         *
         * @return bool
         */
        public function in_range(\DateTime $date = null)
        {
        }
    }
    final class ToggleOptions
    {
        /**
         * @var Option
         */
        private $disabled;
        /**
         * @var Option
         */
        private $enabled;
        public function __construct(\AC\Helper\Select\Option $disabled, \AC\Helper\Select\Option $enabled)
        {
        }
        /**
         * @return Option
         */
        public function get_enabled()
        {
        }
        /**
         * @return Option
         */
        public function get_disabled()
        {
        }
        public static function create_from_array(array $options) : self
        {
        }
    }
    final class UserId
    {
        private $id;
        public function __construct(int $id)
        {
        }
        private function validate() : void
        {
        }
        public function get_value() : int
        {
        }
        public function __toString() : string
        {
        }
    }
    class ColumnWidth
    {
        /**
         * @var string
         */
        private $unit;
        /**
         * @var int
         */
        private $value;
        public function __construct($unit, $value)
        {
        }
        private function validate()
        {
        }
        /**
         * @return string
         */
        public function get_unit()
        {
        }
        /**
         * @return int
         */
        public function get_value()
        {
        }
    }
    final class ListScreenId
    {
        /**
         * @var string
         */
        private $id;
        /**
         * @param string $id
         */
        public function __construct($id)
        {
        }
        public static function is_valid_id($id)
        {
        }
        /**
         * @return self
         */
        public static function generate()
        {
        }
        public function get_id()
        {
        }
        /**
         * @param ListScreenId $id
         *
         * @return bool
         */
        public function equals(\AC\Type\ListScreenId $id)
        {
        }
        public function __toString() : string
        {
        }
    }
}
namespace AC\Type\Url {
    class WordpressPluginRepo implements \AC\Type\Url
    {
        /**
         * @var string
         */
        private $handle;
        public function __construct()
        {
        }
        public function get_handle() : string
        {
        }
        public function get_url()
        {
        }
    }
    trait Fragment
    {
        /**
         * @var string
         */
        protected $fragment;
        /**
         * @param string $path
         */
        protected function set_fragment($fragment)
        {
        }
        /**
         * @return string
         */
        protected function get_fragment()
        {
        }
        /**
         * @return bool
         */
        protected function has_fragment()
        {
        }
    }
    class Editor implements \AC\Type\QueryAware
    {
        use \AC\Type\QueryAwareTrait;
        public function __construct($slug = null)
        {
        }
    }
    trait Path
    {
        /**
         * @var string
         */
        protected $path;
        /**
         * @param string $path
         */
        protected function set_path($path)
        {
        }
        /**
         * @return string
         */
        protected function get_path()
        {
        }
    }
    class Site implements \AC\Type\Url
    {
        use \AC\Type\Url\Path;
        const URL = 'https://www.admincolumns.com';
        const PAGE_PRICING = '/pricing-purchase';
        const PAGE_ABOUT_PRO = '/admin-columns-pro';
        const PAGE_FEATURES = '/features';
        const PAGE_ACCOUNT_SUBSCRIPTIONS = '/my-account/subscriptions';
        const PAGE_FORUM = '/topics';
        const PAGE_FORUM_BETA = '/forums/forum/beta-feedback/';
        const PAGE_ADDON_ACF = '/advanced-custom-fields';
        const PAGE_ADDON_BUDDYPRESS = '/buddypress';
        const PAGE_ADDON_GRAVITYFORMS = '/gravity-forms';
        const PAGE_ADDON_EVENTS_CALENDAR = '/events-calendar';
        const PAGE_ADDON_METABOX = '/meta-box-integration';
        const PAGE_ADDON_JETENGINE = '/jetengine';
        const PAGE_ADDON_NINJA_FORMS = '/ninja-forms';
        const PAGE_ADDON_PODS = '/pods';
        const PAGE_ADDON_TOOLSET_TYPES = '/toolset-types';
        const PAGE_ADDON_WOOCOMMERCE = '/woocommerce-columns';
        const PAGE_ADDON_YOAST_SEO = '/yoast-seo';
        /**
         * @param string $path
         */
        public function __construct($path = null)
        {
        }
        public function get_url()
        {
        }
    }
    class Tweet implements \AC\Type\QueryAware
    {
        public const TWITTER_HANDLE = 'admincolumns';
        use \AC\Type\QueryAwareTrait;
        public function __construct(string $text, \AC\Type\Url $url, string $via, string $hastags)
        {
        }
    }
    class Documentation implements \AC\Type\Url
    {
        use \AC\Type\Url\Path, \AC\Type\Url\Fragment;
        private const URL = 'https://docs.admincolumns.com';
        public const ARTICLE_ACF_UPGRADE_V2_TO_V3 = '/article/103-how-to-upgrade-the-acf-integration-from-v2-to-v3';
        public const ARTICLE_ACTIONS_FILTERS = '/article/15-hooks-and-filters';
        public const ARTICLE_BULK_EDITING = '/article/67-how-to-use-bulk-editing';
        public const ARTICLE_COLUMN_SETS = '/article/72-how-to-create-column-sets';
        public const ARTICLE_CONDITIONAL_FORMATTING = '/article/108-how-to-use-conditional-formatting';
        public const ARTICLE_CUSTOM_FIELD = '/article/59-custom-field-columns';
        public const ARTICLE_CUSTOM_FIELD_EDITING = '/article/68-enable-editing-for-custom-field-columns';
        public const ARTICLE_ENABLE_EDITING = '/article/68-enable-editing-for-custom-field-columns';
        public const ARTICLE_EXPORT = '/article/69-how-to-use-export';
        public const ARTICLE_INLINE_EDITING = '/article/27-how-to-use-inline-editing';
        public const ARTICLE_LOCAL_STORAGE = '/article/58-how-to-setup-local-storage';
        public const ARTICLE_QUICK_ADD = '/article/71-how-to-use-quick-add';
        public const ARTICLE_SAVED_FILTERS = '/article/73-how-to-use-saved-filters';
        public const ARTICLE_SHOW_ALL_SORTING_RESULTS = '/article/86-show-all-results-when-sorting';
        public const ARTICLE_SMART_FILTERING = '/article/61-how-to-use-smart-filtering';
        public const ARTICLE_SORTING = '/article/34-how-to-enable-sorting';
        public const ARTICLE_SUBSCRIPTION_QUESTIONS = '/article/96-subscription-or-license-questions';
        public const ARTICLE_UPGRADE_V3_TO_V4 = '/article/91-how-to-upgrade-from-v3-to-v4';
        public const ARTICLE_RELEASE_6 = '/article/109-admin-columns-pro-6-0-changes';
        /**
         * @param string $path
         */
        public function __construct($path = null, $fragment = null)
        {
        }
        public function get_url()
        {
        }
        public static function create_with_path($path)
        {
        }
        public function __toString()
        {
        }
    }
    class CouponCode implements \AC\Type\QueryAware
    {
        use \AC\Type\QueryAwareTrait;
        const ARG_COUPON = 'coupon_code';
        public function __construct($url, $coupon_code)
        {
        }
        public function add_coupon_code($coupon_code)
        {
        }
    }
    class UtmTags implements \AC\Type\QueryAware
    {
        use \AC\Type\QueryAwareTrait;
        const ARG_SOURCE = 'utm_source';
        const ARG_MEDIUM = 'utm_medium';
        const ARG_CONTENT = 'utm_content';
        const ARG_CAMPAIGN = 'utm_campaign';
        public function __construct(\AC\Type\Url $url, $medium, $content = null, $campaign = null)
        {
        }
        public function add_medium($medium)
        {
        }
        public function add_content($content)
        {
        }
        public function add_campaign($campaign)
        {
        }
    }
    class EditorNetwork implements \AC\Type\QueryAware
    {
        use \AC\Type\QueryAwareTrait;
        public function __construct($slug = null)
        {
        }
    }
    class WordpressPluginReview implements \AC\Type\Url
    {
        /**
         * @var string
         */
        private $handle;
        public function __construct()
        {
        }
        public function get_handle() : string
        {
        }
        public function get_url()
        {
        }
    }
}
namespace AC\Type {
    class EditorUrlFactory
    {
        /**
         * @param string|null $slug
         *
         * @return Url
         */
        public static function create($slug = null)
        {
        }
    }
}
namespace AC\Promo {
    class BlackFriday extends \AC\Promo
    {
        /**
         * @var string
         */
        private $coupon_code;
        public function __construct(\AC\Type\DateRange $date_range, $coupon_code = null)
        {
        }
        public function get_url()
        {
        }
    }
}
namespace AC {
    /**
     * Show a notice when plugin dependencies are not met
     */
    final class Dependencies
    {
        /**
         * @var string
         */
        private $basename;
        /**
         * @var string
         */
        private $version;
        /**
         * Missing dependency messages
         * @var string[]
         */
        private $messages = [];
        public function __construct(string $basename, string $version)
        {
        }
        public function get_basename() : string
        {
        }
        public function get_version() : string
        {
        }
        private function register() : void
        {
        }
        public function add_missing(string $message, string $key) : void
        {
        }
        public function add_missing_plugin(string $plugin, string $url = null, string $version = null) : void
        {
        }
        private function get_missing_plugin_message(string $plugin, string $url = null, string $version = null) : string
        {
        }
        public function has_missing() : bool
        {
        }
        private function sanitize_message(string $message) : string
        {
        }
        public function requires_php(string $version) : bool
        {
        }
        /**
         * URL that performs a search in the WordPress repository
         */
        public function get_search_url(string $keywords) : string
        {
        }
        private function is_plugin_active() : bool
        {
        }
        /**
         * Show a warning when dependencies are not met
         */
        public function display_notice() : void
        {
        }
        public function display_notice_css() : void
        {
        }
    }
    /**
     * Class AC\Helper
     * Implements __call to work around any keyword restrictions for PHP versions > 7
     * @property Helper\Arrays   array
     * @property Helper\Date     date
     * @property Helper\Image    image
     * @property Helper\Post     post
     * @property Helper\Menu     menu
     * @property Helper\Strings  string
     * @property Helper\Taxonomy taxonomy
     * @property Helper\User     user
     * @property Helper\Icon     icon
     * @property Helper\Html     html
     * @property Helper\Media    media
     * @property Helper\Network  network
     * @property Helper\File     file
     */
    final class Helper
    {
        public function __get($helper)
        {
        }
    }
    abstract class Message
    {
        const SUCCESS = 'updated';
        const ERROR = 'notice-error';
        const WARNING = 'notice-warning';
        const INFO = 'notice-info';
        /**
         * @var string
         */
        protected $message;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $id;
        /**
         * @param string $message
         */
        public function __construct($message, $type = null)
        {
        }
        protected function validate()
        {
        }
        /**
         * Render an View
         * @return string
         */
        public abstract function render();
        /**
         * Display self::render to the screen
         * @throws Exception
         */
        public function display()
        {
        }
        /**
         * @return string
         */
        public function get_message()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @param string $type
         *
         * @return $this
         */
        public function set_type($type)
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @param string $id
         *
         * @return $this
         */
        public function set_id($id)
        {
        }
    }
}
namespace AC\Message {
    class InlineMessage extends \AC\Message
    {
        /**
         * @var string|null
         */
        private $class;
        public function __construct($message, $type = null, $class = null)
        {
        }
        public function render()
        {
        }
    }
    class Notice extends \AC\Message implements \AC\Registerable
    {
        public function render()
        {
        }
        public function register()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace AC\Message\Notice {
    class Dismissible extends \AC\Message\Notice
    {
        /**
         * @var Handler
         */
        protected $handler;
        /**
         * @param string       $message
         * @param Handler|null $handler
         */
        public function __construct($message, \AC\Ajax\Handler $handler = null)
        {
        }
        public function render()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace AC\Message {
    class Plugin extends \AC\Message
    {
        /**
         * @var string
         */
        protected $plugin_basename;
        /**
         * @var string
         */
        protected $icon;
        /**
         * @param string $message
         * @param string $plugin_basename
         * @param string $type
         */
        public function __construct($message, $plugin_basename, $type = null)
        {
        }
        public function register()
        {
        }
        public function render()
        {
        }
        /**
         * @return string
         */
        protected function get_icon_by_current_type()
        {
        }
        /**
         * Set the icon of this notice
         *
         * @param string $icon
         *
         * @return $this
         */
        public function set_icon($icon)
        {
        }
    }
}
namespace AC {
    class PromoCollection extends \AC\ArrayIterator
    {
        public function __construct()
        {
        }
        /**
         * Returns the first active promotion it finds
         * @return Promo|null
         */
        public function find_active()
        {
        }
    }
}
namespace AC\ColumnRepository\Sort {
    class ManualOrder implements \AC\ColumnRepository\Sort
    {
        /**
         * @var ListScreenId
         */
        private $list_id;
        /**
         * @var Storage\UserColumnOrder
         */
        private $user_order;
        public function __construct(\AC\Type\ListScreenId $list_id)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function sort(array $columns) : array
        {
        }
    }
}
namespace AC\Settings\Column {
    class PostFormatIcon extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var bool
         */
        private $use_icon;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_use_icon()
        {
        }
        /**
         * @param $use_icon
         *
         * @return bool
         */
        public function set_use_icon($use_icon)
        {
        }
        private function use_icon()
        {
        }
        /**
         * @param     $format
         * @param int $post_id
         *
         * @return string
         */
        public function format($format, $post_id)
        {
        }
    }
    class WordLimit extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var int
         */
        private $excerpt_length;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_excerpt_length()
        {
        }
        /**
         * @param int $excerpt_length
         *
         * @return bool
         */
        public function set_excerpt_length($excerpt_length)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class MissingImageSize extends \AC\Settings\Column
    {
        private $include_missing_sizes;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_include_missing_sizes()
        {
        }
        /**
         * @param int $include_missing_sizes
         *
         * @return bool
         */
        public function set_include_missing_sizes($include_missing_sizes)
        {
        }
    }
    class Term extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'term';
        /**
         * @var string
         */
        private $term_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_term_property()
        {
        }
        /**
         * @param string $term_property
         *
         * @return bool
         */
        public function set_term_property($term_property)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    abstract class Pro extends \AC\Settings\Column
    {
        /**
         * @return string
         */
        protected abstract function get_label();
        /**
         * @return View
         */
        protected abstract function get_instructions();
        public function create_view()
        {
        }
    }
}
namespace AC\Settings\Column\Pro {
    class BulkEditing extends \AC\Settings\Column\Pro
    {
        protected function get_label()
        {
        }
        protected function get_instructions()
        {
        }
        protected function define_options()
        {
        }
    }
    class Sorting extends \AC\Settings\Column\Pro
    {
        protected function get_label()
        {
        }
        protected function get_instructions()
        {
        }
        protected function define_options()
        {
        }
    }
    class InlineEditing extends \AC\Settings\Column\Pro
    {
        protected function get_label()
        {
        }
        protected function get_instructions()
        {
        }
        protected function define_options()
        {
        }
    }
    class SmartFiltering extends \AC\Settings\Column\Pro
    {
        protected function get_label()
        {
        }
        protected function get_instructions()
        {
        }
        protected function define_options()
        {
        }
    }
    class Export extends \AC\Settings\Column\Pro
    {
        protected function get_label()
        {
        }
        protected function get_instructions()
        {
        }
        protected function define_options()
        {
        }
    }
}
namespace AC\Settings\Column {
    class FileMeta extends \AC\Settings\Column
    {
        const NAME = 'media_meta';
        /**
         * @var string
         */
        private $media_meta_key;
        /**
         * @var array
         */
        private $meta_options;
        /**
         * @var string
         */
        private $default_option;
        public function __construct(\AC\Column $column, array $meta_options, $default_option)
        {
        }
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_media_meta_key()
        {
        }
        /**
         * @param string $media_meta_key
         *
         * @return bool
         */
        public function set_media_meta_key($media_meta_key)
        {
        }
        /**
         * @return array
         */
        public function get_media_meta_keys()
        {
        }
    }
    class Taxonomy extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $taxonomy;
        /**
         * @var string
         */
        private $post_type;
        public function __construct(\AC\Column $column, $post_type = null)
        {
        }
        /**
         * @return string
         */
        protected function get_post_type()
        {
        }
        protected function define_options()
        {
        }
        /**
         * @return View
         */
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_taxonomy()
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return bool
         */
        public function set_taxonomy($taxonomy)
        {
        }
    }
    class NumberOfItems extends \AC\Settings\Column
    {
        const NAME = 'number_of_items';
        /**
         * @var string
         */
        private $number_of_items;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_number_of_items()
        {
        }
        /**
         * @param string $number_of_items
         *
         * @return bool
         */
        public function set_number_of_items($number_of_items)
        {
        }
    }
    class FileMetaAudio extends \AC\Settings\Column\FileMeta implements \AC\Settings\FormatValue
    {
        public function __construct(\AC\Column $column)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class PathScope extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $path_scope;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_path_scope()
        {
        }
        /**
         * @param string $path_scope
         *
         * @return bool
         */
        public function set_path_scope($path_scope)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class Images extends \AC\Settings\Column\Image
    {
        protected function set_name()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class ActionIcons extends \AC\Settings\Column
    {
        private $use_icons;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_use_icons()
        {
        }
        /**
         * @param int $use_icons
         *
         * @return bool
         */
        public function set_use_icons($use_icons)
        {
        }
    }
    class BeforeAfter extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'before_after';
        /**
         * @var string
         */
        private $before;
        /**
         * @var string
         */
        private $after;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        protected function get_before_element()
        {
        }
        protected function get_after_element()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_before()
        {
        }
        /**
         * @param $before
         *
         * @return bool
         */
        public function set_before($before)
        {
        }
        /**
         * @return string
         */
        public function get_after()
        {
        }
        /**
         * @param $after
         *
         * @return bool
         */
        public function set_after($after)
        {
        }
    }
}
namespace AC\Settings\Column\BeforeAfter {
    class Aperture extends \AC\Settings\Column\BeforeAfter
    {
        protected function define_options()
        {
        }
    }
    class ShutterSpeed extends \AC\Settings\Column\BeforeAfter
    {
        protected function define_options()
        {
        }
    }
    class ISO extends \AC\Settings\Column\BeforeAfter
    {
        protected function define_options()
        {
        }
    }
    class FocalLength extends \AC\Settings\Column\BeforeAfter
    {
        protected function define_options()
        {
        }
    }
}
namespace AC\Settings\Column {
    class FileMetaVideo extends \AC\Settings\Column\FileMeta implements \AC\Settings\FormatValue
    {
        public function __construct(\AC\Column $column)
        {
        }
        private function wrap_audio_string($string)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class MediaLink extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        protected $media_link_to;
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
        protected function get_link_options()
        {
        }
        /**
         * @return string
         */
        public function get_media_link_to()
        {
        }
        /**
         * @param string $media_link_to
         *
         * @return bool
         */
        public function set_media_link_to($media_link_to)
        {
        }
    }
    class ExifData extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'exif_data';
        /**
         * @var string
         */
        private $exif_datatype;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * Get EXIF data
         * Get extended image metadata
         * @return array EXIF data types
         * @since 2.0
         */
        private function get_exif_types()
        {
        }
        /**
         * @return string
         */
        public function get_exif_datatype()
        {
        }
        /**
         * @param string $exif_datatype
         *
         * @return bool
         */
        public function set_exif_datatype($exif_datatype)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class CharacterLimit extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var int
         */
        private $character_limit;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_character_limit()
        {
        }
        /**
         * @param int $character_limit
         *
         * @return bool
         */
        public function set_character_limit($character_limit)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class StringLimit extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $string_limit;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        private function get_limit_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @return string
         */
        public function get_string_limit()
        {
        }
        /**
         * @param string $string_limit
         *
         * @return true
         */
        public function set_string_limit($string_limit)
        {
        }
    }
    class Message extends \AC\Settings\Column
    {
        private $label;
        private $message;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function set_label($label)
        {
        }
        public function set_message($message)
        {
        }
        public function create_view()
        {
        }
    }
    class PostType extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $post_type;
        /**
         * @var bool
         */
        private $show_any;
        public function __construct(\AC\Column $column, $show_any = false)
        {
        }
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        private function add_slug_to_duplicate_post_type_label($options)
        {
        }
        private function get_post_type_labels()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        /**
         * @param string $post_type
         *
         * @return true
         */
        public function set_post_type($post_type)
        {
        }
    }
    class Password extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $password;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_password()
        {
        }
        /**
         * @param string $password
         *
         * @return true
         */
        public function set_password($password)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class Type extends \AC\Settings\Column
    {
        /**
         * @var string
         */
        private $read_more_url;
        /**
         * @var string
         */
        private $type;
        protected function define_options()
        {
        }
        public function set_read_more($url)
        {
        }
        public function create_view()
        {
        }
        /**
         * Returns the type label as human readable: no tags, underscores and capitalized.
         *
         * @param AC\Column|null $column
         *
         * @return string
         */
        private function get_clean_label(\AC\Column $column)
        {
        }
        /**
         * @return Groups
         */
        private function column_groups()
        {
        }
        /**
         * @return array
         */
        private function get_grouped_columns()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function set_type($type)
        {
        }
    }
    class Width extends \AC\Settings\Column implements \AC\Settings\Header
    {
        /**
         * @var integer
         */
        private $width;
        /**
         * @var string
         */
        private $width_unit;
        protected function define_options()
        {
        }
        private function get_valid_width_units()
        {
        }
        private function is_valid_width_unit($width_unit)
        {
        }
        public function create_view()
        {
        }
        public function create_header_view()
        {
        }
        /**
         * @return ColumnWidth|null
         */
        public function get_column_width()
        {
        }
        /**
         * @return int
         */
        public function get_width()
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        public function set_width($value)
        {
        }
        /**
         * @return string
         */
        public function get_width_unit()
        {
        }
        /**
         * @param string $width_unit
         *
         * @return bool
         */
        public function set_width_unit($width_unit)
        {
        }
    }
    class StatusIcon extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var bool
         */
        private $use_icon;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_use_icon()
        {
        }
        /**
         * @param $use_icon
         *
         * @return bool
         */
        public function set_use_icon($use_icon)
        {
        }
        /**
         * @param string $status
         * @param int    $post_id
         *
         * @return string
         */
        public function format($status, $post_id)
        {
        }
    }
    /**
     * @since 3.0.8
     */
    class Comment extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'comment';
        const PROPERTY_COMMENT = 'comment';
        const PROPERTY_DATE = 'date';
        const PROPERTY_ID = 'id';
        const PROPERTY_AUTHOR = 'author';
        const PROPERTY_AUTHOR_EMAIL = 'author_email';
        /**
         * @var string
         */
        private $comment_property;
        protected function set_name()
        {
        }
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        /**
         * @param int   $id
         * @param mixed $original_value
         *
         * @return string|int
         */
        public function format($id, $original_value)
        {
        }
        /**
         * @param string $property
         * @param int    $id
         *
         * @return false|string
         */
        private function get_comment_property($property, $id)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_comment_property_display()
        {
        }
        /**
         * @param string $comment_property
         *
         * @return bool
         */
        public function set_comment_property_display($comment_property)
        {
        }
    }
    class AttachmentDisplay extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        private $attachment_display;
        protected function define_options()
        {
        }
        public function get_dependent_settings()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_attachment_display()
        {
        }
        /**
         * @param int $attachment_display
         *
         * @return bool
         */
        public function set_attachment_display($attachment_display)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class UserLink extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        const NAME = 'user_link_to';
        const PROPERTY_EDIT_USER = 'edit_user';
        const PROPERTY_VIEW_POSTS = 'view_user_posts';
        const PROPERTY_VIEW_AUTHOR = 'view_author';
        const PROPERTY_EMAIL = 'email_user';
        /**
         * @var string
         */
        protected $user_link_to;
        protected function define_options()
        {
        }
        public function format($value, $user_id)
        {
        }
        public function create_view()
        {
        }
        protected function get_display_options()
        {
        }
        /**
         * @return string
         */
        public function get_user_link_to()
        {
        }
        /**
         * @param string $user_link_to
         *
         * @return bool
         */
        public function set_user_link_to($user_link_to)
        {
        }
    }
    class LinkLabel extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $link_label;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_link_label()
        {
        }
        /**
         * @param string $link_label
         *
         * @return bool
         */
        public function set_link_label($link_label)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class VideoDisplay extends \AC\Settings\Column
    {
        private $video_display;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_video_display()
        {
        }
        /**
         * @param int $video_display
         *
         * @return bool
         */
        public function set_video_display($video_display)
        {
        }
    }
    /**
     * @since 3.4.6
     */
    class CommentLink extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        protected $comment_link_to;
        protected function define_options()
        {
        }
        public function format($value, $original_value)
        {
        }
        public function create_view()
        {
        }
        protected function get_link_options()
        {
        }
        /**
         * @return string
         */
        public function get_comment_link_to()
        {
        }
        /**
         * @param string $comment_link_to
         *
         * @return bool
         */
        public function set_comment_link_to($comment_link_to)
        {
        }
    }
    class PostStatus extends \AC\Settings\Column
    {
        const NAME = 'post_status';
        /**
         * @var array
         */
        private $post_status;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        private function get_post_status_label($key)
        {
        }
        /**
         * @return array
         */
        public function get_post_status()
        {
        }
        /**
         * @param array $post_status
         *
         * @return true
         */
        public function set_post_status($post_status)
        {
        }
    }
    class NumberFormat extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $number_format;
        /**
         * @var int
         */
        private $number_decimals;
        /**
         * @var string
         */
        private $number_decimal_point;
        /**
         * @var string
         */
        private $number_thousands_separator;
        protected function define_options()
        {
        }
        private function get_decimals_setting()
        {
        }
        private function get_decimal_point_setting()
        {
        }
        private function get_thousands_point_setting()
        {
        }
        private function get_preview_setting()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_number_format()
        {
        }
        /**
         * @param string $number_format
         *
         * @return NumberFormat
         */
        public function set_number_format($number_format)
        {
        }
        /**
         * @return string
         */
        public function get_number_decimals()
        {
        }
        /**
         * @param string $number_decimals
         *
         * @return NumberFormat
         */
        public function set_number_decimals($number_decimals)
        {
        }
        /**
         * @return string
         */
        public function get_number_decimal_point()
        {
        }
        /**
         * @param string $number_decimal_point
         *
         * @return NumberFormat
         */
        public function set_number_decimal_point($number_decimal_point)
        {
        }
        /**
         * @return string
         */
        public function get_number_thousands_separator()
        {
        }
        /**
         * @param string $number_thousands_separator
         *
         * @return NumberFormat
         */
        public function set_number_thousands_separator($number_thousands_separator)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
    class LinkToMenu extends \AC\Settings\Column\Toggle implements \AC\Settings\FormatValue
    {
        /**
         * @var string
         */
        private $link_to_menu;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return string
         */
        public function get_link_to_menu()
        {
        }
        /**
         * @param string $link_to_menu
         *
         * @return bool
         */
        public function set_link_to_menu($link_to_menu)
        {
        }
        /**
         * @param int[] $menu_ids
         * @param mixed $original_value
         *
         * @return false|string
         */
        public function format($menu_ids, $original_value)
        {
        }
    }
    class WordsPerMinute extends \AC\Settings\Column implements \AC\Settings\FormatValue
    {
        /**
         * @var int
         */
        private $words_per_minute;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        /**
         * @return int
         */
        public function get_words_per_minute()
        {
        }
        /**
         * @param int $words_per_minute
         *
         * @return $this
         */
        public function set_words_per_minute($words_per_minute)
        {
        }
        /**
         * Create a human readable time based on seconds
         *
         * @param int $seconds
         *
         * @return string
         * @since 3.0
         */
        protected function make_human_readable($seconds)
        {
        }
        /**
         * Return the seconds required to read this string based on average words per minute
         *
         * @param $string
         *
         * @return int
         */
        protected function get_estimated_reading_time_in_seconds($string)
        {
        }
        public function format($value, $original_value)
        {
        }
    }
}
namespace AC\Settings {
    interface FormatCollection
    {
        /**
         * @param Collection $collection
         * @param mixed      $original_value
         *
         * @return mixed
         */
        public function format(\AC\Collection $collection, $original_value);
    }
}
namespace AC\Settings\Column {
    class Separator extends \AC\Settings\Column implements \AC\Settings\FormatCollection
    {
        const NAME = 'separator';
        /**
         * @var string
         */
        private $separator;
        protected function define_options()
        {
        }
        public function create_view()
        {
        }
        public function get_separator()
        {
        }
        public function set_separator($separator)
        {
        }
        public function get_separator_formatted()
        {
        }
        public function format(\AC\Collection $collection, $original_value)
        {
        }
    }
}
namespace AC\Settings {
    class Option
    {
        /**
         * @var string
         */
        private $name;
        /**
         * @var GeneralOption
         */
        private $storage;
        public function __construct($name, \AC\Storage\KeyValuePair $storage = null)
        {
        }
        /**
         * @return bool
         */
        public function is_empty()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param mixed $value
         */
        public function save($value)
        {
        }
        /**
         * @param string $name
         */
        public function delete()
        {
        }
    }
    class GeneralOption extends \AC\Storage\Option
    {
        const NAME = 'cpac_general_options';
        public function __construct()
        {
        }
        public function get(array $args = [])
        {
        }
    }
}
namespace AC\Settings\Option {
    class EditButton extends \AC\Settings\Option
    {
        public function __construct()
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
    }
}
namespace AC\Settings\Form {
    class Instruction
    {
        /**
         * @var Element
         */
        private $element;
        /**
         * @var string
         */
        private $instruction;
        public function __construct(\AC\Form\Element $element, $instruction)
        {
        }
        private function render()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace AC\Settings\Form\Element {
    class Select extends \AC\Form\Element\Select
    {
        protected function render_ajax_message()
        {
        }
        /**
         * @return string|false
         */
        protected function render_description()
        {
        }
    }
}
namespace AC\Request {
    final class Parameters
    {
        /**
         * @var array
         */
        private $parameters;
        /**
         * @param array $parameters
         */
        public function __construct(array $parameters)
        {
        }
        /**
         * @return array
         */
        public function all()
        {
        }
        /**
         * @param string $key
         * @param null   $default
         *
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        public function set($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function has($key)
        {
        }
        /**
         * @param string $key
         */
        public function remove($key)
        {
        }
        /**
         * @param array $input
         */
        public function merge(array $input)
        {
        }
        /**
         * Wrapper account filter_var
         *
         * @param string    $key
         * @param null      $default
         * @param int       $filter
         * @param array|int $options
         *
         * @return mixed
         */
        public function filter($key, $default = null, $filter = FILTER_DEFAULT, $options = 0)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
}
namespace AC {
    abstract class Integration
    {
        /** @var string */
        private $basename;
        /** @var string */
        private $title;
        /** @var string */
        private $logo;
        /** @var Url */
        private $url;
        /** @var string */
        private $plugin_link;
        /**
         * @var string
         */
        private $description;
        /**
         * @param string $basename
         * @param string $title
         * @param string $logo
         * @param string $description
         * @param string $plugin_link
         * @param Url    $url
         */
        public function __construct($basename, $title, $logo, $description, $plugin_link = null, \AC\Type\Url $url = null)
        {
        }
        /**
         * @return bool
         */
        public abstract function is_plugin_active();
        /**
         * @param Screen $screen
         *
         * @return bool
         */
        public abstract function show_notice(\AC\Screen $screen);
        /**
         * @param string $name
         *
         * @return string
         */
        private function search_plugin($name)
        {
        }
        /**
         * @return string
         */
        public function get_basename()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_logo()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_link()
        {
        }
        /**
         * @return string
         */
        public function get_plugin_link()
        {
        }
        /**
         * Determines when the placeholder column is shown for a particular list screen.
         *
         * @param ListScreen $list_screen
         *
         * @return bool
         */
        public function show_placeholder(\AC\ListScreen $list_screen)
        {
        }
    }
    final class EncodedListScreenDataFactory
    {
        /**
         * @var EncodedListScreenData
         */
        private static $instance;
        /**
         * @return EncodedListScreenData
         */
        public function create()
        {
        }
    }
}
namespace AC\Column\Post {
    /**
     * @since 3.0
     */
    class Shortlink extends \AC\Column
    {
        public function __construct()
        {
        }
        function get_value($post_id)
        {
        }
        function get_raw_value($post_id)
        {
        }
    }
}
namespace AC\Column {
    /**
     * ACF Placeholder column, holding a CTA for Admin Columns Pro.
     * @since 2.2
     */
    class Placeholder extends \AC\Column
    {
        /**
         * @var Integration
         */
        private $integration;
        /**
         * @param Integration $integration
         *
         * @return $this
         */
        public function set_integration(\AC\Integration $integration)
        {
        }
        private function get_addons_page_url()
        {
        }
        public function get_message()
        {
        }
    }
    /**
     * @since 2.4.7
     */
    class WooCommercePlaceholder extends \AC\Column\Placeholder
    {
        public function is_valid()
        {
        }
    }
}
namespace AC\Column\Media {
    class Menu extends \AC\Column\Post\Menu
    {
    }
    /**
     * @since 3.0
     */
    class Taxonomy extends \AC\Column\Post\Taxonomy
    {
    }
    /**
     * Column displaying information about the author of a post, such as the
     * author's display name, user ID and email address.
     * @since 2.0
     */
    class AuthorName extends \AC\Column\Post\AuthorName
    {
    }
    /**
     * @since 2.0
     */
    class FullPath extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
    }
    class Preview extends \AC\Column implements \AC\Column\AjaxValue
    {
        public function __construct()
        {
        }
        private function has_image($id)
        {
        }
        private function get_download_url($id)
        {
        }
        private function get_image_url($id)
        {
        }
        public function get_value($id)
        {
        }
        public function get_ajax_value($id)
        {
        }
    }
    class Download extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        private function create_relative_path($url)
        {
        }
        public function get_value($id)
        {
        }
    }
    class AudioPlayer extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_value($id)
        {
        }
        private function get_valid_mime_types()
        {
        }
        private function is_valid_mime_type($id)
        {
        }
        private function get_mime_type($id)
        {
        }
        public function get_raw_value($id)
        {
        }
    }
    class VideoPlayer extends \AC\Column implements \AC\Column\AjaxValue
    {
        public function __construct()
        {
        }
        protected function register_settings()
        {
        }
        private function get_display_type()
        {
        }
        private function create_relative_path($url)
        {
        }
        public function get_value($id)
        {
        }
        private function is_valid_mime_type($id)
        {
        }
        private function get_mime_type($id)
        {
        }
        private function get_video_embed($url, array $attributes = [])
        {
        }
        public function get_raw_value($id)
        {
        }
        public function get_ajax_value($id)
        {
        }
    }
    class Image extends \AC\Column
    {
        public function __construct()
        {
        }
        public function get_raw_value($id)
        {
        }
        public function register_settings()
        {
        }
    }
}
namespace AC\Column {
    class LabelEncoder
    {
        public function encode(string $url) : string
        {
        }
        public function decode(string $url) : string
        {
        }
        public function convert(string $url, string $action = 'encode') : string
        {
        }
    }
}
namespace AC\Deprecated {
    abstract class Hook
    {
        /** @var string */
        private $name;
        /** @var string */
        private $version;
        /** @var string */
        private $slug;
        public function __construct($name, $version, $slug = null)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return bool
         */
        public abstract function has_hook();
        /**
         * @return array|false
         */
        public function get_callbacks()
        {
        }
    }
}
namespace AC\Deprecated\Hook {
    class Action extends \AC\Deprecated\Hook
    {
        public function has_hook()
        {
        }
    }
    class Filter extends \AC\Deprecated\Hook
    {
        public function has_hook()
        {
        }
    }
}
namespace AC\Deprecated {
    class Hooks
    {
        /**
         * @param bool $force_update
         *
         * @return int
         */
        public function get_count($force_update = false)
        {
        }
        /**
         * @return Filter[]
         */
        private function get_filters()
        {
        }
        /**
         * @return array
         */
        private function get_types()
        {
        }
        /**
         * @return array
         */
        private function get_columns()
        {
        }
        /**
         * @return Hook[]
         */
        private function get_actions()
        {
        }
        /**
         * @return Hook[]
         */
        public function get_deprecated_filters()
        {
        }
        /**
         * @return Hook[]
         */
        public function get_deprecated_actions()
        {
        }
        /**
         * @param Hook[] $hooks
         *
         * @return Hook[]
         */
        private function check_deprecated_hooks($hooks)
        {
        }
        /**
         * @return int
         */
        public function get_deprecated_count()
        {
        }
    }
}
namespace AC {
    class ScreenController implements \AC\Registerable
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var array
         */
        private $headings = [];
        /**
         * @var DefaultColumnsRepository
         */
        private $default_columns;
        /**
         * @param ListScreen $list_screen
         */
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        public function register()
        {
        }
        /**
         * @param $columns
         *
         * @return array
         * @since 2.0
         */
        public function add_headings($columns)
        {
        }
    }
    /**
     * Holds the groups to which columns can belong.
     */
    final class Groups
    {
        const SORT_PRIORITY = 1;
        const SORT_SLUG = 2;
        const SORT_LABEL = 3;
        /**
         * @var array
         */
        private $groups = [];
        /**
         * @return array
         */
        public function get_groups()
        {
        }
        /**
         * Return the registered groups sorted by either label, slug or priority
         *
         * @param int $sort_by Default is self::SORT_PRIORITY
         *
         * @return array
         */
        public function get_groups_sorted($sort_by = null)
        {
        }
        /**
         * Sort the group by priority
         * If there are more groups with the same priority it will those groups by label
         *
         * @param array $groups
         *
         * @return array
         */
        private function sort_groups_by_priority(array $groups)
        {
        }
        /**
         * Sort the group by label or slug
         *
         * @param array  $groups
         * @param string $key
         *
         * @return array
         */
        private function sort_groups_by_string(array $groups, $key)
        {
        }
        /**
         * @param string $slug
         *
         * @return bool|mixed
         */
        public function get_group($slug)
        {
        }
        public function get_group_label($slug)
        {
        }
        /**
         * @param string $slug
         *
         * @return bool
         */
        public function has_group($slug)
        {
        }
        /**
         * Register a (column) group
         *
         * @param string $slug
         * @param string $label Should be translatable
         * @param int    $priority
         *
         * @return bool
         */
        public function register_group($slug, $label, $priority = 10)
        {
        }
    }
}
namespace AC\Translation {
    interface Config
    {
        public static function get() : array;
    }
    class Confirmation implements \AC\Translation\Config
    {
        public static function get() : array
        {
        }
    }
}
namespace AC {
    class WpListTableFactory
    {
        /**
         * @param string $screen_id
         *
         * @return WP_Posts_List_Table
         */
        public function create_post_table($screen_id)
        {
        }
        /**
         * @param string $screen_id
         *
         * @return WP_Users_List_Table
         */
        public function create_user_table($screen_id)
        {
        }
        /**
         * @param string $screen_id
         *
         * @return WP_Comments_List_Table
         */
        public function create_comment_table($screen_id)
        {
        }
        /**
         * @param string $screen_id
         *
         * @return WP_Media_List_Table
         */
        public function create_media_table($screen_id)
        {
        }
        /**
         * @param string $screen_id
         *
         * @return WP_Terms_List_Table
         */
        public function create_taxonomy_table($screen_id)
        {
        }
        /**
         * @param string $screen_id
         *
         * @return WP_MS_Users_List_Table
         */
        public function create_network_user_table($screen_id)
        {
        }
        /**
         * @param string $screen_id
         *
         * @return WP_MS_Sites_List_Table
         */
        public function create_network_site_table($screen_id)
        {
        }
    }
}
namespace AC\Meta {
    class Query
    {
        /**
         * @var WP_Meta_Query
         */
        private $query;
        /**
         * @var string
         */
        private $sql;
        /**
         * @var array
         */
        private $select = [];
        /**
         * @var string|false
         */
        private $count = false;
        /**
         * @var bool
         */
        private $distinct = false;
        /**
         * @var bool
         */
        private $join = false;
        /**
         * @var array
         */
        private $join_where = [];
        /**
         * @var array
         */
        private $where = [];
        /**
         * @var array
         */
        private $group_by = [];
        /**
         * @var array
         */
        private $order_by = [];
        /**
         * @var int|false
         */
        private $limit = false;
        /**
         * @param string $meta_type
         */
        public function __construct($meta_type)
        {
        }
        /**
         * Add a single field or multiple comma separated
         *
         * @param string $field e.g. id or id, meta_value
         *
         * @return $this
         */
        public function select($field)
        {
        }
        /**
         * Add a COUNT clause AS count
         *
         * @param string $field
         *
         * @return $this
         */
        public function count($field)
        {
        }
        /**
         * Group by an aggregated column.
         * Supports: count
         *
         * @param string $field
         *
         * @return $this
         */
        public function group_by($field)
        {
        }
        public function join($type = 'inner')
        {
        }
        public function left_join()
        {
        }
        /**
         * @param string           $field
         * @param string           $operator
         * @param string|int|array $value
         * @param string           $boolean
         *
         * @return $this
         * @see get_where_clause()
         */
        public function join_where($field, $operator = null, $value = null, $boolean = 'AND')
        {
        }
        public function order_by($order_by, $order = 'asc')
        {
        }
        public function limit($limit)
        {
        }
        public function distinct()
        {
        }
        /**
         * Set a where clause
         *
         * @param string|array     $field
         * @param string           $operator
         * @param string|int|array $value
         * @param string           $boolean
         *
         * @return array
         */
        private function get_where_clause($field, $operator = null, $value = null, $boolean = 'AND')
        {
        }
        /**
         * @param        $field
         * @param null   $operator
         * @param null   $value
         * @param string $boolean
         *
         * @return $this
         * @see get_where_clause()
         */
        public function remove_where($field, $operator = null, $value = null, $boolean = 'AND')
        {
        }
        /**
         * @param        $field
         * @param null   $operator
         * @param null   $value
         * @param string $boolean
         *
         * @return $this
         * @see get_where_clause()
         */
        public function where($field, $operator = null, $value = null, $boolean = 'AND')
        {
        }
        /**
         * @param      $field
         * @param null $operator
         * @param null $value
         *
         * @return $this
         * @see get_where_clause()
         */
        public function or_where($field, $operator = null, $value = null)
        {
        }
        /**
         * @param array $in
         *
         * @return $this
         */
        public function where_in(array $in)
        {
        }
        public function where_is_null($field)
        {
        }
        public function where_post_type($post_type)
        {
        }
        private function parse_field($field)
        {
        }
        private function parse_where($where, $clauses)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
        /**
         * Return last sql that was queried
         * @return string
         */
        public function get_sql()
        {
        }
        private function set_sql($sql)
        {
        }
        /**
         * @return WP_Meta_Query
         */
        public function get_query()
        {
        }
        /**
         * @param string $type
         */
        private function set_query($type)
        {
        }
    }
    class QueryMeta extends \AC\Meta\Query
    {
        public function __construct($meta_type, $meta_key, $post_type = null)
        {
        }
    }
    class QueryColumn extends \AC\Meta\Query
    {
        public function __construct(\AC\Column $column)
        {
        }
    }
}
namespace AC\Check {
    final class AddonAvailable implements \AC\Registerable
    {
        /**
         * @var Integration
         */
        private $integration;
        public function __construct(\AC\Integration $integration)
        {
        }
        /**
         * @throws Exception
         */
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        private function get_ajax_handler()
        {
        }
        /**
         * @return Preferences\User
         */
        private function get_preferences()
        {
        }
        /**
         * Dismiss notice
         */
        public function ajax_dismiss_notice()
        {
        }
        /**
         * @param Screen $screen
         */
        public function display(\AC\Screen $screen)
        {
        }
    }
    final class Promotion implements \AC\Registerable
    {
        /**
         * @var Promo
         */
        private $promo;
        public function __construct(\AC\Promo $promo)
        {
        }
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        private function get_ajax_handler()
        {
        }
        private function get_individual_slug()
        {
        }
        /**
         * @return Preferences\User
         */
        private function get_preferences()
        {
        }
        /**
         * Dismiss notice
         */
        public function ajax_dismiss_notice()
        {
        }
        /**
         * @param Screen $screen
         */
        public function display(\AC\Screen $screen)
        {
        }
    }
    class Review implements \AC\Registerable
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var int Show message after x days
         */
        protected $show_after = 30;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        /**
         * @param int $show_after_days
         */
        public function set_show_after($show_after_days)
        {
        }
        /**
         * @throws Exception
         */
        public function register()
        {
        }
        /**
         * @param Screen $screen
         */
        public function display(\AC\Screen $screen)
        {
        }
        /**
         * @return Ajax\Handler
         */
        protected function get_ajax_handler()
        {
        }
        /**
         * @return Preferences\User
         */
        protected function get_preferences()
        {
        }
        /**
         * Check if the amount of days is larger then the first login
         * @return bool
         */
        protected function first_login_compare()
        {
        }
        /**
         * Return the Unix timestamp of first login
         * @return integer
         */
        protected function get_first_login()
        {
        }
        /**
         * Ajax dismiss notice
         * @since 3.2
         */
        public function ajax_dismiss_notice()
        {
        }
        /**
         * @param string $utm_medium
         *
         * @return string
         */
        private function get_documentation_url($utm_medium)
        {
        }
        /**
         * @return string
         */
        protected function get_message()
        {
        }
    }
}
namespace AC\Asset {
    class Style extends \AC\Asset\Enqueueable
    {
        public function register()
        {
        }
        public function enqueue()
        {
        }
    }
    interface Location
    {
        /**
         * @return string
         */
        public function get_url();
        /**
         * @return string
         */
        public function get_path();
    }
}
namespace AC\Asset\Location {
    final class Absolute implements \AC\Asset\Location
    {
        /**
         * @var string
         */
        private $url;
        /**
         * @var string
         */
        private $path;
        /**
         * @param string $url
         * @param string $path
         */
        public function __construct(string $url, string $path)
        {
        }
        /**
         * @param string $suffix
         *
         * @return self
         */
        public function with_suffix($suffix)
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return string
         */
        public function get_path()
        {
        }
    }
}
namespace AC\Asset {
    class Assets extends \AC\Collection
    {
        /**
         * @return Enqueueable[]
         */
        public function all()
        {
        }
        public function add(\AC\Asset\Enqueueable $enqueueable)
        {
        }
        public function add_collection(\AC\Asset\Assets $assets)
        {
        }
    }
}
namespace AC\ThirdParty {
    class ACF implements \AC\Registerable
    {
        public function register()
        {
        }
        /**
         * Fix which remove the Advanced Custom Fields Type (acf) from the admin columns settings page
         *
         * @param $post_types
         *
         * @return array Post Types
         * @since 2.0
         */
        function remove_acf_field_group($post_types)
        {
        }
    }
    class NinjaForms implements \AC\Registerable
    {
        public function register()
        {
        }
        public function remove_nf_sub($post_types)
        {
        }
    }
    /**
     * WPML: display correct flags on the overview screens
     */
    class WPMLColumn
    {
        const COLUMN_NAME = 'icl_translations';
        private $column;
        function __construct($post_type)
        {
        }
        public function store_wpml_column($columns)
        {
        }
        public function replace_wpml_column($columns)
        {
        }
    }
    class WooCommerce implements \AC\Registerable
    {
        public function register()
        {
        }
        public function remove_webhook($post_types)
        {
        }
    }
    /**
     * WPML compatibility
     */
    class WPML implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @param Storage $storage
         */
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        function register()
        {
        }
        public function replace_flags()
        {
        }
        // Create translatable column labels
        public function register_column_labels()
        {
        }
        /**
         * @param string $label
         *
         * @return string
         */
        public function register_translated_label($label)
        {
        }
    }
}
namespace AC\Admin {
    interface ScreenOptions
    {
        /**
         * @return ScreenOption[]
         */
        public function get_screen_options();
    }
    class Tooltip
    {
        /** @var string */
        private $id;
        /** @var string */
        private $content;
        /** @var string */
        private $link_label;
        /** @var string */
        private $title;
        /** @var string */
        private $position = 'right';
        public function __construct($id, array $args)
        {
        }
        /**
         * @param array $args
         */
        private function populate($args)
        {
        }
        /**
         * @param string $id
         *
         * @return Tooltip
         */
        public function set_id($id)
        {
        }
        /**
         * @param string $content
         *
         * @return Tooltip
         */
        public function set_content($content)
        {
        }
        /**
         * @param string $title
         *
         * @return Tooltip
         */
        public function set_title($title)
        {
        }
        /**
         * @param string $label
         *
         * @return $this
         */
        public function set_link_label($label)
        {
        }
        /**
         * @param string $position
         *
         * @return Tooltip
         */
        public function set_position($position)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @return string
         */
        public function get_instructions()
        {
        }
    }
    class Menu
    {
        /**
         * @var Menu\Item[]
         */
        private $items;
        public function __construct(array $items = [])
        {
        }
        public function add_item(\AC\Admin\Menu\Item $item)
        {
        }
        public function remove_item($slug)
        {
        }
        public function get_items()
        {
        }
        public function get_item_by_slug($slug)
        {
        }
    }
    interface Helpable
    {
        /**
         * @return HelpTab[]
         */
        public function get_help_tabs();
    }
}
namespace AC\Admin\Notice {
    class ReadOnlyListScreen implements \AC\Registerable
    {
        public function register()
        {
        }
        public function render_notice(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace AC\Admin {
    abstract class ScreenOption implements \AC\Renderable
    {
    }
}
namespace AC {
    class View implements \AC\Renderable
    {
        /**
         * @var array
         */
        private $data = [];
        /**
         * @var string
         */
        private $template;
        public function __construct(array $data = [])
        {
        }
        public function get($key)
        {
        }
        public function __get($key)
        {
        }
        public function __set($key, $value)
        {
        }
        /**
         * @param $key
         * @param $value
         *
         * @return $this
         */
        public function set($key, $value)
        {
        }
        public function get_data()
        {
        }
        public function set_data(array $data)
        {
        }
        /**
         * Will try to resolve the current template to a file
         * @return false|string
         */
        public function resolve_template()
        {
        }
        /**
         * Get a string representation of this object
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @param string $template
         *
         * @return $this
         */
        public function set_template($template)
        {
        }
        /**
         * Should call self::render when treated as a string
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace AC\Admin\View {
    class Menu extends \AC\View
    {
        public function __construct(\AC\Admin\Menu $menu)
        {
        }
    }
}
namespace AC\Admin\Menu {
    class Item
    {
        /**
         * @var string
         */
        private $slug;
        /**
         * @var string
         */
        private $url;
        /**
         * @var string
         */
        private $label;
        /**
         * @var string
         */
        private $class;
        /**
         * @var string
         */
        private $target;
        public function __construct($slug, $url, $label, $class = '', $target = '')
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @return string
         */
        public function get_class()
        {
        }
        /**
         * @return string
         */
        public function get_target()
        {
        }
    }
}
namespace AC\Admin {
    interface MenuPageFactory
    {
        public function create(array $args = []);
    }
    interface RequestHandlerInterface
    {
        const PARAM_PAGE = 'page';
        const PARAM_TAB = 'tab';
        /**
         * @param Request $request
         *
         * @return Renderable|null
         */
        public function handle(\AC\Request $request);
    }
    class PageRequestHandlers implements \AC\Admin\RequestHandlerInterface
    {
        /**
         * @var RequestHandlerInterface[]
         */
        public static $handlers;
        public static function add_handler(\AC\Admin\RequestHandlerInterface $handler)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class PageNetworkRequestHandlers implements \AC\Admin\RequestHandlerInterface
    {
        /**
         * @var RequestHandlerInterface[]
         */
        public static $handlers;
        public static function add_handler(\AC\Admin\RequestHandlerInterface $handler)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class AdminNetwork implements \AC\Registerable
    {
        /**
         * @var RequestHandlerInterface
         */
        private $request_handler;
        /**
         * @var Absolute
         */
        private $location_core;
        /**
         * @var AdminScripts
         */
        private $scripts;
        public function __construct(\AC\Admin\RequestHandlerInterface $request_handler, \AC\Asset\Location\Absolute $location_core, \AC\Admin\AdminScripts $scripts)
        {
        }
        public function register()
        {
        }
        private function get_menu_page_factory()
        {
        }
        public function init()
        {
        }
    }
}
namespace AC\Admin\Colors\Storage {
    final class OptionFactory extends \AC\Storage\OptionFactory
    {
        private const PREFIX = '_ac_colors_';
        public function create($key) : \AC\Storage\Option
        {
        }
    }
}
namespace AC\Admin\Colors {
    final class StyleInjector
    {
        private $color_reader;
        public function __construct(\AC\Admin\Colors\ColorReader $color_reader)
        {
        }
        public function inject_style() : void
        {
        }
    }
    final class ColorCollection extends \AC\Iterator
    {
        public function __construct(array $colors = [])
        {
        }
        public function add(\AC\Admin\Colors\Type\Color $color) : void
        {
        }
        public function current() : \AC\Admin\Colors\Type\Color
        {
        }
    }
    interface ColorReader
    {
        public function find_all() : \AC\Admin\Colors\ColorCollection;
        public function find_with_name(string $name) : ?\AC\Admin\Colors\Type\Color;
    }
    final class ColorRepository implements \AC\Admin\Colors\ColorReader
    {
        private $storage;
        private $colors;
        public function __construct(\AC\Admin\Colors\Storage\OptionFactory $optionFactory)
        {
        }
        public function save(\AC\Admin\Colors\Type\Color $color_to_add) : void
        {
        }
        public function find_all() : \AC\Admin\Colors\ColorCollection
        {
        }
        public function find_with_name(string $name) : ?\AC\Admin\Colors\Type\Color
        {
        }
    }
}
namespace AC\Admin\Colors\Type {
    final class Color
    {
        private $color;
        private $name;
        public function __construct(string $color, string $name)
        {
        }
        private function validate() : void
        {
        }
        public function get_color() : string
        {
        }
        public function get_name() : string
        {
        }
    }
}
namespace AC\Admin\Colors {
    interface Colors
    {
        public const SUCCESS = 'success';
        public const SUCCESS_ALT = 'success-alt';
        public const WARNING = 'warning';
        public const WARNING_ALT = 'warning-alt';
        public const ERROR = 'error';
        public const ERROR_ALT = 'error-alt';
        public const INFO = 'info';
        public const INFO_ALT = 'info-alt';
    }
}
namespace AC\Admin\Colors\Shipped {
    final class ColorUpdater
    {
        private $shipped_color_parser;
        private $color_repository;
        private $option_factory;
        public function __construct(\AC\Admin\Colors\Shipped\ColorParser $shipped_color_parser, \AC\Admin\Colors\ColorRepository $color_repository, \AC\Admin\Colors\Storage\OptionFactory $option_factory)
        {
        }
        public function update() : void
        {
        }
    }
    final class ColorParser
    {
        private $file;
        public function __construct(string $file)
        {
        }
        public function parse() : \AC\Admin\Colors\ColorCollection
        {
        }
    }
}
namespace AC\Admin {
    class Admin implements \AC\Registerable
    {
        const NAME = 'codepress-admin-columns';
        /**
         * @var RequestHandlerInterface
         */
        private $request_handler;
        /**
         * @var Absolute
         */
        private $location;
        /**
         * @var AdminScripts
         */
        private $scripts;
        public function __construct(\AC\Admin\RequestHandlerInterface $request_handler, \AC\Asset\Location\Absolute $location, \AC\Admin\AdminScripts $scripts)
        {
        }
        public function register()
        {
        }
        private function get_menu_page_factory()
        {
        }
        public function init()
        {
        }
    }
}
namespace AC\Admin\ScreenOption {
    class ColumnId extends \AC\Admin\ScreenOption
    {
        const KEY = 'show_column_id';
        /**
         * @var Preferences\User
         */
        private $preference;
        public function __construct(\AC\Admin\Preference\ScreenOptions $preference)
        {
        }
        public function is_active()
        {
        }
        public function render()
        {
        }
    }
    class ColumnType extends \AC\Admin\ScreenOption
    {
        const KEY = 'show_column_type';
        /**
         * @var Preferences\User
         */
        private $preference;
        public function __construct(\AC\Admin\Preference\ScreenOptions $preference)
        {
        }
        public function is_active()
        {
        }
        public function render()
        {
        }
    }
    class ListScreenType extends \AC\Admin\ScreenOption
    {
        const KEY = 'show_list_screen_type';
        /**
         * @var Preferences\User
         */
        private $preference;
        public function __construct(\AC\Admin\Preference\ScreenOptions $preference)
        {
        }
        public function is_active()
        {
        }
        public function render()
        {
        }
    }
    class ListScreenId extends \AC\Admin\ScreenOption
    {
        const KEY = 'show_list_screen_id';
        /**
         * @var Preferences\User
         */
        private $preference;
        public function __construct(\AC\Admin\Preference\ScreenOptions $preference)
        {
        }
        public function is_active()
        {
        }
        public function render()
        {
        }
    }
}
namespace AC\Admin\Asset {
    class Addons extends \AC\Asset\Script
    {
        public function __construct($handle, \AC\Asset\Location $location = null)
        {
        }
        public function register()
        {
        }
    }
    class Columns extends \AC\Asset\Script
    {
        /**
         * @var DefaultColumnsRepository
         */
        private $default_columns;
        /**
         * @var ListScreen
         */
        private $list_screen;
        public function __construct($handle, \AC\Asset\Location $location, \AC\DefaultColumnsRepository $default_columns, \AC\ListScreen $list_screen)
        {
        }
        private function get_list_screens()
        {
        }
        public function register()
        {
        }
    }
    class Settings extends \AC\Asset\Script
    {
        public function register()
        {
        }
    }
}
namespace AC\Admin {
    class AdminScripts implements \AC\Asset\Enqueueables
    {
        /**
         * @var Location\Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function get_assets()
        {
        }
    }
    abstract class HelpTab
    {
        /**
         * @var string
         */
        private $id;
        /**
         * @var string
         */
        private $title;
        public function __construct($title)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public abstract function get_content();
    }
}
namespace AC\Admin\MenuPageFactory {
    class Menu implements \AC\Admin\MenuPageFactory
    {
        public function create(array $args = [])
        {
        }
    }
    class SubMenu implements \AC\Admin\MenuPageFactory
    {
        public function create(array $args = [])
        {
        }
    }
}
namespace AC\Admin {
    class PageRequestHandler implements \AC\Admin\RequestHandlerInterface
    {
        /**
         * @var PageFactoryInterface[]
         */
        private $factories;
        /**
         * @param string               $slug
         * @param PageFactoryInterface $factory
         *
         * @return $this
         */
        public function add($slug, \AC\Admin\PageFactoryInterface $factory)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class Scripts implements \AC\Registerable
    {
        /**
         * @var Absolute
         */
        private $location;
        public function __construct(\AC\Asset\Location\Absolute $location)
        {
        }
        public function register()
        {
        }
        public function register_scripts()
        {
        }
    }
}
namespace AC\Admin\PageFactory {
    class Addons implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        protected $location;
        /**
         * @var IntegrationRepository
         */
        protected $integrations;
        /**
         * @var MenuFactoryInterface
         */
        protected $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\IntegrationRepository $integrations, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
    class Help implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Location\Absolute
         */
        protected $location;
        /**
         * @var MenuFactoryInterface
         */
        protected $menu_factory;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\Admin\MenuFactoryInterface $menu_factory)
        {
        }
        public function create()
        {
        }
    }
    class Columns implements \AC\Admin\PageFactoryInterface
    {
        /**
         * @var Storage
         */
        protected $storage;
        /**
         * @var Location\Absolute
         */
        protected $location;
        /**
         * @var MenuFactoryInterface
         */
        protected $menu_factory;
        /**
         * @var bool
         */
        private $is_acp_active;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Asset\Location\Absolute $location, \AC\Admin\MenuFactoryInterface $menu_factory, bool $is_acp_active)
        {
        }
        public function create()
        {
        }
    }
}
namespace AC\Admin {
    class SectionCollection
    {
        /**
         * @var array
         */
        private $items = [];
        public function add(\AC\Admin\Section $section, $priority = 10)
        {
        }
        public function get($slug)
        {
        }
        public function all()
        {
        }
    }
}
namespace AC\Admin\Section {
    class ProCta extends \AC\Admin\Section
    {
        const NAME = 'pro-cta';
        public function __construct()
        {
        }
        public function render()
        {
        }
    }
}
namespace AC\Admin\Section\Partial {
    class Menu
    {
        /** @var bool */
        private $is_network;
        public function __construct($is_network = false)
        {
        }
        public function render(\AC\ListScreen $list_screen, $is_hidden = false)
        {
        }
        private function get_network_list_screens()
        {
        }
        private function get_site_list_screens()
        {
        }
        /**
         * @return array
         */
        private function get_grouped_list_screens()
        {
        }
    }
    class ShowEditButton implements \AC\Renderable
    {
        /**
         * @var EditButton
         */
        private $option;
        public function __construct()
        {
        }
        private function get_label()
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
    }
}
namespace AC\Admin\Section {
    class AddonStatus extends \AC\View
    {
        public function __construct(\AC\Integration $integration)
        {
        }
    }
    class General extends \AC\Admin\Section
    {
        const NAME = 'general';
        /**
         * @var Renderable[]
         */
        private $options;
        public function __construct(array $options)
        {
        }
        public function add_option(\AC\Renderable $option)
        {
        }
        public function render()
        {
        }
    }
    class Restore extends \AC\Admin\Section
    {
        const NAME = 'restore';
        public function __construct()
        {
        }
        public function render()
        {
        }
    }
}
namespace AC\Admin\Page {
    class Help implements \AC\Asset\Enqueueables, \AC\Renderable, \AC\Admin\RenderableHead
    {
        const NAME = 'help';
        /** @var Hooks */
        private $hooks;
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var Renderable
         */
        private $head;
        public function __construct(\AC\Deprecated\Hooks $hooks, \AC\Asset\Location\Absolute $location, \AC\Renderable $head)
        {
        }
        public function render_head()
        {
        }
        public function get_assets()
        {
        }
        /**
         * @return string
         */
        private function get_documention_link()
        {
        }
        /**
         * @param array $callbacks
         *
         * @return false|string
         */
        private function get_callback_message($callbacks)
        {
        }
        /**
         * @return void
         */
        private function render_actions()
        {
        }
        /**
         * @return void
         */
        private function render_filters()
        {
        }
        private function render_message($message)
        {
        }
        public function render()
        {
        }
    }
    class Columns implements \AC\Asset\Enqueueables, \AC\Admin\ScreenOptions, \AC\Renderable, \AC\Admin\RenderableHead
    {
        const NAME = 'columns';
        /**
         * @var Location\Absolute
         */
        private $location;
        /**
         * @var DefaultColumnsRepository
         */
        private $default_columns;
        /**
         * @var Menu
         */
        private $menu;
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Renderable
         */
        private $head;
        /**
         * @var Preference\ListScreen
         */
        private $preference;
        /**
         * @var bool
         */
        private $is_acp_active;
        /**
         * @var bool
         */
        private $is_network;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\DefaultColumnsRepository $default_columns, \AC\Admin\Section\Partial\Menu $menu, \AC\ListScreenRepository\Storage $storage, \AC\Renderable $head, \AC\Admin\Preference\ListScreen $preference, bool $is_acp_active, bool $is_network = false)
        {
        }
        public function render_head()
        {
        }
        /**
         * @return ListScreen|null
         */
        private function get_list_screen_from_request()
        {
        }
        public function get_assets()
        {
        }
        private function get_column_id()
        {
        }
        private function get_column_type()
        {
        }
        private function get_list_screen_id()
        {
        }
        private function get_list_screen_type()
        {
        }
        public function get_screen_options()
        {
        }
        private function set_preference_screen(\AC\ListScreen $list_screen)
        {
        }
        private function get_tweet_url() : \AC\Type\Url
        {
        }
        public function render()
        {
        }
        /**
         * @param array $column_types
         * @param bool  $group
         *
         * @return Column|false
         */
        private function get_column_template_by_group($column_types, $group = false)
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return string
         */
        private function render_column_template(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param string $label
         * @param string $main_label
         *
         * @return string
         */
        private function get_truncated_side_label($label, $main_label = '')
        {
        }
    }
    class Settings implements \AC\Asset\Enqueueables, \AC\Renderable, \AC\Admin\RenderableHead
    {
        const NAME = 'settings';
        /**
         * @var Renderable
         */
        private $head;
        /**
         * @var SectionCollection
         */
        protected $sections;
        /**
         * @var Location\Absolute
         */
        private $location;
        public function __construct(\AC\Renderable $head, \AC\Asset\Location\Absolute $location, \AC\Admin\SectionCollection $sections = null)
        {
        }
        public function render_head()
        {
        }
        /**
         * @param string $slug
         *
         * @return Section|null
         */
        public function get_section($slug)
        {
        }
        /**
         * @param Section $section
         * @param int     $prio
         *
         * @return $this
         */
        public function add_section(\AC\Admin\Section $section, $prio = 10)
        {
        }
        public function get_assets()
        {
        }
        public function render()
        {
        }
    }
}
namespace AC\Admin\Preference {
    class ScreenOptions extends \AC\Preferences\User
    {
        public function __construct()
        {
        }
    }
    class ListScreen extends \AC\Preferences\Site
    {
        const OPTION_LAST_VISITED = 'last_visited_list_key';
        public function __construct($is_network = false)
        {
        }
        public function get_last_visited_list_key()
        {
        }
        public function set_last_visited_list_key($list_key)
        {
        }
        public function set_list_id($list_key, $list_id)
        {
        }
        public function get_list_id($list_key)
        {
        }
    }
}
namespace AC\Admin {
    class Banner
    {
        /**
         * @var IntegrationRepository
         */
        private $integrations;
        public function __construct()
        {
        }
        /**
         * @return Promo|null
         */
        private function get_active_promotion()
        {
        }
        /**
         * @return Integrations
         */
        private function get_missing_integrations()
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        public function __toString()
        {
        }
    }
    class PageNetworkRequestHandler implements \AC\Admin\RequestHandlerInterface
    {
        /**
         * @var PageFactoryInterface[]
         */
        private $factories;
        /**
         * @param string               $slug
         * @param PageFactoryInterface $factory
         *
         * @return $this
         */
        public function add($slug, \AC\Admin\PageFactoryInterface $factory)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
    class AdminLoader implements \AC\Registerable
    {
        /**
         * @var string
         */
        protected $hook;
        /**
         * @var RequestHandlerInterface
         */
        protected $request_handler;
        /**
         * @var Enqueueables
         */
        protected $assets;
        /**
         * @var Renderable|null
         */
        private $page;
        public function __construct($hook, \AC\Admin\RequestHandlerInterface $request_handler, \AC\Asset\Enqueueables $assets)
        {
        }
        public function register()
        {
        }
        public function set_page()
        {
        }
        public function load()
        {
        }
        public function head()
        {
        }
        public function body()
        {
        }
        protected function enqueue(\AC\Asset\Enqueueable $asset)
        {
        }
        public function screen_options($settings)
        {
        }
    }
}
namespace AC {
    abstract class Capabilities implements \AC\Registerable
    {
        // backwards compat
        const MANAGE = 'manage_admin_columns';
        public function register()
        {
        }
        /**
         * @param WP_Roles $roles
         *
         * @return void
         */
        public abstract function set_default_caps(\WP_Roles $roles);
    }
}
namespace AC\Screen {
    class QuickEdit implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var LayoutPreference
         */
        private $preference;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Table\LayoutPreference $preference)
        {
        }
        public function register()
        {
        }
        /**
         * Get list screen when doing Quick Edit, a native WordPress ajax call
         */
        public function init_columns_on_quick_edit()
        {
        }
    }
}
namespace AC {
    interface Sanitize
    {
        public function sanitize($data);
    }
}
namespace AC\Sanitize {
    class Kses implements \AC\Sanitize
    {
        /**
         * @param string $data
         *
         * @return string
         */
        public function sanitize($data)
        {
        }
        protected function get_allowed_protocols()
        {
        }
    }
}
namespace AC {
    /**
     * @deprecated 4.0
     */
    class ListScreenFactory
    {
        public static function create($key, $id = null)
        {
        }
    }
}
namespace AC\Helper {
    class Media
    {
        /**
         * @param string $image_url
         * @param bool   $check_cropped_versions Checks for cropped version of the image. e.g. file-name-320x60.jpg
         *
         * @return false|int
         */
        public function get_attachment_id_by_url($image_url, $check_cropped_versions = false)
        {
        }
    }
    class Html
    {
        /**
         * @param string $key
         * @param string $value
         *
         * @return string
         * @since 3.0
         */
        public function get_attribute_as_string($key, $value)
        {
        }
        /**
         * @param array $attributes
         *
         * @return string
         * @since 3.0
         */
        public function get_attributes_as_string(array $attributes)
        {
        }
        /**
         * @param string $url
         * @param string $label
         * @param array  $attributes
         *
         * @return string|false HTML Anchor element
         */
        public function link($url, $label = null, $attributes = [])
        {
        }
        /**
         * @since 2.5
         */
        public function divider()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function get_tooltip_attr($content)
        {
        }
        /**
         * @param       $label
         * @param       $tooltip
         * @param array $attributes
         *
         * @return string
         */
        public function tooltip($label, $tooltip, $attributes = [])
        {
        }
        /**
         * Displays a toggle Box.
         *
         * @param string $label
         * @param string $contents
         */
        public function toggle_box($label, $contents)
        {
        }
        /**
         * Display a toggle box which trigger an ajax event on click. The ajax callback calls AC\Column::get_ajax_value.
         *
         * @param int    $id
         * @param string $label
         * @param string $column_name
         *
         * @return string
         */
        public function get_ajax_toggle_box_link($id, $label, $column_name, $label_close = null)
        {
        }
        /**
         * Display a modal which trigger an ajax event on click. The ajax callback calls AC\Column::get_ajax_value.
         *
         * @param string      $label
         * @param string|null $title
         *
         * @return string
         */
        public function get_ajax_modal_link($label, array $attributes = [])
        {
        }
        /**
         * @param string $string
         * @param int    $max_chars
         *
         * @return string
         */
        public function codearea($string, $max_chars = 1000)
        {
        }
        /**
         * @param array $attributes
         *
         * @return string
         */
        private function get_attributes($attributes)
        {
        }
        /**
         * Returns an array with internal / external  links
         *
         * @param string $string
         * @param array  $internal_domains Domains which determine internal links. Default is home_url().
         *
         * @return false|array [ internal | external ]
         */
        public function get_internal_external_links($string, $internal_domains = [])
        {
        }
        /**
         * @param string $string
         *
         * @return bool
         */
        private function contains_html($string)
        {
        }
        /**
         * Display indicator icon in the column settings header
         *
         * @param      $class
         * @param      $id
         * @param bool $title
         */
        public function indicator($class, $id, $title = false)
        {
        }
        /**
         * Adds a divider to the implode
         *
         * @param      $array
         * @param bool $divider
         *
         * @return string
         */
        public function implode($array, $divider = true)
        {
        }
        public function remove_empty($array)
        {
        }
        /**
         * Remove attribute from an html tag
         *
         * @param string $html HTML tag
         * @param        $attributes
         *
         * @return mixed
         */
        public function strip_attributes($html, $attributes)
        {
        }
        /**
         * Small HTML block with grey background and rounded corners
         *
         * @param string|array $items
         *
         * @return string
         */
        public function small_block($items)
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        public function progress_bar($args = [])
        {
        }
        public function more($array, $number = 10, $glue = ', ')
        {
        }
        /**
         * Return round HTML span
         *
         * @param $string
         *
         * @return string
         */
        public function rounded($string)
        {
        }
        /**
         * Returns star rating based on X start from $max count. Does support decimals.
         *
         * @param int $count
         * @param int $max
         *
         * @return string
         */
        public function stars($count, $max = 0)
        {
        }
        /**
         * @param string $value HTML
         * @param bool   $removed
         *
         * @return string
         */
        public function images($value, $removed = false)
        {
        }
    }
    class Menu
    {
        /**
         * @param int    $object_id
         * @param string $object_type
         *
         * @return int[] Term Ids
         */
        public function get_ids($object_id, $object_type)
        {
        }
        /**
         * @param array $terms_ids
         * @param array $args
         *
         * @return array
         * @see WP_Term_Query::__construct() for available $args
         */
        public function get_terms(array $terms_ids, array $args = [])
        {
        }
    }
    class Strings
    {
        /**
         * @param $url
         *
         * @return bool|false|string
         * @since 1.3.1
         */
        public function shorten_url($url)
        {
        }
        public function contains(string $haystack, string $needle) : bool
        {
        }
        public function starts_with(string $haystack, string $needle) : bool
        {
        }
        public function ends_with(string $haystack, string $needle) : bool
        {
        }
        /**
         * @param $string
         *
         * @return string
         * @since 1.3
         */
        public function strip_trim($string)
        {
        }
        /**
         * @param string $content
         *
         * @return array
         */
        public function get_shortcodes($content)
        {
        }
        /**
         * Count the number of words in a string (multibyte-compatible)
         *
         * @param $string
         *
         * @return int Number of words
         * @since 3.0
         */
        public function word_count($string)
        {
        }
        /**
         * @param string $string
         * @param int    $num_words
         * @param null   $more
         *
         * @return false|string
         * @see   wp_trim_words();
         * @since 3.0
         */
        public function trim_words($string = '', $num_words = 30, $more = null)
        {
        }
        /**
         * Trims a string and strips tags if there is any HTML
         *
         * @param string $string
         * @param int    $limit
         * @param null   $trail
         *
         * @return string
         */
        public function trim_characters($string, $limit = 10, $trail = null)
        {
        }
        /**
         * Formats a valid hex color to a 6 digit string, optionally prefixed with a #
         * Example: #FF0 will be fff000 based on the $prefix parameter
         *
         * @param string $hex    Valid hex color
         * @param bool   $prefix Prefix with a # or not
         *
         * @return string
         */
        protected function hex_format($hex, $prefix = false)
        {
        }
        /**
         * Get RGB values from a hex color string
         *
         * @param string $hex Valid hex color
         *
         * @return array
         * @since 3.0
         */
        public function hex_to_rgb($hex)
        {
        }
        /**
         * Get contrasting hex color based on given hex color
         *
         * @param string $hex Valid hex color
         *
         * @return string
         * @since 3.0
         */
        public function hex_get_contrast($hex)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         * @since 1.2.0
         */
        public function is_image($url)
        {
        }
        /**
         * @param string $string
         *
         * @return array
         * @since 3.0
         */
        public function comma_separated_to_array($string)
        {
        }
        /**
         * @param string $string
         *
         * @return array
         * @since 3.0
         */
        public function string_to_array_integers($string)
        {
        }
        /**
         * @param string $hex Color Hex Code
         *
         * @return string
         * @since 3.0
         */
        public function get_color_block($hex)
        {
        }
        /**
         * @param $url
         *
         * @return bool
         */
        public function is_valid_url($url)
        {
        }
        /**
         * @return string Display empty value
         */
        public function get_empty_char()
        {
        }
        /**
         * @param string $string
         *
         * @return bool
         */
        public function contains_html_only($string)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function is_empty($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function is_not_empty($value)
        {
        }
        /**
         * Return an array into a comma separated sentence. For example [minute, hours, days] becomes: "minute, hours or days".
         *
         * @param array  $words
         * @param string $compound
         *
         * @return string
         */
        public function enumeration_list($words, $compound = 'or')
        {
        }
    }
    class Taxonomy
    {
        /**
         * @param WP_Term[]   $terms Term objects
         * @param null|string $post_type
         *
         * @return array
         */
        public function get_term_links($terms, $post_type = null)
        {
        }
        public function get_term_url($term, $post_type = null)
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return false|string
         */
        public function get_term_display_name($term)
        {
        }
        /**
         * @param string $object_type post, page, user etc.
         * @param string $taxonomy    Taxonomy Name
         *
         * @return bool
         */
        public function is_taxonomy_registered($object_type, $taxonomy = '')
        {
        }
        /**
         * @param string $field
         * @param int    $term_id
         * @param string $taxonomy
         *
         * @return bool|mixed
         * @since 3.0
         */
        public function get_term_field($field, $term_id, $taxonomy)
        {
        }
        /**
         * @param $post_type
         *
         * @return array
         * @since 3.0
         */
        public function get_taxonomy_selection_options($post_type)
        {
        }
        /**
         * @param int    $term_ids
         * @param string $taxonomy
         *
         * @return WP_Term[]
         */
        public function get_terms_by_ids($term_ids, $taxonomy)
        {
        }
        public function get_taxonomy_label($taxonomy, $key = 'name')
        {
        }
    }
    class Date
    {
        /**
         * @param string $date
         *
         * @return int|false
         */
        public function strtotime($date)
        {
        }
        /**
         * @param string $date
         * @param string $format
         *
         * @return int|false
         */
        public function get_timestamp_from_format($date, $format)
        {
        }
        /**
         * @param string $date           PHP Date format
         * @param string $display_format Date display format
         *
         * @return string Formatted date
         * @since 1.3.1
         */
        public function date($date, $display_format = '')
        {
        }
        /**
         * @param        $timestamp
         * @param string $display_format Date display format
         *
         * @return string Formatted date
         * @since 3.0
         */
        public function date_by_timestamp($timestamp, $display_format = '')
        {
        }
        public function format_date($format, $timestamp = null, \DateTimeZone $timezone = null)
        {
        }
        /**
         * @return DateTimeZone|null
         */
        public function timezone()
        {
        }
        /**
         * @param string $date
         * @param string $format
         *
         * @return string Formatted time
         * @since 1.3.1
         */
        public function time($date, $format = '')
        {
        }
        /**
         * Translate a jQuery date format to the PHP date format
         *
         * @param string $format jQuery date format
         *
         * @return string PHP date format
         * @since 1.1
         */
        public function parse_jquery_dateformat($format)
        {
        }
    }
    class Icon
    {
        public function dashicon($args = [])
        {
        }
        /**
         * @param bool   $tooltip
         * @param bool   $title
         * @param string $class
         *
         * @return string
         * @since 3.0
         */
        public function yes($tooltip = false, $title = true, $class = 'green')
        {
        }
        /**
         * @param bool   $tooltip
         * @param bool   $title
         * @param string $class
         *
         * @return string
         * @since 3.0
         */
        public function no($tooltip = false, $title = true, $class = 'red')
        {
        }
        /**
         * @param        $is_true
         * @param string $tooltip
         *
         * @return string HTML Dashicon
         * @since 3.0
         */
        public function yes_or_no($is_true, $tooltip = '')
        {
        }
    }
    class Post
    {
        /**
         * @param int $id
         *
         * @return bool
         */
        public function exists($id)
        {
        }
        /**
         * @param int $id Post ID
         *
         * @return false|string Post Title
         */
        public function get_raw_post_title($id)
        {
        }
        /**
         * @param int $post_id Post ID
         * @param int $words
         *
         * @return string Post Excerpt.
         * @since 1.0
         */
        public function excerpt($post_id, $words = 400)
        {
        }
        /**
         * @param string $post_type_name
         * @param bool   $plural
         *
         * @return bool
         */
        public function get_post_type_label($post_type_name, $plural = false)
        {
        }
        /**
         * @param string $field Field
         * @param int    $id    Post ID
         *
         * @return string|false
         */
        public function get_raw_field($field, $id)
        {
        }
        /**
         * Get Post Title or Media Filename
         *
         * @param int|WP_Post $post_id
         *
         * @return bool|string
         */
        public function get_title($post_id)
        {
        }
        /**
         * @param WP_Post $post Post
         *
         * @return false|string Dash icon with tooltip
         */
        public function get_status_icon($post)
        {
        }
    }
    class Arrays
    {
        /**
         * @param mixed $array
         *
         * @return bool
         */
        public function is_associative($array)
        {
        }
        /**
         * @param array $keys
         * @param mixed $value
         * @param array $result
         *
         * @return array
         */
        public function add_nested_value(array $keys, $value, array $result = [])
        {
        }
        /**
         * @param array $array
         * @param array $keys
         *
         * @return mixed
         */
        public function get_nested_value(array $array, array $keys)
        {
        }
        /**
         * Implode for multi dimensional array
         *
         * @param string       $glue
         * @param string|array $pieces
         *
         * @return string Imploded array
         * @since 3.0
         */
        public function implode_recursive($glue, $pieces)
        {
        }
        /**
         * Replace a single key in an associative array
         *
         * @param array      $input   Input array.
         * @param int|string $old_key Key to replace.
         * @param int|string $new_key Key to replace $old_key with
         *
         * @return array
         * @since 2.2.7
         */
        public function key_replace($input, $old_key, $new_key)
        {
        }
        /**
         * Indents any object as long as it has a unique id and that of its parent.
         *
         * @param array  $array
         * @param int    $parentId
         * @param string $parentKey
         * @param string $selfKey
         * @param string $childrenKey
         *
         * @return array Indented Array
         * @since 1.0
         */
        public function indent($array, $parentId = 0, $parentKey = 'post_parent', $selfKey = 'ID', $childrenKey = 'children')
        {
        }
        /**
         * Remove empty values from array
         *
         * @param array $array
         *
         * @return array
         */
        public function filter($array)
        {
        }
        /**
         * Insert element into array at specific position
         *
         * @param array  $array
         * @param array  $insert
         * @param string $position
         *
         * @return array
         */
        public function insert($array, $insert, $position)
        {
        }
        /**
         * Get duplicates from array
         *
         * @param array $array
         *
         * @return array
         */
        public function get_duplicates(array $array)
        {
        }
        /**
         * Returns all integers from an array or comma separated string
         *
         * @param array|string $mixed
         *
         * @return int[]
         */
        public function get_integers_from_mixed($mixed)
        {
        }
        /**
         * @param array  $array
         * @param string $glue
         *
         * @return string
         */
        public function implode_associative(array $array, $glue)
        {
        }
    }
}
namespace AC\Helper\Select\Group\CustomField {
    class MultiSite extends \AC\Helper\Select\Group
    {
        /**
         * @var array $groups
         */
        private $groups;
        public function __construct(\AC\Helper\Select\Formatter $formatter)
        {
        }
        private function get_groups()
        {
        }
        /**
         * @param        $entity
         * @param Option $option
         *
         * @return string
         */
        public function get_label($entity, \AC\Helper\Select\Option $option)
        {
        }
    }
}
namespace AC\Helper\Select\Group {
    class CustomField extends \AC\Helper\Select\Group
    {
        /**
         * @param        $entity
         * @param Option $option
         *
         * @return string
         */
        public function get_label($entity, \AC\Helper\Select\Option $option)
        {
        }
    }
}
namespace AC\Helper\Select {
    final class OptionGroup
    {
        /**
         * @var string
         */
        private $label;
        /**
         * @var Option[]
         */
        private $options;
        /**
         * @param string   $label
         * @param Option[] $options
         */
        public function __construct($label, array $options = [])
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @return Option[]
         */
        public function get_options()
        {
        }
        /**
         * @param Option $option
         *
         * @return $this
         */
        protected function add_option(\AC\Helper\Select\Option $option)
        {
        }
    }
}
namespace AC\Helper\Select\Entities {
    class CustomFields extends \AC\Helper\Select\Entities implements \AC\Helper\Select\Paginated
    {
        /**
         * @param array $args
         * @param Value $value
         */
        public function __construct(array $args = [], \AC\Helper\Select\Value $value = null)
        {
        }
        public function get_total_pages()
        {
        }
        public function get_page()
        {
        }
        public function is_last_page()
        {
        }
    }
}
namespace AC\Helper\Select {
    class MetaValuesFactory
    {
        /**
         * @param string      $meta_type
         * @param string      $meta_key
         * @param string|null $post_type
         *
         * @return array
         */
        public static function create($meta_type, $meta_key, $post_type = null)
        {
        }
    }
}
namespace AC\Helper\Select\Formatter {
    class NullFormatter extends \AC\Helper\Select\Formatter
    {
        public function __construct(\AC\Helper\Select\Entities $entities, \AC\Helper\Select\Value $value = null)
        {
        }
        /**
         * @param string $label
         *
         * @return string
         */
        public function get_label($label)
        {
        }
    }
}
namespace AC\Helper\Select {
    final class Response
    {
        /**
         * @var Options
         */
        private $options;
        /**
         * @var bool
         */
        private $more;
        /**
         * @param Options $options
         * @param bool    $more
         */
        public function __construct(\AC\Helper\Select\Options $options, $more = false)
        {
        }
        /**
         * @param array $options
         *
         * @return array
         */
        private function parse_options(array $options)
        {
        }
        public function __invoke()
        {
        }
    }
}
namespace AC\Helper\Select\Value {
    final class NullFormatter implements \AC\Helper\Select\Value
    {
        public function get_value($value)
        {
        }
    }
}
namespace AC\Helper {
    class File
    {
        /**
         * Convert file size to readable format
         *
         * @param      $bytes
         * @param int  $decimals
         * @param bool $empty_text
         *
         * @return string|false Readable file size
         * @since 1.4.5
         */
        public function get_readable_filesize($bytes, $decimals = 2, $empty_text = false)
        {
        }
        /**
         * @param string $bytes
         * @param int    $decimals
         *
         * @return array [ string $size, string $unit ]
         */
        public function get_readable_filesize_as_array($bytes, $decimals = 2)
        {
        }
    }
    class User
    {
        /**
         * @param string $field
         * @param int    $user_id
         *
         * @return bool|string|array
         */
        public function get_user_field($field, $user_id)
        {
        }
        /**
         * @param mixed $user
         *
         * @return false|WP_User
         */
        public function get_user($user)
        {
        }
        /**
         * @param array $role_names
         *
         * @return array
         */
        public function translate_roles($role_names)
        {
        }
        /**
         * @param int|WP_User  $user
         * @param false|string $format WP_user var, 'first_last_name' or 'roles'
         *
         * @return false|string
         */
        public function get_display_name($user, $format = false)
        {
        }
        /**
         * @param array $roles Role keys
         *
         * @return array Role nice names
         */
        public function get_roles_names($roles)
        {
        }
        /**
         * @param string $role
         *
         * @return string
         */
        public function get_role_name($role)
        {
        }
        /**
         * @param int    $user_id
         * @param string $post_type
         *
         * @return string
         * @since 3.4.4
         */
        public function get_postcount($user_id, $post_type)
        {
        }
        /**
         * @return array Translatable roles
         */
        public function get_roles()
        {
        }
        /**
         * @param array $roles
         *
         * @return array Role Names
         */
        public function get_role_names($roles)
        {
        }
        /**
         * @return array
         */
        public function get_ids()
        {
        }
        /**
         * Fetches remote translations. Expires in 7 days.
         * @return array[]
         */
        public function get_translations_remote()
        {
        }
    }
    class Network
    {
        /**
         * @param int    $blog_id
         * @param string $option Option name
         *
         * @return null|string
         */
        public function get_site_option($blog_id, $option)
        {
        }
        /**
         * @param int $blog_id
         *
         * @return WP_Theme
         */
        public function get_active_theme($blog_id)
        {
        }
    }
    class Image
    {
        /**
         * Resize image
         *
         * @param string      $file
         * @param int         $max_w
         * @param int         $max_h
         * @param bool        $crop
         * @param null|string $suffix
         * @param null|string $dest_path
         * @param int         $jpeg_quality
         *
         * @return false|string
         */
        public function resize($file, $max_w, $max_h, $crop = false, $suffix = null, $dest_path = null, $jpeg_quality = 90)
        {
        }
        /**
         * @param int[]|int    $ids
         * @param array|string $size
         *
         * @return string HTML Images
         */
        public function get_images_by_ids($ids, $size)
        {
        }
        /**
         * @param int          $id
         * @param string|array $size
         *
         * @return string
         */
        public function get_image_by_id($id, $size)
        {
        }
        /**
         * @param     $size
         * @param int $scale
         *
         * @return float
         */
        private function scale_size($size, $scale = 1)
        {
        }
        private function is_resized_image($path)
        {
        }
        /**
         * @param string       $url
         * @param array|string $size
         *
         * @return string
         */
        public function get_image_by_url($url, $size)
        {
        }
        /**
         * @param mixed        $images
         * @param array|string $size
         * @param bool         $skip_image_check Skips image check. Useful when the url does not have an image extension like jpg or gif (e.g. gravatar).
         *
         * @return array
         */
        public function get_images($images, $size = 'thumbnail', $skip_image_check = false)
        {
        }
        /**
         * @param int|string $image ID of Url
         * @param string     $size
         * @param bool       $skip_image_check
         *
         * @return string
         */
        public function get_image($image, $size = 'thumbnail', $skip_image_check = false)
        {
        }
        /**
         * @param string $name
         *
         * @return array Image sizes
         */
        public function get_image_sizes_by_name($name)
        {
        }
        /**
         * @param int $attachment_id
         *
         * @return bool|string
         */
        public function get_file_name($attachment_id)
        {
        }
        /**
         * @param int $attachment_id
         *
         * @return string File extension
         */
        public function get_file_extension($attachment_id)
        {
        }
        private function get_file_tooltip_attr($media_id)
        {
        }
        private function markup_cover($src, $width, $height, $media_id = null)
        {
        }
        private function markup($src, $width, $height, $media_id = null, $add_extension = false, $class = '')
        {
        }
        /**
         * Return dimensions and file type
         *
         * @param string $url
         *
         * @return false|array
         * @see filesize
         */
        public function get_local_image_info($url)
        {
        }
        /**
         * @param string $url
         *
         * @return false|string
         */
        public function get_local_image_path($url)
        {
        }
        /**
         * @param string $url
         *
         * @return false|int
         */
        public function get_local_image_size($url)
        {
        }
        /**
         * @param string $string
         *
         * @return array
         */
        public function get_image_urls_from_string($string)
        {
        }
    }
}
namespace AC {
    class ViewCollection implements \AC\Renderable
    {
        /**
         * @var View[]
         */
        private $views;
        public function __construct(array $views)
        {
        }
        public function render()
        {
        }
    }
    class Request
    {
        const METHOD_POST = 'POST';
        const METHOD_GET = 'GET';
        /**
         * @var string
         */
        protected $method;
        /**
         * @var Parameters
         */
        protected $query;
        /**
         * @var Parameters
         */
        protected $request;
        /**
         * @var Middleware[]
         */
        protected $middleware;
        public function __construct()
        {
        }
        /**
         * @param Middleware $middleware
         *
         * @return self
         */
        public function add_middleware(\AC\Middleware $middleware)
        {
        }
        /**
         * @return bool
         */
        public function is_request()
        {
        }
        /**
         * @return Parameters
         */
        public function get_query()
        {
        }
        /**
         * @return Parameters
         */
        public function get_request()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * Return the parameters based on the current method
         * @return Parameters
         */
        public function get_parameters()
        {
        }
        /**
         * @param string $key
         * @param null   $default
         *
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * @param string    $key
         * @param null      $default
         * @param int       $filter
         * @param array|int $options
         *
         * @return mixed
         */
        public function filter($key, $default = null, $filter = FILTER_DEFAULT, $options = 0)
        {
        }
    }
}
namespace AC\Nonce {
    class Ajax extends \AC\Form\Nonce
    {
        const NAME = '_ajax_nonce';
        const ACTION = 'ac-ajax';
        public function __construct()
        {
        }
    }
}
namespace AC {
    class IntegrationRepository
    {
        const ARG_FILTER = 'filter';
        /**
         * @return Integrations
         */
        private function all()
        {
        }
        /**
         * @param string $basename
         *
         * @return Integration|null
         */
        public function find_by_basename($basename)
        {
        }
        /**
         * @param string $slug
         *
         * @return Integration|null
         */
        public function find_by_slug($slug)
        {
        }
        /**
         * @param array $args
         *
         * @return Integrations
         */
        public function find_all(array $args = [])
        {
        }
    }
}
namespace AC\ApplyFilter {
    class ColumnSeparator implements \AC\ApplyFilter
    {
        /**
         * @var Column
         */
        private $column;
        public function __construct(\AC\Column $column)
        {
        }
        public function apply_filters($value)
        {
        }
    }
}
namespace AC\Plugin\SetupFactory {
    final class AdminColumns extends \AC\Plugin\SetupFactory
    {
        public function create($type)
        {
        }
    }
}
namespace AC\Plugin\Install {
    final class Capabilities implements \AC\Plugin\Install
    {
        public function install()
        {
        }
    }
    final class Database implements \AC\Plugin\Install
    {
        const TABLE = 'admin_columns';
        public function install()
        {
        }
        private function create_database()
        {
        }
        private function get_schema()
        {
        }
    }
}
namespace AC\Plugin {
    final class InstallCollection extends \AC\Iterator
    {
        public function __construct(array $data = [])
        {
        }
        protected function add(\AC\Plugin\Install $install)
        {
        }
        /**
         * @return Install
         */
        public function current()
        {
        }
    }
}
namespace AC\Plugin\Update {
    class V4000 extends \AC\Plugin\Update
    {
        const DATABASE_TABLE = 'admin_columns';
        const LAYOUT_PREFIX = 'cpac_layouts';
        const COLUMNS_PREFIX = 'cpac_options_';
        const PROGRESS_KEY = 'ac_update_progress';
        const REPLACEMENT_IDS_KEY = 'ac_update_replacement_ids';
        /** @var int */
        private $next_step;
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        private function update_replacement_ids(array $ids)
        {
        }
        private function get_replacement_ids()
        {
        }
        /**
         * @return int
         */
        private function get_next_step()
        {
        }
        private function update_next_step($step)
        {
        }
        private function flush_temp_data()
        {
        }
        // Segments were stored globally, ignoring individual sites on a multisite network. Segments are now stored per site.
        private function migrate_segments_preferences()
        {
        }
        private function update_user_preferences_segments(array $list_ids)
        {
        }
        /**
         * @param array $list_ids
         *
         * @return array
         */
        private function map_to_storage_keys(array $list_ids)
        {
        }
        private function update_user_preference_by_key($meta_key, array $list_ids)
        {
        }
        private function migrate_user_preferences_table_selection(array $replaced_list_ids)
        {
        }
        /**
         * Migrate the order of the list screens from the `usermeta` to the `options` table
         */
        private function migrate_list_screen_order(array $replaced_list_ids)
        {
        }
        /**
         * Since Network list screens have their own preference, we have to remove any network list screens from the preferences
         */
        private function migrate_invalid_network_settings()
        {
        }
        private function maybe_replace_id(array $replaced_list_ids, $list_key, $id)
        {
        }
        /**
         * @return object[]
         */
        private function get_layouts_data()
        {
        }
        private function get_columns_data()
        {
        }
        /**
         * @return array List of replaced id's
         */
        private function migrate_list_screen_settings()
        {
        }
        /**
         * @param array $migrate
         *
         * @return array
         */
        private function unique_ids(array $migrate)
        {
        }
        private function create_database()
        {
        }
        private function insert(array $data)
        {
        }
        /**
         * @param string $storage_key
         *
         * @return string|false ID
         */
        private function contains_list_id($storage_key)
        {
        }
        /**
         * @param string $id
         *
         * @return string|false
         */
        private function is_layout_id($id)
        {
        }
        /**
         * @param string $string
         *
         * @return bool
         */
        private function is_hex($string)
        {
        }
        private function remove_prefix($prefix, $string)
        {
        }
        /**
         * @param string $string
         * @param string $end
         *
         * @return string
         */
        private function remove_suffix($suffix, $string)
        {
        }
        /**
         * @param string $prefix
         * @param string $string
         *
         * @return bool
         */
        private function has_prefix($prefix, $string)
        {
        }
        /**
         * @param string $suffix
         * @param string $string
         *
         * @return bool
         */
        private function has_suffix($suffix, $string)
        {
        }
    }
    class V3007 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        /**
         * Change the roles columns to the author column
         */
        private function update_roles_column()
        {
        }
    }
    class V3201 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        /**
         * Set all files to the proper case
         *
         * @param string Directory
         */
        protected function uppercase_class_files($directory)
        {
        }
        /**
         * Update user preferences for review
         */
        private function update_notice_preference_review()
        {
        }
        /**
         * Update user preferences for addons
         */
        private function update_notice_preference_addons()
        {
        }
        /**
         * @param string $key
         *
         * @return array ID's
         */
        protected function get_users_by_meta_key($key)
        {
        }
    }
    class V3005 extends \AC\Plugin\Update
    {
        public function __construct()
        {
        }
        public function apply_update()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function validate_key($key)
        {
        }
        /**
         * @param string $key
         *
         * @return array
         */
        private function get_meta($key)
        {
        }
        /**
         * Migrate USER specific preferences
         */
        private function migrate_user_specific_settings()
        {
        }
        /**
         * Preference to be REMOVED
         */
        private function delete_deprecated_settings()
        {
        }
        private function delete_deprecated_options()
        {
        }
        /**
         * Remove meta data
         *
         * @param string $key
         */
        private function delete($key)
        {
        }
    }
}
namespace AC\Plugin {
    class Version
    {
        /**
         * @var string
         */
        private $value;
        public function __construct($version)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return bool
         */
        public function is_valid()
        {
        }
        /**
         * Greater than
         *
         * @param Version $version
         *
         * @return bool
         */
        public function is_gt(\AC\Plugin\Version $version)
        {
        }
        /**
         * Lesser than
         *
         * @param Version $version
         *
         * @return bool
         */
        public function is_lt(\AC\Plugin\Version $version)
        {
        }
        /**
         * Greater than or Equal
         *
         * @param Version $version
         *
         * @return bool
         */
        public function is_gte(\AC\Plugin\Version $version)
        {
        }
        /**
         * Lesser than or Equal
         *
         * @param Version $version
         *
         * @return bool
         */
        public function is_lte(\AC\Plugin\Version $version)
        {
        }
        /**
         * @param Version $version
         *
         * @return bool
         */
        public function is_equal(\AC\Plugin\Version $version)
        {
        }
        /**
         * @param Version $version
         *
         * @return bool
         */
        public function is_not_equal(\AC\Plugin\Version $version)
        {
        }
        /**
         * @return bool
         */
        public function is_beta()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    abstract class Setup
    {
        /**
         * @var KeyValuePair
         */
        private $storage;
        /**
         * @var Version
         */
        private $version;
        /**
         * @var InstallCollection
         */
        private $installers;
        /**
         * @var UpdateCollection
         */
        private $updates;
        public function __construct(\AC\Storage\KeyValuePair $storage, \AC\Plugin\Version $version, \AC\Plugin\InstallCollection $installers, \AC\Plugin\UpdateCollection $updates)
        {
        }
        /**
         * @param Version $version
         *
         * @return void
         */
        protected function update_stored_version(\AC\Plugin\Version $version)
        {
        }
        /**
         * @return Version
         */
        protected function get_stored_version()
        {
        }
        private function update_stored_version_to_current()
        {
        }
        /**
         * @return bool
         */
        protected abstract function is_new_install();
        private function install()
        {
        }
        /**
         * @return void
         */
        private function update()
        {
        }
        /**
         * @param bool $force_install
         *
         * @return void
         */
        public function run($force_install = false)
        {
        }
    }
    final class UpdateCollection extends \AC\Iterator
    {
        public function __construct(array $data = [])
        {
        }
        private function add(\AC\Plugin\Update $update)
        {
        }
        private function sort_by_version()
        {
        }
        /**
         * @return Update
         */
        public function current()
        {
        }
    }
}
namespace AC\Plugin\Setup {
    final class Site extends \AC\Plugin\Setup
    {
        public function __construct(\AC\Storage\Option $storage, \AC\Plugin\Version $version, \AC\Plugin\InstallCollection $installers = null, \AC\Plugin\UpdateCollection $updates = null)
        {
        }
        protected function is_new_install()
        {
        }
    }
    final class Network extends \AC\Plugin\Setup
    {
        public function __construct(\AC\Storage\SiteOption $storage, \AC\Plugin\Version $version, \AC\Plugin\InstallCollection $installers, \AC\Plugin\UpdateCollection $updates)
        {
        }
        protected function is_new_install()
        {
        }
    }
}
namespace AC\Plugin {
    class PluginHeader
    {
        const AUTHOR = 'AuthorName';
        const DESCRIPTION = 'Description';
        const NAME = 'Name';
        const PLUGIN_URI = 'PluginURI';
        const REQUIRES_PHP = 'RequiresPHP';
        const REQUIRES_WP = 'RequiresWP';
        const TITLE = 'Title';
        const VERSION = 'Version';
        /**
         * @var string
         */
        private $file;
        public function __construct($file)
        {
        }
        /**
         * @param string $var
         *
         * @return string|null
         */
        public function get($var)
        {
        }
        /**
         * @return Version
         */
        public function get_version()
        {
        }
        /**
         * @return array
         */
        private function get_data()
        {
        }
    }
}
namespace AC\Exception {
    class SourceNotAvailableException extends \RuntimeException
    {
        public function __construct($code = 0)
        {
        }
    }
    class MissingListScreenIdException extends \LogicException
    {
        public static function from_saving_list_screen()
        {
        }
    }
    class RequestException extends \RuntimeException
    {
        public static function parameters_invalid()
        {
        }
    }
}
namespace AC\Integration {
    final class Pods extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
    }
    final class MetaBox extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
    }
    final class YoastSeo extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
    }
    final class ACF extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
    }
    final class EventsCalendar extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        private function get_post_types()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
        public function show_placeholder(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace AC\Integration\Filter {
    class IncludeProducts implements \AC\Integration\Filter
    {
        /**
         * @var Products
         */
        private $products;
        public function __construct(\ACP\Type\Activation\Products $products)
        {
        }
        public function filter(\AC\Integrations $integrations)
        {
        }
        /**
         * @param Integration $integration
         *
         * @return bool
         */
        private function include_product(\AC\Integration $integration)
        {
        }
    }
    class IsNotActive implements \AC\Integration\Filter
    {
        /**
         * @var bool
         */
        private $is_multisite;
        /**
         * @var bool
         */
        private $is_network_admin;
        public function __construct($is_multisite, $is_network_admin)
        {
        }
        public function filter(\AC\Integrations $integrations)
        {
        }
        private function is_not_active(\AC\Integration $integration)
        {
        }
    }
    class IsPluginNotActive implements \AC\Integration\Filter
    {
        public function filter(\AC\Integrations $integrations)
        {
        }
        private function is_not_active(\AC\Integration $integration)
        {
        }
    }
    class IsPluginActive implements \AC\Integration\Filter
    {
        public function filter(\AC\Integrations $integrations)
        {
        }
        private function is_active(\AC\Integration $integration)
        {
        }
    }
    class IsInstalled implements \AC\Integration\Filter
    {
        public function filter(\AC\Integrations $integrations)
        {
        }
        private function is_installed(\AC\Integration $integration)
        {
        }
    }
    class ExcludeProducts implements \AC\Integration\Filter
    {
        /**
         * @var Products
         */
        private $products;
        public function __construct(\ACP\Type\Activation\Products $products)
        {
        }
        public function filter(\AC\Integrations $integrations)
        {
        }
        /**
         * @param Integration $integration
         *
         * @return bool
         */
        private function exclude_product(\AC\Integration $integration)
        {
        }
    }
    class ExcludeIntegrations implements \AC\Integration\Filter
    {
        /**
         * @var Integrations
         */
        private $integrations;
        public function __construct(\AC\Integrations $integrations)
        {
        }
        public function filter(\AC\Integrations $integrations)
        {
        }
        /**
         * @param Integration $integration
         *
         * @return bool
         */
        private function exclude_integration(\AC\Integration $integration)
        {
        }
    }
    class IsActive implements \AC\Integration\Filter
    {
        /**
         * @var bool
         */
        private $is_multisite;
        /**
         * @var bool
         */
        private $is_network_admin;
        public function __construct($is_multisite, $is_network_admin)
        {
        }
        public function filter(\AC\Integrations $integrations)
        {
        }
        public function is_active(\AC\Integration $integration)
        {
        }
    }
}
namespace AC\Integration {
    final class Types extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
    }
    final class WooCommerce extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        private function get_post_types()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
        public function show_placeholder(\AC\ListScreen $list_screen)
        {
        }
    }
    final class GravityForms extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
        public function show_placeholder(\AC\ListScreen $list_screen)
        {
        }
    }
    final class JetEngine extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
    }
    final class BuddyPress extends \AC\Integration
    {
        public function __construct()
        {
        }
        public function is_plugin_active()
        {
        }
        public function show_notice(\AC\Screen $screen)
        {
        }
        public function show_placeholder(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace AC\Ajax {
    class Handler implements \AC\Registerable
    {
        const NONCE_ACTION = 'ac-ajax';
        /**
         * @var array
         */
        protected $params;
        /**
         * @var string|array
         */
        protected $callback;
        /**
         * @var bool
         */
        protected $wp_ajax;
        /**
         * @var int
         */
        protected $priority = 10;
        /**
         * @param bool|null $wp_ajax Using the WP Ajax endpoint or custom
         */
        public function __construct($wp_ajax = null)
        {
        }
        public function register()
        {
        }
        public function deregister()
        {
        }
        /**
         * @return string|null
         */
        public function get_action()
        {
        }
        /**
         * @param string $action
         *
         * @return $this
         */
        public function set_action($action)
        {
        }
        /**
         * @param int $priority
         *
         * @return Handler
         */
        public function set_priority($priority)
        {
        }
        /**
         * @return int
         */
        public function get_priority()
        {
        }
        /**
         * @param string|array $callback
         *
         * @return $this
         */
        public function set_callback($callback)
        {
        }
        /**
         * @return array|string
         */
        public function get_callback()
        {
        }
        /**
         * @param null|string $nonce
         *
         * @return $this
         */
        public function set_nonce($nonce = null)
        {
        }
        /**
         * @return $this
         */
        public function unset_nonce()
        {
        }
        /**
         * @param string $action
         */
        public function verify_request($action = null)
        {
        }
        /**
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * @param $key
         *
         * @return mixed|null
         */
        public function get_param($key)
        {
        }
        /**
         * @param array $params
         *
         * @return $this
         */
        public function set_params(array $params)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         *
         * @return $this
         */
        public function set_param($key, $value)
        {
        }
    }
    class NullHandler extends \AC\Ajax\Handler
    {
        public function register()
        {
        }
    }
    final class NumberFormat implements \AC\Registerable
    {
        /**
         * @var Request
         */
        private $request;
        public function __construct(\AC\Request $request)
        {
        }
        public function register()
        {
        }
        public function request()
        {
        }
    }
}
namespace AC {
    class PermissionChecker
    {
        /**
         * @param ListScreen   $list_screen
         * @param WP_User|null $user
         *
         * @return bool
         */
        public function is_valid(\AC\ListScreen $list_screen, \WP_User $user = null)
        {
        }
    }
}
namespace AC\ListTable {
    trait WpListTableTrait
    {
        /**
         * @var WP_List_Table $table
         */
        protected $table;
        /**
         * @return int
         */
        public function get_total_items()
        {
        }
    }
    class Media implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        public function __construct(\WP_Media_List_Table $table)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
    class Taxonomy implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        /**
         * @var string
         */
        private $taxonomy;
        public function __construct(\WP_Terms_List_Table $table, $taxonomy)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
    class Post implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        public function __construct(\WP_Posts_List_Table $table)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
    class NetworkSite implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        public function __construct(\WP_MS_Sites_List_Table $table)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
    class NetworkUser implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        public function __construct(\WP_MS_Users_List_Table $table)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
    class Comment implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        public function __construct(\WP_Comments_List_Table $table)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
    class User implements \AC\ListTable
    {
        use \AC\ListTable\WpListTableTrait;
        public function __construct(\WP_Users_List_Table $table)
        {
        }
        public function get_column_value($column, $id)
        {
        }
    }
}
namespace AC {
    class ListScreens implements \AC\Registerable
    {
        public function register()
        {
        }
        public function register_list_screens()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return self
         */
        public function register_list_screen(\AC\ListScreen $list_screen)
        {
        }
        /**
         * Get a list of post types for which Admin Columns is active
         * @return array List of post type keys (e.g. post, page)
         * @since 1.0
         */
        public function get_post_types()
        {
        }
    }
    class ColumnRepository
    {
        const ARG_FILTERS = 'filters';
        const ARG_FILTER = 'filter';
        const ARG_SORT = 'sort';
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @param ListScreen $list_screen
         */
        public function __construct(\AC\ListScreen $list_screen)
        {
        }
        /**
         * @param string $column_name
         *
         * @return Column|null
         */
        public function find($column_name)
        {
        }
        /**
         * @param array $args
         *
         * @return Column[]
         */
        public function find_all(array $args = [])
        {
        }
    }
    final class MetaType
    {
        const POST = 'post';
        const USER = 'user';
        const COMMENT = 'comment';
        const TERM = 'term';
        const SITE = 'site';
        /**
         * @var string
         */
        private $meta_type;
        /**
         * @param string $meta_type
         */
        public function __construct($meta_type)
        {
        }
        /**
         * @return string
         */
        public function get()
        {
        }
        /**
         * @throws LogicException
         */
        private function validate()
        {
        }
    }
    class ListScreenGroups
    {
        /**
         * @return Groups
         */
        public static function get_groups()
        {
        }
    }
    final class EncodedListScreenData implements \Iterator
    {
        /**
         * @var array
         */
        private $data = [];
        public function add(array $data)
        {
        }
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
    }
}
namespace AC\Capabilities {
    class Manage extends \AC\Capabilities
    {
        public function set_default_caps(\WP_Roles $roles)
        {
        }
    }
}
namespace AC {
    class ListTableFactory
    {
        public function create_from_globals()
        {
        }
    }
    class ColumnGroups
    {
        /**
         * @return Groups
         */
        public static function get_groups()
        {
        }
    }
}
namespace AC\Form\Element {
    class Input extends \AC\Form\Element
    {
        protected function is_valid_type($type)
        {
        }
        public function render()
        {
        }
        public function get_type()
        {
        }
        /**
         * @param string $type
         *
         * @return $this
         */
        public function set_type($type)
        {
        }
    }
    class Radio extends \AC\Form\Element\Checkbox
    {
        protected function get_type()
        {
        }
    }
    class MultiSelect extends \AC\Form\Element\Select
    {
        public function __construct($name, array $options = [])
        {
        }
        protected function selected($value)
        {
        }
    }
    class Toggle extends \AC\Form\Element
    {
        /**
         * @var boolean
         */
        private $checked;
        /**
         * @var string
         */
        private $unchecked_value;
        /**
         * @var array
         */
        private $container_attributes;
        /**
         * @var string
         */
        private $container_class;
        public function __construct($name, $label, $checked = false, $value = null, $unchecked_value = 'false')
        {
        }
        public function set_container_attributes($attributes)
        {
        }
        protected function get_type()
        {
        }
        public function render()
        {
        }
    }
}
namespace AC {
    class PluginActionLinks implements \AC\Registerable
    {
        /**
         * @var string
         */
        private $basename;
        /**
         * @var bool
         */
        private $is_acp_active;
        public function __construct($basename, bool $is_acp_active)
        {
        }
        public function register()
        {
        }
        /**
         * Add a settings link to the Admin Columns entry in the plugin overview screen
         *
         * @param array  $links
         * @param string $file
         *
         * @return array
         * @see   filter:plugin_action_links
         * @since 1.0
         */
        public function add_settings_link($links, $file)
        {
        }
    }
    class DefaultColumnsRepository
    {
        const OPTIONS_KEY = 'cpac_options_';
        /**
         * @param string $list_screen_key
         *
         * @return string
         */
        private function get_option_name($list_screen_key)
        {
        }
        /**
         * @param string $list_screen_key
         * @param array  $columns
         *
         * @return void
         */
        public function update($list_screen_key, array $columns)
        {
        }
        /**
         * @param string $list_screen_key
         *
         * @return bool
         */
        public function exists($list_screen_key)
        {
        }
        /**
         * @param string $list_screen_key
         *
         * @return array
         */
        public function get($list_screen_key)
        {
        }
        /**
         * @param string $list_screen_key
         *
         * @return void
         */
        public function delete($list_screen_key)
        {
        }
    }
    class PluginInformation
    {
        /**
         * @var string
         */
        private $basename;
        public function __construct($basename)
        {
        }
        public static function create_by_file($file) : self
        {
        }
        public function get_basename() : string
        {
        }
        public function get_dirname() : string
        {
        }
        public function is_installed() : bool
        {
        }
        public function is_active() : bool
        {
        }
        public function is_network_active() : bool
        {
        }
        public function get_version() : \AC\Plugin\Version
        {
        }
        public function get_name() : ?string
        {
        }
        private function get_plugins() : array
        {
        }
        private function get_plugin_updates() : array
        {
        }
        public function has_update() : bool
        {
        }
        public function get_update() : ?\AC\PluginUpdate
        {
        }
        private function get_header_data() : ?array
        {
        }
        public function get_header(string $var) : ?string
        {
        }
    }
}
namespace AC\Controller {
    class ListScreenRestoreColumns implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $repository;
        public function __construct(\AC\ListScreenRepository\Storage $repository)
        {
        }
        public function register()
        {
        }
        public function handle_request()
        {
        }
        /**
         * @param string $action
         *
         * @return bool
         */
        private function verify_nonce($action)
        {
        }
    }
    class AjaxColumnValue implements \AC\Registerable
    {
        /**
         * @var ListScreenRepository
         */
        private $repository;
        public function __construct(\AC\ListScreenRepository $repository)
        {
        }
        public function register()
        {
        }
        private function get_ajax_handler()
        {
        }
        public function get_value()
        {
        }
    }
    class DefaultColumns implements \AC\Registerable
    {
        const ACTION_KEY = 'save-default-headings';
        const LISTSCREEN_KEY = 'list_screen';
        /** @var ListScreen */
        private $list_screen;
        /** @var Request */
        private $request;
        /** @var DefaultColumns */
        private $default_columns;
        public function __construct(\AC\Request $request, \AC\DefaultColumnsRepository $default_columns)
        {
        }
        public function register()
        {
        }
        public function handle_request()
        {
        }
        public function save_headings($columns)
        {
        }
    }
}
namespace AC\Controller\Middleware {
    class ListScreenTable implements \AC\Middleware
    {
        const PARAM_LIST_ID = 'list_id';
        const PARAM_LIST_KEY = 'list_key';
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var WP_Screen
         */
        private $wp_screen;
        /**
         * @var Table\LayoutPreference
         */
        private $preference;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \WP_Screen $wp_screen, \AC\Table\LayoutPreference $preference)
        {
        }
        /**
         * @return string|null
         */
        private function get_list_key_from_screen()
        {
        }
        /**
         * Set the list_key and layout
         *
         * @param Request $request
         */
        public function handle(\AC\Request $request)
        {
        }
    }
    class ListScreenAdmin implements \AC\Middleware
    {
        const PARAM_LIST_ID = 'list_id';
        const PARAM_LIST_KEY = 'list_key';
        /** @var Storage */
        private $storage;
        /** @var Preference\ListScreen */
        private $preference;
        /** @var bool */
        private $is_network;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Admin\Preference\ListScreen $preference, $is_network = false)
        {
        }
        public function handle(\AC\Request $request)
        {
        }
    }
}
namespace AC\Controller {
    class AjaxScreenOptions implements \AC\Registerable
    {
        /**
         * @var ScreenOptions
         */
        private $preference;
        public function __construct(\AC\Admin\Preference\ScreenOptions $preference)
        {
        }
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        private function get_ajax_handler()
        {
        }
        public function handle_ajax_request()
        {
        }
    }
    class RestoreSettingsRequest implements \AC\Registerable
    {
        /**
         * @var ListScreenRepository
         */
        private $repository;
        public function __construct(\AC\ListScreenRepository\Storage\ListScreenRepository $repository)
        {
        }
        public function register()
        {
        }
        public function handle_request()
        {
        }
        private function delete_user_preferences()
        {
        }
        private function delete_options()
        {
        }
    }
    class TableListScreenSetter implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var PermissionChecker
         */
        private $permission_checker;
        /**
         * @var Absolute
         */
        private $location;
        /**
         * @var Table\LayoutPreference
         */
        private $preference;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\PermissionChecker $permission_checker, \AC\Asset\Location\Absolute $location, \AC\Table\LayoutPreference $preference)
        {
        }
        public function register()
        {
        }
        public function handle(\WP_Screen $wp_screen)
        {
        }
    }
    class AjaxGeneralOptions implements \AC\Registerable
    {
        /**
         * @var GeneralOption
         */
        private $general_option;
        public function __construct(\AC\Settings\GeneralOption $general_option)
        {
        }
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        private function get_ajax_handler()
        {
        }
        public function handle_request()
        {
        }
    }
}
namespace AC\Controller\ListScreen\Sanitize {
    class FormData implements \AC\Sanitize
    {
        /**
         * @param array $data
         *
         * @return array
         */
        public function sanitize($data)
        {
        }
    }
    class Title implements \AC\Sanitize
    {
        const FIELD = 'title';
        public function sanitize($data)
        {
        }
    }
}
namespace AC\Controller\ListScreen {
    class Save
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Sanitize\FormData
         */
        private $sanitizer;
        public function __construct(\AC\ListScreenRepository\Storage $storage)
        {
        }
        public function request(\AC\Request $request)
        {
        }
        private function maybe_encode_urls(array $columndata)
        {
        }
    }
}
namespace AC\Controller {
    class AjaxColumnModalValue implements \AC\Registerable
    {
        /**
         * @var ListScreenRepository
         */
        private $repository;
        public function __construct(\AC\ListScreenRepository $repository)
        {
        }
        public function register()
        {
        }
        private function get_ajax_handler()
        {
        }
        public function get_value()
        {
        }
    }
    abstract class ColumnRequest
    {
        /**
         * @return AC\Column
         */
        protected abstract function get_column(\AC\Request $request, \AC\ListScreen $list_screen);
        public function request(\AC\Request $request)
        {
        }
        /**
         * @param AC\Column $column
         *
         * @return string
         */
        private function render_column(\AC\Column $column)
        {
        }
    }
}
namespace AC\Controller\ColumnRequest {
    class Refresh extends \AC\Controller\ColumnRequest
    {
        protected function get_column(\AC\Request $request, \AC\ListScreen $list_screen)
        {
        }
    }
    class Select extends \AC\Controller\ColumnRequest
    {
        protected function get_column(\AC\Request $request, \AC\ListScreen $list_screen)
        {
        }
    }
}
namespace AC\Controller {
    class AjaxColumnRequest implements \AC\Registerable
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var Request
         */
        private $request;
        public function __construct(\AC\ListScreenRepository\Storage $storage, \AC\Request $request)
        {
        }
        public function register()
        {
        }
        /**
         * @return Ajax\Handler
         */
        private function get_ajax_handler()
        {
        }
        public function handle_ajax_request()
        {
        }
    }
    class AjaxRequestCustomFieldKeys implements \AC\Registerable
    {
        public function register()
        {
        }
        private function get_ajax_handler()
        {
        }
        public function ajax_get_custom_fields()
        {
        }
    }
}
namespace AC\Table {
    final class Screen implements \AC\Registerable
    {
        /**
         * @var Asset\Location\Absolute
         */
        private $location;
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var Form\Element[]
         */
        private $screen_options;
        /**
         * @var Button[]
         */
        private $buttons = [];
        /**
         * @var ColumnSize\ListStorage
         */
        private $column_size_list_storage;
        /**
         * @var ColumnSize\UserStorage
         */
        private $column_size_user_storage;
        public function __construct(\AC\Asset\Location\Absolute $location, \AC\ListScreen $list_screen, \AC\ColumnSize\ListStorage $column_size_list_storage, \AC\ColumnSize\UserStorage $column_size_user_storage)
        {
        }
        /**
         * Register hooks
         */
        public function register()
        {
        }
        /**
         * @return Button[]
         */
        public function get_buttons()
        {
        }
        /**
         * @param Button $button
         * @param int    $priority
         *
         * @return bool
         */
        public function register_button(\AC\Table\Button $button, $priority = 10)
        {
        }
        /**
         * Set the primary columns. Used to place the actions bar.
         *
         * @param $default
         *
         * @return int|null|string
         * @since 2.5.5
         */
        public function set_primary_column($default)
        {
        }
        /**
         * Add a download link to the table screen
         *
         * @param array   $actions
         * @param WP_Post $post
         *
         * @return array
         */
        public function set_media_row_actions($actions, $post)
        {
        }
        /**
         * Sets the inline data when the title columns is not present on a AC\ListScreen_Post screen
         *
         * @param array   $actions
         * @param WP_Post $post
         *
         * @return array
         */
        public function set_inline_edit_data($actions, $post)
        {
        }
        /**
         * Remove quick edit from actions
         *
         * @param array $actions
         *
         * @return array
         */
        public function remove_quick_edit_from_actions($actions)
        {
        }
        /**
         * Adds a body class which is used to set individual column widths
         *
         * @param string $classes body classes
         *
         * @return string
         * @since 1.4.0
         */
        public function admin_class($classes)
        {
        }
        /**
         * @since 3.2.5
         */
        public function register_settings_button()
        {
        }
        /**
         * @since 2.2.4
         */
        public function admin_scripts()
        {
        }
        private function get_local_number_format(string $var)
        {
        }
        /**
         * @return string
         */
        private function get_list_screen_clear_link()
        {
        }
        /**
         * @return false|string
         */
        private function get_current_screen_id()
        {
        }
        /**
         * @return array
         */
        private function get_column_types_mapping()
        {
        }
        /**
         * @return ListScreen
         */
        public function get_list_screen()
        {
        }
        /**
         * Admin header scripts
         * @since 3.1.4
         */
        public function admin_head_scripts()
        {
        }
        /**
         * Admin footer scripts
         * @since 1.4.0
         */
        public function admin_footer_scripts()
        {
        }
        /**
         * @since 3.2.5
         */
        public function render_actions()
        {
        }
        private function render_buttons()
        {
        }
        /**
         * @param Renderable $option
         */
        public function register_screen_option(\AC\Renderable $option)
        {
        }
        /**
         * @param string $html
         *
         * @return string
         */
        public function screen_options($html)
        {
        }
    }
    final class ScreenTools implements \AC\Registerable
    {
        public function register()
        {
        }
        public function render($html)
        {
        }
    }
    class ScreenPreferences extends \AC\Preferences\Site
    {
        public function __construct($user_id = null)
        {
        }
    }
    class Button
    {
        /** @var string $slug */
        private $slug;
        /** @var string $label */
        private $label;
        /** @var string $text */
        private $text;
        /** @var string $dashicon */
        private $dashicon;
        /** @var array */
        protected $attributes = [];
        public function __construct($slug)
        {
        }
        /**
         * @return array
         */
        public function get_attributes()
        {
        }
        /**
         * @param string $class
         *
         * @return $this
         */
        public function add_class($class)
        {
        }
        /**
         * @param $key
         *
         * @return string|false
         */
        public function get_attribute($key)
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return $this
         */
        public function set_attribute($key, $value)
        {
        }
        /**
         * Get attributes as string
         *
         * @param array $attributes
         *
         * @return string
         */
        protected function get_attributes_as_string(array $attributes)
        {
        }
        /**
         * Render an attribute
         *
         * @param string $key
         * @param string $value
         *
         * @return string
         */
        protected function get_attribute_as_string($key, $value = null)
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @param string $slug
         *
         * @return $this
         */
        public function set_slug($slug)
        {
        }
        /**
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * @param string $label
         *
         * @return $this
         */
        public function set_label($label)
        {
        }
        /**
         * @return string
         */
        public function get_text()
        {
        }
        /**
         * @param string $text
         *
         * @return Button
         */
        public function set_text($text)
        {
        }
        /**
         * @return string
         */
        public function get_dashicon()
        {
        }
        /**
         * @param $dashicon
         *
         * @return $this
         */
        public function set_dashicon($dashicon)
        {
        }
        /**
         * @param $url
         *
         * @return $this
         */
        public function set_url($url)
        {
        }
        public function render()
        {
        }
    }
    class LayoutPreference extends \AC\Preferences\Site
    {
        public function __construct()
        {
        }
    }
    final class TableFormView implements \AC\Registerable
    {
        const PARAM_ACTION = 'ac-actions-form';
        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $html;
        /**
         * @var int
         */
        private $priority;
        public function __construct($type, $html, $priority = null)
        {
        }
        public function register()
        {
        }
        public function render()
        {
        }
    }
}
namespace AC\Table\InlineStyle {
    class ColumnSize implements \AC\Renderable
    {
        /**
         * @var ListScreen
         */
        private $list_screen;
        /**
         * @var ListStorage
         */
        private $list_storage;
        /**
         * @var UserStorage
         */
        private $user_storage;
        public function __construct(\AC\ListScreen $list_screen, \AC\ColumnSize\ListStorage $list_storage, \AC\ColumnSize\UserStorage $user_storage)
        {
        }
        private function render_style($column_name, \AC\Type\ColumnWidth $column_width, $type)
        {
        }
        public function render()
        {
        }
    }
}
namespace AC {
    class AdminColumns extends \AC\Plugin
    {
        /**
         * @var Storage
         */
        private $storage;
        /**
         * @var self
         */
        private static $instance;
        public static function instance()
        {
        }
        protected function __construct()
        {
        }
        private function is_acp_active() : bool
        {
        }
        /**
         * @return Storage
         */
        public function get_storage()
        {
        }
        /**
         * @deprecated 4.3.1
         */
        public function admin()
        {
        }
        /**
         * @since      3.0
         * @deprecated 4.0
         */
        public function api()
        {
        }
        /**
         * @return ListScreen[]
         * @deprecated 4.0
         */
        public function get_list_screens()
        {
        }
        /**
         * @return array
         * @since      1.0
         * @deprecated 4.1
         */
        public function get_post_types()
        {
        }
        /**
         * @param ListScreen $list_screen
         *
         * @return self
         * @deprecated 4.1
         */
        public function register_list_screen(\AC\ListScreen $list_screen)
        {
        }
    }
}
namespace AC\Vendor\Psr\Container {
    /**
     * Base interface representing a generic exception in a container.
     */
    interface ContainerExceptionInterface
    {
    }
    /**
     * Describes the interface of a container that exposes methods to read its entries.
     */
    interface ContainerInterface
    {
        /**
         * Finds an entry of the container by its identifier and returns it.
         *
         * @param string $id Identifier of the entry to look for.
         *
         * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
         * @throws ContainerExceptionInterface Error while retrieving the entry.
         *
         * @return mixed Entry.
         */
        public function get(string $id);
        /**
         * Returns true if the container can return an entry for the given identifier.
         * Returns false otherwise.
         *
         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
         *
         * @param string $id Identifier of the entry to look for.
         *
         * @return bool
         */
        public function has(string $id);
    }
    /**
     * No entry was found in the container.
     */
    interface NotFoundExceptionInterface extends \AC\Vendor\Psr\Container\ContainerExceptionInterface
    {
    }
}
namespace AC\Vendor\Composer {
    /**
     * This class is copied in every Composer installed project and available to all
     *
     * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
     *
     * To require its presence, you can require `composer-runtime-api ^2.0`
     *
     * @final
     */
    class InstalledVersions
    {
        /**
         * @var mixed[]|null
         * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
         */
        private static $installed;
        /**
         * @var bool|null
         */
        private static $canGetVendors;
        /**
         * @var array[]
         * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
         */
        private static $installedByVendor = array();
        /**
         * Returns a list of all package names which are present, either by being installed, replaced or provided
         *
         * @return string[]
         * @psalm-return list<string>
         */
        public static function getInstalledPackages()
        {
        }
        /**
         * Returns a list of all package names with a specific type e.g. 'library'
         *
         * @param  string   $type
         * @return string[]
         * @psalm-return list<string>
         */
        public static function getInstalledPackagesByType($type)
        {
        }
        /**
         * Checks whether the given package is installed
         *
         * This also returns true if the package name is provided or replaced by another package
         *
         * @param  string $packageName
         * @param  bool   $includeDevRequirements
         * @return bool
         */
        public static function isInstalled($packageName, $includeDevRequirements = \true)
        {
        }
        /**
         * Checks whether the given package satisfies a version constraint
         *
         * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
         *
         *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
         *
         * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
         * @param  string        $packageName
         * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
         * @return bool
         */
        public static function satisfies(\AC\Vendor\Composer\Semver\VersionParser $parser, $packageName, $constraint)
        {
        }
        /**
         * Returns a version constraint representing all the range(s) which are installed for a given package
         *
         * It is easier to use this via isInstalled() with the $constraint argument if you need to check
         * whether a given version of a package is installed, and not just whether it exists
         *
         * @param  string $packageName
         * @return string Version constraint usable with composer/semver
         */
        public static function getVersionRanges($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
         */
        public static function getVersion($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
         */
        public static function getPrettyVersion($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
         */
        public static function getReference($packageName)
        {
        }
        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
         */
        public static function getInstallPath($packageName)
        {
        }
        /**
         * @return array
         * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
         */
        public static function getRootPackage()
        {
        }
        /**
         * Returns the raw installed.php data for custom implementations
         *
         * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
         * @return array[]
         * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
         */
        public static function getRawData()
        {
        }
        /**
         * Returns the raw data of all installed.php which are currently loaded for custom implementations
         *
         * @return array[]
         * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
         */
        public static function getAllRawData()
        {
        }
        /**
         * Lets you reload the static array from another file
         *
         * This is only useful for complex integrations in which a project needs to use
         * this class but then also needs to execute another project's autoloader in process,
         * and wants to ensure both projects have access to their version of installed.php.
         *
         * A typical case would be PHPUnit, where it would need to make sure it reads all
         * the data it needs from this class, then call reload() with
         * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
         * the project in which it runs can then also use this class safely, without
         * interference between PHPUnit's dependencies and the project's dependencies.
         *
         * @param  array[] $data A vendor/composer/installed.php data set
         * @return void
         *
         * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
         */
        public static function reload($data)
        {
        }
        /**
         * @return array[]
         * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
         */
        private static function getInstalled()
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInitAdminColumns
    {
        private static $loader;
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInitAdminColumns
    {
        public static $files = array('ac-538ca81a9a966a6716601ecf48f4eaef' => __DIR__ . '/..' . '/opis/closure/functions.php', 'ac-b33e3d135e5d9e47d845c576147bda89' => __DIR__ . '/..' . '/php-di/php-di/src/functions.php');
        public static $prefixLengthsPsr4 = array('A' => array('AC\\Vendor\\Psr\\Container\\' => 24, 'AC\\Vendor\\PhpDocReader\\' => 23, 'AC\\Vendor\\Opis\\Closure\\' => 23, 'AC\\Vendor\\Invoker\\' => 18, 'AC\\Vendor\\DI\\' => 13, 'AC\\' => 3));
        public static $prefixDirsPsr4 = array('AC\\Vendor\\Psr\\Container\\' => array(0 => __DIR__ . '/..' . '/psr/container/src'), 'AC\\Vendor\\PhpDocReader\\' => array(0 => __DIR__ . '/..' . '/php-di/phpdoc-reader/src/PhpDocReader'), 'AC\\Vendor\\Opis\\Closure\\' => array(0 => __DIR__ . '/..' . '/opis/closure/src'), 'AC\\Vendor\\Invoker\\' => array(0 => __DIR__ . '/..' . '/php-di/invoker/src'), 'AC\\Vendor\\DI\\' => array(0 => __DIR__ . '/..' . '/php-di/php-di/src'), 'AC\\' => array(0 => __DIR__ . '/../..' . '/classes'));
        public static $classMap = array('AC\\AdminColumns' => __DIR__ . '/../..' . '/classes/AdminColumns.php', 'AC\\Admin\\Admin' => __DIR__ . '/../..' . '/classes/Admin/Admin.php', 'AC\\Admin\\AdminLoader' => __DIR__ . '/../..' . '/classes/Admin/AdminLoader.php', 'AC\\Admin\\AdminNetwork' => __DIR__ . '/../..' . '/classes/Admin/AdminNetwork.php', 'AC\\Admin\\AdminScripts' => __DIR__ . '/../..' . '/classes/Admin/AdminScripts.php', 'AC\\Admin\\Asset\\Addons' => __DIR__ . '/../..' . '/classes/Admin/Asset/Addons.php', 'AC\\Admin\\Asset\\Columns' => __DIR__ . '/../..' . '/classes/Admin/Asset/Columns.php', 'AC\\Admin\\Asset\\Settings' => __DIR__ . '/../..' . '/classes/Admin/Asset/Settings.php', 'AC\\Admin\\Banner' => __DIR__ . '/../..' . '/classes/Admin/Banner.php', 'AC\\Admin\\Colors\\ColorCollection' => __DIR__ . '/../..' . '/classes/Admin/Colors/ColorCollection.php', 'AC\\Admin\\Colors\\ColorReader' => __DIR__ . '/../..' . '/classes/Admin/Colors/ColorReader.php', 'AC\\Admin\\Colors\\ColorRepository' => __DIR__ . '/../..' . '/classes/Admin/Colors/ColorRepository.php', 'AC\\Admin\\Colors\\Colors' => __DIR__ . '/../..' . '/classes/Admin/Colors/Colors.php', 'AC\\Admin\\Colors\\Shipped\\ColorParser' => __DIR__ . '/../..' . '/classes/Admin/Colors/Shipped/ColorParser.php', 'AC\\Admin\\Colors\\Shipped\\ColorUpdater' => __DIR__ . '/../..' . '/classes/Admin/Colors/Shipped/ColorUpdater.php', 'AC\\Admin\\Colors\\Storage\\OptionFactory' => __DIR__ . '/../..' . '/classes/Admin/Colors/Storage/OptionFactory.php', 'AC\\Admin\\Colors\\StyleInjector' => __DIR__ . '/../..' . '/classes/Admin/Colors/StyleInjector.php', 'AC\\Admin\\Colors\\Type\\Color' => __DIR__ . '/../..' . '/classes/Admin/Colors/Type/Color.php', 'AC\\Admin\\HelpTab' => __DIR__ . '/../..' . '/classes/Admin/HelpTab.php', 'AC\\Admin\\Helpable' => __DIR__ . '/../..' . '/classes/Admin/Helpable.php', 'AC\\Admin\\Menu' => __DIR__ . '/../..' . '/classes/Admin/Menu.php', 'AC\\Admin\\MenuFactory' => __DIR__ . '/../..' . '/classes/Admin/MenuFactory.php', 'AC\\Admin\\MenuFactoryInterface' => __DIR__ . '/../..' . '/classes/Admin/MenuFactoryInterface.php', 'AC\\Admin\\MenuPageFactory' => __DIR__ . '/../..' . '/classes/Admin/MenuPageFactory.php', 'AC\\Admin\\MenuPageFactory\\Menu' => __DIR__ . '/../..' . '/classes/Admin/MenuPageFactory/Menu.php', 'AC\\Admin\\MenuPageFactory\\SubMenu' => __DIR__ . '/../..' . '/classes/Admin/MenuPageFactory/SubMenu.php', 'AC\\Admin\\Menu\\Item' => __DIR__ . '/../..' . '/classes/Admin/Menu/Item.php', 'AC\\Admin\\Notice\\ReadOnlyListScreen' => __DIR__ . '/../..' . '/classes/Admin/Notice/ReadOnlyListScreen.php', 'AC\\Admin\\PageFactoryInterface' => __DIR__ . '/../..' . '/classes/Admin/PageFactoryInterface.php', 'AC\\Admin\\PageFactory\\Addons' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Addons.php', 'AC\\Admin\\PageFactory\\Columns' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Columns.php', 'AC\\Admin\\PageFactory\\Help' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Help.php', 'AC\\Admin\\PageFactory\\Settings' => __DIR__ . '/../..' . '/classes/Admin/PageFactory/Settings.php', 'AC\\Admin\\PageNetworkRequestHandler' => __DIR__ . '/../..' . '/classes/Admin/PageNetworkRequestHandler.php', 'AC\\Admin\\PageNetworkRequestHandlers' => __DIR__ . '/../..' . '/classes/Admin/PageNetworkRequestHandlers.php', 'AC\\Admin\\PageRequestHandler' => __DIR__ . '/../..' . '/classes/Admin/PageRequestHandler.php', 'AC\\Admin\\PageRequestHandlers' => __DIR__ . '/../..' . '/classes/Admin/PageRequestHandlers.php', 'AC\\Admin\\Page\\Addons' => __DIR__ . '/../..' . '/classes/Admin/Page/Addons.php', 'AC\\Admin\\Page\\Columns' => __DIR__ . '/../..' . '/classes/Admin/Page/Columns.php', 'AC\\Admin\\Page\\Help' => __DIR__ . '/../..' . '/classes/Admin/Page/Help.php', 'AC\\Admin\\Page\\Settings' => __DIR__ . '/../..' . '/classes/Admin/Page/Settings.php', 'AC\\Admin\\Preference\\ListScreen' => __DIR__ . '/../..' . '/classes/Admin/Preference/ListScreen.php', 'AC\\Admin\\Preference\\ScreenOptions' => __DIR__ . '/../..' . '/classes/Admin/Preference/ScreenOptions.php', 'AC\\Admin\\RenderableHead' => __DIR__ . '/../..' . '/classes/Admin/RenderableHead.php', 'AC\\Admin\\RequestHandlerInterface' => __DIR__ . '/../..' . '/classes/Admin/RequestHandlerInterface.php', 'AC\\Admin\\ScreenOption' => __DIR__ . '/../..' . '/classes/Admin/ScreenOption.php', 'AC\\Admin\\ScreenOption\\ColumnId' => __DIR__ . '/../..' . '/classes/Admin/ScreenOption/ColumnId.php', 'AC\\Admin\\ScreenOption\\ColumnType' => __DIR__ . '/../..' . '/classes/Admin/ScreenOption/ColumnType.php', 'AC\\Admin\\ScreenOption\\ListScreenId' => __DIR__ . '/../..' . '/classes/Admin/ScreenOption/ListScreenId.php', 'AC\\Admin\\ScreenOption\\ListScreenType' => __DIR__ . '/../..' . '/classes/Admin/ScreenOption/ListScreenType.php', 'AC\\Admin\\ScreenOptions' => __DIR__ . '/../..' . '/classes/Admin/ScreenOptions.php', 'AC\\Admin\\Scripts' => __DIR__ . '/../..' . '/classes/Admin/Scripts.php', 'AC\\Admin\\Section' => __DIR__ . '/../..' . '/classes/Admin/Section.php', 'AC\\Admin\\SectionCollection' => __DIR__ . '/../..' . '/classes/Admin/SectionCollection.php', 'AC\\Admin\\Section\\AddonStatus' => __DIR__ . '/../..' . '/classes/Admin/Section/AddonStatus.php', 'AC\\Admin\\Section\\General' => __DIR__ . '/../..' . '/classes/Admin/Section/General.php', 'AC\\Admin\\Section\\Partial\\Menu' => __DIR__ . '/../..' . '/classes/Admin/Section/Partial/Menu.php', 'AC\\Admin\\Section\\Partial\\ShowEditButton' => __DIR__ . '/../..' . '/classes/Admin/Section/Partial/ShowEditButton.php', 'AC\\Admin\\Section\\ProCta' => __DIR__ . '/../..' . '/classes/Admin/Section/ProCta.php', 'AC\\Admin\\Section\\Restore' => __DIR__ . '/../..' . '/classes/Admin/Section/Restore.php', 'AC\\Admin\\Table' => __DIR__ . '/../..' . '/classes/Admin/Table.php', 'AC\\Admin\\Tooltip' => __DIR__ . '/../..' . '/classes/Admin/Tooltip.php', 'AC\\Admin\\View\\Menu' => __DIR__ . '/../..' . '/classes/Admin/View/Menu.php', 'AC\\Ajax\\Handler' => __DIR__ . '/../..' . '/classes/Ajax/Handler.php', 'AC\\Ajax\\NullHandler' => __DIR__ . '/../..' . '/classes/Ajax/NullHandler.php', 'AC\\Ajax\\NumberFormat' => __DIR__ . '/../..' . '/classes/Ajax/NumberFormat.php', 'AC\\ApplyFilter' => __DIR__ . '/../..' . '/classes/ApplyFilter.php', 'AC\\ApplyFilter\\ColumnSeparator' => __DIR__ . '/../..' . '/classes/ApplyFilter/ColumnSeparator.php', 'AC\\ArrayIterator' => __DIR__ . '/../..' . '/classes/ArrayIterator.php', 'AC\\Asset\\Assets' => __DIR__ . '/../..' . '/classes/Asset/Assets.php', 'AC\\Asset\\Enqueueable' => __DIR__ . '/../..' . '/classes/Asset/Enqueueable.php', 'AC\\Asset\\Enqueueables' => __DIR__ . '/../..' . '/classes/Asset/Enqueueables.php', 'AC\\Asset\\Location' => __DIR__ . '/../..' . '/classes/Asset/Location.php', 'AC\\Asset\\Location\\Absolute' => __DIR__ . '/../..' . '/classes/Asset/Location/Absolute.php', 'AC\\Asset\\Script' => __DIR__ . '/../..' . '/classes/Asset/Script.php', 'AC\\Asset\\Style' => __DIR__ . '/../..' . '/classes/Asset/Style.php', 'AC\\Capabilities' => __DIR__ . '/../..' . '/classes/Capabilities.php', 'AC\\Capabilities\\Manage' => __DIR__ . '/../..' . '/classes/Capabilities/Manage.php', 'AC\\Check\\AddonAvailable' => __DIR__ . '/../..' . '/classes/Check/AddonAvailable.php', 'AC\\Check\\Promotion' => __DIR__ . '/../..' . '/classes/Check/Promotion.php', 'AC\\Check\\Review' => __DIR__ . '/../..' . '/classes/Check/Review.php', 'AC\\Collection' => __DIR__ . '/../..' . '/classes/Collection.php', 'AC\\Column' => __DIR__ . '/../..' . '/classes/Column.php', 'AC\\ColumnGroups' => __DIR__ . '/../..' . '/classes/ColumnGroups.php', 'AC\\ColumnRepository' => __DIR__ . '/../..' . '/classes/ColumnRepository.php', 'AC\\ColumnRepository\\Filter' => __DIR__ . '/../..' . '/classes/ColumnRepository/Filter.php', 'AC\\ColumnRepository\\Sort' => __DIR__ . '/../..' . '/classes/ColumnRepository/Sort.php', 'AC\\ColumnRepository\\Sort\\ManualOrder' => __DIR__ . '/../..' . '/classes/ColumnRepository/Sort/ManualOrder.php', 'AC\\ColumnSize\\ListStorage' => __DIR__ . '/../..' . '/classes/ColumnSize/ListStorage.php', 'AC\\ColumnSize\\UserPreference' => __DIR__ . '/../..' . '/classes/ColumnSize/UserPreference.php', 'AC\\ColumnSize\\UserStorage' => __DIR__ . '/../..' . '/classes/ColumnSize/UserStorage.php', 'AC\\Column\\Actions' => __DIR__ . '/../..' . '/classes/Column/Actions.php', 'AC\\Column\\AjaxValue' => __DIR__ . '/../..' . '/classes/Column/AjaxValue.php', 'AC\\Column\\Comment\\Agent' => __DIR__ . '/../..' . '/classes/Column/Comment/Agent.php', 'AC\\Column\\Comment\\Approved' => __DIR__ . '/../..' . '/classes/Column/Comment/Approved.php', 'AC\\Column\\Comment\\Author' => __DIR__ . '/../..' . '/classes/Column/Comment/Author.php', 'AC\\Column\\Comment\\AuthorAvatar' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorAvatar.php', 'AC\\Column\\Comment\\AuthorEmail' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorEmail.php', 'AC\\Column\\Comment\\AuthorIP' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorIP.php', 'AC\\Column\\Comment\\AuthorName' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorName.php', 'AC\\Column\\Comment\\AuthorUrl' => __DIR__ . '/../..' . '/classes/Column/Comment/AuthorUrl.php', 'AC\\Column\\Comment\\Comment' => __DIR__ . '/../..' . '/classes/Column/Comment/Comment.php', 'AC\\Column\\Comment\\Date' => __DIR__ . '/../..' . '/classes/Column/Comment/Date.php', 'AC\\Column\\Comment\\DateGmt' => __DIR__ . '/../..' . '/classes/Column/Comment/DateGmt.php', 'AC\\Column\\Comment\\Excerpt' => __DIR__ . '/../..' . '/classes/Column/Comment/Excerpt.php', 'AC\\Column\\Comment\\ID' => __DIR__ . '/../..' . '/classes/Column/Comment/ID.php', 'AC\\Column\\Comment\\Post' => __DIR__ . '/../..' . '/classes/Column/Comment/Post.php', 'AC\\Column\\Comment\\ReplyTo' => __DIR__ . '/../..' . '/classes/Column/Comment/ReplyTo.php', 'AC\\Column\\Comment\\Response' => __DIR__ . '/../..' . '/classes/Column/Comment/Response.php', 'AC\\Column\\Comment\\Status' => __DIR__ . '/../..' . '/classes/Column/Comment/Status.php', 'AC\\Column\\Comment\\Type' => __DIR__ . '/../..' . '/classes/Column/Comment/Type.php', 'AC\\Column\\Comment\\User' => __DIR__ . '/../..' . '/classes/Column/Comment/User.php', 'AC\\Column\\Comment\\WordCount' => __DIR__ . '/../..' . '/classes/Column/Comment/WordCount.php', 'AC\\Column\\CustomField' => __DIR__ . '/../..' . '/classes/Column/CustomField.php', 'AC\\Column\\LabelEncoder' => __DIR__ . '/../..' . '/classes/Column/LabelEncoder.php', 'AC\\Column\\Media\\Album' => __DIR__ . '/../..' . '/classes/Column/Media/Album.php', 'AC\\Column\\Media\\AlternateText' => __DIR__ . '/../..' . '/classes/Column/Media/AlternateText.php', 'AC\\Column\\Media\\Artist' => __DIR__ . '/../..' . '/classes/Column/Media/Artist.php', 'AC\\Column\\Media\\AudioPlayer' => __DIR__ . '/../..' . '/classes/Column/Media/AudioPlayer.php', 'AC\\Column\\Media\\Author' => __DIR__ . '/../..' . '/classes/Column/Media/Author.php', 'AC\\Column\\Media\\AuthorName' => __DIR__ . '/../..' . '/classes/Column/Media/AuthorName.php', 'AC\\Column\\Media\\AvailableSizes' => __DIR__ . '/../..' . '/classes/Column/Media/AvailableSizes.php', 'AC\\Column\\Media\\Caption' => __DIR__ . '/../..' . '/classes/Column/Media/Caption.php', 'AC\\Column\\Media\\Comments' => __DIR__ . '/../..' . '/classes/Column/Media/Comments.php', 'AC\\Column\\Media\\Date' => __DIR__ . '/../..' . '/classes/Column/Media/Date.php', 'AC\\Column\\Media\\Description' => __DIR__ . '/../..' . '/classes/Column/Media/Description.php', 'AC\\Column\\Media\\Dimensions' => __DIR__ . '/../..' . '/classes/Column/Media/Dimensions.php', 'AC\\Column\\Media\\Download' => __DIR__ . '/../..' . '/classes/Column/Media/Download.php', 'AC\\Column\\Media\\ExifData' => __DIR__ . '/../..' . '/classes/Column/Media/ExifData.php', 'AC\\Column\\Media\\FileMeta' => __DIR__ . '/../..' . '/classes/Column/Media/FileMeta.php', 'AC\\Column\\Media\\FileMetaAudio' => __DIR__ . '/../..' . '/classes/Column/Media/FileMetaAudio.php', 'AC\\Column\\Media\\FileMetaVideo' => __DIR__ . '/../..' . '/classes/Column/Media/FileMetaVideo.php', 'AC\\Column\\Media\\FileName' => __DIR__ . '/../..' . '/classes/Column/Media/FileName.php', 'AC\\Column\\Media\\FileSize' => __DIR__ . '/../..' . '/classes/Column/Media/FileSize.php', 'AC\\Column\\Media\\FullPath' => __DIR__ . '/../..' . '/classes/Column/Media/FullPath.php', 'AC\\Column\\Media\\Height' => __DIR__ . '/../..' . '/classes/Column/Media/Height.php', 'AC\\Column\\Media\\ID' => __DIR__ . '/../..' . '/classes/Column/Media/ID.php', 'AC\\Column\\Media\\Image' => __DIR__ . '/../..' . '/classes/Column/Media/Image.php', 'AC\\Column\\Media\\MediaParent' => __DIR__ . '/../..' . '/classes/Column/Media/MediaParent.php', 'AC\\Column\\Media\\Menu' => __DIR__ . '/../..' . '/classes/Column/Media/Menu.php', 'AC\\Column\\Media\\Meta' => __DIR__ . '/../..' . '/classes/Column/Media/Meta.php', 'AC\\Column\\Media\\MetaValue' => __DIR__ . '/../..' . '/classes/Column/Media/MetaValue.php', 'AC\\Column\\Media\\MimeType' => __DIR__ . '/../..' . '/classes/Column/Media/MimeType.php', 'AC\\Column\\Media\\Preview' => __DIR__ . '/../..' . '/classes/Column/Media/Preview.php', 'AC\\Column\\Media\\Taxonomy' => __DIR__ . '/../..' . '/classes/Column/Media/Taxonomy.php', 'AC\\Column\\Media\\Title' => __DIR__ . '/../..' . '/classes/Column/Media/Title.php', 'AC\\Column\\Media\\VideoPlayer' => __DIR__ . '/../..' . '/classes/Column/Media/VideoPlayer.php', 'AC\\Column\\Media\\Width' => __DIR__ . '/../..' . '/classes/Column/Media/Width.php', 'AC\\Column\\Menu' => __DIR__ . '/../..' . '/classes/Column/Menu.php', 'AC\\Column\\Meta' => __DIR__ . '/../..' . '/classes/Column/Meta.php', 'AC\\Column\\Placeholder' => __DIR__ . '/../..' . '/classes/Column/Placeholder.php', 'AC\\Column\\Post\\Attachment' => __DIR__ . '/../..' . '/classes/Column/Post/Attachment.php', 'AC\\Column\\Post\\Author' => __DIR__ . '/../..' . '/classes/Column/Post/Author.php', 'AC\\Column\\Post\\AuthorName' => __DIR__ . '/../..' . '/classes/Column/Post/AuthorName.php', 'AC\\Column\\Post\\BeforeMoreTag' => __DIR__ . '/../..' . '/classes/Column/Post/BeforeMoreTag.php', 'AC\\Column\\Post\\Categories' => __DIR__ . '/../..' . '/classes/Column/Post/Categories.php', 'AC\\Column\\Post\\CommentCount' => __DIR__ . '/../..' . '/classes/Column/Post/CommentCount.php', 'AC\\Column\\Post\\CommentStatus' => __DIR__ . '/../..' . '/classes/Column/Post/CommentStatus.php', 'AC\\Column\\Post\\Comments' => __DIR__ . '/../..' . '/classes/Column/Post/Comments.php', 'AC\\Column\\Post\\Content' => __DIR__ . '/../..' . '/classes/Column/Post/Content.php', 'AC\\Column\\Post\\Date' => __DIR__ . '/../..' . '/classes/Column/Post/Date.php', 'AC\\Column\\Post\\DatePublished' => __DIR__ . '/../..' . '/classes/Column/Post/DatePublished.php', 'AC\\Column\\Post\\Depth' => __DIR__ . '/../..' . '/classes/Column/Post/Depth.php', 'AC\\Column\\Post\\EstimatedReadingTime' => __DIR__ . '/../..' . '/classes/Column/Post/EstimatedReadingTime.php', 'AC\\Column\\Post\\Excerpt' => __DIR__ . '/../..' . '/classes/Column/Post/Excerpt.php', 'AC\\Column\\Post\\FeaturedImage' => __DIR__ . '/../..' . '/classes/Column/Post/FeaturedImage.php', 'AC\\Column\\Post\\Formats' => __DIR__ . '/../..' . '/classes/Column/Post/Formats.php', 'AC\\Column\\Post\\ID' => __DIR__ . '/../..' . '/classes/Column/Post/ID.php', 'AC\\Column\\Post\\LastModifiedAuthor' => __DIR__ . '/../..' . '/classes/Column/Post/LastModifiedAuthor.php', 'AC\\Column\\Post\\Menu' => __DIR__ . '/../..' . '/classes/Column/Post/Menu.php', 'AC\\Column\\Post\\Modified' => __DIR__ . '/../..' . '/classes/Column/Post/Modified.php', 'AC\\Column\\Post\\Order' => __DIR__ . '/../..' . '/classes/Column/Post/Order.php', 'AC\\Column\\Post\\PageTemplate' => __DIR__ . '/../..' . '/classes/Column/Post/PageTemplate.php', 'AC\\Column\\Post\\PasswordProtected' => __DIR__ . '/../..' . '/classes/Column/Post/PasswordProtected.php', 'AC\\Column\\Post\\Path' => __DIR__ . '/../..' . '/classes/Column/Post/Path.php', 'AC\\Column\\Post\\Permalink' => __DIR__ . '/../..' . '/classes/Column/Post/Permalink.php', 'AC\\Column\\Post\\PingStatus' => __DIR__ . '/../..' . '/classes/Column/Post/PingStatus.php', 'AC\\Column\\Post\\PostParent' => __DIR__ . '/../..' . '/classes/Column/Post/PostParent.php', 'AC\\Column\\Post\\Shortcodes' => __DIR__ . '/../..' . '/classes/Column/Post/Shortcodes.php', 'AC\\Column\\Post\\Shortlink' => __DIR__ . '/../..' . '/classes/Column/Post/Shortlink.php', 'AC\\Column\\Post\\Slug' => __DIR__ . '/../..' . '/classes/Column/Post/Slug.php', 'AC\\Column\\Post\\Status' => __DIR__ . '/../..' . '/classes/Column/Post/Status.php', 'AC\\Column\\Post\\Sticky' => __DIR__ . '/../..' . '/classes/Column/Post/Sticky.php', 'AC\\Column\\Post\\Tags' => __DIR__ . '/../..' . '/classes/Column/Post/Tags.php', 'AC\\Column\\Post\\Taxonomy' => __DIR__ . '/../..' . '/classes/Column/Post/Taxonomy.php', 'AC\\Column\\Post\\Title' => __DIR__ . '/../..' . '/classes/Column/Post/Title.php', 'AC\\Column\\Post\\TitleRaw' => __DIR__ . '/../..' . '/classes/Column/Post/TitleRaw.php', 'AC\\Column\\Post\\WordCount' => __DIR__ . '/../..' . '/classes/Column/Post/WordCount.php', 'AC\\Column\\Relation' => __DIR__ . '/../..' . '/classes/Column/Relation.php', 'AC\\Column\\Taxonomy' => __DIR__ . '/../..' . '/classes/Column/Taxonomy.php', 'AC\\Column\\User\\CommentCount' => __DIR__ . '/../..' . '/classes/Column/User/CommentCount.php', 'AC\\Column\\User\\Description' => __DIR__ . '/../..' . '/classes/Column/User/Description.php', 'AC\\Column\\User\\DisplayName' => __DIR__ . '/../..' . '/classes/Column/User/DisplayName.php', 'AC\\Column\\User\\Email' => __DIR__ . '/../..' . '/classes/Column/User/Email.php', 'AC\\Column\\User\\FirstName' => __DIR__ . '/../..' . '/classes/Column/User/FirstName.php', 'AC\\Column\\User\\FirstPost' => __DIR__ . '/../..' . '/classes/Column/User/FirstPost.php', 'AC\\Column\\User\\FullName' => __DIR__ . '/../..' . '/classes/Column/User/FullName.php', 'AC\\Column\\User\\ID' => __DIR__ . '/../..' . '/classes/Column/User/ID.php', 'AC\\Column\\User\\LastName' => __DIR__ . '/../..' . '/classes/Column/User/LastName.php', 'AC\\Column\\User\\LastPost' => __DIR__ . '/../..' . '/classes/Column/User/LastPost.php', 'AC\\Column\\User\\Login' => __DIR__ . '/../..' . '/classes/Column/User/Login.php', 'AC\\Column\\User\\Name' => __DIR__ . '/../..' . '/classes/Column/User/Name.php', 'AC\\Column\\User\\Nicename' => __DIR__ . '/../..' . '/classes/Column/User/Nicename.php', 'AC\\Column\\User\\Nickname' => __DIR__ . '/../..' . '/classes/Column/User/Nickname.php', 'AC\\Column\\User\\PostCount' => __DIR__ . '/../..' . '/classes/Column/User/PostCount.php', 'AC\\Column\\User\\Posts' => __DIR__ . '/../..' . '/classes/Column/User/Posts.php', 'AC\\Column\\User\\Registered' => __DIR__ . '/../..' . '/classes/Column/User/Registered.php', 'AC\\Column\\User\\RichEditing' => __DIR__ . '/../..' . '/classes/Column/User/RichEditing.php', 'AC\\Column\\User\\Role' => __DIR__ . '/../..' . '/classes/Column/User/Role.php', 'AC\\Column\\User\\ShowToolbar' => __DIR__ . '/../..' . '/classes/Column/User/ShowToolbar.php', 'AC\\Column\\User\\Url' => __DIR__ . '/../..' . '/classes/Column/User/Url.php', 'AC\\Column\\User\\Username' => __DIR__ . '/../..' . '/classes/Column/User/Username.php', 'AC\\Column\\WooCommercePlaceholder' => __DIR__ . '/../..' . '/classes/Column/WooCommercePlaceholder.php', 'AC\\Config' => __DIR__ . '/../..' . '/classes/Config.php', 'AC\\Controller\\AjaxColumnModalValue' => __DIR__ . '/../..' . '/classes/Controller/AjaxColumnModalValue.php', 'AC\\Controller\\AjaxColumnRequest' => __DIR__ . '/../..' . '/classes/Controller/AjaxColumnRequest.php', 'AC\\Controller\\AjaxColumnValue' => __DIR__ . '/../..' . '/classes/Controller/AjaxColumnValue.php', 'AC\\Controller\\AjaxGeneralOptions' => __DIR__ . '/../..' . '/classes/Controller/AjaxGeneralOptions.php', 'AC\\Controller\\AjaxRequestCustomFieldKeys' => __DIR__ . '/../..' . '/classes/Controller/AjaxRequestCustomFieldKeys.php', 'AC\\Controller\\AjaxScreenOptions' => __DIR__ . '/../..' . '/classes/Controller/AjaxScreenOptions.php', 'AC\\Controller\\ColumnRequest' => __DIR__ . '/../..' . '/classes/Controller/ColumnRequest.php', 'AC\\Controller\\ColumnRequest\\Refresh' => __DIR__ . '/../..' . '/classes/Controller/ColumnRequest/Refresh.php', 'AC\\Controller\\ColumnRequest\\Select' => __DIR__ . '/../..' . '/classes/Controller/ColumnRequest/Select.php', 'AC\\Controller\\DefaultColumns' => __DIR__ . '/../..' . '/classes/Controller/DefaultColumns.php', 'AC\\Controller\\ListScreenRestoreColumns' => __DIR__ . '/../..' . '/classes/Controller/ListScreenRestoreColumns.php', 'AC\\Controller\\ListScreen\\Sanitize\\FormData' => __DIR__ . '/../..' . '/classes/Controller/ListScreen/Sanitize/FormData.php', 'AC\\Controller\\ListScreen\\Sanitize\\Title' => __DIR__ . '/../..' . '/classes/Controller/ListScreen/Sanitize/Title.php', 'AC\\Controller\\ListScreen\\Save' => __DIR__ . '/../..' . '/classes/Controller/ListScreen/Save.php', 'AC\\Controller\\Middleware\\ListScreenAdmin' => __DIR__ . '/../..' . '/classes/Controller/Middleware/ListScreenAdmin.php', 'AC\\Controller\\Middleware\\ListScreenTable' => __DIR__ . '/../..' . '/classes/Controller/Middleware/ListScreenTable.php', 'AC\\Controller\\RestoreSettingsRequest' => __DIR__ . '/../..' . '/classes/Controller/RestoreSettingsRequest.php', 'AC\\Controller\\TableListScreenSetter' => __DIR__ . '/../..' . '/classes/Controller/TableListScreenSetter.php', 'AC\\DefaultColumnsRepository' => __DIR__ . '/../..' . '/classes/DefaultColumnsRepository.php', 'AC\\Dependencies' => __DIR__ . '/../..' . '/classes/Dependencies.php', 'AC\\Deprecated\\Hook' => __DIR__ . '/../..' . '/classes/Deprecated/Hook.php', 'AC\\Deprecated\\Hook\\Action' => __DIR__ . '/../..' . '/classes/Deprecated/Hook/Action.php', 'AC\\Deprecated\\Hook\\Filter' => __DIR__ . '/../..' . '/classes/Deprecated/Hook/Filter.php', 'AC\\Deprecated\\Hooks' => __DIR__ . '/../..' . '/classes/Deprecated/Hooks.php', 'AC\\EncodedListScreenData' => __DIR__ . '/../..' . '/classes/EncodedListScreenData.php', 'AC\\EncodedListScreenDataFactory' => __DIR__ . '/../..' . '/classes/EncodedListScreenDataFactory.php', 'AC\\Exception\\MissingListScreenIdException' => __DIR__ . '/../..' . '/classes/Exception/MissingListScreenIdException.php', 'AC\\Exception\\RequestException' => __DIR__ . '/../..' . '/classes/Exception/RequestException.php', 'AC\\Exception\\SourceNotAvailableException' => __DIR__ . '/../..' . '/classes/Exception/SourceNotAvailableException.php', 'AC\\Expirable' => __DIR__ . '/../..' . '/classes/Expirable.php', 'AC\\Form\\Element' => __DIR__ . '/../..' . '/classes/Form/Element.php', 'AC\\Form\\Element\\Checkbox' => __DIR__ . '/../..' . '/classes/Form/Element/Checkbox.php', 'AC\\Form\\Element\\Input' => __DIR__ . '/../..' . '/classes/Form/Element/Input.php', 'AC\\Form\\Element\\MultiSelect' => __DIR__ . '/../..' . '/classes/Form/Element/MultiSelect.php', 'AC\\Form\\Element\\Radio' => __DIR__ . '/../..' . '/classes/Form/Element/Radio.php', 'AC\\Form\\Element\\Select' => __DIR__ . '/../..' . '/classes/Form/Element/Select.php', 'AC\\Form\\Element\\Toggle' => __DIR__ . '/../..' . '/classes/Form/Element/Toggle.php', 'AC\\Form\\Nonce' => __DIR__ . '/../..' . '/classes/Form/Nonce.php', 'AC\\Groups' => __DIR__ . '/../..' . '/classes/Groups.php', 'AC\\Helper' => __DIR__ . '/../..' . '/classes/Helper.php', 'AC\\Helper\\Arrays' => __DIR__ . '/../..' . '/classes/Helper/Arrays.php', 'AC\\Helper\\Date' => __DIR__ . '/../..' . '/classes/Helper/Date.php', 'AC\\Helper\\File' => __DIR__ . '/../..' . '/classes/Helper/File.php', 'AC\\Helper\\Html' => __DIR__ . '/../..' . '/classes/Helper/Html.php', 'AC\\Helper\\Icon' => __DIR__ . '/../..' . '/classes/Helper/Icon.php', 'AC\\Helper\\Image' => __DIR__ . '/../..' . '/classes/Helper/Image.php', 'AC\\Helper\\Media' => __DIR__ . '/../..' . '/classes/Helper/Media.php', 'AC\\Helper\\Menu' => __DIR__ . '/../..' . '/classes/Helper/Menu.php', 'AC\\Helper\\Network' => __DIR__ . '/../..' . '/classes/Helper/Network.php', 'AC\\Helper\\Post' => __DIR__ . '/../..' . '/classes/Helper/Post.php', 'AC\\Helper\\Select\\Entities' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities.php', 'AC\\Helper\\Select\\Entities\\CustomFields' => __DIR__ . '/../..' . '/classes/Helper/Select/Entities/CustomFields.php', 'AC\\Helper\\Select\\Formatter' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter.php', 'AC\\Helper\\Select\\Formatter\\NullFormatter' => __DIR__ . '/../..' . '/classes/Helper/Select/Formatter/NullFormatter.php', 'AC\\Helper\\Select\\Group' => __DIR__ . '/../..' . '/classes/Helper/Select/Group.php', 'AC\\Helper\\Select\\Group\\CustomField' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/CustomField.php', 'AC\\Helper\\Select\\Group\\CustomField\\MultiSite' => __DIR__ . '/../..' . '/classes/Helper/Select/Group/CustomField/MultiSite.php', 'AC\\Helper\\Select\\MetaValuesFactory' => __DIR__ . '/../..' . '/classes/Helper/Select/MetaValuesFactory.php', 'AC\\Helper\\Select\\Option' => __DIR__ . '/../..' . '/classes/Helper/Select/Option.php', 'AC\\Helper\\Select\\OptionGroup' => __DIR__ . '/../..' . '/classes/Helper/Select/OptionGroup.php', 'AC\\Helper\\Select\\Options' => __DIR__ . '/../..' . '/classes/Helper/Select/Options.php', 'AC\\Helper\\Select\\Options\\Paginated' => __DIR__ . '/../..' . '/classes/Helper/Select/Options/Paginated.php', 'AC\\Helper\\Select\\Paginated' => __DIR__ . '/../..' . '/classes/Helper/Select/Paginated.php', 'AC\\Helper\\Select\\Response' => __DIR__ . '/../..' . '/classes/Helper/Select/Response.php', 'AC\\Helper\\Select\\Value' => __DIR__ . '/../..' . '/classes/Helper/Select/Value.php', 'AC\\Helper\\Select\\Value\\NullFormatter' => __DIR__ . '/../..' . '/classes/Helper/Select/Value/NullFormatter.php', 'AC\\Helper\\Strings' => __DIR__ . '/../..' . '/classes/Helper/Strings.php', 'AC\\Helper\\Taxonomy' => __DIR__ . '/../..' . '/classes/Helper/Taxonomy.php', 'AC\\Helper\\User' => __DIR__ . '/../..' . '/classes/Helper/User.php', 'AC\\Integration' => __DIR__ . '/../..' . '/classes/Integration.php', 'AC\\IntegrationRepository' => __DIR__ . '/../..' . '/classes/IntegrationRepository.php', 'AC\\Integration\\ACF' => __DIR__ . '/../..' . '/classes/Integration/ACF.php', 'AC\\Integration\\BuddyPress' => __DIR__ . '/../..' . '/classes/Integration/BuddyPress.php', 'AC\\Integration\\EventsCalendar' => __DIR__ . '/../..' . '/classes/Integration/EventsCalendar.php', 'AC\\Integration\\Filter' => __DIR__ . '/../..' . '/classes/Integration/Filter.php', 'AC\\Integration\\Filter\\ExcludeIntegrations' => __DIR__ . '/../..' . '/classes/Integration/Filter/ExcludeIntegrations.php', 'AC\\Integration\\Filter\\ExcludeProducts' => __DIR__ . '/../..' . '/classes/Integration/Filter/ExcludeProducts.php', 'AC\\Integration\\Filter\\IncludeProducts' => __DIR__ . '/../..' . '/classes/Integration/Filter/IncludeProducts.php', 'AC\\Integration\\Filter\\IsActive' => __DIR__ . '/../..' . '/classes/Integration/Filter/IsActive.php', 'AC\\Integration\\Filter\\IsInstalled' => __DIR__ . '/../..' . '/classes/Integration/Filter/IsInstalled.php', 'AC\\Integration\\Filter\\IsNotActive' => __DIR__ . '/../..' . '/classes/Integration/Filter/IsNotActive.php', 'AC\\Integration\\Filter\\IsPluginActive' => __DIR__ . '/../..' . '/classes/Integration/Filter/IsPluginActive.php', 'AC\\Integration\\Filter\\IsPluginNotActive' => __DIR__ . '/../..' . '/classes/Integration/Filter/IsPluginNotActive.php', 'AC\\Integration\\GravityForms' => __DIR__ . '/../..' . '/classes/Integration/GravityForms.php', 'AC\\Integration\\JetEngine' => __DIR__ . '/../..' . '/classes/Integration/JetEngine.php', 'AC\\Integration\\MetaBox' => __DIR__ . '/../..' . '/classes/Integration/MetaBox.php', 'AC\\Integration\\Pods' => __DIR__ . '/../..' . '/classes/Integration/Pods.php', 'AC\\Integration\\Types' => __DIR__ . '/../..' . '/classes/Integration/Types.php', 'AC\\Integration\\WooCommerce' => __DIR__ . '/../..' . '/classes/Integration/WooCommerce.php', 'AC\\Integration\\YoastSeo' => __DIR__ . '/../..' . '/classes/Integration/YoastSeo.php', 'AC\\Integrations' => __DIR__ . '/../..' . '/classes/Integrations.php', 'AC\\Iterator' => __DIR__ . '/../..' . '/classes/Iterator.php', 'AC\\ListScreen' => __DIR__ . '/../..' . '/classes/ListScreen.php', 'AC\\ListScreenCollection' => __DIR__ . '/../..' . '/classes/ListScreenCollection.php', 'AC\\ListScreenFactory' => __DIR__ . '/../..' . '/classes/ListScreenFactory.php', 'AC\\ListScreenGroups' => __DIR__ . '/../..' . '/classes/ListScreenGroups.php', 'AC\\ListScreenPost' => __DIR__ . '/../..' . '/classes/ListScreenPost.php', 'AC\\ListScreenRepository' => __DIR__ . '/../..' . '/classes/ListScreenRepository.php', 'AC\\ListScreenRepositoryWritable' => __DIR__ . '/../..' . '/classes/ListScreenRepositoryWritable.php', 'AC\\ListScreenRepository\\Database' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Database.php', 'AC\\ListScreenRepository\\Filter' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Filter.php', 'AC\\ListScreenRepository\\Filter\\ExcludeNetwork' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Filter/ExcludeNetwork.php', 'AC\\ListScreenRepository\\Filter\\HasKey' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Filter/HasKey.php', 'AC\\ListScreenRepository\\Filter\\Network' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Filter/Network.php', 'AC\\ListScreenRepository\\Filter\\Permission' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Filter/Permission.php', 'AC\\ListScreenRepository\\Rule' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Rule.php', 'AC\\ListScreenRepository\\Rule\\EqualGroup' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Rule/EqualGroup.php', 'AC\\ListScreenRepository\\Rule\\EqualId' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Rule/EqualId.php', 'AC\\ListScreenRepository\\Rule\\EqualType' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Rule/EqualType.php', 'AC\\ListScreenRepository\\Rules' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Rules.php', 'AC\\ListScreenRepository\\Sort' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Sort.php', 'AC\\ListScreenRepository\\Sort\\Label' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Sort/Label.php', 'AC\\ListScreenRepository\\Sort\\ManualOrder' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Sort/ManualOrder.php', 'AC\\ListScreenRepository\\SourceAware' => __DIR__ . '/../..' . '/classes/ListScreenRepository/SourceAware.php', 'AC\\ListScreenRepository\\Storage' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Storage.php', 'AC\\ListScreenRepository\\Storage\\ListScreenRepository' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Storage/ListScreenRepository.php', 'AC\\ListScreenRepository\\Storage\\ListScreenRepositoryFactory' => __DIR__ . '/../..' . '/classes/ListScreenRepository/Storage/ListScreenRepositoryFactory.php', 'AC\\ListScreenTypes' => __DIR__ . '/../..' . '/classes/ListScreenTypes.php', 'AC\\ListScreenWP' => __DIR__ . '/../..' . '/classes/ListScreenWP.php', 'AC\\ListScreen\\Comment' => __DIR__ . '/../..' . '/classes/ListScreen/Comment.php', 'AC\\ListScreen\\Media' => __DIR__ . '/../..' . '/classes/ListScreen/Media.php', 'AC\\ListScreen\\Post' => __DIR__ . '/../..' . '/classes/ListScreen/Post.php', 'AC\\ListScreen\\User' => __DIR__ . '/../..' . '/classes/ListScreen/User.php', 'AC\\ListScreens' => __DIR__ . '/../..' . '/classes/ListScreens.php', 'AC\\ListTable' => __DIR__ . '/../..' . '/classes/ListTable.php', 'AC\\ListTableFactory' => __DIR__ . '/../..' . '/classes/ListTableFactory.php', 'AC\\ListTable\\Comment' => __DIR__ . '/../..' . '/classes/ListTable/Comment.php', 'AC\\ListTable\\Media' => __DIR__ . '/../..' . '/classes/ListTable/Media.php', 'AC\\ListTable\\NetworkSite' => __DIR__ . '/../..' . '/classes/ListTable/NetworkSite.php', 'AC\\ListTable\\NetworkUser' => __DIR__ . '/../..' . '/classes/ListTable/NetworkUser.php', 'AC\\ListTable\\Post' => __DIR__ . '/../..' . '/classes/ListTable/Post.php', 'AC\\ListTable\\Taxonomy' => __DIR__ . '/../..' . '/classes/ListTable/Taxonomy.php', 'AC\\ListTable\\User' => __DIR__ . '/../..' . '/classes/ListTable/User.php', 'AC\\ListTable\\WpListTableTrait' => __DIR__ . '/../..' . '/classes/ListTable/WpListTableTrait.php', 'AC\\Message' => __DIR__ . '/../..' . '/classes/Message.php', 'AC\\Message\\InlineMessage' => __DIR__ . '/../..' . '/classes/Message/InlineMessage.php', 'AC\\Message\\Notice' => __DIR__ . '/../..' . '/classes/Message/Notice.php', 'AC\\Message\\Notice\\Dismissible' => __DIR__ . '/../..' . '/classes/Message/Notice/Dismissible.php', 'AC\\Message\\Plugin' => __DIR__ . '/../..' . '/classes/Message/Plugin.php', 'AC\\MetaType' => __DIR__ . '/../..' . '/classes/MetaType.php', 'AC\\Meta\\Query' => __DIR__ . '/../..' . '/classes/Meta/Query.php', 'AC\\Meta\\QueryColumn' => __DIR__ . '/../..' . '/classes/Meta/QueryColumn.php', 'AC\\Meta\\QueryMeta' => __DIR__ . '/../..' . '/classes/Meta/QueryMeta.php', 'AC\\Middleware' => __DIR__ . '/../..' . '/classes/Middleware.php', 'AC\\Nonce\\Ajax' => __DIR__ . '/../..' . '/classes/Nonce/Ajax.php', 'AC\\OpCacheInvalidateTrait' => __DIR__ . '/../..' . '/classes/OpCacheInvalidateTrait.php', 'AC\\PermissionChecker' => __DIR__ . '/../..' . '/classes/PermissionChecker.php', 'AC\\Plugin' => __DIR__ . '/../..' . '/classes/Plugin.php', 'AC\\PluginActionLinks' => __DIR__ . '/../..' . '/classes/PluginActionLinks.php', 'AC\\PluginInformation' => __DIR__ . '/../..' . '/classes/PluginInformation.php', 'AC\\PluginUpdate' => __DIR__ . '/../..' . '/classes/PluginUpdate.php', 'AC\\Plugin\\Install' => __DIR__ . '/../..' . '/classes/Plugin/Install.php', 'AC\\Plugin\\InstallCollection' => __DIR__ . '/../..' . '/classes/Plugin/InstallCollection.php', 'AC\\Plugin\\Install\\Capabilities' => __DIR__ . '/../..' . '/classes/Plugin/Install/Capabilities.php', 'AC\\Plugin\\Install\\Database' => __DIR__ . '/../..' . '/classes/Plugin/Install/Database.php', 'AC\\Plugin\\PluginHeader' => __DIR__ . '/../..' . '/classes/Plugin/PluginHeader.php', 'AC\\Plugin\\Setup' => __DIR__ . '/../..' . '/classes/Plugin/Setup.php', 'AC\\Plugin\\SetupFactory' => __DIR__ . '/../..' . '/classes/Plugin/SetupFactory.php', 'AC\\Plugin\\SetupFactory\\AdminColumns' => __DIR__ . '/../..' . '/classes/Plugin/SetupFactory/AdminColumns.php', 'AC\\Plugin\\Setup\\Network' => __DIR__ . '/../..' . '/classes/Plugin/Setup/Network.php', 'AC\\Plugin\\Setup\\Site' => __DIR__ . '/../..' . '/classes/Plugin/Setup/Site.php', 'AC\\Plugin\\Update' => __DIR__ . '/../..' . '/classes/Plugin/Update.php', 'AC\\Plugin\\UpdateCollection' => __DIR__ . '/../..' . '/classes/Plugin/UpdateCollection.php', 'AC\\Plugin\\Update\\V3005' => __DIR__ . '/../..' . '/classes/Plugin/Update/V3005.php', 'AC\\Plugin\\Update\\V3007' => __DIR__ . '/../..' . '/classes/Plugin/Update/V3007.php', 'AC\\Plugin\\Update\\V3201' => __DIR__ . '/../..' . '/classes/Plugin/Update/V3201.php', 'AC\\Plugin\\Update\\V4000' => __DIR__ . '/../..' . '/classes/Plugin/Update/V4000.php', 'AC\\Plugin\\Version' => __DIR__ . '/../..' . '/classes/Plugin/Version.php', 'AC\\Preferences' => __DIR__ . '/../..' . '/classes/Preferences.php', 'AC\\Preferences\\Network' => __DIR__ . '/../..' . '/classes/Preferences/Network.php', 'AC\\Preferences\\Site' => __DIR__ . '/../..' . '/classes/Preferences/Site.php', 'AC\\Preferences\\User' => __DIR__ . '/../..' . '/classes/Preferences/User.php', 'AC\\Promo' => __DIR__ . '/../..' . '/classes/Promo.php', 'AC\\PromoCollection' => __DIR__ . '/../..' . '/classes/PromoCollection.php', 'AC\\Promo\\BlackFriday' => __DIR__ . '/../..' . '/classes/Promo/BlackFriday.php', 'AC\\Registerable' => __DIR__ . '/../..' . '/classes/Registerable.php', 'AC\\Relation' => __DIR__ . '/../..' . '/classes/Relation.php', 'AC\\Relation\\Post' => __DIR__ . '/../..' . '/classes/Relation/Post.php', 'AC\\Relation\\Taxonomy' => __DIR__ . '/../..' . '/classes/Relation/Taxonomy.php', 'AC\\Renderable' => __DIR__ . '/../..' . '/classes/Renderable.php', 'AC\\Request' => __DIR__ . '/../..' . '/classes/Request.php', 'AC\\Request\\Parameters' => __DIR__ . '/../..' . '/classes/Request/Parameters.php', 'AC\\Response\\Json' => __DIR__ . '/../..' . '/classes/Response/Json.php', 'AC\\Sanitize' => __DIR__ . '/../..' . '/classes/Sanitize.php', 'AC\\Sanitize\\Kses' => __DIR__ . '/../..' . '/classes/Sanitize/Kses.php', 'AC\\Screen' => __DIR__ . '/../..' . '/classes/Screen.php', 'AC\\ScreenController' => __DIR__ . '/../..' . '/classes/ScreenController.php', 'AC\\Screen\\QuickEdit' => __DIR__ . '/../..' . '/classes/Screen/QuickEdit.php', 'AC\\Service\\Colors' => __DIR__ . '/../..' . '/classes/Service/Colors.php', 'AC\\Service\\IntegrationColumns' => __DIR__ . '/../..' . '/classes/Service/IntegrationColumns.php', 'AC\\Service\\NoticeChecks' => __DIR__ . '/../..' . '/classes/Service/NoticeChecks.php', 'AC\\Service\\Setup' => __DIR__ . '/../..' . '/classes/Service/Setup.php', 'AC\\Settings\\Column' => __DIR__ . '/../..' . '/classes/Settings/Column.php', 'AC\\Settings\\Column\\ActionIcons' => __DIR__ . '/../..' . '/classes/Settings/Column/ActionIcons.php', 'AC\\Settings\\Column\\AttachmentDisplay' => __DIR__ . '/../..' . '/classes/Settings/Column/AttachmentDisplay.php', 'AC\\Settings\\Column\\BeforeAfter' => __DIR__ . '/../..' . '/classes/Settings/Column/BeforeAfter.php', 'AC\\Settings\\Column\\BeforeAfter\\Aperture' => __DIR__ . '/../..' . '/classes/Settings/Column/BeforeAfter/Aperture.php', 'AC\\Settings\\Column\\BeforeAfter\\FocalLength' => __DIR__ . '/../..' . '/classes/Settings/Column/BeforeAfter/FocalLength.php', 'AC\\Settings\\Column\\BeforeAfter\\ISO' => __DIR__ . '/../..' . '/classes/Settings/Column/BeforeAfter/ISO.php', 'AC\\Settings\\Column\\BeforeAfter\\ShutterSpeed' => __DIR__ . '/../..' . '/classes/Settings/Column/BeforeAfter/ShutterSpeed.php', 'AC\\Settings\\Column\\CharacterLimit' => __DIR__ . '/../..' . '/classes/Settings/Column/CharacterLimit.php', 'AC\\Settings\\Column\\Comment' => __DIR__ . '/../..' . '/classes/Settings/Column/Comment.php', 'AC\\Settings\\Column\\CommentCount' => __DIR__ . '/../..' . '/classes/Settings/Column/CommentCount.php', 'AC\\Settings\\Column\\CommentLink' => __DIR__ . '/../..' . '/classes/Settings/Column/CommentLink.php', 'AC\\Settings\\Column\\CustomField' => __DIR__ . '/../..' . '/classes/Settings/Column/CustomField.php', 'AC\\Settings\\Column\\CustomFieldType' => __DIR__ . '/../..' . '/classes/Settings/Column/CustomFieldType.php', 'AC\\Settings\\Column\\Date' => __DIR__ . '/../..' . '/classes/Settings/Column/Date.php', 'AC\\Settings\\Column\\DateTimeFormat' => __DIR__ . '/../..' . '/classes/Settings/Column/DateTimeFormat.php', 'AC\\Settings\\Column\\ExifData' => __DIR__ . '/../..' . '/classes/Settings/Column/ExifData.php', 'AC\\Settings\\Column\\FileMeta' => __DIR__ . '/../..' . '/classes/Settings/Column/FileMeta.php', 'AC\\Settings\\Column\\FileMetaAudio' => __DIR__ . '/../..' . '/classes/Settings/Column/FileMetaAudio.php', 'AC\\Settings\\Column\\FileMetaVideo' => __DIR__ . '/../..' . '/classes/Settings/Column/FileMetaVideo.php', 'AC\\Settings\\Column\\Image' => __DIR__ . '/../..' . '/classes/Settings/Column/Image.php', 'AC\\Settings\\Column\\Images' => __DIR__ . '/../..' . '/classes/Settings/Column/Images.php', 'AC\\Settings\\Column\\Label' => __DIR__ . '/../..' . '/classes/Settings/Column/Label.php', 'AC\\Settings\\Column\\LinkLabel' => __DIR__ . '/../..' . '/classes/Settings/Column/LinkLabel.php', 'AC\\Settings\\Column\\LinkToMenu' => __DIR__ . '/../..' . '/classes/Settings/Column/LinkToMenu.php', 'AC\\Settings\\Column\\MediaLink' => __DIR__ . '/../..' . '/classes/Settings/Column/MediaLink.php', 'AC\\Settings\\Column\\Message' => __DIR__ . '/../..' . '/classes/Settings/Column/Message.php', 'AC\\Settings\\Column\\Meta' => __DIR__ . '/../..' . '/classes/Settings/Column/Meta.php', 'AC\\Settings\\Column\\MissingImageSize' => __DIR__ . '/../..' . '/classes/Settings/Column/MissingImageSize.php', 'AC\\Settings\\Column\\NumberFormat' => __DIR__ . '/../..' . '/classes/Settings/Column/NumberFormat.php', 'AC\\Settings\\Column\\NumberOfItems' => __DIR__ . '/../..' . '/classes/Settings/Column/NumberOfItems.php', 'AC\\Settings\\Column\\Password' => __DIR__ . '/../..' . '/classes/Settings/Column/Password.php', 'AC\\Settings\\Column\\PathScope' => __DIR__ . '/../..' . '/classes/Settings/Column/PathScope.php', 'AC\\Settings\\Column\\Post' => __DIR__ . '/../..' . '/classes/Settings/Column/Post.php', 'AC\\Settings\\Column\\PostFormatIcon' => __DIR__ . '/../..' . '/classes/Settings/Column/PostFormatIcon.php', 'AC\\Settings\\Column\\PostLink' => __DIR__ . '/../..' . '/classes/Settings/Column/PostLink.php', 'AC\\Settings\\Column\\PostStatus' => __DIR__ . '/../..' . '/classes/Settings/Column/PostStatus.php', 'AC\\Settings\\Column\\PostType' => __DIR__ . '/../..' . '/classes/Settings/Column/PostType.php', 'AC\\Settings\\Column\\Pro' => __DIR__ . '/../..' . '/classes/Settings/Column/Pro.php', 'AC\\Settings\\Column\\Pro\\BulkEditing' => __DIR__ . '/../..' . '/classes/Settings/Column/Pro/BulkEditing.php', 'AC\\Settings\\Column\\Pro\\Export' => __DIR__ . '/../..' . '/classes/Settings/Column/Pro/Export.php', 'AC\\Settings\\Column\\Pro\\InlineEditing' => __DIR__ . '/../..' . '/classes/Settings/Column/Pro/InlineEditing.php', 'AC\\Settings\\Column\\Pro\\SmartFiltering' => __DIR__ . '/../..' . '/classes/Settings/Column/Pro/SmartFiltering.php', 'AC\\Settings\\Column\\Pro\\Sorting' => __DIR__ . '/../..' . '/classes/Settings/Column/Pro/Sorting.php', 'AC\\Settings\\Column\\Separator' => __DIR__ . '/../..' . '/classes/Settings/Column/Separator.php', 'AC\\Settings\\Column\\StatusIcon' => __DIR__ . '/../..' . '/classes/Settings/Column/StatusIcon.php', 'AC\\Settings\\Column\\StringLimit' => __DIR__ . '/../..' . '/classes/Settings/Column/StringLimit.php', 'AC\\Settings\\Column\\Taxonomy' => __DIR__ . '/../..' . '/classes/Settings/Column/Taxonomy.php', 'AC\\Settings\\Column\\Term' => __DIR__ . '/../..' . '/classes/Settings/Column/Term.php', 'AC\\Settings\\Column\\TermLink' => __DIR__ . '/../..' . '/classes/Settings/Column/TermLink.php', 'AC\\Settings\\Column\\Time' => __DIR__ . '/../..' . '/classes/Settings/Column/Time.php', 'AC\\Settings\\Column\\Toggle' => __DIR__ . '/../..' . '/classes/Settings/Column/Toggle.php', 'AC\\Settings\\Column\\Type' => __DIR__ . '/../..' . '/classes/Settings/Column/Type.php', 'AC\\Settings\\Column\\User' => __DIR__ . '/../..' . '/classes/Settings/Column/User.php', 'AC\\Settings\\Column\\UserLink' => __DIR__ . '/../..' . '/classes/Settings/Column/UserLink.php', 'AC\\Settings\\Column\\VideoDisplay' => __DIR__ . '/../..' . '/classes/Settings/Column/VideoDisplay.php', 'AC\\Settings\\Column\\Width' => __DIR__ . '/../..' . '/classes/Settings/Column/Width.php', 'AC\\Settings\\Column\\WordLimit' => __DIR__ . '/../..' . '/classes/Settings/Column/WordLimit.php', 'AC\\Settings\\Column\\WordsPerMinute' => __DIR__ . '/../..' . '/classes/Settings/Column/WordsPerMinute.php', 'AC\\Settings\\Form\\Element\\Select' => __DIR__ . '/../..' . '/classes/Settings/Form/Element/Select.php', 'AC\\Settings\\Form\\Instruction' => __DIR__ . '/../..' . '/classes/Settings/Form/Instruction.php', 'AC\\Settings\\FormatCollection' => __DIR__ . '/../..' . '/classes/Settings/FormatCollection.php', 'AC\\Settings\\FormatValue' => __DIR__ . '/../..' . '/classes/Settings/FormatValue.php', 'AC\\Settings\\GeneralOption' => __DIR__ . '/../..' . '/classes/Settings/GeneralOption.php', 'AC\\Settings\\Header' => __DIR__ . '/../..' . '/classes/Settings/Header.php', 'AC\\Settings\\Option' => __DIR__ . '/../..' . '/classes/Settings/Option.php', 'AC\\Settings\\Option\\EditButton' => __DIR__ . '/../..' . '/classes/Settings/Option/EditButton.php', 'AC\\Storage\\KeyValueFactory' => __DIR__ . '/../..' . '/classes/Storage/KeyValueFactory.php', 'AC\\Storage\\KeyValuePair' => __DIR__ . '/../..' . '/classes/Storage/KeyValuePair.php', 'AC\\Storage\\ListColumnOrder' => __DIR__ . '/../..' . '/classes/Storage/ListColumnOrder.php', 'AC\\Storage\\ListScreenOrder' => __DIR__ . '/../..' . '/classes/Storage/ListScreenOrder.php', 'AC\\Storage\\NetworkOptionFactory' => __DIR__ . '/../..' . '/classes/Storage/NetworkOptionFactory.php', 'AC\\Storage\\Option' => __DIR__ . '/../..' . '/classes/Storage/Option.php', 'AC\\Storage\\OptionFactory' => __DIR__ . '/../..' . '/classes/Storage/OptionFactory.php', 'AC\\Storage\\SiteOption' => __DIR__ . '/../..' . '/classes/Storage/SiteOption.php', 'AC\\Storage\\Timestamp' => __DIR__ . '/../..' . '/classes/Storage/Timestamp.php', 'AC\\Storage\\Transaction' => __DIR__ . '/../..' . '/classes/Storage/Transaction.php', 'AC\\Storage\\UserColumnOrder' => __DIR__ . '/../..' . '/classes/Storage/UserColumnOrder.php', 'AC\\Storage\\UserMeta' => __DIR__ . '/../..' . '/classes/Storage/UserMeta.php', 'AC\\Table\\Button' => __DIR__ . '/../..' . '/classes/Table/Button.php', 'AC\\Table\\InlineStyle\\ColumnSize' => __DIR__ . '/../..' . '/classes/Table/InlineStyle/ColumnSize.php', 'AC\\Table\\LayoutPreference' => __DIR__ . '/../..' . '/classes/Table/LayoutPreference.php', 'AC\\Table\\Screen' => __DIR__ . '/../..' . '/classes/Table/Screen.php', 'AC\\Table\\ScreenPreferences' => __DIR__ . '/../..' . '/classes/Table/ScreenPreferences.php', 'AC\\Table\\ScreenTools' => __DIR__ . '/../..' . '/classes/Table/ScreenTools.php', 'AC\\Table\\TableFormView' => __DIR__ . '/../..' . '/classes/Table/TableFormView.php', 'AC\\ThirdParty\\ACF' => __DIR__ . '/../..' . '/classes/ThirdParty/ACF.php', 'AC\\ThirdParty\\NinjaForms' => __DIR__ . '/../..' . '/classes/ThirdParty/NinjaForms.php', 'AC\\ThirdParty\\WPML' => __DIR__ . '/../..' . '/classes/ThirdParty/WPML.php', 'AC\\ThirdParty\\WPMLColumn' => __DIR__ . '/../..' . '/classes/ThirdParty/WPMLColumn.php', 'AC\\ThirdParty\\WooCommerce' => __DIR__ . '/../..' . '/classes/ThirdParty/WooCommerce.php', 'AC\\Transient' => __DIR__ . '/../..' . '/classes/Transient.php', 'AC\\Transient\\User' => __DIR__ . '/../..' . '/classes/Transient/User.php', 'AC\\Translation\\Config' => __DIR__ . '/../..' . '/classes/Translation/Config.php', 'AC\\Translation\\Confirmation' => __DIR__ . '/../..' . '/classes/Translation/Confirmation.php', 'AC\\Type\\ColumnWidth' => __DIR__ . '/../..' . '/classes/Type/ColumnWidth.php', 'AC\\Type\\DateRange' => __DIR__ . '/../..' . '/classes/Type/DateRange.php', 'AC\\Type\\EditorUrlFactory' => __DIR__ . '/../..' . '/classes/Type/EditorUrlFactory.php', 'AC\\Type\\ListScreenId' => __DIR__ . '/../..' . '/classes/Type/ListScreenId.php', 'AC\\Type\\QueryAware' => __DIR__ . '/../..' . '/classes/Type/QueryAware.php', 'AC\\Type\\QueryAwareTrait' => __DIR__ . '/../..' . '/classes/Type/QueryAwareTrait.php', 'AC\\Type\\ToggleOptions' => __DIR__ . '/../..' . '/classes/Type/ToggleOptions.php', 'AC\\Type\\Url' => __DIR__ . '/../..' . '/classes/Type/Url.php', 'AC\\Type\\Url\\CouponCode' => __DIR__ . '/../..' . '/classes/Type/Url/CouponCode.php', 'AC\\Type\\Url\\Documentation' => __DIR__ . '/../..' . '/classes/Type/Url/Documentation.php', 'AC\\Type\\Url\\Editor' => __DIR__ . '/../..' . '/classes/Type/Url/Editor.php', 'AC\\Type\\Url\\EditorNetwork' => __DIR__ . '/../..' . '/classes/Type/Url/EditorNetwork.php', 'AC\\Type\\Url\\Fragment' => __DIR__ . '/../..' . '/classes/Type/Url/Fragment.php', 'AC\\Type\\Url\\Path' => __DIR__ . '/../..' . '/classes/Type/Url/Path.php', 'AC\\Type\\Url\\Site' => __DIR__ . '/../..' . '/classes/Type/Url/Site.php', 'AC\\Type\\Url\\Tweet' => __DIR__ . '/../..' . '/classes/Type/Url/Tweet.php', 'AC\\Type\\Url\\UtmTags' => __DIR__ . '/../..' . '/classes/Type/Url/UtmTags.php', 'AC\\Type\\Url\\WordpressPluginRepo' => __DIR__ . '/../..' . '/classes/Type/Url/WordpressPluginRepo.php', 'AC\\Type\\Url\\WordpressPluginReview' => __DIR__ . '/../..' . '/classes/Type/Url/WordpressPluginReview.php', 'AC\\Type\\UserId' => __DIR__ . '/../..' . '/classes/Type/UserId.php', 'AC\\TypedArrayIterator' => __DIR__ . '/../..' . '/classes/TypedArrayIterator.php', 'AC\\Vendor\\DI\\Annotation\\Inject' => __DIR__ . '/..' . '/php-di/php-di/src/Annotation/Inject.php', 'AC\\Vendor\\DI\\Annotation\\Injectable' => __DIR__ . '/..' . '/php-di/php-di/src/Annotation/Injectable.php', 'AC\\Vendor\\DI\\CompiledContainer' => __DIR__ . '/..' . '/php-di/php-di/src/CompiledContainer.php', 'AC\\Vendor\\DI\\Compiler\\Compiler' => __DIR__ . '/..' . '/php-di/php-di/src/Compiler/Compiler.php', 'AC\\Vendor\\DI\\Compiler\\ObjectCreationCompiler' => __DIR__ . '/..' . '/php-di/php-di/src/Compiler/ObjectCreationCompiler.php', 'AC\\Vendor\\DI\\Compiler\\RequestedEntryHolder' => __DIR__ . '/..' . '/php-di/php-di/src/Compiler/RequestedEntryHolder.php', 'AC\\Vendor\\DI\\Container' => __DIR__ . '/..' . '/php-di/php-di/src/Container.php', 'AC\\Vendor\\DI\\ContainerBuilder' => __DIR__ . '/..' . '/php-di/php-di/src/ContainerBuilder.php', 'AC\\Vendor\\DI\\Definition\\ArrayDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ArrayDefinition.php', 'AC\\Vendor\\DI\\Definition\\ArrayDefinitionExtension' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ArrayDefinitionExtension.php', 'AC\\Vendor\\DI\\Definition\\AutowireDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/AutowireDefinition.php', 'AC\\Vendor\\DI\\Definition\\DecoratorDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/DecoratorDefinition.php', 'AC\\Vendor\\DI\\Definition\\Definition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Definition.php', 'AC\\Vendor\\DI\\Definition\\Dumper\\ObjectDefinitionDumper' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Dumper/ObjectDefinitionDumper.php', 'AC\\Vendor\\DI\\Definition\\EnvironmentVariableDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/EnvironmentVariableDefinition.php', 'AC\\Vendor\\DI\\Definition\\Exception\\InvalidAnnotation' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Exception/InvalidAnnotation.php', 'AC\\Vendor\\DI\\Definition\\Exception\\InvalidDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Exception/InvalidDefinition.php', 'AC\\Vendor\\DI\\Definition\\ExtendsPreviousDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ExtendsPreviousDefinition.php', 'AC\\Vendor\\DI\\Definition\\FactoryDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/FactoryDefinition.php', 'AC\\Vendor\\DI\\Definition\\Helper\\AutowireDefinitionHelper' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Helper/AutowireDefinitionHelper.php', 'AC\\Vendor\\DI\\Definition\\Helper\\CreateDefinitionHelper' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Helper/CreateDefinitionHelper.php', 'AC\\Vendor\\DI\\Definition\\Helper\\DefinitionHelper' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Helper/DefinitionHelper.php', 'AC\\Vendor\\DI\\Definition\\Helper\\FactoryDefinitionHelper' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Helper/FactoryDefinitionHelper.php', 'AC\\Vendor\\DI\\Definition\\InstanceDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/InstanceDefinition.php', 'AC\\Vendor\\DI\\Definition\\ObjectDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ObjectDefinition.php', 'AC\\Vendor\\DI\\Definition\\ObjectDefinition\\MethodInjection' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ObjectDefinition/MethodInjection.php', 'AC\\Vendor\\DI\\Definition\\ObjectDefinition\\PropertyInjection' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ObjectDefinition/PropertyInjection.php', 'AC\\Vendor\\DI\\Definition\\Reference' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Reference.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\ArrayResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/ArrayResolver.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\DecoratorResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/DecoratorResolver.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\DefinitionResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/DefinitionResolver.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\EnvironmentVariableResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/EnvironmentVariableResolver.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\FactoryResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/FactoryResolver.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\InstanceInjector' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/InstanceInjector.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\ObjectCreator' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/ObjectCreator.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\ParameterResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/ParameterResolver.php', 'AC\\Vendor\\DI\\Definition\\Resolver\\ResolverDispatcher' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Resolver/ResolverDispatcher.php', 'AC\\Vendor\\DI\\Definition\\SelfResolvingDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/SelfResolvingDefinition.php', 'AC\\Vendor\\DI\\Definition\\Source\\AnnotationBasedAutowiring' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/AnnotationBasedAutowiring.php', 'AC\\Vendor\\DI\\Definition\\Source\\Autowiring' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/Autowiring.php', 'AC\\Vendor\\DI\\Definition\\Source\\DefinitionArray' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/DefinitionArray.php', 'AC\\Vendor\\DI\\Definition\\Source\\DefinitionFile' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/DefinitionFile.php', 'AC\\Vendor\\DI\\Definition\\Source\\DefinitionNormalizer' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/DefinitionNormalizer.php', 'AC\\Vendor\\DI\\Definition\\Source\\DefinitionSource' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/DefinitionSource.php', 'AC\\Vendor\\DI\\Definition\\Source\\MutableDefinitionSource' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/MutableDefinitionSource.php', 'AC\\Vendor\\DI\\Definition\\Source\\NoAutowiring' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/NoAutowiring.php', 'AC\\Vendor\\DI\\Definition\\Source\\ReflectionBasedAutowiring' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/ReflectionBasedAutowiring.php', 'AC\\Vendor\\DI\\Definition\\Source\\SourceCache' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/SourceCache.php', 'AC\\Vendor\\DI\\Definition\\Source\\SourceChain' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/Source/SourceChain.php', 'AC\\Vendor\\DI\\Definition\\StringDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/StringDefinition.php', 'AC\\Vendor\\DI\\Definition\\ValueDefinition' => __DIR__ . '/..' . '/php-di/php-di/src/Definition/ValueDefinition.php', 'AC\\Vendor\\DI\\DependencyException' => __DIR__ . '/..' . '/php-di/php-di/src/DependencyException.php', 'AC\\Vendor\\DI\\FactoryInterface' => __DIR__ . '/..' . '/php-di/php-di/src/FactoryInterface.php', 'AC\\Vendor\\DI\\Factory\\RequestedEntry' => __DIR__ . '/..' . '/php-di/php-di/src/Factory/RequestedEntry.php', 'AC\\Vendor\\DI\\Invoker\\DefinitionParameterResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Invoker/DefinitionParameterResolver.php', 'AC\\Vendor\\DI\\Invoker\\FactoryParameterResolver' => __DIR__ . '/..' . '/php-di/php-di/src/Invoker/FactoryParameterResolver.php', 'AC\\Vendor\\DI\\NotFoundException' => __DIR__ . '/..' . '/php-di/php-di/src/NotFoundException.php', 'AC\\Vendor\\DI\\Proxy\\ProxyFactory' => __DIR__ . '/..' . '/php-di/php-di/src/Proxy/ProxyFactory.php', 'AC\\Vendor\\Invoker\\CallableResolver' => __DIR__ . '/..' . '/php-di/invoker/src/CallableResolver.php', 'AC\\Vendor\\Invoker\\Exception\\InvocationException' => __DIR__ . '/..' . '/php-di/invoker/src/Exception/InvocationException.php', 'AC\\Vendor\\Invoker\\Exception\\NotCallableException' => __DIR__ . '/..' . '/php-di/invoker/src/Exception/NotCallableException.php', 'AC\\Vendor\\Invoker\\Exception\\NotEnoughParametersException' => __DIR__ . '/..' . '/php-di/invoker/src/Exception/NotEnoughParametersException.php', 'AC\\Vendor\\Invoker\\Invoker' => __DIR__ . '/..' . '/php-di/invoker/src/Invoker.php', 'AC\\Vendor\\Invoker\\InvokerInterface' => __DIR__ . '/..' . '/php-di/invoker/src/InvokerInterface.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\AssociativeArrayResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/AssociativeArrayResolver.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\Container\\ParameterNameContainerResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/Container/ParameterNameContainerResolver.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\Container\\TypeHintContainerResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/Container/TypeHintContainerResolver.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\DefaultValueResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/DefaultValueResolver.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\NumericArrayResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/NumericArrayResolver.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\ParameterResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/ParameterResolver.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\ResolverChain' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/ResolverChain.php', 'AC\\Vendor\\Invoker\\ParameterResolver\\TypeHintResolver' => __DIR__ . '/..' . '/php-di/invoker/src/ParameterResolver/TypeHintResolver.php', 'AC\\Vendor\\Invoker\\Reflection\\CallableReflection' => __DIR__ . '/..' . '/php-di/invoker/src/Reflection/CallableReflection.php', 'AC\\Vendor\\Opis\\Closure\\Analyzer' => __DIR__ . '/..' . '/opis/closure/src/Analyzer.php', 'AC\\Vendor\\Opis\\Closure\\ClosureContext' => __DIR__ . '/..' . '/opis/closure/src/ClosureContext.php', 'AC\\Vendor\\Opis\\Closure\\ClosureScope' => __DIR__ . '/..' . '/opis/closure/src/ClosureScope.php', 'AC\\Vendor\\Opis\\Closure\\ClosureStream' => __DIR__ . '/..' . '/opis/closure/src/ClosureStream.php', 'AC\\Vendor\\Opis\\Closure\\ISecurityProvider' => __DIR__ . '/..' . '/opis/closure/src/ISecurityProvider.php', 'AC\\Vendor\\Opis\\Closure\\ReflectionClosure' => __DIR__ . '/..' . '/opis/closure/src/ReflectionClosure.php', 'AC\\Vendor\\Opis\\Closure\\SecurityException' => __DIR__ . '/..' . '/opis/closure/src/SecurityException.php', 'AC\\Vendor\\Opis\\Closure\\SecurityProvider' => __DIR__ . '/..' . '/opis/closure/src/SecurityProvider.php', 'AC\\Vendor\\Opis\\Closure\\SelfReference' => __DIR__ . '/..' . '/opis/closure/src/SelfReference.php', 'AC\\Vendor\\Opis\\Closure\\SerializableClosure' => __DIR__ . '/..' . '/opis/closure/src/SerializableClosure.php', 'AC\\Vendor\\PhpDocReader\\AnnotationException' => __DIR__ . '/..' . '/php-di/phpdoc-reader/src/PhpDocReader/AnnotationException.php', 'AC\\Vendor\\PhpDocReader\\PhpDocReader' => __DIR__ . '/..' . '/php-di/phpdoc-reader/src/PhpDocReader/PhpDocReader.php', 'AC\\Vendor\\PhpDocReader\\PhpParser\\TokenParser' => __DIR__ . '/..' . '/php-di/phpdoc-reader/src/PhpDocReader/PhpParser/TokenParser.php', 'AC\\Vendor\\PhpDocReader\\PhpParser\\UseStatementParser' => __DIR__ . '/..' . '/php-di/phpdoc-reader/src/PhpDocReader/PhpParser/UseStatementParser.php', 'AC\\Vendor\\Psr\\Container\\ContainerExceptionInterface' => __DIR__ . '/..' . '/psr/container/src/ContainerExceptionInterface.php', 'AC\\Vendor\\Psr\\Container\\ContainerInterface' => __DIR__ . '/..' . '/psr/container/src/ContainerInterface.php', 'AC\\Vendor\\Psr\\Container\\NotFoundExceptionInterface' => __DIR__ . '/..' . '/psr/container/src/NotFoundExceptionInterface.php', 'AC\\View' => __DIR__ . '/../..' . '/classes/View.php', 'AC\\ViewCollection' => __DIR__ . '/../..' . '/classes/ViewCollection.php', 'AC\\WpListTableFactory' => __DIR__ . '/../..' . '/classes/WpListTableFactory.php', 'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace AC\Vendor\Opis\Closure {
    class ReflectionClosure extends \ReflectionFunction
    {
        protected $code;
        protected $tokens;
        protected $hashedName;
        protected $useVariables;
        protected $isStaticClosure;
        protected $isScopeRequired;
        protected $isBindingRequired;
        protected $isShortClosure;
        protected static $files = array();
        protected static $classes = array();
        protected static $functions = array();
        protected static $constants = array();
        protected static $structures = array();
        /**
         * ReflectionClosure constructor.
         * @param Closure $closure
         * @param string|null $code This is ignored. Do not use it
         * @throws \ReflectionException
         */
        public function __construct(\Closure $closure, $code = null)
        {
        }
        /**
         * @return bool
         */
        public function isStatic()
        {
        }
        public function isShortClosure()
        {
        }
        /**
         * @return string
         */
        public function getCode()
        {
        }
        /**
         * @return array
         */
        private static function getBuiltinTypes()
        {
        }
        /**
         * @return array
         */
        public function getUseVariables()
        {
        }
        /**
         * return bool
         */
        public function isBindingRequired()
        {
        }
        /**
         * return bool
         */
        public function isScopeRequired()
        {
        }
        /**
         * @return string
         */
        protected function getHashedFileName()
        {
        }
        /**
         * @return array
         */
        protected function getFileTokens()
        {
        }
        /**
         * @return array
         */
        protected function getTokens()
        {
        }
        /**
         * @return array
         */
        protected function getClasses()
        {
        }
        /**
         * @return array
         */
        protected function getFunctions()
        {
        }
        /**
         * @return array
         */
        protected function getConstants()
        {
        }
        /**
         * @return array
         */
        protected function getStructures()
        {
        }
        protected function fetchItems()
        {
        }
        private function parseNameQualified($token)
        {
        }
    }
    interface ISecurityProvider
    {
        /**
         * Sign serialized closure
         * @param string $closure
         * @return array
         */
        public function sign($closure);
        /**
         * Verify signature
         * @param array $data
         * @return bool
         */
        public function verify(array $data);
    }
    /**
     * Closure context class
     * @internal
     */
    class ClosureContext
    {
        /**
         * @var ClosureScope Closures scope
         */
        public $scope;
        /**
         * @var integer
         */
        public $locks;
        /**
         * Constructor
         */
        public function __construct()
        {
        }
    }
    /**
     * @internal
     */
    class ClosureStream
    {
        const STREAM_PROTO = 'closure';
        protected static $isRegistered = \false;
        protected $content;
        protected $length;
        protected $pointer = 0;
        function stream_open($path, $mode, $options, &$opened_path)
        {
        }
        public function stream_read($count)
        {
        }
        public function stream_eof()
        {
        }
        public function stream_set_option($option, $arg1, $arg2)
        {
        }
        public function stream_stat()
        {
        }
        public function url_stat($path, $flags)
        {
        }
        public function stream_seek($offset, $whence = \SEEK_SET)
        {
        }
        public function stream_tell()
        {
        }
        public static function register()
        {
        }
    }
    /**
     * @deprecated We'll remove this class
     */
    class Analyzer extends \AC\Vendor\SuperClosure\Analyzer\ClosureAnalyzer
    {
        /**
         * Analyzer a given closure.
         *
         * @param Closure $closure
         *
         * @return array
         */
        public function analyze(\Closure $closure)
        {
        }
        /**
         * @param array $data
         * @return mixed
         */
        protected function determineCode(array &$data)
        {
        }
        /**
         * @param array $data
         * @return mixed
         */
        protected function determineContext(array &$data)
        {
        }
    }
    /**
     * Security exception class
     */
    class SecurityException extends \Exception
    {
    }
    class SecurityProvider implements \AC\Vendor\Opis\Closure\ISecurityProvider
    {
        /** @var  string */
        protected $secret;
        /**
         * SecurityProvider constructor.
         * @param string $secret
         */
        public function __construct($secret)
        {
        }
        /**
         * @inheritdoc
         */
        public function sign($closure)
        {
        }
        /**
         * @inheritdoc
         */
        public function verify(array $data)
        {
        }
    }
    /**
     * Helper class used to indicate a reference to an object
     * @internal
     */
    class SelfReference
    {
        /**
         * @var string An unique hash representing the object
         */
        public $hash;
        /**
         * Constructor
         *
         * @param string $hash
         */
        public function __construct($hash)
        {
        }
    }
    /**
     * Provides a wrapper for serialization of closures
     */
    class SerializableClosure implements \Serializable
    {
        /**
         * @var Closure Wrapped closure
         *
         * @see \Opis\Closure\SerializableClosure::getClosure()
         */
        protected $closure;
        /**
         * @var ReflectionClosure A reflection instance for closure
         *
         * @see \Opis\Closure\SerializableClosure::getReflector()
         */
        protected $reflector;
        /**
         * @var mixed Used at deserialization to hold variables
         *
         * @see \Opis\Closure\SerializableClosure::unserialize()
         * @see \Opis\Closure\SerializableClosure::getReflector()
         */
        protected $code;
        /**
         * @var string Closure's ID
         */
        protected $reference;
        /**
         * @var string Closure scope
         */
        protected $scope;
        /**
         * @var ClosureContext Context of closure, used in serialization
         */
        protected static $context;
        /**
         * @var ISecurityProvider|null
         */
        protected static $securityProvider;
        /** Array recursive constant*/
        const ARRAY_RECURSIVE_KEY = '¯\\_(ツ)_/¯';
        /**
         * Constructor
         *
         * @param   Closure $closure Closure you want to serialize
         */
        public function __construct(\Closure $closure)
        {
        }
        /**
         * Get the Closure object
         *
         * @return  Closure The wrapped closure
         */
        public function getClosure()
        {
        }
        /**
         * Get the reflector for closure
         *
         * @return  ReflectionClosure
         */
        public function getReflector()
        {
        }
        /**
         * Implementation of magic method __invoke()
         */
        public function __invoke()
        {
        }
        /**
         * Implementation of Serializable::serialize()
         *
         * @return  string  The serialized closure
         */
        public function serialize()
        {
        }
        /**
         * Transform the use variables before serialization.
         *
         * @param  array  $data The Closure's use variables
         * @return array
         */
        protected function transformUseVariables($data)
        {
        }
        /**
         * Implementation of Serializable::unserialize()
         *
         * @param   string $data Serialized data
         * @throws SecurityException
         */
        public function unserialize($data)
        {
        }
        /**
         * Resolve the use variables after unserialization.
         *
         * @param  array  $data The Closure's transformed use variables
         * @return array
         */
        protected function resolveUseVariables($data)
        {
        }
        /**
         * Wraps a closure and sets the serialization context (if any)
         *
         * @param   Closure $closure Closure to be wrapped
         *
         * @return  self    The wrapped closure
         */
        public static function from(\Closure $closure)
        {
        }
        /**
         * Increments the context lock counter or creates a new context if none exist
         */
        public static function enterContext()
        {
        }
        /**
         * Decrements the context lock counter and destroy the context when it reaches to 0
         */
        public static function exitContext()
        {
        }
        /**
         * @param string $secret
         */
        public static function setSecretKey($secret)
        {
        }
        /**
         * @param ISecurityProvider $securityProvider
         */
        public static function addSecurityProvider(\AC\Vendor\Opis\Closure\ISecurityProvider $securityProvider)
        {
        }
        /**
         * Remove security provider
         */
        public static function removeSecurityProvider()
        {
        }
        /**
         * @return null|ISecurityProvider
         */
        public static function getSecurityProvider()
        {
        }
        /**
         * Wrap closures
         *
         * @internal
         * @param $data
         * @param ClosureScope|SplObjectStorage|null $storage
         */
        public static function wrapClosures(&$data, \SplObjectStorage $storage = null)
        {
        }
        /**
         * Unwrap closures
         *
         * @internal
         * @param $data
         * @param SplObjectStorage|null $storage
         */
        public static function unwrapClosures(&$data, \SplObjectStorage $storage = null)
        {
        }
        /**
         * Creates a new closure from arbitrary code,
         * emulating create_function, but without using eval
         *
         * @param string$args
         * @param string $code
         * @return Closure
         */
        public static function createClosure($args, $code)
        {
        }
        /**
         * Internal method used to map closure pointers
         * @internal
         * @param $data
         */
        protected function mapPointers(&$data)
        {
        }
        /**
         * Internal method used to map closures by reference
         *
         * @internal
         * @param   mixed &$data
         */
        protected function mapByReference(&$data)
        {
        }
    }
    /**
     * Closure scope class
     * @internal
     */
    class ClosureScope extends \SplObjectStorage
    {
        /**
         * @var integer Number of serializations in current scope
         */
        public $serializations = 0;
        /**
         * @var integer Number of closures that have to be serialized
         */
        public $toserialize = 0;
    }
}
namespace AC\Vendor\PhpDocReader\PhpParser {
    /**
     * Parses a file for "use" declarations.
     *
     * Class taken and adapted from doctrine/annotations to avoid pulling the whole package.
     *
     * Authors: Fabien Potencier <fabien@symfony.com> and Christian Kaps <christian.kaps@mohiva.com>
     */
    class UseStatementParser
    {
        /**
         * @return array A list with use statements in the form (Alias => FQN).
         */
        public function parseUseStatements(\ReflectionClass $class) : array
        {
        }
        /**
         * Gets the content of the file right up to the given line number.
         *
         * @param string $filename The name of the file to load.
         * @param int $lineNumber The number of lines to read from file.
         */
        private function getFileContent(string $filename, int $lineNumber) : string
        {
        }
    }
    /**
     * Parses a file for namespaces/use/class declarations.
     *
     * Class taken and adapted from doctrine/annotations to avoid pulling the whole package.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Christian Kaps <christian.kaps@mohiva.com>
     */
    class TokenParser
    {
        /**
         * The token list.
         *
         * @var list<mixed[]>
         */
        private $tokens;
        /**
         * The number of tokens.
         *
         * @var int
         */
        private $numTokens;
        /**
         * The current array pointer.
         *
         * @var int
         */
        private $pointer = 0;
        /**
         * @param string $contents
         */
        public function __construct($contents)
        {
        }
        /**
         * Gets all use statements.
         *
         * @param string $namespaceName The namespace name of the reflected class.
         *
         * @return array<string, string> A list with all found use statements.
         */
        public function parseUseStatements($namespaceName)
        {
        }
        /**
         * Gets the next non whitespace and non comment token.
         *
         * @param bool $docCommentIsComment If TRUE then a doc comment is considered a comment and skipped.
         *                                  If FALSE then only whitespace and normal comments are skipped.
         *
         * @return mixed[]|string|null The token if exists, null otherwise.
         */
        private function next($docCommentIsComment = \true)
        {
        }
        /**
         * Parses a single use statement.
         *
         * @return array<string, string> A list with all found class names for a use statement.
         */
        private function parseUseStatement()
        {
        }
        /**
         * Gets the namespace.
         *
         * @return string The found namespace.
         */
        private function parseNamespace()
        {
        }
    }
}
namespace AC\Vendor\PhpDocReader {
    /**
     * We stumbled upon an invalid class/property/method annotation.
     */
    class AnnotationException extends \Exception
    {
    }
    /**
     * PhpDoc reader
     */
    class PhpDocReader
    {
        /** @var UseStatementParser */
        private $parser;
        private const PRIMITIVE_TYPES = ['bool' => 'bool', 'boolean' => 'bool', 'string' => 'string', 'int' => 'int', 'integer' => 'int', 'float' => 'float', 'double' => 'float', 'array' => 'array', 'object' => 'object', 'callable' => 'callable', 'resource' => 'resource', 'mixed' => 'mixed', 'iterable' => 'iterable'];
        /** @var bool */
        private $ignorePhpDocErrors;
        /**
         * @param bool $ignorePhpDocErrors Enable or disable throwing errors when PhpDoc errors occur (when parsing annotations).
         */
        public function __construct(bool $ignorePhpDocErrors = \false)
        {
        }
        /**
         * Parse the docblock of the property to get the type (class or primitive type) of the var annotation.
         *
         * @return string|null Type of the property (content of var annotation)
         * @throws AnnotationException
         */
        public function getPropertyType(\ReflectionProperty $property) : ?string
        {
        }
        /**
         * Parse the docblock of the property to get the class of the var annotation.
         *
         * @return string|null Type of the property (content of var annotation)
         * @throws AnnotationException
         */
        public function getPropertyClass(\ReflectionProperty $property) : ?string
        {
        }
        private function readPropertyType(\ReflectionProperty $property, bool $allowPrimitiveTypes) : ?string
        {
        }
        /**
         * Parse the docblock of the property to get the type (class or primitive type) of the param annotation.
         *
         * @return string|null Type of the property (content of var annotation)
         * @throws AnnotationException
         */
        public function getParameterType(\ReflectionParameter $parameter) : ?string
        {
        }
        /**
         * Parse the docblock of the property to get the class of the param annotation.
         *
         * @return string|null Type of the property (content of var annotation)
         * @throws AnnotationException
         */
        public function getParameterClass(\ReflectionParameter $parameter) : ?string
        {
        }
        private function readParameterClass(\ReflectionParameter $parameter, bool $allowPrimitiveTypes) : ?string
        {
        }
        /**
         * Attempts to resolve the FQN of the provided $type based on the $class and $member context.
         *
         * @return string|null Fully qualified name of the type, or null if it could not be resolved
         */
        private function tryResolveFqn(string $type, \ReflectionClass $class, \Reflector $member) : ?string
        {
        }
        /**
         * Attempts to resolve the FQN of the provided $type based on the $class and $member context, specifically searching
         * through the traits that are used by the provided $class.
         *
         * @return string|null Fully qualified name of the type, or null if it could not be resolved
         */
        private function tryResolveFqnInTraits(string $type, \ReflectionClass $class, \Reflector $member) : ?string
        {
        }
        private function classExists(string $class) : bool
        {
        }
    }
}
namespace AC\Vendor\DI\Factory {
    /**
     * Represents the container entry that was requested.
     *
     * Implementations of this interface can be injected in factory parameters in order
     * to know what was the name of the requested entry.
     *
     * @api
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface RequestedEntry
    {
        /**
         * Returns the name of the entry that was requested by the container.
         */
        public function getName() : string;
    }
}
namespace AC\Vendor\DI {
    /**
     * Exception for the Container.
     */
    class DependencyException extends \Exception implements \AC\Vendor\Psr\Container\ContainerExceptionInterface
    {
    }
    /**
     * Describes the basic interface of a factory.
     *
     * @api
     *
     * @since 4.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface FactoryInterface
    {
        /**
         * Resolves an entry by its name. If given a class name, it will return a new instance of that class.
         *
         * @param string $name       Entry name or a class name.
         * @param array  $parameters Optional parameters to use to build the entry. Use this to force specific
         *                           parameters to specific values. Parameters not defined in this array will
         *                           be automatically resolved.
         *
         * @throws \InvalidArgumentException The name parameter must be of type string.
         * @throws DependencyException       Error while resolving the entry.
         * @throws NotFoundException         No entry or class found for the given name.
         * @return mixed
         */
        public function make($name, array $parameters = []);
    }
}
namespace AC\Vendor\Invoker {
    /**
     * Invoke a callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface InvokerInterface
    {
        /**
         * Call the given function using the given parameters.
         *
         * @param callable $callable   Function to call.
         * @param array    $parameters Parameters to use.
         *
         * @return mixed Result of the function.
         *
         * @throws InvocationException Base exception class for all the sub-exceptions below.
         * @throws NotCallableException
         * @throws NotEnoughParametersException
         */
        public function call($callable, array $parameters = array());
    }
}
namespace AC\Vendor\DI {
    /**
     * Dependency Injection Container.
     *
     * @api
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class Container implements \AC\Vendor\Psr\Container\ContainerInterface, \AC\Vendor\DI\FactoryInterface, \AC\Vendor\Invoker\InvokerInterface
    {
        /**
         * Map of entries that are already resolved.
         * @var array
         */
        protected $resolvedEntries = [];
        /**
         * @var MutableDefinitionSource
         */
        private $definitionSource;
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        /**
         * Map of definitions that are already fetched (local cache).
         *
         * @var (Definition|null)[]
         */
        private $fetchedDefinitions = [];
        /**
         * Array of entries being resolved. Used to avoid circular dependencies and infinite loops.
         * @var array
         */
        protected $entriesBeingResolved = [];
        /**
         * @var InvokerInterface|null
         */
        private $invoker;
        /**
         * Container that wraps this container. If none, points to $this.
         *
         * @var ContainerInterface
         */
        protected $delegateContainer;
        /**
         * @var ProxyFactory
         */
        protected $proxyFactory;
        /**
         * Use `$container = new Container()` if you want a container with the default configuration.
         *
         * If you want to customize the container's behavior, you are discouraged to create and pass the
         * dependencies yourself, the ContainerBuilder class is here to help you instead.
         *
         * @see ContainerBuilder
         *
         * @param ContainerInterface $wrapperContainer If the container is wrapped by another container.
         */
        public function __construct(\AC\Vendor\DI\Definition\Source\MutableDefinitionSource $definitionSource = null, \AC\Vendor\DI\Proxy\ProxyFactory $proxyFactory = null, \AC\Vendor\Psr\Container\ContainerInterface $wrapperContainer = null)
        {
        }
        /**
         * Returns an entry of the container by its name.
         *
         * @template T
         * @param string|class-string<T> $name Entry name or a class name.
         *
         * @throws DependencyException Error while resolving the entry.
         * @throws NotFoundException No entry found for the given name.
         * @return mixed|T
         */
        public function get($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Definition|null
         */
        private function getDefinition($name)
        {
        }
        /**
         * Build an entry of the container by its name.
         *
         * This method behave like get() except resolves the entry again every time.
         * For example if the entry is a class then a new instance will be created each time.
         *
         * This method makes the container behave like a factory.
         *
         * @template T
         * @param string|class-string<T> $name       Entry name or a class name.
         * @param array                  $parameters Optional parameters to use to build the entry. Use this to force
         *                                           specific parameters to specific values. Parameters not defined in this
         *                                           array will be resolved using the container.
         *
         * @throws InvalidArgumentException The name parameter must be of type string.
         * @throws DependencyException Error while resolving the entry.
         * @throws NotFoundException No entry found for the given name.
         * @return mixed|T
         */
        public function make($name, array $parameters = [])
        {
        }
        /**
         * Test if the container can provide something for the given name.
         *
         * @param string $name Entry name or a class name.
         *
         * @throws InvalidArgumentException The name parameter must be of type string.
         * @return bool
         */
        public function has($name)
        {
        }
        /**
         * Inject all dependencies on an existing instance.
         *
         * @template T
         * @param object|T $instance Object to perform injection upon
         * @throws InvalidArgumentException
         * @throws DependencyException Error while injecting dependencies
         * @return object|T $instance Returns the same instance
         */
        public function injectOn($instance)
        {
        }
        /**
         * Call the given function using the given parameters.
         *
         * Missing parameters will be resolved from the container.
         *
         * @param callable $callable   Function to call.
         * @param array    $parameters Parameters to use. Can be indexed by the parameter names
         *                             or not indexed (same order as the parameters).
         *                             The array can also contain DI definitions, e.g. DI\get().
         *
         * @return mixed Result of the function.
         */
        public function call($callable, array $parameters = [])
        {
        }
        /**
         * Define an object or a value in the container.
         *
         * @param string $name Entry name
         * @param mixed|DefinitionHelper $value Value, use definition helpers to define objects
         */
        public function set(string $name, $value)
        {
        }
        /**
         * Get defined container entries.
         *
         * @return string[]
         */
        public function getKnownEntryNames() : array
        {
        }
        /**
         * Get entry debug information.
         *
         * @param string $name Entry name
         *
         * @throws InvalidDefinition
         * @throws NotFoundException
         */
        public function debugEntry(string $name) : string
        {
        }
        /**
         * Get formatted entry type.
         *
         * @param mixed $entry
         */
        private function getEntryType($entry) : string
        {
        }
        /**
         * Resolves a definition.
         *
         * Checks for circular dependencies while resolving the definition.
         *
         * @throws DependencyException Error while resolving the entry.
         * @return mixed
         */
        private function resolveDefinition(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        protected function setDefinition(string $name, \AC\Vendor\DI\Definition\Definition $definition)
        {
        }
        private function getInvoker() : \AC\Vendor\Invoker\InvokerInterface
        {
        }
        private function createDefaultDefinitionSource() : \AC\Vendor\DI\Definition\Source\SourceChain
        {
        }
    }
    /**
     * Compiled version of the dependency injection container.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    abstract class CompiledContainer extends \AC\Vendor\DI\Container
    {
        /**
         * This const is overridden in child classes (compiled containers).
         * @var array
         */
        protected const METHOD_MAPPING = [];
        /**
         * @var InvokerInterface
         */
        private $factoryInvoker;
        /**
         * {@inheritdoc}
         */
        public function get($name)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function has($name)
        {
        }
        protected function setDefinition(string $name, \AC\Vendor\DI\Definition\Definition $definition)
        {
        }
        /**
         * Invoke the given callable.
         */
        protected function resolveFactory($callable, $entryName, array $extraParameters = [])
        {
        }
    }
}
namespace AC\Vendor\DI\Compiler {
    /**
     * Compiles the container into PHP code much more optimized for performances.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class Compiler
    {
        /**
         * @var string
         */
        private $containerClass;
        /**
         * @var string
         */
        private $containerParentClass;
        /**
         * Definitions indexed by the entry name. The value can be null if the definition needs to be fetched.
         *
         * Keys are strings, values are `Definition` objects or null.
         *
         * @var \ArrayIterator
         */
        private $entriesToCompile;
        /**
         * Progressive counter for definitions.
         *
         * Each key in $entriesToCompile is defined as 'SubEntry' + counter
         * and each definition has always the same key in the CompiledContainer
         * if PHP-DI configuration does not change.
         *
         * @var int
         */
        private $subEntryCounter;
        /**
         * Progressive counter for CompiledContainer get methods.
         *
         * Each CompiledContainer method name is defined as 'get' + counter
         * and remains the same after each recompilation
         * if PHP-DI configuration does not change.
         *
         * @var int
         */
        private $methodMappingCounter;
        /**
         * Map of entry names to method names.
         *
         * @var string[]
         */
        private $entryToMethodMapping = [];
        /**
         * @var string[]
         */
        private $methods = [];
        /**
         * @var bool
         */
        private $autowiringEnabled;
        /**
         * @var ProxyFactory
         */
        private $proxyFactory;
        public function __construct(\AC\Vendor\DI\Proxy\ProxyFactory $proxyFactory)
        {
        }
        public function getProxyFactory() : \AC\Vendor\DI\Proxy\ProxyFactory
        {
        }
        /**
         * Compile the container.
         *
         * @return string The compiled container file name.
         */
        public function compile(\AC\Vendor\DI\Definition\Source\DefinitionSource $definitionSource, string $directory, string $className, string $parentClassName, bool $autowiringEnabled) : string
        {
        }
        private function writeFileAtomic(string $fileName, string $content) : int
        {
        }
        /**
         * @throws DependencyException
         * @throws InvalidDefinition
         * @return string The method name
         */
        private function compileDefinition(string $entryName, \AC\Vendor\DI\Definition\Definition $definition) : string
        {
        }
        public function compileValue($value) : string
        {
        }
        private function createCompilationDirectory(string $directory)
        {
        }
        /**
         * @return string|true If true is returned that means that the value is compilable.
         */
        private function isCompilable($value)
        {
        }
        /**
         * @throws \DI\Definition\Exception\InvalidDefinition
         */
        private function compileClosure(\Closure $closure) : string
        {
        }
    }
    /**
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class RequestedEntryHolder implements \AC\Vendor\DI\Factory\RequestedEntry
    {
        /**
         * @var string
         */
        private $name;
        public function __construct(string $name)
        {
        }
        public function getName() : string
        {
        }
    }
    /**
     * Compiles an object definition into native PHP code that, when executed, creates the object.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ObjectCreationCompiler
    {
        /**
         * @var Compiler
         */
        private $compiler;
        public function __construct(\AC\Vendor\DI\Compiler\Compiler $compiler)
        {
        }
        public function compile(\AC\Vendor\DI\Definition\ObjectDefinition $definition) : string
        {
        }
        public function resolveParameters(\AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $definition = null, \ReflectionMethod $method = null) : array
        {
        }
        private function compileLazyDefinition(\AC\Vendor\DI\Definition\ObjectDefinition $definition) : string
        {
        }
        /**
         * Returns the default value of a function parameter.
         *
         * @throws InvalidDefinition Can't get default values from PHP internal classes and functions
         * @return mixed
         */
        private function getParameterDefaultValue(\ReflectionParameter $parameter, \ReflectionMethod $function)
        {
        }
        private function getFunctionName(\ReflectionMethod $method) : string
        {
        }
        private function assertClassIsNotAnonymous(\AC\Vendor\DI\Definition\ObjectDefinition $definition)
        {
        }
        private function assertClassIsInstantiable(\AC\Vendor\DI\Definition\ObjectDefinition $definition)
        {
        }
    }
}
namespace AC\Vendor\DI {
    /**
     * Exception thrown when a class or a value is not found in the container.
     */
    class NotFoundException extends \Exception implements \AC\Vendor\Psr\Container\NotFoundExceptionInterface
    {
    }
}
namespace AC\Vendor\DI\Annotation {
    /**
     * "Injectable" annotation.
     *
     * Marks a class as injectable
     *
     * @api
     *
     * @Annotation
     * @Target("CLASS")
     *
     * @author Domenic Muskulus <domenic@muskulus.eu>
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    final class Injectable
    {
        /**
         * Should the object be lazy-loaded.
         * @var bool|null
         */
        private $lazy;
        public function __construct(array $values)
        {
        }
        /**
         * @return bool|null
         */
        public function isLazy()
        {
        }
    }
    /**
     * "Inject" annotation.
     *
     * Marks a property or method as an injection point
     *
     * @api
     *
     * @Annotation
     * @Target({"METHOD","PROPERTY"})
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    final class Inject
    {
        /**
         * Entry name.
         * @var string
         */
        private $name;
        /**
         * Parameters, indexed by the parameter number (index) or name.
         *
         * Used if the annotation is set on a method
         * @var array
         */
        private $parameters = [];
        /**
         * @throws InvalidAnnotation
         */
        public function __construct(array $values)
        {
        }
        /**
         * @return string|null Name of the entry to inject
         */
        public function getName()
        {
        }
        /**
         * @return array Parameters, indexed by the parameter number (index) or name
         */
        public function getParameters() : array
        {
        }
    }
}
namespace AC\Vendor\DI {
    /**
     * Helper to create and configure a Container.
     *
     * With the default options, the container created is appropriate for the development environment.
     *
     * Example:
     *
     *     $builder = new ContainerBuilder();
     *     $container = $builder->build();
     *
     * @api
     *
     * @since  3.2
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ContainerBuilder
    {
        /**
         * Name of the container class, used to create the container.
         * @var string
         */
        private $containerClass;
        /**
         * Name of the container parent class, used on compiled container.
         * @var string
         */
        private $containerParentClass;
        /**
         * @var bool
         */
        private $useAutowiring = \true;
        /**
         * @var bool
         */
        private $useAnnotations = \false;
        /**
         * @var bool
         */
        private $ignorePhpDocErrors = \false;
        /**
         * If true, write the proxies to disk to improve performances.
         * @var bool
         */
        private $writeProxiesToFile = \false;
        /**
         * Directory where to write the proxies (if $writeProxiesToFile is enabled).
         * @var string|null
         */
        private $proxyDirectory;
        /**
         * If PHP-DI is wrapped in another container, this references the wrapper.
         * @var ContainerInterface
         */
        private $wrapperContainer;
        /**
         * @var DefinitionSource[]|string[]|array[]
         */
        private $definitionSources = [];
        /**
         * Whether the container has already been built.
         * @var bool
         */
        private $locked = \false;
        /**
         * @var string|null
         */
        private $compileToDirectory;
        /**
         * @var bool
         */
        private $sourceCache = \false;
        /**
         * @var string
         */
        protected $sourceCacheNamespace;
        /**
         * Build a container configured for the dev environment.
         */
        public static function buildDevContainer() : \AC\Vendor\DI\Container
        {
        }
        /**
         * @param string $containerClass Name of the container class, used to create the container.
         */
        public function __construct(string $containerClass = \AC\Vendor\DI\Container::class)
        {
        }
        /**
         * Build and return a container.
         *
         * @return Container
         */
        public function build()
        {
        }
        /**
         * Compile the container for optimum performances.
         *
         * Be aware that the container is compiled once and never updated!
         *
         * Therefore:
         *
         * - in production you should clear that directory every time you deploy
         * - in development you should not compile the container
         *
         * @see https://php-di.org/doc/performances.html
         *
         * @param string $directory Directory in which to put the compiled container.
         * @param string $containerClass Name of the compiled class. Customize only if necessary.
         * @param string $containerParentClass Name of the compiled container parent class. Customize only if necessary.
         */
        public function enableCompilation(string $directory, string $containerClass = 'CompiledContainer', string $containerParentClass = \AC\Vendor\DI\CompiledContainer::class) : self
        {
        }
        /**
         * Enable or disable the use of autowiring to guess injections.
         *
         * Enabled by default.
         *
         * @return $this
         */
        public function useAutowiring(bool $bool) : self
        {
        }
        /**
         * Enable or disable the use of annotations to guess injections.
         *
         * Disabled by default.
         *
         * @return $this
         */
        public function useAnnotations(bool $bool) : self
        {
        }
        /**
         * Enable or disable ignoring phpdoc errors (non-existent classes in `@param` or `@var`).
         *
         * @return $this
         */
        public function ignorePhpDocErrors(bool $bool) : self
        {
        }
        /**
         * Configure the proxy generation.
         *
         * For dev environment, use `writeProxiesToFile(false)` (default configuration)
         * For production environment, use `writeProxiesToFile(true, 'tmp/proxies')`
         *
         * @see https://php-di.org/doc/lazy-injection.html
         *
         * @param bool $writeToFile If true, write the proxies to disk to improve performances
         * @param string|null $proxyDirectory Directory where to write the proxies
         * @throws InvalidArgumentException when writeToFile is set to true and the proxy directory is null
         * @return $this
         */
        public function writeProxiesToFile(bool $writeToFile, string $proxyDirectory = null) : self
        {
        }
        /**
         * If PHP-DI's container is wrapped by another container, we can
         * set this so that PHP-DI will use the wrapper rather than itself for building objects.
         *
         * @return $this
         */
        public function wrapContainer(\AC\Vendor\Psr\Container\ContainerInterface $otherContainer) : self
        {
        }
        /**
         * Add definitions to the container.
         *
         * @param string|array|DefinitionSource ...$definitions Can be an array of definitions, the
         *                                                      name of a file containing definitions
         *                                                      or a DefinitionSource object.
         * @return $this
         */
        public function addDefinitions(...$definitions) : self
        {
        }
        /**
         * Enables the use of APCu to cache definitions.
         *
         * You must have APCu enabled to use it.
         *
         * Before using this feature, you should try these steps first:
         * - enable compilation if not already done (see `enableCompilation()`)
         * - if you use autowiring or annotations, add all the classes you are using into your configuration so that
         *   PHP-DI knows about them and compiles them
         * Once this is done, you can try to optimize performances further with APCu. It can also be useful if you use
         * `Container::make()` instead of `get()` (`make()` calls cannot be compiled so they are not optimized).
         *
         * Remember to clear APCu on each deploy else your application will have a stale cache. Do not enable the cache
         * in development environment: any change you will make to the code will be ignored because of the cache.
         *
         * @see https://php-di.org/doc/performances.html
         *
         * @param string $cacheNamespace use unique namespace per container when sharing a single APC memory pool to prevent cache collisions
         * @return $this
         */
        public function enableDefinitionCache(string $cacheNamespace = '') : self
        {
        }
        /**
         * Are we building a compiled container?
         */
        public function isCompilationEnabled() : bool
        {
        }
        private function ensureNotLocked()
        {
        }
    }
}
namespace AC\Vendor\DI\Proxy {
    /**
     * Creates proxy classes.
     *
     * Wraps Ocramius/ProxyManager LazyLoadingValueHolderFactory.
     *
     * @see \ProxyManager\Factory\LazyLoadingValueHolderFactory
     *
     * @since  5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ProxyFactory
    {
        /**
         * If true, write the proxies to disk to improve performances.
         * @var bool
         */
        private $writeProxiesToFile;
        /**
         * Directory where to write the proxies (if $writeProxiesToFile is enabled).
         * @var string|null
         */
        private $proxyDirectory;
        /**
         * @var LazyLoadingValueHolderFactory|null
         */
        private $proxyManager;
        public function __construct(bool $writeProxiesToFile = \false, string $proxyDirectory = null)
        {
        }
        /**
         * Creates a new lazy proxy instance of the given class with
         * the given initializer.
         *
         * @param string $className name of the class to be proxied
         * @param \Closure $initializer initializer to be passed to the proxy
         */
        public function createProxy(string $className, \Closure $initializer) : \AC\Vendor\ProxyManager\Proxy\LazyLoadingInterface
        {
        }
        /**
         * Generates and writes the proxy class to file.
         *
         * @param string $className name of the class to be proxied
         */
        public function generateProxyClass(string $className)
        {
        }
        private function createProxyManager()
        {
        }
    }
}
namespace AC\Vendor\Invoker\ParameterResolver {
    /**
     * Resolves the parameters to use to call the callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface ParameterResolver
    {
        /**
         * Resolves the parameters to use to call the callable.
         *
         * `$resolvedParameters` contains parameters that have already been resolved.
         *
         * Each ParameterResolver must resolve parameters that are not already
         * in `$resolvedParameters`. That allows to chain multiple ParameterResolver.
         *
         * @param ReflectionFunctionAbstract $reflection Reflection object for the callable.
         * @param array $providedParameters Parameters provided by the caller.
         * @param array $resolvedParameters Parameters resolved (indexed by parameter position).
         *
         * @return array
         */
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters);
    }
}
namespace AC\Vendor\DI\Invoker {
    /**
     * Resolves callable parameters using definitions.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DefinitionParameterResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        public function __construct(\AC\Vendor\DI\Definition\Resolver\DefinitionResolver $definitionResolver)
        {
        }
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters) : array
        {
        }
    }
    /**
     * Inject the container, the definition or any other service using type-hints.
     *
     * {@internal This class is similar to TypeHintingResolver and TypeHintingContainerResolver,
     *            we use this instead for performance reasons}
     *
     * @author Quim Calpe <quim@kalpe.com>
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class FactoryParameterResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container)
        {
        }
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters) : array
        {
        }
    }
}
namespace AC\Vendor\DI\Definition {
    /**
     * Definition.
     *
     * @internal This interface is internal to PHP-DI and may change between minor versions.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface Definition extends \AC\Vendor\DI\Factory\RequestedEntry
    {
        /**
         * Returns the name of the entry in the container.
         */
        public function getName() : string;
        /**
         * Set the name of the entry in the container.
         */
        public function setName(string $name);
        /**
         * Apply a callable that replaces the definitions nested in this definition.
         */
        public function replaceNestedDefinitions(callable $replacer);
        /**
         * Definitions can be cast to string for debugging information.
         */
        public function __toString();
    }
}
namespace AC\Vendor\DI\Definition\ObjectDefinition {
    /**
     * Describe an injection in an object method.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class MethodInjection implements \AC\Vendor\DI\Definition\Definition
    {
        /**
         * @var string
         */
        private $methodName;
        /**
         * @var mixed[]
         */
        private $parameters = [];
        public function __construct(string $methodName, array $parameters = [])
        {
        }
        public static function constructor(array $parameters = []) : self
        {
        }
        public function getMethodName() : string
        {
        }
        /**
         * @return mixed[]
         */
        public function getParameters() : array
        {
        }
        /**
         * Replace the parameters of the definition by a new array of parameters.
         */
        public function replaceParameters(array $parameters)
        {
        }
        public function merge(self $definition)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function __toString()
        {
        }
    }
    /**
     * Describe an injection in a class property.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class PropertyInjection
    {
        /**
         * Property name.
         * @var string
         */
        private $propertyName;
        /**
         * Value that should be injected in the property.
         * @var mixed
         */
        private $value;
        /**
         * Use for injecting in properties of parent classes: the class name
         * must be the name of the parent class because private properties
         * can be attached to the parent classes, not the one we are resolving.
         * @var string|null
         */
        private $className;
        /**
         * @param string $propertyName Property name
         * @param mixed $value Value that should be injected in the property
         */
        public function __construct(string $propertyName, $value, string $className = null)
        {
        }
        public function getPropertyName() : string
        {
        }
        /**
         * @return mixed Value that should be injected in the property
         */
        public function getValue()
        {
        }
        /**
         * @return string|null
         */
        public function getClassName()
        {
        }
        public function replaceNestedDefinition(callable $replacer)
        {
        }
    }
}
namespace AC\Vendor\DI\Definition {
    /**
     * Defines how an object can be instantiated.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ObjectDefinition implements \AC\Vendor\DI\Definition\Definition
    {
        /**
         * Entry name (most of the time, same as $classname).
         * @var string
         */
        private $name;
        /**
         * Class name (if null, then the class name is $name).
         * @var string|null
         */
        protected $className;
        /**
         * Constructor parameter injection.
         * @var MethodInjection|null
         */
        protected $constructorInjection;
        /**
         * Property injections.
         * @var PropertyInjection[]
         */
        protected $propertyInjections = [];
        /**
         * Method calls.
         * @var MethodInjection[][]
         */
        protected $methodInjections = [];
        /**
         * @var bool|null
         */
        protected $lazy;
        /**
         * Store if the class exists. Storing it (in cache) avoids recomputing this.
         *
         * @var bool
         */
        private $classExists;
        /**
         * Store if the class is instantiable. Storing it (in cache) avoids recomputing this.
         *
         * @var bool
         */
        private $isInstantiable;
        /**
         * @param string $name Entry name
         */
        public function __construct(string $name, string $className = null)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        public function setClassName(string $className = null)
        {
        }
        public function getClassName() : string
        {
        }
        /**
         * @return MethodInjection|null
         */
        public function getConstructorInjection()
        {
        }
        public function setConstructorInjection(\AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $constructorInjection)
        {
        }
        public function completeConstructorInjection(\AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $injection)
        {
        }
        /**
         * @return PropertyInjection[] Property injections
         */
        public function getPropertyInjections() : array
        {
        }
        public function addPropertyInjection(\AC\Vendor\DI\Definition\ObjectDefinition\PropertyInjection $propertyInjection)
        {
        }
        /**
         * @return MethodInjection[] Method injections
         */
        public function getMethodInjections() : array
        {
        }
        public function addMethodInjection(\AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $methodInjection)
        {
        }
        public function completeFirstMethodInjection(\AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $injection)
        {
        }
        public function setLazy(bool $lazy = null)
        {
        }
        public function isLazy() : bool
        {
        }
        public function classExists() : bool
        {
        }
        public function isInstantiable() : bool
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        /**
         * Replaces all the wildcards in the string with the given replacements.
         *
         * @param string[] $replacements
         */
        public function replaceWildcards(array $replacements)
        {
        }
        public function __toString()
        {
        }
        private function updateCache()
        {
        }
    }
}
namespace AC\Vendor\DI\Definition\Resolver {
    /**
     * Resolves a definition to a value.
     *
     * @since 4.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface DefinitionResolver
    {
        /**
         * Resolve a definition to a value.
         *
         * @param Definition $definition Object that defines how the value should be obtained.
         * @param array      $parameters Optional parameters to use to build the entry.
         *
         * @throws InvalidDefinition If the definition cannot be resolved.
         *
         * @return mixed Value obtained from the definition.
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []);
        /**
         * Check if a definition can be resolved.
         *
         * @param Definition $definition Object that defines how the value should be obtained.
         * @param array      $parameters Optional parameters to use to build the entry.
         */
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool;
    }
    /**
     * Create objects based on an object definition.
     *
     * @since 4.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ObjectCreator implements \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
    {
        /**
         * @var ProxyFactory
         */
        private $proxyFactory;
        /**
         * @var ParameterResolver
         */
        private $parameterResolver;
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        /**
         * @param DefinitionResolver $definitionResolver Used to resolve nested definitions.
         * @param ProxyFactory       $proxyFactory       Used to create proxies for lazy injections.
         */
        public function __construct(\AC\Vendor\DI\Definition\Resolver\DefinitionResolver $definitionResolver, \AC\Vendor\DI\Proxy\ProxyFactory $proxyFactory)
        {
        }
        /**
         * Resolve a class definition to a value.
         *
         * This will create a new instance of the class using the injections points defined.
         *
         * @param ObjectDefinition $definition
         *
         * @return object|null
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        /**
         * The definition is not resolvable if the class is not instantiable (interface or abstract)
         * or if the class doesn't exist.
         *
         * @param ObjectDefinition $definition
         */
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
        /**
         * Returns a proxy instance.
         */
        private function createProxy(\AC\Vendor\DI\Definition\ObjectDefinition $definition, array $parameters) : \AC\Vendor\ProxyManager\Proxy\LazyLoadingInterface
        {
        }
        /**
         * Creates an instance of the class and injects dependencies..
         *
         * @param array            $parameters      Optional parameters to use to create the instance.
         *
         * @throws InvalidDefinition
         * @throws DependencyException
         * @return object
         */
        private function createInstance(\AC\Vendor\DI\Definition\ObjectDefinition $definition, array $parameters)
        {
        }
        protected function injectMethodsAndProperties($object, \AC\Vendor\DI\Definition\ObjectDefinition $objectDefinition)
        {
        }
        /**
         * Inject dependencies into properties.
         *
         * @param object            $object            Object to inject dependencies into
         * @param PropertyInjection $propertyInjection Property injection definition
         *
         * @throws DependencyException
         * @throws InvalidDefinition
         */
        private function injectProperty($object, \AC\Vendor\DI\Definition\ObjectDefinition\PropertyInjection $propertyInjection)
        {
        }
        public static function setPrivatePropertyValue(string $className = null, $object, string $propertyName, $propertyValue)
        {
        }
    }
    /**
     * Injects dependencies on an existing instance.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class InstanceInjector extends \AC\Vendor\DI\Definition\Resolver\ObjectCreator
    {
        /**
         * Injects dependencies on an existing instance.
         *
         * @param InstanceDefinition $definition
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
    }
    /**
     * Resolves an array definition to a value.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ArrayResolver implements \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
    {
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        /**
         * @param DefinitionResolver $definitionResolver Used to resolve nested definitions.
         */
        public function __construct(\AC\Vendor\DI\Definition\Resolver\DefinitionResolver $definitionResolver)
        {
        }
        /**
         * Resolve an array definition to a value.
         *
         * An array definition can contain simple values or references to other entries.
         *
         * @param ArrayDefinition $definition
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : array
        {
        }
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
        private function resolveDefinition(\AC\Vendor\DI\Definition\Definition $value, \AC\Vendor\DI\Definition\ArrayDefinition $definition, $key)
        {
        }
    }
    /**
     * Resolves parameters for a function call.
     *
     * @since  4.2
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ParameterResolver
    {
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        /**
         * @param DefinitionResolver $definitionResolver Will be used to resolve nested definitions.
         */
        public function __construct(\AC\Vendor\DI\Definition\Resolver\DefinitionResolver $definitionResolver)
        {
        }
        /**
         * @throws InvalidDefinition A parameter has no value defined or guessable.
         * @return array Parameters to use to call the function.
         */
        public function resolveParameters(\AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $definition = null, \ReflectionMethod $method = null, array $parameters = [])
        {
        }
        /**
         * Returns the default value of a function parameter.
         *
         * @throws InvalidDefinition Can't get default values from PHP internal classes and functions
         * @return mixed
         */
        private function getParameterDefaultValue(\ReflectionParameter $parameter, \ReflectionMethod $function)
        {
        }
        private function getFunctionName(\ReflectionMethod $method) : string
        {
        }
    }
    /**
     * Resolves a environment variable definition to a value.
     *
     * @author James Harris <james.harris@icecave.com.au>
     */
    class EnvironmentVariableResolver implements \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
    {
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        /**
         * @var callable
         */
        private $variableReader;
        public function __construct(\AC\Vendor\DI\Definition\Resolver\DefinitionResolver $definitionResolver, $variableReader = null)
        {
        }
        /**
         * Resolve an environment variable definition to a value.
         *
         * @param EnvironmentVariableDefinition $definition
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
        protected function getEnvVariable(string $variableName)
        {
        }
    }
    /**
     * Dispatches to more specific resolvers.
     *
     * Dynamic dispatch pattern.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ResolverDispatcher implements \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @var ProxyFactory
         */
        private $proxyFactory;
        private $arrayResolver;
        private $factoryResolver;
        private $decoratorResolver;
        private $objectResolver;
        private $instanceResolver;
        private $envVariableResolver;
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container, \AC\Vendor\DI\Proxy\ProxyFactory $proxyFactory)
        {
        }
        /**
         * Resolve a definition to a value.
         *
         * @param Definition $definition Object that defines how the value should be obtained.
         * @param array      $parameters Optional parameters to use to build the entry.
         *
         * @throws InvalidDefinition If the definition cannot be resolved.
         *
         * @return mixed Value obtained from the definition.
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
        /**
         * Returns a resolver capable of handling the given definition.
         *
         * @throws \RuntimeException No definition resolver was found for this type of definition.
         */
        private function getDefinitionResolver(\AC\Vendor\DI\Definition\Definition $definition) : \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
        {
        }
    }
    /**
     * Resolves a factory definition to a value.
     *
     * @since 4.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class FactoryResolver implements \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @var Invoker|null
         */
        private $invoker;
        /**
         * @var DefinitionResolver
         */
        private $resolver;
        /**
         * The resolver needs a container. This container will be passed to the factory as a parameter
         * so that the factory can access other entries of the container.
         */
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container, \AC\Vendor\DI\Definition\Resolver\DefinitionResolver $resolver)
        {
        }
        /**
         * Resolve a factory definition to a value.
         *
         * This will call the callable of the definition.
         *
         * @param FactoryDefinition $definition
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
        private function resolveExtraParams(array $params) : array
        {
        }
    }
    /**
     * Resolves a decorator definition to a value.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DecoratorResolver implements \AC\Vendor\DI\Definition\Resolver\DefinitionResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @var DefinitionResolver
         */
        private $definitionResolver;
        /**
         * The resolver needs a container. This container will be passed to the factory as a parameter
         * so that the factory can access other entries of the container.
         *
         * @param DefinitionResolver $definitionResolver Used to resolve nested definitions.
         */
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container, \AC\Vendor\DI\Definition\Resolver\DefinitionResolver $definitionResolver)
        {
        }
        /**
         * Resolve a decorator definition to a value.
         *
         * This will call the callable of the definition and pass it the decorated entry.
         *
         * @param DecoratorDefinition $definition
         */
        public function resolve(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = [])
        {
        }
        public function isResolvable(\AC\Vendor\DI\Definition\Definition $definition, array $parameters = []) : bool
        {
        }
    }
}
namespace AC\Vendor\DI\Definition {
    /**
     * A definition that extends a previous definition with the same name.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface ExtendsPreviousDefinition extends \AC\Vendor\DI\Definition\Definition
    {
        public function setExtendedDefinition(\AC\Vendor\DI\Definition\Definition $definition);
    }
    /**
     * Definition of an array containing values or references.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ArrayDefinition implements \AC\Vendor\DI\Definition\Definition
    {
        /**
         * Entry name.
         * @var string
         */
        private $name = '';
        /**
         * @var array
         */
        private $values;
        public function __construct(array $values)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        public function getValues() : array
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
    /**
     * Extends an array definition by adding new elements into it.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ArrayDefinitionExtension extends \AC\Vendor\DI\Definition\ArrayDefinition implements \AC\Vendor\DI\Definition\ExtendsPreviousDefinition
    {
        /**
         * @var ArrayDefinition
         */
        private $subDefinition;
        public function getValues() : array
        {
        }
        public function setExtendedDefinition(\AC\Vendor\DI\Definition\Definition $definition)
        {
        }
    }
    /**
     * Definition of a value or class with a factory.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class FactoryDefinition implements \AC\Vendor\DI\Definition\Definition
    {
        /**
         * Entry name.
         * @var string
         */
        private $name;
        /**
         * Callable that returns the value.
         * @var callable
         */
        private $factory;
        /**
         * Factory parameters.
         * @var mixed[]
         */
        private $parameters = [];
        /**
         * @param string $name Entry name
         * @param callable $factory Callable that returns the value associated to the entry name.
         * @param array $parameters Parameters to be passed to the callable
         */
        public function __construct(string $name, $factory, array $parameters = [])
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        /**
         * @return callable Callable that returns the value associated to the entry name.
         */
        public function getCallable()
        {
        }
        /**
         * @return array Array containing the parameters to be passed to the callable, indexed by name.
         */
        public function getParameters() : array
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
    /**
     * Factory that decorates a sub-definition.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DecoratorDefinition extends \AC\Vendor\DI\Definition\FactoryDefinition implements \AC\Vendor\DI\Definition\Definition, \AC\Vendor\DI\Definition\ExtendsPreviousDefinition
    {
        /**
         * @var Definition|null
         */
        private $decorated;
        public function setExtendedDefinition(\AC\Vendor\DI\Definition\Definition $definition)
        {
        }
        /**
         * @return Definition|null
         */
        public function getDecoratedDefinition()
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
}
namespace AC\Vendor\DI\Definition\Source {
    /**
     * Source of definitions for entries of the container.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface Autowiring
    {
        /**
         * Autowire the given definition.
         *
         * @throws InvalidDefinition An invalid definition was found.
         * @return ObjectDefinition|null
         */
        public function autowire(string $name, \AC\Vendor\DI\Definition\ObjectDefinition $definition = null);
    }
    /**
     * Source of definitions for entries of the container.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface DefinitionSource
    {
        /**
         * Returns the DI definition for the entry name.
         *
         * @throws InvalidDefinition An invalid definition was found.
         * @return Definition|null
         */
        public function getDefinition(string $name);
        /**
         * @return Definition[] Definitions indexed by their name.
         */
        public function getDefinitions() : array;
    }
    /**
     * Provides DI definitions by reading annotations such as @ Inject and @ var annotations.
     *
     * Uses Autowiring, Doctrine's Annotations and regex docblock parsing.
     * This source automatically includes the reflection source.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class AnnotationBasedAutowiring implements \AC\Vendor\DI\Definition\Source\DefinitionSource, \AC\Vendor\DI\Definition\Source\Autowiring
    {
        /**
         * @var Reader
         */
        private $annotationReader;
        /**
         * @var PhpDocReader
         */
        private $phpDocReader;
        /**
         * @var bool
         */
        private $ignorePhpDocErrors;
        public function __construct($ignorePhpDocErrors = \false)
        {
        }
        public function autowire(string $name, \AC\Vendor\DI\Definition\ObjectDefinition $definition = null)
        {
        }
        /**
         * {@inheritdoc}
         * @throws InvalidAnnotation
         * @throws InvalidArgumentException The class doesn't exist
         */
        public function getDefinition(string $name)
        {
        }
        /**
         * Autowiring cannot guess all existing definitions.
         */
        public function getDefinitions() : array
        {
        }
        /**
         * Browse the class properties looking for annotated properties.
         */
        private function readProperties(\ReflectionClass $class, \AC\Vendor\DI\Definition\ObjectDefinition $definition)
        {
        }
        private function readProperty(\ReflectionProperty $property, \AC\Vendor\DI\Definition\ObjectDefinition $definition, $classname = null)
        {
        }
        /**
         * Browse the object's methods looking for annotated methods.
         */
        private function readMethods(\ReflectionClass $class, \AC\Vendor\DI\Definition\ObjectDefinition $objectDefinition)
        {
        }
        /**
         * @return MethodInjection|null
         */
        private function getMethodInjection(\ReflectionMethod $method)
        {
        }
        /**
         * @param int                 $parameterIndex
         *
         * @return string|null Entry name or null if not found.
         */
        private function getMethodParameter($parameterIndex, \ReflectionParameter $parameter, array $annotationParameters)
        {
        }
        /**
         * @return Reader The annotation reader
         */
        public function getAnnotationReader()
        {
        }
        /**
         * @return PhpDocReader
         */
        private function getPhpDocReader()
        {
        }
        private function readInjectableAnnotation(\ReflectionClass $class, \AC\Vendor\DI\Definition\ObjectDefinition $definition)
        {
        }
    }
    /**
     * Describes a definition source to which we can add new definitions.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface MutableDefinitionSource extends \AC\Vendor\DI\Definition\Source\DefinitionSource
    {
        public function addDefinition(\AC\Vendor\DI\Definition\Definition $definition);
    }
    /**
     * Reads DI definitions from a PHP array.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DefinitionArray implements \AC\Vendor\DI\Definition\Source\DefinitionSource, \AC\Vendor\DI\Definition\Source\MutableDefinitionSource
    {
        const WILDCARD = '*';
        /**
         * Matches anything except "\".
         */
        const WILDCARD_PATTERN = '([^\\\\]+)';
        /**
         * DI definitions in a PHP array.
         * @var array
         */
        private $definitions = [];
        /**
         * Cache of wildcard definitions.
         * @var array|null
         */
        private $wildcardDefinitions;
        /**
         * @var DefinitionNormalizer
         */
        private $normalizer;
        public function __construct(array $definitions = [], \AC\Vendor\DI\Definition\Source\Autowiring $autowiring = null)
        {
        }
        /**
         * @param array $definitions DI definitions in a PHP array indexed by the definition name.
         */
        public function addDefinitions(array $definitions)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function addDefinition(\AC\Vendor\DI\Definition\Definition $definition)
        {
        }
        public function getDefinition(string $name)
        {
        }
        public function getDefinitions() : array
        {
        }
    }
    /**
     * Decorator that caches another definition source.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class SourceCache implements \AC\Vendor\DI\Definition\Source\DefinitionSource, \AC\Vendor\DI\Definition\Source\MutableDefinitionSource
    {
        /**
         * @var string
         */
        const CACHE_KEY = 'php-di.definitions.';
        /**
         * @var DefinitionSource
         */
        private $cachedSource;
        /**
         * @var string
         */
        private $cacheNamespace;
        public function __construct(\AC\Vendor\DI\Definition\Source\DefinitionSource $cachedSource, string $cacheNamespace = '')
        {
        }
        public function getDefinition(string $name)
        {
        }
        /**
         * Used only for the compilation so we can skip the cache safely.
         */
        public function getDefinitions() : array
        {
        }
        public static function isSupported() : bool
        {
        }
        public function getCacheKey(string $name) : string
        {
        }
        public function addDefinition(\AC\Vendor\DI\Definition\Definition $definition)
        {
        }
        private function shouldBeCached(\AC\Vendor\DI\Definition\Definition $definition = null) : bool
        {
        }
    }
    /**
     * Implementation used when autowiring is completely disabled.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class NoAutowiring implements \AC\Vendor\DI\Definition\Source\Autowiring
    {
        public function autowire(string $name, \AC\Vendor\DI\Definition\ObjectDefinition $definition = null)
        {
        }
    }
    /**
     * Turns raw definitions/definition helpers into definitions ready
     * to be resolved or compiled.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DefinitionNormalizer
    {
        /**
         * @var Autowiring
         */
        private $autowiring;
        public function __construct(\AC\Vendor\DI\Definition\Source\Autowiring $autowiring)
        {
        }
        /**
         * Normalize a definition that is *not* nested in another one.
         *
         * This is usually a definition declared at the root of a definition array.
         *
         * @param mixed $definition
         * @param string $name The definition name.
         * @param string[] $wildcardsReplacements Replacements for wildcard definitions.
         *
         * @throws InvalidDefinition
         */
        public function normalizeRootDefinition($definition, string $name, array $wildcardsReplacements = null) : \AC\Vendor\DI\Definition\Definition
        {
        }
        /**
         * Normalize a definition that is nested in another one.
         *
         * @param mixed $definition
         * @return mixed
         *
         * @throws InvalidDefinition
         */
        public function normalizeNestedDefinition($definition)
        {
        }
    }
    /**
     * Reads DI definitions from a file returning a PHP array.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DefinitionFile extends \AC\Vendor\DI\Definition\Source\DefinitionArray
    {
        /**
         * @var bool
         */
        private $initialized = \false;
        /**
         * File containing definitions, or null if the definitions are given as a PHP array.
         * @var string|null
         */
        private $file;
        /**
         * @param string $file File in which the definitions are returned as an array.
         */
        public function __construct($file, \AC\Vendor\DI\Definition\Source\Autowiring $autowiring = null)
        {
        }
        public function getDefinition(string $name)
        {
        }
        public function getDefinitions() : array
        {
        }
        /**
         * Lazy-loading of the definitions.
         */
        private function initialize()
        {
        }
    }
    /**
     * Manages a chain of other definition sources.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class SourceChain implements \AC\Vendor\DI\Definition\Source\DefinitionSource, \AC\Vendor\DI\Definition\Source\MutableDefinitionSource
    {
        /**
         * @var DefinitionSource[]
         */
        private $sources;
        /**
         * @var DefinitionSource
         */
        private $rootSource;
        /**
         * @var MutableDefinitionSource|null
         */
        private $mutableSource;
        /**
         * @param DefinitionSource[] $sources
         */
        public function __construct(array $sources)
        {
        }
        /**
         * {@inheritdoc}
         *
         * @param int $startIndex Use this parameter to start looking from a specific
         *                        point in the source chain.
         */
        public function getDefinition(string $name, int $startIndex = 0)
        {
        }
        public function getDefinitions() : array
        {
        }
        public function addDefinition(\AC\Vendor\DI\Definition\Definition $definition)
        {
        }
        private function resolveExtendedDefinition(\AC\Vendor\DI\Definition\ExtendsPreviousDefinition $definition, int $currentIndex)
        {
        }
        public function setMutableDefinitionSource(\AC\Vendor\DI\Definition\Source\MutableDefinitionSource $mutableSource)
        {
        }
    }
    /**
     * Reads DI class definitions using reflection.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ReflectionBasedAutowiring implements \AC\Vendor\DI\Definition\Source\DefinitionSource, \AC\Vendor\DI\Definition\Source\Autowiring
    {
        public function autowire(string $name, \AC\Vendor\DI\Definition\ObjectDefinition $definition = null)
        {
        }
        public function getDefinition(string $name)
        {
        }
        /**
         * Autowiring cannot guess all existing definitions.
         */
        public function getDefinitions() : array
        {
        }
        /**
         * Read the type-hinting from the parameters of the function.
         */
        private function getParametersDefinition(\ReflectionFunctionAbstract $constructor) : array
        {
        }
    }
}
namespace AC\Vendor\DI\Definition\Helper {
    /**
     * Helps defining container entries.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface DefinitionHelper
    {
        /**
         * @param string $entryName Container entry name
         */
        public function getDefinition(string $entryName) : \AC\Vendor\DI\Definition\Definition;
    }
    /**
     * Helps defining how to create an instance of a class.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class CreateDefinitionHelper implements \AC\Vendor\DI\Definition\Helper\DefinitionHelper
    {
        const DEFINITION_CLASS = \AC\Vendor\DI\Definition\ObjectDefinition::class;
        /**
         * @var string|null
         */
        private $className;
        /**
         * @var bool|null
         */
        private $lazy;
        /**
         * Array of constructor parameters.
         * @var array
         */
        protected $constructor = [];
        /**
         * Array of properties and their value.
         * @var array
         */
        private $properties = [];
        /**
         * Array of methods and their parameters.
         * @var array
         */
        protected $methods = [];
        /**
         * Helper for defining an object.
         *
         * @param string|null $className Class name of the object.
         *                               If null, the name of the entry (in the container) will be used as class name.
         */
        public function __construct(string $className = null)
        {
        }
        /**
         * Define the entry as lazy.
         *
         * A lazy entry is created only when it is used, a proxy is injected instead.
         *
         * @return $this
         */
        public function lazy()
        {
        }
        /**
         * Defines the arguments to use to call the constructor.
         *
         * This method takes a variable number of arguments, example:
         *     ->constructor($param1, $param2, $param3)
         *
         * @param mixed... $parameters Parameters to use for calling the constructor of the class.
         *
         * @return $this
         */
        public function constructor(...$parameters)
        {
        }
        /**
         * Defines a value to inject in a property of the object.
         *
         * @param string $property Entry in which to inject the value.
         * @param mixed  $value    Value to inject in the property.
         *
         * @return $this
         */
        public function property(string $property, $value)
        {
        }
        /**
         * Defines a method to call and the arguments to use.
         *
         * This method takes a variable number of arguments after the method name, example:
         *
         *     ->method('myMethod', $param1, $param2)
         *
         * Can be used multiple times to declare multiple calls.
         *
         * @param string $method       Name of the method to call.
         * @param mixed... $parameters Parameters to use for calling the method.
         *
         * @return $this
         */
        public function method(string $method, ...$parameters)
        {
        }
        /**
         * @return ObjectDefinition
         */
        public function getDefinition(string $entryName) : \AC\Vendor\DI\Definition\Definition
        {
        }
        /**
         * Fixes parameters indexed by the parameter name -> reindex by position.
         *
         * This is necessary so that merging definitions between sources is possible.
         *
         * @throws InvalidDefinition
         */
        private function fixParameters(\AC\Vendor\DI\Definition\ObjectDefinition $definition, string $method, array $parameters) : array
        {
        }
    }
    /**
     * Helps defining how to create an instance of a class using autowiring.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class AutowireDefinitionHelper extends \AC\Vendor\DI\Definition\Helper\CreateDefinitionHelper
    {
        const DEFINITION_CLASS = \AC\Vendor\DI\Definition\AutowireDefinition::class;
        /**
         * Defines a value for a specific argument of the constructor.
         *
         * This method is usually used together with annotations or autowiring, when a parameter
         * is not (or cannot be) type-hinted. Using this method instead of constructor() allows to
         * avoid defining all the parameters (letting them being resolved using annotations or autowiring)
         * and only define one.
         *
         * @param string|int $parameter Parameter name of position for which the value will be given.
         * @param mixed $value Value to give to this parameter.
         *
         * @return $this
         */
        public function constructorParameter($parameter, $value)
        {
        }
        /**
         * Defines a method to call and a value for a specific argument.
         *
         * This method is usually used together with annotations or autowiring, when a parameter
         * is not (or cannot be) type-hinted. Using this method instead of method() allows to
         * avoid defining all the parameters (letting them being resolved using annotations or
         * autowiring) and only define one.
         *
         * If multiple calls to the method have been configured already (e.g. in a previous definition)
         * then this method only overrides the parameter for the *first* call.
         *
         * @param string $method Name of the method to call.
         * @param string|int $parameter Parameter name of position for which the value will be given.
         * @param mixed $value Value to give to this parameter.
         *
         * @return $this
         */
        public function methodParameter(string $method, $parameter, $value)
        {
        }
    }
    /**
     * Helps defining how to create an instance of a class using a factory (callable).
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class FactoryDefinitionHelper implements \AC\Vendor\DI\Definition\Helper\DefinitionHelper
    {
        /**
         * @var callable
         */
        private $factory;
        /**
         * @var bool
         */
        private $decorate;
        /**
         * @var array
         */
        private $parameters = [];
        /**
         * @param callable $factory
         * @param bool $decorate Is the factory decorating a previous definition?
         */
        public function __construct($factory, bool $decorate = \false)
        {
        }
        /**
         * @param string $entryName Container entry name
         * @return FactoryDefinition
         */
        public function getDefinition(string $entryName) : \AC\Vendor\DI\Definition\Definition
        {
        }
        /**
         * Defines arguments to pass to the factory.
         *
         * Because factory methods do not yet support annotations or autowiring, this method
         * should be used to define all parameters except the ContainerInterface and RequestedEntry.
         *
         * Multiple calls can be made to the method to override individual values.
         *
         * @param string $parameter Name or index of the parameter for which the value will be given.
         * @param mixed  $value     Value to give to this parameter.
         *
         * @return $this
         */
        public function parameter(string $parameter, $value)
        {
        }
    }
}
namespace AC\Vendor\DI\Definition\Exception {
    /**
     * Invalid DI definitions.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class InvalidDefinition extends \Exception implements \AC\Vendor\Psr\Container\ContainerExceptionInterface
    {
        public static function create(\AC\Vendor\DI\Definition\Definition $definition, string $message, \Exception $previous = null) : self
        {
        }
    }
    /**
     * Error in the definitions using annotations.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class InvalidAnnotation extends \AC\Vendor\DI\Definition\Exception\InvalidDefinition
    {
    }
}
namespace AC\Vendor\DI\Definition {
    /**
     * Defines a reference to an environment variable, with fallback to a default
     * value if the environment variable is not defined.
     *
     * @author James Harris <james.harris@icecave.com.au>
     */
    class EnvironmentVariableDefinition implements \AC\Vendor\DI\Definition\Definition
    {
        /**
         * Entry name.
         * @var string
         */
        private $name = '';
        /**
         * The name of the environment variable.
         * @var string
         */
        private $variableName;
        /**
         * Whether or not the environment variable definition is optional.
         *
         * If true and the environment variable given by $variableName has not been
         * defined, $defaultValue is used.
         *
         * @var bool
         */
        private $isOptional;
        /**
         * The default value to use if the environment variable is optional and not provided.
         * @var mixed
         */
        private $defaultValue;
        /**
         * @param string $variableName The name of the environment variable
         * @param bool $isOptional Whether or not the environment variable definition is optional
         * @param mixed $defaultValue The default value to use if the environment variable is optional and not provided
         */
        public function __construct(string $variableName, bool $isOptional = \false, $defaultValue = null)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        /**
         * @return string The name of the environment variable
         */
        public function getVariableName() : string
        {
        }
        /**
         * @return bool Whether or not the environment variable definition is optional
         */
        public function isOptional() : bool
        {
        }
        /**
         * @return mixed The default value to use if the environment variable is optional and not provided
         */
        public function getDefaultValue()
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
    /**
     * Describes a definition that can resolve itself.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    interface SelfResolvingDefinition
    {
        /**
         * Resolve the definition and return the resulting value.
         *
         * @return mixed
         */
        public function resolve(\AC\Vendor\Psr\Container\ContainerInterface $container);
        /**
         * Check if a definition can be resolved.
         */
        public function isResolvable(\AC\Vendor\Psr\Container\ContainerInterface $container) : bool;
    }
    /**
     * Definition of a string composed of other strings.
     *
     * @since 5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class StringDefinition implements \AC\Vendor\DI\Definition\Definition, \AC\Vendor\DI\Definition\SelfResolvingDefinition
    {
        /**
         * Entry name.
         * @var string
         */
        private $name = '';
        /**
         * @var string
         */
        private $expression;
        public function __construct(string $expression)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        public function getExpression() : string
        {
        }
        public function resolve(\AC\Vendor\Psr\Container\ContainerInterface $container) : string
        {
        }
        public function isResolvable(\AC\Vendor\Psr\Container\ContainerInterface $container) : bool
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
        /**
         * Resolve a string expression.
         */
        public static function resolveExpression(string $entryName, string $expression, \AC\Vendor\Psr\Container\ContainerInterface $container) : string
        {
        }
    }
}
namespace AC\Vendor\DI\Definition\Dumper {
    /**
     * Dumps object definitions to string for debugging purposes.
     *
     * @since 4.1
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ObjectDefinitionDumper
    {
        /**
         * Returns the definition as string representation.
         */
        public function dump(\AC\Vendor\DI\Definition\ObjectDefinition $definition) : string
        {
        }
        private function dumpConstructor(string $className, \AC\Vendor\DI\Definition\ObjectDefinition $definition) : string
        {
        }
        private function dumpProperties(\AC\Vendor\DI\Definition\ObjectDefinition $definition) : string
        {
        }
        private function dumpMethods(string $className, \AC\Vendor\DI\Definition\ObjectDefinition $definition) : string
        {
        }
        private function dumpMethodParameters(string $className, \AC\Vendor\DI\Definition\ObjectDefinition\MethodInjection $methodInjection) : string
        {
        }
    }
}
namespace AC\Vendor\DI\Definition {
    /**
     * Represents a reference to another entry.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class Reference implements \AC\Vendor\DI\Definition\Definition, \AC\Vendor\DI\Definition\SelfResolvingDefinition
    {
        /**
         * Entry name.
         * @var string
         */
        private $name = '';
        /**
         * Name of the target entry.
         * @var string
         */
        private $targetEntryName;
        /**
         * @param string $targetEntryName Name of the target entry
         */
        public function __construct(string $targetEntryName)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        public function getTargetEntryName() : string
        {
        }
        public function resolve(\AC\Vendor\Psr\Container\ContainerInterface $container)
        {
        }
        public function isResolvable(\AC\Vendor\Psr\Container\ContainerInterface $container) : bool
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
    /**
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class AutowireDefinition extends \AC\Vendor\DI\Definition\ObjectDefinition
    {
    }
    /**
     * Defines injections on an existing class instance.
     *
     * @since  5.0
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class InstanceDefinition implements \AC\Vendor\DI\Definition\Definition
    {
        /**
         * Instance on which to inject dependencies.
         *
         * @var object
         */
        private $instance;
        /**
         * @var ObjectDefinition
         */
        private $objectDefinition;
        /**
         * @param object $instance
         */
        public function __construct($instance, \AC\Vendor\DI\Definition\ObjectDefinition $objectDefinition)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        /**
         * @return object
         */
        public function getInstance()
        {
        }
        public function getObjectDefinition() : \AC\Vendor\DI\Definition\ObjectDefinition
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
    /**
     * Definition of a value for dependency injection.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ValueDefinition implements \AC\Vendor\DI\Definition\Definition, \AC\Vendor\DI\Definition\SelfResolvingDefinition
    {
        /**
         * Entry name.
         * @var string
         */
        private $name = '';
        /**
         * @var mixed
         */
        private $value;
        /**
         * @param mixed $value
         */
        public function __construct($value)
        {
        }
        public function getName() : string
        {
        }
        public function setName(string $name)
        {
        }
        /**
         * @return mixed
         */
        public function getValue()
        {
        }
        public function resolve(\AC\Vendor\Psr\Container\ContainerInterface $container)
        {
        }
        public function isResolvable(\AC\Vendor\Psr\Container\ContainerInterface $container) : bool
        {
        }
        public function replaceNestedDefinitions(callable $replacer)
        {
        }
        public function __toString()
        {
        }
    }
}
namespace AC\Vendor\Invoker {
    /**
     * Resolves a callable from a container.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class CallableResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container)
        {
        }
        /**
         * Resolve the given callable into a real PHP callable.
         *
         * @param callable|string|array $callable
         *
         * @return callable Real PHP callable.
         *
         * @throws NotCallableException
         */
        public function resolve($callable)
        {
        }
        /**
         * @param callable|string|array $callable
         * @return callable
         * @throws NotCallableException
         */
        private function resolveFromContainer($callable)
        {
        }
        /**
         * Check if the callable represents a static call to a non-static method.
         *
         * @param mixed $callable
         * @return bool
         */
        private function isStaticCallToNonStaticMethod($callable)
        {
        }
    }
}
namespace AC\Vendor\Invoker\ParameterResolver {
    /**
     * Inject entries using type-hints.
     *
     * Tries to match type-hints with the parameters provided.
     *
     * @author Felix Becker <f.becker@outlook.com>
     */
    class TypeHintResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
    }
}
namespace AC\Vendor\Invoker\ParameterResolver\Container {
    /**
     * Inject entries from a DI container using the parameter names.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ParameterNameContainerResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @param ContainerInterface $container The container to get entries from.
         */
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container)
        {
        }
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
    }
    /**
     * Inject entries from a DI container using the type-hints.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class TypeHintContainerResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @param ContainerInterface $container The container to get entries from.
         */
        public function __construct(\AC\Vendor\Psr\Container\ContainerInterface $container)
        {
        }
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
    }
}
namespace AC\Vendor\Invoker\ParameterResolver {
    /**
     * Dispatches the call to other resolvers until all parameters are resolved.
     *
     * Chain of responsibility pattern.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class ResolverChain implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        /**
         * @var ParameterResolver[]
         */
        private $resolvers = array();
        public function __construct(array $resolvers = array())
        {
        }
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
        /**
         * Push a parameter resolver after the ones already registered.
         *
         * @param ParameterResolver $resolver
         */
        public function appendResolver(\AC\Vendor\Invoker\ParameterResolver\ParameterResolver $resolver)
        {
        }
        /**
         * Insert a parameter resolver before the ones already registered.
         *
         * @param ParameterResolver $resolver
         */
        public function prependResolver(\AC\Vendor\Invoker\ParameterResolver\ParameterResolver $resolver)
        {
        }
    }
    /**
     * Tries to map an associative array (string-indexed) to the parameter names.
     *
     * E.g. `->call($callable, ['foo' => 'bar'])` will inject the string `'bar'`
     * in the parameter named `$foo`.
     *
     * Parameters that are not indexed by a string are ignored.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class AssociativeArrayResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
    }
    /**
     * Finds the default value for a parameter, *if it exists*.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class DefaultValueResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
    }
    /**
     * Simply returns all the values of the $providedParameters array that are
     * indexed by the parameter position (i.e. a number).
     *
     * E.g. `->call($callable, ['foo', 'bar'])` will simply resolve the parameters
     * to `['foo', 'bar']`.
     *
     * Parameters that are not indexed by a number (i.e. parameter position)
     * will be ignored.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class NumericArrayResolver implements \AC\Vendor\Invoker\ParameterResolver\ParameterResolver
    {
        public function getParameters(\ReflectionFunctionAbstract $reflection, array $providedParameters, array $resolvedParameters)
        {
        }
    }
}
namespace AC\Vendor\Invoker {
    /**
     * Invoke a callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class Invoker implements \AC\Vendor\Invoker\InvokerInterface
    {
        /**
         * @var CallableResolver|null
         */
        private $callableResolver;
        /**
         * @var ParameterResolver
         */
        private $parameterResolver;
        /**
         * @var ContainerInterface|null
         */
        private $container;
        public function __construct(\AC\Vendor\Invoker\ParameterResolver\ParameterResolver $parameterResolver = null, \AC\Vendor\Psr\Container\ContainerInterface $container = null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function call($callable, array $parameters = array())
        {
        }
        /**
         * Create the default parameter resolver.
         *
         * @return ParameterResolver
         */
        private function createParameterResolver()
        {
        }
        /**
         * @return ParameterResolver By default it's a ResolverChain
         */
        public function getParameterResolver()
        {
        }
        /**
         * @return ContainerInterface|null
         */
        public function getContainer()
        {
        }
        /**
         * @return CallableResolver|null Returns null if no container was given in the constructor.
         */
        public function getCallableResolver()
        {
        }
    }
}
namespace AC\Vendor\Invoker\Reflection {
    /**
     * Create a reflection object from a callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class CallableReflection
    {
        /**
         * @param callable $callable
         *
         * @return \ReflectionFunctionAbstract
         *
         * @throws NotCallableException
         *
         * TODO Use the `callable` type-hint once support for PHP 5.4 and up.
         */
        public static function create($callable)
        {
        }
    }
}
namespace AC\Vendor\Invoker\Exception {
    /**
     * Impossible to invoke the callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class InvocationException extends \Exception
    {
    }
    /**
     * The given callable is not actually callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class NotCallableException extends \AC\Vendor\Invoker\Exception\InvocationException
    {
        /**
         * @param string $value
         * @param bool $containerEntry
         * @return self
         */
        public static function fromInvalidCallable($value, $containerEntry = \false)
        {
        }
    }
    /**
     * Not enough parameters could be resolved to invoke the callable.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     */
    class NotEnoughParametersException extends \AC\Vendor\Invoker\Exception\InvocationException
    {
    }
}
/* ===========================================================================
 * Copyright (c) 2018-2021 Zindex Software
 *
 * Licensed under the MIT License
 * =========================================================================== */
namespace AC\Vendor\Opis\Closure {
    /**
     * Serialize
     *
     * @param mixed $data
     * @return string
     */
    function serialize($data)
    {
    }
    /**
     * Unserialize
     *
     * @param string $data
     * @param array|null $options
     * @return mixed
     */
    function unserialize($data, array $options = null)
    {
    }
}
namespace {
    \define('ACP_FILE', __FILE__);
    \define('ACP_VERSION', '6.0.3');
    /**
     * @return ACP\AdminColumnsPro
     */
    function ACP()
    {
    }
    /**
     * @return string
     * @since 4.4
     */
    function acp_support_email()
    {
    }
    /**
     * @return bool
     * @deprecated 6.0
     * @since      5.1
     */
    function acp_sorting_show_all_results()
    {
    }
    /**
     * @deprecated 5.7
     */
    function acp_get_license_page_url()
    {
    }
    /**
     * @return Filtering\Helper
     * @since      4.2
     * @deprecated 4.5
     */
    function acp_filtering_helper()
    {
    }
    /**
     * @deprecated 4.5
     */
    function acp_editing_helper()
    {
    }
    /**
     * @since      4.0
     * @deprecated 5.1
     */
    function acp_editing()
    {
    }
    /**
     * @deprecated 5.1
     * @since      4.0
     */
    function acp_filtering()
    {
    }
    /**
     * @deprecated 5.1
     * @since      4.0
     */
    function acp_sorting()
    {
    }
    /**
     * @deprecated 5.1
     */
    function ac_addon_export()
    {
    }
    /**
     * @deprecated 5.1
     */
    function ac_addon_search()
    {
    }
    function AC() : \AC\AdminColumns
    {
    }
    function ac_helper()
    {
    }
    function ac_get_list_screen($id)
    {
    }
    function ac_get_list_screens($key)
    {
    }
    function ac_get_column($column_name, $list_screen_id)
    {
    }
    function ac_get_columns($list_screen_id)
    {
    }
    function ac_format_date($format, $timestamp = \null, \DateTimeZone $timezone = \null)
    {
    }
    /**
     * @param string|null $slug
     *
     * @return string
     * @deprecated 4.5
     */
    function ac_get_admin_url($slug = \null)
    {
    }
    /**
     * @param string|null $slug
     *
     * @return string
     * @deprecated 4.5
     */
    function ac_get_admin_network_url($slug = \null)
    {
    }
    /**
     * @param array|string $list_screen_keys
     * @param array        $column_data
     *
     * @deprecated 4.0.0
     * @since      2.2
     */
    function ac_register_columns($list_screen_keys, $column_data)
    {
    }
    /**
     * @deprecated 6.0
     */
    function ac_get_site_utm_url(string $path, string $utm_medium, string $utm_content = \null, string $utm_campaign = \null) : string
    {
    }
    /**
     * @deprecated 6.0
     */
    function ac_get_site_documentation_url(string $path = \null) : string
    {
    }
    /**
     * @deprecated 6.0
     */
    function ac_get_site_url(string $path = \null) : string
    {
    }
    function ac_load_columns(array $data)
    {
    }
    /**
     * @return bool
     * @deprecated 6.0
     */
    function ac_is_pro_active()
    {
    }
    \define('AC_FILE', __FILE__);
    \define('AC_VERSION', '4.6');
    /**
     * @param string $fileIdentifier
     * @param string $file
     * @return void
     */
    function composerRequireAdminColumns($fileIdentifier, $file)
    {
    }
    /**
     * @var Menu\Item[] $items
     */
    $items = $this->menu_items;
    /**
     * @global \AC\Admin\MenuItem[] $items
     * @global string               $current
     */
    $items = $this->items;
    /**
     * @global \AC\Promo         $promo
     * @global \AC\Integration[] $integrations
     * @global int               $discount
     * @global string            $price
     */
    $integrations = $this->integrations;
    /**
     * @global \AC\Column $column
     */
    $column = $this->column;
    /** @var Table $table */
    $table = $this->table;
    /** @var \AC\Asset\Location\Absolute $location */
    $location = $this->location;
    /**
     * @var array $items
     */
    $items = $this->menu_items;
}