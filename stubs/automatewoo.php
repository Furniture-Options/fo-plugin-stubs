<?php

namespace {
    /**
     * AutomateWoo loader.
     *
     * @since 2.9
     */
    class AutomateWoo_Loader
    {
        /**
         * Contains load errors.
         *
         * @var array
         */
        public static $errors = array();
        /**
         * Init loader.
         */
        public static function init()
        {
        }
        /**
         * Loads plugin.
         */
        public static function load()
        {
        }
        /**
         * Loads plugin textdomain.
         */
        public static function load_textdomain()
        {
        }
        /**
         * Checks if the plugin should load.
         *
         * @return bool
         */
        public static function check()
        {
        }
        /**
         * Checks if the installed WooCommerce version is ok.
         *
         * @return bool
         */
        public static function is_woocommerce_version_ok()
        {
        }
        /**
         * Checks if the installed WordPress version is ok.
         *
         * @return bool
         */
        public static function is_wp_version_ok()
        {
        }
        /**
         * Displays any errors as admin notices.
         */
        public static function admin_notices()
        {
        }
        /**
         * Declare compatibility for WooCommerce features.
         *
         * @since 5.5.23
         */
        public static function declare_feature_compatibility()
        {
        }
    }
    /**
     * Abstract WP_Async_Request class.
     *
     * @abstract
     */
    abstract class AW_WP_Async_Request
    {
        /**
         * Prefix
         *
         * (default value: 'wp')
         *
         * @var string
         * @access protected
         */
        protected $prefix = 'wp';
        /**
         * Action
         *
         * (default value: 'async_request')
         *
         * @var string
         * @access protected
         */
        protected $action = 'async_request';
        /**
         * Identifier
         *
         * @var mixed
         * @access protected
         */
        protected $identifier;
        /**
         * Data
         *
         * (default value: array())
         *
         * @var array
         * @access protected
         */
        protected $data = array();
        /**
         * Initiate new async request
         */
        public function __construct()
        {
        }
        /**
         * Set data used during the request
         *
         * @param array $data Data.
         *
         * @return $this
         */
        public function data($data)
        {
        }
        /**
         * Dispatch the async request
         *
         * @return array|WP_Error
         */
        public function dispatch()
        {
        }
        /**
         * Get query args
         *
         * @return array
         */
        protected function get_query_args()
        {
        }
        /**
         * Get query URL
         *
         * @return string
         */
        protected function get_query_url()
        {
        }
        /**
         * Get post args
         *
         * @return array
         */
        protected function get_post_args()
        {
        }
        /**
         * Maybe handle
         *
         * Check for correct nonce and pass to handler.
         */
        public function maybe_handle()
        {
        }
        /**
         * Handle
         *
         * Override this method to perform any actions required
         * during the async request.
         */
        protected abstract function handle();
    }
    /**
     * Abstract WP_Background_Process class.
     *
     * @abstract
     * @extends WP_Async_Request
     */
    abstract class AW_WP_Background_Process extends \AW_WP_Async_Request
    {
        /**
         * Action
         *
         * (default value: 'background_process')
         *
         * @var string
         * @access protected
         */
        protected $action = 'background_process';
        /**
         * Start time of current process.
         *
         * (default value: 0)
         *
         * @var int
         * @access protected
         */
        protected $start_time = 0;
        /**
         * Cron_hook_identifier
         *
         * @var mixed
         * @access protected
         */
        protected $cron_hook_identifier;
        /**
         * Cron_interval_identifier
         *
         * @var mixed
         * @access protected
         */
        protected $cron_interval_identifier;
        /**
         * Initiate new background process
         */
        public function __construct()
        {
        }
        /**
         * Dispatch
         *
         * @access public
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Push to queue
         *
         * @param mixed $data Data.
         *
         * @return $this
         */
        public function push_to_queue($data)
        {
        }
        /**
         * Save queue
         *
         * @return $this
         */
        public function save()
        {
        }
        /**
         * Update queue
         *
         * @param string $key Key.
         * @param array  $data Data.
         *
         * @return $this
         */
        public function update($key, $data)
        {
        }
        /**
         * Delete queue
         *
         * @param string $key Key.
         *
         * @return $this
         */
        public function delete($key)
        {
        }
        /**
         * Generate key
         *
         * Generates a unique key based on microtime. Queue items are
         * given a unique key so that they can be merged upon save.
         *
         * @param int $length Length.
         *
         * @return string
         */
        protected function generate_key($length = 64)
        {
        }
        /**
         * Maybe process queue
         *
         * Checks whether data exists within the queue and that
         * the process is not already running.
         */
        public function maybe_handle()
        {
        }
        /**
         * Is queue empty
         *
         * @return bool
         */
        protected function is_queue_empty()
        {
        }
        /**
         * Is process running
         *
         * Check whether the current process is already running
         * in a background process.
         */
        protected function is_process_running()
        {
        }
        /**
         * Lock process
         *
         * Lock the process so that multiple instances can't run simultaneously.
         * Override if applicable, but the duration should be greater than that
         * defined in the time_exceeded() method.
         */
        protected function lock_process()
        {
        }
        /**
         * Unlock process
         *
         * Unlock the process so that other instances can spawn.
         *
         * @return $this
         */
        protected function unlock_process()
        {
        }
        /**
         * Get batch
         *
         * @return stdClass Return the first batch from the queue
         */
        protected function get_batch()
        {
        }
        /**
         * Handle
         *
         * Pass each queue item to the task handler, while remaining
         * within server memory and time limit constraints.
         */
        protected function handle()
        {
        }
        /**
         * Memory exceeded
         *
         * Ensures the batch process never exceeds 90%
         * of the maximum WordPress memory.
         *
         * @return bool
         */
        protected function memory_exceeded()
        {
        }
        /**
         * Get memory limit
         *
         * @return int
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Time exceeded.
         *
         * Ensures the batch never exceeds a sensible time limit.
         * A timeout limit of 30s is common on shared hosting.
         *
         * @return bool
         */
        protected function time_exceeded()
        {
        }
        /**
         * Complete.
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        protected function complete()
        {
        }
        /**
         * Schedule cron healthcheck
         *
         * @access public
         * @param mixed $schedules Schedules.
         * @return mixed
         */
        public function schedule_cron_healthcheck($schedules)
        {
        }
        /**
         * Handle cron healthcheck
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule event
         */
        protected function schedule_event()
        {
        }
        /**
         * Clear scheduled event
         */
        protected function clear_scheduled_event()
        {
        }
        /**
         * Cancel Process
         *
         * Stop processing queue items, clear cronjob and delete batch.
         *
         */
        public function cancel_process()
        {
        }
        /**
         * Task
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @param mixed $item Queue item to iterate over.
         *
         * @return mixed
         */
        protected abstract function task($item);
    }
    /**
     * Class AC_Connector
     */
    class AC_Connector
    {
        /**
         * Default curl timeout
         */
        const DEFAULT_TIMEOUT = 30;
        /**
         * @var string
         */
        public $url;
        /**
         * @var
         */
        public $api_key;
        /**
         * @var string
         */
        public $output = "json";
        /**
         * @var int
         */
        private $timeout = self::DEFAULT_TIMEOUT;
        /**
         * AC_Connector constructor.
         *
         * @param        $url
         * @param        $api_key
         * @param string $api_user
         * @param string $api_pass
         */
        function __construct($url, $api_key, $api_user = "", $api_pass = "")
        {
        }
        /**
         * Test the api credentials
         *
         * @return bool|mixed
         * @throws \RequestException
         */
        public function credentials_test()
        {
        }
        /**
         * Debug helper function
         *
         * @param        $var
         * @param int    $continue
         * @param string $element
         * @param string $extra
         */
        public function dbg($var, $continue = 0, $element = "pre", $extra = "")
        {
        }
        /**
         * Set curl timeout
         *
         * @param $seconds
         */
        public function set_curl_timeout($seconds)
        {
        }
        /**
         * Get curl timeout
         *
         * @return int
         */
        public function get_curl_timeout()
        {
        }
        /**
         * Make the curl request
         *
         * @param        $url
         * @param array  $params_data
         * @param string $verb
         * @param string $custom_method
         *
         * @return mixed
         * @throws \RequestException
         */
        public function curl($url, $params_data = array(), $verb = "", $custom_method = "")
        {
        }
        /**
         * Throw the request exception
         *
         * @param $message
         *
         * @throws \RequestException
         */
        protected function throwRequestException($message)
        {
        }
    }
    /**
     * Class ActiveCampaign
     */
    class ActiveCampaign extends \AC_Connector
    {
        /**
         * @var
         */
        public $url_base;
        /**
         * @var
         */
        public $url;
        /**
         * @var
         */
        public $api_key;
        /**
         * @var
         */
        public $track_email;
        /**
         * @var
         */
        public $track_actid;
        /**
         * @var
         */
        public $track_key;
        /**
         * @var int
         */
        public $version = 1;
        /**
         * @var bool
         */
        public $debug = \false;
        /**
         * @var string
         */
        public $curl_response_error = "";
        /**
         * ActiveCampaign constructor.
         *
         * @param        $url
         * @param        $api_key
         * @param string $api_user
         * @param string $api_pass
         */
        function __construct($url, $api_key, $api_user = "", $api_pass = "")
        {
        }
        /**
         * Set the version on the url
         *
         * @param $version
         */
        function version($version)
        {
        }
        /**
         * Make api calls
         *
         * @param       $path
         * @param array $post_data
         *
         * @return mixed
         */
        function api($path, $post_data = array())
        {
        }
    }
    class AC_Campaign extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function create($params, $post_data)
        {
        }
        function delete_list($params)
        {
        }
        function delete($params)
        {
        }
        function list_($params)
        {
        }
        function paginator($params)
        {
        }
        function report_bounce_list($params)
        {
        }
        function report_bounce_totals($params)
        {
        }
        function report_forward_list($params)
        {
        }
        function report_forward_totals($params)
        {
        }
        function report_link_list($params)
        {
        }
        function report_link_totals($params)
        {
        }
        function report_open_list($params)
        {
        }
        function report_open_totals($params)
        {
        }
        function report_totals($params)
        {
        }
        function report_unopen_list($params)
        {
        }
        function report_unsubscription_list($params)
        {
        }
        function report_unsubscription_totals($params)
        {
        }
        function send($params)
        {
        }
        function status($params)
        {
        }
    }
    class AC_Settings extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function edit($params, $post_data)
        {
        }
    }
    class AC_Tag extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function list_($params)
        {
        }
    }
    class AC_Design extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function edit($params, $post_data)
        {
        }
        function view($params, $post_data)
        {
        }
    }
    class AC_Automation extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function list_($params)
        {
        }
        function contact_add($params, $post_data)
        {
        }
        function contact_remove($params, $post_data)
        {
        }
        function contact_list($params)
        {
        }
        function contact_view($params)
        {
        }
    }
    class AC_Message extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function delete_list($params)
        {
        }
        function delete($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function list_($params)
        {
        }
        function template_add($params, $post_data)
        {
        }
        function template_delete_list($params)
        {
        }
        function template_delete($params)
        {
        }
        function template_edit($params, $post_data)
        {
        }
        function template_export($params)
        {
        }
        function template_import($params, $post_data)
        {
        }
        function template_list($params)
        {
        }
        function template_view($params)
        {
        }
        function view($params)
        {
        }
    }
    class AC_List_ extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function delete_list($params)
        {
        }
        function delete($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function field_add($params, $post_data)
        {
        }
        function field_delete($params)
        {
        }
        function field_edit($params, $post_data)
        {
        }
        function field_view($params)
        {
        }
        function list_($params, $post_data)
        {
        }
        function paginator($params)
        {
        }
        function view($params)
        {
        }
    }
    class AC_Group extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function delete_list($params)
        {
        }
        function delete($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function list_($params)
        {
        }
        function view($params)
        {
        }
    }
    class AC_Auth extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function singlesignon($params)
        {
        }
    }
    class AC_Webhook extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function delete($params)
        {
        }
        function delete_list($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function list_($params)
        {
        }
        function view($params)
        {
        }
        function events($params)
        {
        }
        function process($params)
        {
        }
    }
    class AC_Contact extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function automation_list($params)
        {
        }
        function delete_list($params)
        {
        }
        function delete($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function list_($params)
        {
        }
        function note_add($params, $post_data)
        {
        }
        function note_edit($params, $post_data)
        {
        }
        function note_delete($params)
        {
        }
        function paginator($params)
        {
        }
        function sync($params, $post_data)
        {
        }
        function tag_add($params, $post_data)
        {
        }
        function tag_remove($params, $post_data)
        {
        }
        function view($params)
        {
        }
    }
    class AC_Tracking extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        /*
         * Update the status (enabled or disabled) for site tracking.
         */
        function site_status($params, $post_data)
        {
        }
        /*
         * Update the status (enabled or disabled) for event tracking.
         */
        function event_status($params, $post_data)
        {
        }
        /*
         * Returns existing whitelisted domains.
         */
        function site_list($params)
        {
        }
        /*
         * Returns existing tracked events.
         */
        function event_list($params)
        {
        }
        /*
         * Adds a domain to the site tracking whitelist.
         */
        function whitelist($params, $post_data)
        {
        }
        /*
         * Removes a domain from the site tracking whitelist.
         */
        function whitelist_remove($params, $post_data)
        {
        }
        /*
         * Removes an event.
         */
        function event_remove($params, $post_data)
        {
        }
        /*
         * Adds a new event.
         */
        function log($params, $post_data)
        {
        }
    }
    class AC_Organization extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function list_($params, $post_data)
        {
        }
    }
    class AC_Form extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function getforms($params)
        {
        }
        function html($params)
        {
        }
        function embed($params)
        {
        }
        function process($params)
        {
        }
    }
    class AC_Deal extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function edit($params, $post_data)
        {
        }
        function delete($params, $post_data)
        {
        }
        function get($params)
        {
        }
        function list_($params)
        {
        }
        function note_add($params, $post_data)
        {
        }
        function note_edit($params, $post_data)
        {
        }
        function pipeline_add($params, $post_data)
        {
        }
        function pipeline_edit($params, $post_data)
        {
        }
        function pipeline_delete($params, $post_data)
        {
        }
        function pipeline_list($params)
        {
        }
        function stage_add($params, $post_data)
        {
        }
        function stage_edit($params, $post_data)
        {
        }
        function stage_delete($params, $post_data)
        {
        }
        function stage_list($params)
        {
        }
        function task_add($params, $post_data)
        {
        }
        function task_edit($params, $post_data)
        {
        }
        function tasktype_add($params, $post_data)
        {
        }
        function tasktype_edit($params, $post_data)
        {
        }
        function tasktype_delete($params, $post_data)
        {
        }
    }
    class AC_User extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function delete_list($params)
        {
        }
        function delete($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function list_($params)
        {
        }
        function me()
        {
        }
        function view($params)
        {
        }
    }
    class RequestException extends \Exception
    {
        private $failedRequestMessage;
        /**
         * @param string message	Response error message from the server.
         *
         * Set the failure message for this exception.
         */
        public function setFailedMessage($message)
        {
        }
        /**
         * @return string	Response error message from the server.
         *
         * Get the failure message for this exception.
         */
        public function getFailedMessage()
        {
        }
    }
    class AC_Segment extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function list_($params)
        {
        }
    }
    class AC_Subscriber extends \AC_Contact
    {
    }
    class AC_Account extends \ActiveCampaign
    {
        public $version;
        public $url_base;
        public $url;
        public $api_key;
        function __construct($version, $url_base, $url, $api_key)
        {
        }
        function add($params, $post_data)
        {
        }
        function cancel($params)
        {
        }
        function edit($params, $post_data)
        {
        }
        function list_($params)
        {
        }
        function name_check($params)
        {
        }
        function plans($params)
        {
        }
        function status($params)
        {
        }
        function status_set($params)
        {
        }
        function view()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * WP option wrapper
     *
     * @class AW_Abstract_Options_API
     * @since 2.4.4
     *
     * @property $version
     */
    abstract class Options_API
    {
        /** @var string */
        public $prefix;
        /** @var array */
        public $defaults = [];
        /**
         * Magic method for option retrieval
         *
         * @param string $key
         * @return mixed
         */
        function __get($key)
        {
        }
        /**
         * @since 4.0
         * @param $option_name
         * @return mixed
         */
        static function get($option_name)
        {
        }
        /**
         * Convert yes / no strings to boolean
         *
         * @param $value
         *
         * @return mixed
         */
        function parse($value)
        {
        }
    }
    /**
     * @class Workflow_Query
     */
    class Workflow_Query
    {
        /** @var string|array */
        public $trigger;
        /** @var int */
        public $limit = -1;
        /** @var array */
        public $args;
        /** @var string */
        public $return = 'objects';
        /**
         * WP_Query instance of the last query.
         *
         * @since 4.9.0
         *
         * @var WP_Query
         */
        protected $last_wp_query;
        function __construct()
        {
        }
        /**
         * Set trigger name or array of names to query.
         *
         * @param string|array $trigger
         */
        function set_trigger($trigger)
        {
        }
        /**
         * Set included ids array to query.
         *
         * @param string|array $ids
         */
        function set_include($ids)
        {
        }
        /**
         * Set per page limit query param.
         *
         * @param int $limit
         */
        public function set_limit($limit)
        {
        }
        /**
         * Set page query param.
         *
         * @since 4.9.0
         *
         * @param int $page
         */
        public function set_page($page)
        {
        }
        /**
         * Set stats query param.
         *
         * Default status is active.
         *
         * @param string $status One of: any|active|disabled
         */
        public function set_status($status)
        {
        }
        /**
         * Set type query param.
         *
         * @param string $type
         *
         * @since 5.0.0
         */
        public function set_type($type)
        {
        }
        /**
         * Set search query param.
         *
         * @since 4.9.0
         *
         * @param string $term
         */
        public function set_search($term)
        {
        }
        /**
         * Set the value of the no_found_rows query param.
         *
         * Default value is true.
         *
         * Must be set to false in order to use $this->get_found_rows()
         *
         * @since 4.9.0
         *
         * @param bool $no_found_rows
         */
        public function set_no_found_rows($no_found_rows)
        {
        }
        /**
         * @param $return - objects|ids
         */
        function set_return($return)
        {
        }
        /**
         * Add a meta query.
         *
         * @since 5.1.0
         *
         * @param string $key     The meta key.
         * @param string $value   The meta value.
         * @param string $compare The meta compare.
         */
        public function add_meta_query($key, $value, $compare = '=')
        {
        }
        /**
         * @return Workflow[]
         */
        function get_results()
        {
        }
        /**
         * Get found rows for the last query.
         *
         * @since 4.9.0
         *
         * @return int
         */
        public function get_found_rows()
        {
        }
        /**
         * Alias of self::set_trigger()
         *
         * @param string|array $trigger
         */
        function set_triggers($trigger)
        {
        }
    }
    /**
     * @class Temporary_Data
     * @since 2.9
     */
    class Temporary_Data
    {
        /** @var array  */
        static $data = [];
        /**
         * @param string $type
         * @param $key
         * @param mixed $value
         */
        static function set($type, $key, $value)
        {
        }
        /**
         * @param $type
         * @param $key
         */
        static function delete($type, $key)
        {
        }
        /**
         * @param string $type
         * @param $key
         * @return bool
         */
        static function exists($type, $key)
        {
        }
        /**
         * @param string $type
         * @param $key
         * @return mixed
         */
        static function get($type, $key)
        {
        }
        /**
         * @param $type
         */
        static function setup_type($type)
        {
        }
        /**
         * Remove all data and reset
         */
        static function reset()
        {
        }
    }
}
namespace {
    // phpcs:ignoreFile
    /**
     * Static mailer API.
     *
     * Used to display dynamic AW content in email template files.
     *
     * @class AW_Mailer_API
     */
    class AW_Mailer_API
    {
        /** @var AutomateWoo\Mailer */
        static $mailer;
        /** @var AutomateWoo\Workflow*/
        static $workflow;
        /**
         * @param AutomateWoo\Mailer $mailer
         * @param AutomateWoo\Workflow $workflow
         */
        static function setup($mailer, $workflow)
        {
        }
        static function cleanup()
        {
        }
        /**
         * @return bool|string
         */
        static function email()
        {
        }
        /**
         * @return bool|string
         */
        static function subject()
        {
        }
        /**
         * @return bool|string
         */
        static function unsubscribe_url()
        {
        }
        /**
         * $variable parameter doesn't need curly braces. E.g.
         *
         * "customer.email"
         * "order.items | template: 'order-table'"
         *
         * @since 3.9
         *
         * @param string $variable
         * @return bool|string
         */
        static function variable($variable)
        {
        }
        /**
         * @param WC_Product $product
         * @param string $size
         * @return array|false|string
         */
        static function get_product_image($product, $size = 'shop_catalog')
        {
        }
    }
}
namespace AutomateWoo\AdminNotices {
    /**
     * Queue and display the dismissible New Workflow Helper notice on the Add New Workflow page for
     * first installs or upgrades from <5.0 to >=5.1
     *
     * @since   5.1.0
     * @package AutomateWoo\AdminNotices
     */
    class NewWorkflowHelperManager
    {
        /** @var string */
        const NOTICE_ID = 'new_workflow_helper';
        /** @var string */
        const VERSION_PRESETS_INTRODUCED = '5.1';
        /**
         * Attach callbacks.
         */
        public static function init()
        {
        }
        /**
         * Output New Workflow Helper notice ONLY on the Add New Workflow page.
         */
        public static function output_new_workflow_helper_notice()
        {
        }
        /**
         * Add the New Workflow Helper notice on first install or upgrade from <5.1 to >=5.1
         *
         * @param string|null $old_version the previously installed version for updates (or null for new installs)
         * @param string|null $new_version the new version
         */
        public static function maybe_add_new_workflow_helper_notice($old_version = null, $new_version = null)
        {
        }
    }
    /**
     * Interface AdminNoticeInterface
     *
     * @since 5.1.3
     */
    interface AdminNoticeInterface
    {
        /**
         * Init the notice, add hooks.
         */
        public function init();
        /**
         * Output/render the notice HTML.
         */
        public function output();
    }
    /**
     * Class AbstractAdminNotice
     *
     * @since 5.1.3
     */
    abstract class AbstractAdminNotice implements \AutomateWoo\AdminNotices\AdminNoticeInterface
    {
        /**
         * Get the unique notice ID.
         *
         * @return string
         */
        protected abstract function get_id() : string;
        /**
         * Init the notice, add hooks.
         */
        public function init()
        {
        }
        /**
         * Adds the notice to the current admin notices.
         */
        protected function add_notice()
        {
        }
    }
    /**
     * Class AddonWelcome
     *
     * @since 5.2.0
     */
    class AddonWelcome extends \AutomateWoo\AdminNotices\AbstractAdminNotice
    {
        /**
         * The name of the add-on.
         *
         * @var Addon
         */
        protected $addon;
        /**
         * AddonWelcome constructor.
         *
         * @param Addon $addon
         */
        public function __construct(\AutomateWoo\Addon $addon)
        {
        }
        /**
         * Get the unique notice ID.
         *
         * @return string
         */
        protected function get_id() : string
        {
        }
        /**
         * Output/render the notice HTML.
         */
        public function output()
        {
        }
    }
    /**
     * Display an admin notice on plugin update
     *
     * @since   5.0.0
     * @package AutomateWoo
     */
    class UpdateNoticeManager
    {
        const NOTICE_ID = 'update';
        /**
         * The version this notice relates to.
         *
         * @var string
         *
         * @see output_admin_notice method to update the version number displayed in the notice
         */
        protected static $version = '5.2';
        /**
         * Attach callbacks.
         *
         * @since 5.0.0
         */
        public static function init()
        {
        }
        /**
         * Add an admin notice when the plugin is updated.
         *
         * @param string $previous_version The version of AutomateWoo the store was running prior to updating.
         * @param string $current_version  The new version the site has been updated to.
         *
         * @since 5.0.0
         */
        public static function maybe_add_admin_notice($previous_version, $current_version)
        {
        }
        /**
         * Outputs the update notice including details about the update.
         */
        public static function output_admin_notice()
        {
        }
    }
    /**
     * Class WcAdminDisabled
     *
     * @since 5.1.3
     */
    class WcAdminDisabled extends \AutomateWoo\AdminNotices\AbstractAdminNotice
    {
        /**
         * Get the unique notice ID.
         *
         * @return string
         */
        protected function get_id() : string
        {
        }
        /**
         * Init the notice, add hooks.
         */
        public function init()
        {
        }
        /**
         * Output/render the notice HTML.
         */
        public function output()
        {
        }
    }
    /**
     * Display an admin notice on plugin update
     *
     * @since   5.1.0
     * @package AutomateWoo
     */
    class WelcomeNoticeManager
    {
        const NOTICE_ID = 'welcome';
        /**
         * Attach callbacks.
         */
        public static function init()
        {
        }
        /**
         * Add a welcome admin notice - generally to be called when the plugin is installed for the first time.
         */
        public static function add_admin_notice()
        {
        }
        /**
         * Outputs the update notice including details about the update.
         */
        public static function output_admin_notice()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Addons
     */
    class Addons
    {
        /** @var array */
        private static $registered_addons = [];
        /**
         * @param $addon Addon
         */
        static function register($addon)
        {
        }
        /**
         * @return Addon[]
         */
        static function get_all()
        {
        }
        /**
         * @param $id string
         * @return Addon|false
         */
        static function get($id)
        {
        }
        /**
         * @return bool
         */
        static function has_addons()
        {
        }
    }
    /**
     * @class Wishlists
     */
    class Wishlists
    {
        /** @var array */
        public static $integration_options = ['yith' => 'YITH Wishlists', 'woothemes' => 'WooCommerce Wishlists'];
        /**
         * @return string|false
         */
        public static function get_integration()
        {
        }
        /**
         * @return string|false
         */
        public static function get_integration_title()
        {
        }
        /**
         * Get wishlist by ID
         *
         * @param int $id
         * @return bool|Wishlist
         */
        public static function get_wishlist($id)
        {
        }
        /**
         * Convert wishlist objects from both integrations into the same format
         * Returns false if wishlist is empty
         *
         * @param WP_Post|YITH_WCWL_Wishlist|array $wishlist
         *
         * @return Wishlist|false
         */
        public static function get_normalized_wishlist($wishlist)
        {
        }
        /**
         * Get an array with the IDs of all wishlists.
         *
         * @since 4.3.2
         *
         * @return array
         */
        public static function get_all_wishlist_ids()
        {
        }
        /**
         * Get wishlist IDs.
         *
         * @since 4.5
         *
         * @param int|bool $limit
         * @param int      $offset
         *
         * @return array
         */
        public static function get_wishlist_ids($limit = false, $offset = 0)
        {
        }
    }
    /**
     * Abstract class for Mailers.
     *
     * @since 4.4.0
     */
    abstract class Mailer_Abstract
    {
        /**
         * The recipient of the email.
         *
         * @var string
         */
        public $email;
        /**
         * The content of the email body.
         *
         * @var string
         */
        public $content;
        /**
         * The email subject.
         *
         * @var string
         */
        public $subject;
        /**
         * The email sender name.
         *
         * @var string
         */
        public $from_name;
        /**
         * The email sender email.
         *
         * @var string
         */
        public $from_email;
        /**
         * The email attachments.
         *
         * @var array
         */
        public $attachments = [];
        /**
         * The email reply to value e.g. 'John Smith <email@example.org>'.
         *
         * @var string
         */
        public $reply_to = '';
        /**
         * The email type.
         *
         * @var string (html|plain)
         */
        public $email_type = 'html';
        /**
         * Returns email body, can be HTML or plain text.
         *
         * @since 4.4.0
         *
         * @return string
         */
        public abstract function get_email_body();
        /**
         * Set email recipient.
         *
         * @param string $email
         */
        public function set_email($email)
        {
        }
        /**
         * Set the email body content.
         *
         * @param string $content
         */
        public function set_content($content)
        {
        }
        /**
         * Set the email subject.
         *
         * @param string $subject
         */
        public function set_subject($subject)
        {
        }
        /**
         * Get email sender email address.
         *
         * @return string
         */
        public function get_from_email()
        {
        }
        /**
         * Get email sender name.
         *
         * @return string
         */
        public function get_from_name()
        {
        }
        /**
         * Validate the recipient's email address.
         *
         * @return true|\WP_Error
         */
        public function validate_recipient_email()
        {
        }
        /**
         * Sends the email if validation passes.
         *
         * @return true|\WP_Error
         */
        public function send()
        {
        }
        /**
         * Process email variables. Currently only {{ unsubscribe_url }}.
         *
         * @param string $content
         *
         * @return string
         */
        public function process_email_variables($content)
        {
        }
        /**
         * Callback function to process email variables.
         *
         * @param string $variable
         *
         * @return string
         */
        public function callback_process_email_variables($variable)
        {
        }
        /**
         * Get the email type.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        /**
         * Get the email content type.
         *
         * @return string
         */
        public function get_content_type()
        {
        }
        /**
         * Log a WP_Error.
         *
         * @param \WP_Error $error
         */
        public function log_wp_mail_errors($error)
        {
        }
        /**
         * Gets the most recent PHPMailer error message.
         *
         * @since 5.0.3
         *
         * @return string
         */
        protected function get_phpmailer_last_error()
        {
        }
    }
    /**
     * Mailer class for HTML emails that use a template.
     */
    class Mailer extends \AutomateWoo\Mailer_Abstract
    {
        /** @var string */
        public $template = 'default';
        /** @var string */
        public $heading;
        /** @var string */
        public $preheader;
        /** @var string */
        public $extra_footer_text;
        /** @var string */
        public $tracking_pixel_url;
        /** @var callable - use to replace URLs in content e.g. for click tracking */
        public $replace_content_urls_callback;
        /** @var bool */
        public $include_automatewoo_styles = true;
        /**
         * Mailer constructor.
         *
         * All params are deprecated, use setter methods instead.
         *
         * @todo remove params, no longer in use after Refer A Friend 2.3
         *
         * @param $subject
         * @param $email
         * @param $content
         * @param string $template
         */
        function __construct($subject = false, $email = false, $content = false, $template = 'default')
        {
        }
        /**
         * @param $heading
         */
        function set_heading($heading)
        {
        }
        /**
         * @param string $preheader
         */
        function set_preheader($preheader)
        {
        }
        /**
         * @param string $template
         */
        function set_template($template)
        {
        }
        /**
         * @param bool $include
         */
        function set_include_automatewoo_styles($include)
        {
        }
        /**
         * Get email sender email address.
         *
         * @return string
         */
        function get_from_email()
        {
        }
        /**
         * Get email sender name.
         *
         * @return string
         */
        function get_from_name()
        {
        }
        /**
         * Returns email body, can be HTML or plain text.
         *
         * @since 4.4.0
         *
         * @return string
         */
        function get_email_body()
        {
        }
        /**
         * @return string
         */
        function get_content_wrapped_in_template()
        {
        }
        /**
         * Prepare HTML before it's sent.
         * Should be run after dynamic content like variables have been inserted.
         *
         * - Maybe injects preheader
         * - Processes email variables like {{ unsubscribe_url }}
         * - Fixes links with double http
         * - Maybe convert URLs to trackable URLs
         * - Replaces unsupported HTML tags
         * - Runs wptexturize() to convert quotes
         * - Fix container ID for MailPoet compatibility if required
         * - HTML encodes emojis
         * - Injects tracking pixel
         * - Inlines CSS
         *
         * @since 4.3.0
         *
         * @param string $html
         * @return string
         */
        function prepare_html($html)
        {
        }
        /**
         * Replace default email wrapper ID with one required for MailPoet inline styling
         * 
         * @param string $html The contents of the email
         * @return string
         */
        function fix_wrapper_for_mailpoet($html)
        {
        }
        /**
         * Fix any duplicate http in links, can happen due to variables
         *
         * @param string $content
         * @return string
         */
        function fix_links_with_double_http($content)
        {
        }
        /**
         * Apply inline styles to dynamic content.
         *
         * @param string|null $content
         * @return string
         */
        function style_inline($content)
        {
        }
        /**
         * @param $text
         * @return string
         */
        function add_extra_footer_text($text)
        {
        }
        /**
         * Get a template part.
         *
         * @param string $file_name The name of the template file.
         * @param array  $variables Array of variables for use in the template file.
         */
        public function get_template_part($file_name, $variables = [])
        {
        }
        /**
         * Load a template part if it's found.
         *
         * Prefix params with '_' to prevent clashes when using extract on $_variables.
         *
         * @since 4.8.0
         *
         * @param string $_template_file
         * @param array  $_variables
         */
        public function load_template_part($_template_file, $_variables)
        {
        }
        /**
         * Maybe replace URLs with trackable URLs
         *
         * @param $content string
         * @return string
         */
        function replace_urls_in_content($content)
        {
        }
        /**
         * Injects preheader HTML after opening <body> tag
         *
         * @param $html
         * @return string
         */
        function inject_preheader($html)
        {
        }
        /**
         * Injects tracking pixel before closing </body> tag
         *
         * @param $html
         * @return string
         */
        function inject_tracking_pixel($html)
        {
        }
        /**
         * @return string
         */
        function get_tracking_pixel_img()
        {
        }
        /**
         * Add inline CSS to HTML with the Emogrifier library.
         *
         * If Emogrifier can't be used the unmodified HTML will be returned.
         *
         * @since 4.4.2
         *
         * @param string $html                    The HTML.
         * @param string $css                     The CSS to be inlined.
         * @param bool   $parse_html_style_blocks Should CSS in HTML style blocks also be inlined?
         *
         * @return string
         */
        public function emogrify($html, $css, $parse_html_style_blocks = false)
        {
        }
    }
}
namespace AutomateWoo\Registry {
    /**
     * Trait ItemConstructorArgsTrait
     *
     * @since 5.3.0
     */
    trait ItemConstructorArgsTrait
    {
        /**
         * Get the constructor args for an item.
         *
         * @param string $name The item name.
         *
         * @return array
         */
        protected static function get_item_constructor_args(string $name) : array
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Registry
     * @since 3.2.4
     */
    abstract class Registry
    {
        use \AutomateWoo\Registry\ItemConstructorArgsTrait;
        /** @var array - must be declared in child class */
        protected static $includes;
        /** @var array - must be declared in child class */
        protected static $loaded = [];
        /**
         * Implement this method in sub classes
         * @return array
         */
        static function load_includes()
        {
        }
        /**
         * Runs after a valid item is loaded.
         *
         * Optionally, override this method.
         *
         * @param string $name
         * @param mixed  $object
         */
        public static function after_loaded($name, $object)
        {
        }
        /**
         * @return array
         */
        static function get_includes()
        {
        }
        /**
         * @return mixed
         */
        static function get_all()
        {
        }
        /**
         * @param $name
         * @return bool|object
         */
        static function get($name)
        {
        }
        /**
         * @param $name
         * @return bool
         */
        static function is_loaded($name)
        {
        }
        /**
         * Load an object by name.
         *
         * Returns true if the object has been loaded.
         *
         * @since 4.9.0 Supports adding an objects directly as an include.
         *
         * @param string $name
         *
         * @return bool
         */
        static function load($name)
        {
        }
        /**
         * Checks that an item is valid.
         *
         * Invalid items are prevented from being returned from the registry.
         * This method should be overridden in child classes.
         *
         * @param mixed $item
         *
         * @since 4.9.0
         *
         * @return bool
         */
        public static function is_item_valid($item)
        {
        }
        /**
         * Clear all registry cached data.
         *
         * @since 4.4.0
         */
        static function reset()
        {
        }
    }
    /**
     * @class Triggers
     * @since 2.9
     */
    class Triggers extends \AutomateWoo\Registry
    {
        /** @var array  */
        static $includes;
        /** @var array  */
        static $loaded = [];
        /**
         * @return array
         */
        static function load_includes()
        {
        }
        /**
         * Get a single trigger.
         *
         * @param string $name
         *
         * @return Trigger|false
         */
        public static function get($name)
        {
        }
        /**
         * Get all triggers.
         *
         * @return Trigger[]
         */
        public static function get_all()
        {
        }
        /**
         * Get all currently active triggers.
         *
         * Active triggers are those currently in use on an active workflow.
         *
         * @since 4.6.0
         *
         * @return Trigger[]
         */
        public static function get_all_active()
        {
        }
        /**
         * Load and init all triggers
         */
        public static function init()
        {
        }
        /**
         * Runs after a valid trigger is loaded.
         *
         * @param string  $name
         * @param Trigger $trigger
         */
        public static function after_loaded($name, $trigger)
        {
        }
        /**
         * Checks that a trigger object is valid.
         *
         * @param mixed $item
         *
         * @since 4.9.0
         *
         * @return bool
         */
        public static function is_item_valid($item)
        {
        }
        /**
         * Returns array of trigger names.
         *
         * @since 3.8
         *
         * @return array
         */
        static function get_custom_time_of_day_triggers()
        {
        }
        /**
         * Get the constructor args for an item.
         *
         * @param string $name
         *
         * @return array
         */
        protected static function get_item_constructor_args(string $name) : array
        {
        }
        /**
         * Return manual triggers.
         *
         * @since 5.0.0
         *
         * @return Trigger[]|ManualInterface[]
         */
        public static function get_manual_triggers()
        {
        }
    }
    /**
     * Class Review_Factory.
     *
     * @since 4.5
     * @package AutomateWoo
     */
    class Review_Factory
    {
        /**
         * Get a review object.
         *
         * @param \WP_Comment|int $comment Comment or comment ID.
         *
         * @return Review|bool
         */
        public static function get($comment)
        {
        }
    }
    /**
     * @class Options_Abstract
     * @since 4.0
     */
    abstract class Options_Abstract
    {
        /** @var string */
        static $prefix;
        /** @var array */
        static $defaults = [];
        /**
         * @param string $option_name
         * @return mixed
         */
        static function get($option_name)
        {
        }
        /**
         * Convert yes / no strings to boolean
         *
         * @param $value
         * @return mixed
         */
        static function parse($value)
        {
        }
    }
    class Exception extends \Exception
    {
    }
    /**
     * Cron manager
     * @class Cron
     */
    class Cron
    {
        const TWO_MINUTE_WORKER = 'automatewoo_two_minute_worker';
        const FIVE_MINUTE_WORKER = 'automatewoo_five_minute_worker';
        const FIFTEEN_MINUTE_WORKER = 'automatewoo_fifteen_minute_worker';
        const THIRTY_MINUTE_WORKER = 'automatewoo_thirty_minute_worker';
        const HOURLY_WORKER = 'automatewoo_hourly_worker';
        const FOUR_HOUR_WORKER = 'automatewoo_four_hourly_worker';
        const DAILY_WORKER = 'automatewoo_daily_worker';
        const TWO_DAY_WORKER = 'automatewoo_two_days_worker';
        const WEEKLY_WORKER = 'automatewoo_weekly_worker';
        /** @var array : worker => schedule */
        static $workers = ['events' => 'automatewoo_one_minute', 'two_minute' => 'automatewoo_two_minutes', 'five_minute' => 'automatewoo_five_minutes', 'fifteen_minute' => 'automatewoo_fifteen_minutes', 'thirty_minute' => 'automatewoo_thirty_minutes', 'hourly' => 'hourly', 'four_hourly' => 'automatewoo_four_hours', 'daily' => 'daily', 'two_days' => 'automatewoo_two_days', 'weekly' => 'automatewoo_weekly'];
        /**
         * Init cron
         */
        static function init()
        {
        }
        /**
         * Prevents workers from working if they have done so in the past 30 seconds
         */
        static function before_worker()
        {
        }
        /**
         * @param $action
         * @return \DateTime|bool
         */
        static function get_last_run($action)
        {
        }
        /**
         * @param $action
         */
        static function update_last_run($action)
        {
        }
        /**
         * @param $action
         * @return int|false
         */
        static function get_worker_interval($action)
        {
        }
        /**
         * Checks if worker started running less than 30 seconds
         *
         * @param $action
         * @return bool
         */
        static function is_worker_locked($action)
        {
        }
        /**
         * Add cron workers
         */
        static function add_events()
        {
        }
        /**
         * @param $schedules
         * @return mixed
         */
        static function add_schedules($schedules)
        {
        }
        /**
         * Track changes in the GMT offset such as DST
         *
         * @since 3.8
         */
        static function check_for_gmt_offset_change()
        {
        }
        /**
         * Set midnight cron, if not already set
         * @since 3.8
         */
        static function setup_midnight_cron()
        {
        }
        /**
         * @return bool
         */
        static function is_midnight_cron_correct()
        {
        }
        /**
         * Sets a new time for the midnight cron.
         *
         * @param DateTime $date GMT
         */
        static function update_midnight_cron($date)
        {
        }
        /**
         * Check the midnight cron job is correctly scheduled.
         *
         * If schedule is not correct this method fixes the schedule.
         *
         * @since 4.6.0
         */
        public static function check_midnight_cron()
        {
        }
        /**
         * Update the last run date of the midnight cron to now.
         *
         * Store last run in site time as Y-m-d.
         *
         * This is stored as site time because the goal of the midnight cron event is to run once per day
         * in the site's timezone. Storing in site time means we can handle DST timezone changes better.
         *
         * @since 4.6.0
         */
        public static function update_midnight_cron_last_run()
        {
        }
        /**
         * Get the last run date of the midnight cron in site time.
         *
         * @since 4.6.0
         *
         * @return DateTime|false
         */
        public static function get_midnight_cron_last_run()
        {
        }
        /**
         * Did the midnight cron task run today (in local time)?
         *
         * Also returns true if midnight cron has run for tomorrow. E.g. in the case of DST changes.
         *
         * @since 4.6.0
         *
         * @return bool
         */
        public static function should_midnight_cron_run_today()
        {
        }
    }
}
namespace AutomateWoo\Proxies {
    /**
     * Proxy for the WooCommerce bookings extension.
     *
     * @since 5.3.0
     */
    interface BookingsInterface
    {
        /**
         * Get a booking by ID.
         *
         * @param int $id
         *
         * @return WC_Booking
         *
         * @throws InvalidValue If booking not found.
         * @throws InvalidIntegration If bookings plugin not active.
         */
        public function get_booking(int $id) : \WC_Booking;
        /**
         * Return a list of supported booking status values & labels.
         *
         * @return Array Array of valid status values, in slug => label form.
         */
        public function get_booking_statuses() : array;
    }
}
namespace AutomateWoo\Traits {
    /**
     * Trait IntegrationValidator
     *
     * Validate that an integration is active and is a compatible version.
     *
     * @since 5.3.0
     */
    trait IntegrationValidator
    {
        /**
         * Validate WooCommerce Bookings integration.
         *
         * @throws InvalidIntegration If integration is inactive or incompatible.
         */
        protected function validate_bookings_integration()
        {
        }
    }
}
namespace AutomateWoo\Proxies {
    /**
     * Proxy for the WooCommerce bookings integration.
     *
     * @since 5.3.0
     */
    class Bookings implements \AutomateWoo\Proxies\BookingsInterface
    {
        use \AutomateWoo\Traits\IntegrationValidator;
        /**
         * Get a booking by ID.
         *
         * @param int $id
         *
         * @return WC_Booking
         *
         * @throws InvalidValue If booking not found.
         * @throws InvalidIntegration If bookings plugin not active.
         */
        public function get_booking(int $id) : \WC_Booking
        {
        }
        /**
         * Get booking ids by filters.
         *
         * The 'status' filter defaults to use all booking statuses excluding 'trash'.
         *
         * @see WC_Booking_Data_Store::get_booking_ids_by (wrapped method)
         *
         * @param array $filters Filters for the query.
         * @param int   $limit  The query limit.
         * @param int   $offset The query offset.
         *
         * @return int[]
         *
         * @throws InvalidIntegration If bookings plugin not active.
         */
        public function get_booking_ids_by(array $filters = [], int $limit = -1, int $offset = 0) : array
        {
        }
        /**
         * Get the most recent booking.
         *
         * @return WC_Booking
         *
         * @throws InvalidIntegration If bookings plugin not active.
         * @throws InvalidValue If booking not found.
         */
        public function get_most_recent_booking() : \WC_Booking
        {
        }
        /**
         * Return a list of supported booking status values & labels.
         *
         * @return array Array of valid status values, in slug => label form.
         */
        public function get_booking_statuses() : array
        {
        }
        /**
         * Get a list of draft booking statuses.
         *
         * @since 5.4.0
         *
         * @return string[]
         */
        public function get_draft_booking_statuses() : array
        {
        }
    }
}
namespace AutomateWoo\Workflows\Presets\Storage {
    /**
     * The storage interface used to fetch and read presets
     *
     * @since 5.1.0
     */
    interface PresetStorageInterface
    {
        /**
         * Returns the list of available presets
         *
         * @return PresetInterface[]
         */
        public function list() : array;
        /**
         * Returns a preset given its name
         *
         * @param string $name
         *
         * @return PresetInterface
         */
        public function get(string $name) : \AutomateWoo\Workflows\Presets\PresetInterface;
        /**
         * Checks if a preset exists
         *
         * @param string $name
         *
         * @return bool
         */
        public function exists(string $name) : bool;
    }
    /**
     * @class FileStorage
     * @since 5.1.0
     */
    abstract class FileStorage implements \AutomateWoo\Workflows\Presets\Storage\PresetStorageInterface
    {
        /**
         * The file extension to search for.
         *
         * @var string
         */
        protected $file_extension = '';
        /**
         * The path to preset storage.
         *
         * @var string
         */
        protected $storage_path = '';
        /**
         * Any specific preset files to use.
         *
         * @var string[]
         */
        protected $preset_files = [];
        /**
         * FileStorage constructor.
         *
         * @param string $storage_path The path
         * @param string $file_extension
         *
         * @throws InvalidPath When the storage path doesn't exist, or is not a directory.
         */
        public function __construct($storage_path, $file_extension)
        {
        }
        /**
         * Returns the list of available presets
         *
         * @return PresetInterface[]
         */
        public function list() : array
        {
        }
        /**
         * Returns a preset given its name
         *
         * @param string $name
         *
         * @return PresetInterface
         *
         * @throws StorageException When the preset does not exist.
         */
        public function get(string $name) : \AutomateWoo\Workflows\Presets\PresetInterface
        {
        }
        /**
         * Checks if a preset exists
         *
         * @param string $name The preset name.
         *
         * @return bool
         */
        public function exists(string $name) : bool
        {
        }
        /**
         * Validate that a preset exists.
         *
         * @param string $name
         *
         * @throws StorageException When the preset does not exist.
         */
        protected function validate_exists(string $name)
        {
        }
        /**
         * Find available preset workflows.
         *
         * @return array
         */
        protected function find_presets()
        {
        }
        /**
         * Return specified preset files that exist.
         *
         * @return SplFileInfo[] Array of valid preset files
         */
        protected function get_defined_preset_files()
        {
        }
        /**
         * Normalize a file extension to include the dot before the extension.
         *
         * @param string $extension The file extension.
         *
         * @return string
         */
        protected function normalize_file_extension($extension)
        {
        }
        /**
         * Get the data for a preset given its name.
         *
         * @param string $name The preset name.
         *
         * @return PresetInterface
         */
        protected abstract function get_preset_data(string $name) : \AutomateWoo\Workflows\Presets\PresetInterface;
    }
    /**
     * PHPFileStorage class.
     *
     * @package AutomateWoo\Workflows\Presets\Storage
     * @since   5.1.0
     */
    class PHPFileStorage extends \AutomateWoo\Workflows\Presets\Storage\FileStorage
    {
        /** @var string[] */
        protected $preset_files = [
            'abandoned-cart-12-hours.php',
            'abandoned-cart-4-hours.php',
            'credit-cards-expiry-no-coupon.php',
            'credit-cards-expiry-with-coupon.php',
            'cross-sell-related-products-no-coupon.php',
            'cross-sell-related-products-with-coupon.php',
            'cross-sell-first-time-customers-no-coupon.php',
            'cross-sell-first-time-customers-with-coupon.php',
            'cross-sell-repeat-customers-no-coupon.php',
            'cross-sell-repeat-customers-with-coupon.php',
            'loyalty-reward-repeat-customers-with-coupon.php',
            'loyalty-reward-repeat-customers-with-custom-offer.php',
            'loyalty-reward-high-spending-customers-with-coupon.php',
            'new-customers-welcome-no-coupon.php',
            'new-customers-welcome-with-coupon.php',
            'reviews-remind-customers-to-leave-a-review.php',
            'reviews-thank-you-with-coupon.php',
            'reviews-thank-you-multiple-reviews.php',
            'reviews-thank-you-for-5-star-review.php',
            'win-back-customers-recent-products-no-coupon.php',
            'win-back-customers-recent-products-with-coupon.php',
            // links to docs (require extensions)
            'loyalty-birthday-with-coupon.php',
            'wishlist-remind-customers.php',
        ];
        /**
         * PHPFileStorage constructor.
         *
         * @param string $storage_path The directory where files are stored.
         *
         * @throws InvalidPath When the directory doesn't exist.
         */
        public function __construct($storage_path)
        {
        }
        /**
         * Get the data for a preset given its name.
         *
         * @param string $name The preset name.
         *
         * @return PresetInterface
         */
        protected function get_preset_data(string $name) : \AutomateWoo\Workflows\Presets\PresetInterface
        {
        }
    }
}
namespace AutomateWoo\Exceptions {
    /**
     * AutomateWoo Exception Interface.
     *
     * @since   4.9.0
     * @package AutomateWoo\Exceptions
     */
    interface Exception
    {
    }
}
namespace AutomateWoo\Workflows\Presets\Storage {
    /**
     * @class StorageException used in preset storage
     * @since 5.1.0
     */
    class StorageException extends \Exception implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Create a new exception when a given preset name does not exist.
         *
         * @param string $name
         *
         * @return static
         */
        public static function preset_does_not_exist(string $name) : \AutomateWoo\Workflows\Presets\Storage\StorageException
        {
        }
    }
}
namespace AutomateWoo\Workflows\Presets {
    /**
     * @class PresetService
     * @since 5.1.0
     */
    class PresetService
    {
        /**
         * @var PresetStorageInterface
         */
        protected $preset_storage;
        /**
         * @var PresetParserInterface
         */
        protected $preset_parser;
        /**
         * PresetService constructor.
         *
         * @param PresetStorageInterface $preset_storage
         * @param PresetParserInterface  $preset_parser
         */
        public function __construct(\AutomateWoo\Workflows\Presets\Storage\PresetStorageInterface $preset_storage, \AutomateWoo\Workflows\Presets\Parser\PresetParserInterface $preset_parser)
        {
        }
        /**
         * Returns the list of available presets
         *
         * @return PresetInterface[]
         */
        public function get_presets()
        {
        }
        /**
         * Returns a preset given its ID
         *
         * @param string $id
         *
         * @return PresetInterface|WP_Error Returns the preset if found or WP_Error if it doesn't exists
         */
        public function get_preset($id)
        {
        }
        /**
         * Stores the given preset as a draft workflow
         *
         * @param PresetInterface $preset
         *
         * @return Workflow|WP_Error Returns the created workflow on success, WP_Error on failure
         */
        public function save_as_workflow(\AutomateWoo\Workflows\Presets\PresetInterface $preset)
        {
        }
        /**
         * Finds the preset given its ID and stores it as a draft workflow
         *
         * @param string $preset_id
         *
         * @return Workflow|WP_Error Returns the created workflow on success, WP_Error on failure
         */
        public function save_as_workflow_by_id($preset_id)
        {
        }
    }
}
namespace AutomateWoo\Workflows\Presets\Parser {
    /**
     * The parser interface used to validate a preset and translate it to a workflow
     *
     * @since 5.1.0
     */
    interface PresetParserInterface
    {
        /**
         * Parses the preset data and returns a workflow entity based on it
         *
         * @param PresetInterface $preset
         *
         * @return Workflow
         *
         * @throws ParserException If there are any errors parsing the preset.
         */
        public function parse(\AutomateWoo\Workflows\Presets\PresetInterface $preset);
    }
    /**
     * @class ParserException used in preset parser
     * @since %VERSION
     */
    class ParserException extends \Exception implements \AutomateWoo\Exceptions\Exception
    {
    }
    /**
     * @class PresetParser
     * @since 5.1.0
     */
    class PresetParser implements \AutomateWoo\Workflows\Presets\Parser\PresetParserInterface
    {
        /**
         * Parses the preset data and returns a workflow entity based on it
         *
         * @param PresetInterface $preset
         *
         * @return Workflow
         *
         * @throws ParserException If there are any errors parsing the preset.
         */
        public function parse(\AutomateWoo\Workflows\Presets\PresetInterface $preset)
        {
        }
        /**
         * @param array $trigger_data
         *
         * @return Trigger
         *
         * @throws ParserException If an invalid or non-existing trigger is specified.
         */
        protected function extract_trigger($trigger_data)
        {
        }
        /**
         * @param array $actions_data
         *
         * @return Action[]
         *
         * @throws ParserException If an invalid or non-existing action is specified.
         */
        protected function extract_actions($actions_data)
        {
        }
        /**
         * @param array $rules_data
         *
         * @return RuleGroup[] One or multiple groups of rules
         *
         * @throws ParserException If an invalid or non-existing rule is specified.
         */
        protected function extract_rules($rules_data)
        {
        }
        /**
         * @param array $timing_options
         *
         * @return WorkflowTiming
         *
         * @throws ParserException When the timing type or its options are invalid or not recognized.
         */
        protected function extract_workflow_timing($timing_options)
        {
        }
    }
}
namespace AutomateWoo\Workflows\Presets {
    /**
     * The base interface for presets
     *
     * @since 5.1.0
     */
    interface PresetInterface
    {
        const NAME_KEY = 'name';
        const PRESET_TYPE_GUIDE = 'guide';
        /**
         * @param string $key
         *
         * @return bool
         */
        public function has(string $key) : bool;
        /**
         * @param string     $key
         * @param mixed|null $default
         *
         * @return mixed|null
         */
        public function get(string $key, $default = null);
        /**
         * @param string     $key
         * @param mixed|null $value
         *
         * @return mixed|null
         */
        public function set(string $key, $value) : \AutomateWoo\Workflows\Presets\PresetInterface;
        /**
         * @return string
         */
        public function get_name() : string;
        /**
         * @param string $name
         *
         * @return PresetInterface
         */
        public function set_name(string $name) : \AutomateWoo\Workflows\Presets\PresetInterface;
    }
    /**
     * @class ArrayPreset
     * @since 5.1.0
     */
    class ArrayPreset implements \AutomateWoo\Workflows\Presets\PresetInterface, \ArrayAccess
    {
        /**
         * @var array
         */
        protected $data;
        /**
         * @param string $name
         * @param array  $data
         */
        public function __construct(string $name, array $data)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function has(string $key) : bool
        {
        }
        /**
         * @param string     $key
         * @param mixed|null $default
         *
         * @return mixed|null
         */
        public function get(string $key, $default = null)
        {
        }
        /**
         * @param string     $key
         * @param mixed|null $value
         *
         * @return mixed|null
         */
        public function set(string $key, $value) : \AutomateWoo\Workflows\Presets\PresetInterface
        {
        }
        /**
         * @param string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         *
         * @return mixed
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param mixed  $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @return string
         */
        public function get_name() : string
        {
        }
        /**
         * @param string $name
         *
         * @return PresetInterface
         */
        public function set_name(string $name) : \AutomateWoo\Workflows\Presets\PresetInterface
        {
        }
    }
}
namespace AutomateWoo\Workflows {
    /**
     * Class TimingDescriptionGenerator
     *
     * @since 5.4.0
     */
    class TimingDescriptionGenerator
    {
        /**
         * @var Workflow
         */
        protected $workflow;
        /**
         * @var Trigger
         */
        protected $trigger;
        /**
         * TimingDescriptionGenerator constructor.
         *
         * @param Workflow $workflow
         *
         * @throws InvalidValue If workflow has no trigger.
         */
        public function __construct(\AutomateWoo\Workflow $workflow)
        {
        }
        /**
         * Generate the timing description string.
         *
         * @return string
         */
        public function generate() : string
        {
        }
        /**
         * Get text for delayed workflow.
         *
         * @return string
         */
        protected function get_delayed_timing_text() : string
        {
        }
        /**
         * Get text for scheduled workflow.
         *
         * @return string
         */
        protected function get_scheduled_timing_text() : string
        {
        }
        /**
         * Get text for fixed timing workflow.
         *
         * @return string
         */
        protected function get_fixed_timing_text() : string
        {
        }
        /**
         * Get text for the workflow's delay amount.
         *
         * @return string
         */
        protected function get_delay_amount_text() : string
        {
        }
        /**
         * @param array $days
         *
         * @return string
         */
        protected function get_weekday_text(array $days) : string
        {
        }
        /**
         * Get the text for time of day workflows.
         *
         * This is prepended to the description.
         *
         * @return string
         */
        protected function get_time_of_day_text() : string
        {
        }
    }
    /**
     * @since 3.9
     */
    class Factory
    {
        /**
         * Get a Workflow object by its ID.
         *
         * @param int $id The workflow ID.
         *
         * @return Workflow|false The workflow object, or false when the ID is invalid or the object can't be retrieved.
         */
        public static function get($id)
        {
        }
        /**
         * Create a workflow given an Entity.
         *
         * @since 5.1.0
         *
         * @param WorkflowEntity $entity The entity to use for Workflow creation.
         *
         * @return Workflow
         *
         * @throws InvalidWorkflow When the workflow already exists or there is an issue creating the workflow.
         */
        public static function create(\AutomateWoo\Entity\Workflow $entity)
        {
        }
        /**
         * Create a workflow from an array of data.
         *
         * @since 5.1.0
         *
         * @param array $data The array of workflow data.
         *
         * @return Workflow
         * @throws InvalidWorkflow When there is an issue creating the workflow.
         */
        public static function create_from_array($data = [])
        {
        }
        /**
         * Create a post object from an array of workflow data.
         *
         * The 'status' property within the $data array should NOT be the post type equivalent. This
         * method will handle converting to the post type version of the status.
         *
         * @param array $data The array of workflow data.
         *
         * @return int The created post ID.
         * @throws InvalidWorkflow When there is a problem creating the post.
         */
        private static function create_post($data = [])
        {
        }
        /**
         * Get data based on a Workflow timing object.
         *
         * @since 5.1.0
         *
         * @param WorkflowTiming $timing The timing object.
         *
         * @return array Normalized data from the timing object.
         */
        private static function get_timing_options_data(\AutomateWoo\Entity\WorkflowTiming $timing) : array
        {
        }
        /**
         * Convert action data structure to legacy data structure.
         *
         * @since 5.1.0
         *
         * @param array $actions
         *
         * @return array
         */
        private static function maybe_convert_to_legacy_action_data(array $actions) : array
        {
        }
    }
}
namespace AutomateWoo\Workflows\VariableParsing {
    /**
     * Class ParsedVariable
     *
     * The result of a parsed variable string.
     *
     * @since 5.4.0
     */
    class ParsedVariable
    {
        /**
         * E.g. 'order.total'.
         *
         * @var string
         */
        public $name;
        /**
         * E.g. 'order'.
         *
         * @var string
         */
        public $type;
        /**
         * E.g. 'total'.
         *
         * @var string
         */
        public $field;
        /**
         * E.g. [ 'format' => 'decimal' ]
         *
         * @var array
         */
        public $parameters;
        /**
         * ParsedVariable constructor.
         *
         * @param string $name
         * @param string $type
         * @param string $field
         * @param array  $parameters
         */
        public function __construct(string $name, string $type, string $field, array $parameters)
        {
        }
    }
    /**
     * Class ExcludedVariable
     *
     * @since 5.4.0
     */
    class ExcludedParsedVariable
    {
        /**
         * E.g. 'unsubscribe_url'.
         *
         * @var string
         */
        public $variable_string;
        /**
         * ExcludedParsedVariable constructor.
         *
         * @param string $variable_string
         */
        public function __construct(string $variable_string)
        {
        }
    }
    /**
     * Class to parse a variable string into separate usable parts.
     *
     * @since 3.6
     * @since 5.4.0 renamed from \AutomateWoo\Workflow_Variable_Parser
     */
    class VariableParser
    {
        /**
         * Sanitize and parse a variable string into a usable object.
         *
         * @param string $variable_string The part between the double curly braces.
         *                                e.g. "customer.generate_coupon template: 'abandoned-cart'"
         *
         * @return ExcludedParsedVariable|ParsedVariable
         *
         * @throws \Exception If parsing fails.
         */
        public function parse(string $variable_string)
        {
        }
        /**
         * Sanitize the string contents of a variable (the part between the double curly braces).
         *
         * @param string $string
         * @return string
         */
        protected function sanitize(string $string) : string
        {
        }
        /**
         * Remove single quotes from start and end of a string
         *
         * @param string $string
         *
         * @return string
         */
        private function unquote(string $string) : string
        {
        }
        /**
         * Certain variables can be excluded from processing.
         * Currently only {{ unsubscribe_url }}.
         *
         * @param string $variable
         *
         * @return bool
         */
        protected function is_excluded(string $variable)
        {
        }
    }
}
namespace AutomateWoo\Workflows {
    /**
     * Class Status
     *
     * @since 5.1.0
     */
    final class Status
    {
        const ACTIVE = 'active';
        const DISABLED = 'disabled';
        const POST_ACTIVE = 'publish';
        const POST_DISABLED = 'aw-disabled';
        /**
         * The equivalent post status.
         *
         * @var string
         */
        private $post_status;
        /**
         * A Workflow status.
         *
         * @var string
         */
        private $status;
        /**
         * Status constructor.
         *
         * @param string $status The workflow status.
         *
         * @throws InvalidStatus When the status is not a known workflow status.
         */
        public function __construct(string $status)
        {
        }
        /**
         * Get the post status.
         *
         * @return string
         */
        public function get_post_status() : string
        {
        }
        /**
         * Get the workflow status.
         *
         * @return string
         */
        public function get_status() : string
        {
        }
        /**
         * Change the workflow status.
         *
         * Will return a new object.
         *
         * @param string $new_status The new workflow status.
         *
         * @return Status
         */
        public function change_status_to(string $new_status) : \AutomateWoo\Workflows\Status
        {
        }
        /**
         * Validate a workflow status.
         *
         * @param string $status The status to validate.
         *
         * @throws InvalidStatus When the status is not a known workflow status.
         */
        private function validate_status(string $status)
        {
        }
        /**
         * Get the available workflow statuses and their post status mapping.
         *
         * @return array
         */
        private function get_available_statuses() : array
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Query_Abstract
     * @since 3.8
     */
    abstract class Query_Abstract
    {
        /**
         * Set's the database table ID.
         *
         * @var string (required)
         */
        public $table_id;
        /** @var string (optional) */
        public $meta_table_id;
        /**
         * Set's the class to use for the return object.
         *
         * @var string (required)
         */
        protected $model;
        /** @var array - top array level uses AND condition, for OR conditions nest */
        public $where = [];
        /** @var array - top array level uses AND condition, for OR conditions nest */
        public $where_meta = [];
        /**
         * @var string Possible values: 'objects', 'ids'
         */
        protected $return = 'objects';
        /** @var int */
        public $found_rows = 0;
        /** @var int */
        protected $limit;
        /** @var int */
        protected $offset;
        /** @var int */
        protected $page;
        /** @var string */
        protected $orderby;
        /** @var string */
        protected $order;
        /** @var int */
        protected $calc_found_rows = false;
        /** @var string */
        public $sql;
        /** @var bool */
        public $combine_wheres_with_or = false;
        /**
         * Possible compare values: =, <, > IN, NOT IN
         *
         * @param $column string
         * @param $value mixed
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where($column, $value, $compare = false)
        {
        }
        /**
         * Does not support EXISTS or NOT EXISTS
         *
         * @param $key
         * @param $value
         * @param bool|string $compare - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_meta($key, $value, $compare = false)
        {
        }
        /**
         * @param string $column
         * @param string $order
         * @return $this
         */
        function set_ordering($column, $order = 'DESC')
        {
        }
        /**
         * @param $i
         * @return $this
         */
        function set_limit($i)
        {
        }
        /**
         * @param bool $calc_found_rows defaults to true now, but will change to default to false soon
         * @return $this
         */
        function set_calc_found_rows($calc_found_rows)
        {
        }
        /**
         * @param $i
         * @return $this
         */
        function set_offset($i)
        {
        }
        /**
         * Don't set a page if an offset is also set.
         * Requires a limit to be set.
         * @since 4.0
         * @param int $page
         * @return $this
         */
        function set_page($page)
        {
        }
        /**
         * @deprecated in 5.1.0 use self::get_results_as_ids() instead
         *
         * @param string $return
         * 	'objects' (default) | 'ids'
         * @return $this
         */
        function set_return($return)
        {
        }
        /**
         * @return Database_Table
         */
        function get_table()
        {
        }
        /**
         * @return string
         */
        function get_table_name()
        {
        }
        /**
         * @return array
         */
        function get_table_columns()
        {
        }
        /**
         * @return Database_Table|false
         */
        function get_meta_table()
        {
        }
        /**
         * @return string
         */
        function get_meta_table_name()
        {
        }
        /**
         * @return string
         */
        function get_meta_object_id_column()
        {
        }
        /**
         * @param array $where
         * @return string
         */
        private function parse_where($where)
        {
        }
        /**
         * @param array $query
         */
        protected function build_where_query(&$query)
        {
        }
        /**
         * @return Model[]|array
         */
        function get_results()
        {
        }
        /**
         * Get query results as item IDs.
         *
         * @since 5.1.0
         *
         * @return int[]
         */
        public function get_results_as_ids()
        {
        }
        /**
         * @return int
         */
        function get_count()
        {
        }
        /**
         * Checks to see if a query would have at least one result
         * Then returns the query back to normal state
         *
         * @since 3.2.4
         * @return bool
         */
        function has_results()
        {
        }
    }
    /**
     * @class Query_Data_Layer_Abstract
     * @since 3.8
     */
    abstract class Query_Data_Layer_Abstract extends \AutomateWoo\Query_Abstract
    {
        /**
         * @param string $data_type
         * @return string
         */
        abstract function get_data_layer_meta_key($data_type);
        /**
         * @param string $data_type
         * @param mixed $data_object
         * @return string
         */
        abstract function get_data_layer_meta_value($data_type, $data_object);
        /**
         * @param string $data_type
         * @param mixed $data_value
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_data_layer($data_type, $data_value, $compare = false)
        {
        }
        /**
         * @param int $customer_id
         * @param $compare bool|string
         * @return $this
         */
        function where_customer($customer_id, $compare = false)
        {
        }
        /**
         * @param int $order_id
         * @param $compare bool|string
         * @return $this
         */
        function where_order($order_id, $compare = false)
        {
        }
        /**
         * @param string $guest_email
         * @param $compare bool|string
         * @return $this
         */
        function where_guest($guest_email, $compare = false)
        {
        }
        /**
         * @param int $cart_id
         * @param $compare bool|string
         * @return $this
         */
        function where_cart($cart_id, $compare = false)
        {
        }
        /**
         * @param int $user_id
         * @param $compare bool|string
         * @return $this
         */
        function where_user($user_id, $compare = false)
        {
        }
        /**
         * @param int $comment_id
         * @param $compare bool|string
         * @return $this
         */
        function where_comment($comment_id, $compare = false)
        {
        }
        /**
         * @param int $wishlist_id
         * @param $compare bool|string
         * @return $this
         */
        function where_wishlist($wishlist_id, $compare = false)
        {
        }
        /**
         * @param int $review_id
         * @param $compare bool|string
         * @return $this
         */
        function where_review($review_id, $compare = false)
        {
        }
        /**
         * @param int $subscription_id
         * @param $compare bool|string
         * @return $this
         */
        function where_subscription($subscription_id, $compare = false)
        {
        }
        /**
         * @param int $product_id
         * @param $compare bool|string
         * @return $this
         */
        function where_product($product_id, $compare = false)
        {
        }
        /**
         * @param string $download_id
         * @param $compare bool|string
         * @return $this
         */
        function where_download($download_id, $compare = false)
        {
        }
    }
    /**
     * @class Time_Helper
     * @since 2.9
     */
    class Time_Helper
    {
        /**
         * @param string|DateTime $time - string must be in format 00:00
         * @return int
         */
        static function calculate_seconds_from_day_start($time)
        {
        }
        /**
         * @param \DateTime|DateTime $datetime
         */
        static function convert_to_gmt($datetime)
        {
        }
        /**
         * @param \DateTime|DateTime $datetime
         */
        static function convert_from_gmt($datetime)
        {
        }
        /**
         * @since 3.9
         * @return float|int
         */
        static function get_timezone_offset()
        {
        }
        /**
         * Get the number of seconds in a period of time.
         *
         * @since 5.0.0
         *
         * @param int    $interval_number The number of intervals e.g. "X days"
         * @param string $interval_type   Possible values: day, days, hour, hours, minute, minutes
         *
         * @return int
         */
        public static function get_period_in_seconds($interval_number, $interval_type)
        {
        }
    }
}
namespace AutomateWoo\Rest_Api\Utilities {
    /**
     * Trait GetWorkflow
     *
     * @since   5.0.0
     * @package AutomateWoo\Rest_Api\Utilities
     */
    trait GetWorkflow
    {
        /**
         * Get a workflow by ID.
         *
         * @param int $id The workflow ID.
         *
         * @return Workflow The workflow object.
         * @throws RestException When the workflow does not exist.
         */
        protected function get_workflow($id)
        {
        }
    }
    /**
     * REST API pagination utility class.
     *
     * Based off of
     *
     * @since 4.9.0
     */
    class Pagination
    {
        /**
         * The REST request object.
         *
         * @var WP_REST_Request
         */
        protected $request;
        /**
         * The REST response object.
         *
         * @var WP_REST_Request
         */
        protected $response;
        /**
         * The total items found.
         *
         * @var int
         */
        protected $total_items;
        /**
         * Pagination constructor.
         *
         * @param WP_REST_Request  $request
         * @param WP_REST_Response $response
         * @param int              $total_items
         */
        public function __construct(\WP_REST_Request $request, \WP_REST_Response $response, $total_items)
        {
        }
        /**
         * Add pagination headers to a response object and then return it.
         *
         * @return WP_REST_Response
         */
        public function add_headers()
        {
        }
        /**
         * Get base for links from the request object.
         *
         * @return string
         */
        protected function get_link_base()
        {
        }
        /**
         * Add a page link.
         *
         * @param string $name      Page link name. e.g. prev.
         * @param int    $page      Page number.
         * @param string $link_base Base URL.
         */
        protected function add_page_link($name, $page, $link_base)
        {
        }
    }
    /**
     * Controller_Namespace Trait.
     *
     * Used to provide the same namespace to all of our endpoints.
     *
     * @since 4.9.0
     */
    trait Controller_Namespace
    {
        /**
         * Constructor for classes that utilize this trait.
         */
        public function __construct()
        {
        }
    }
    /**
     * Class RestException
     *
     * @since   5.0.0
     * @package AutomateWoo\Rest_Api\Utilities
     */
    class RestException extends \WC_REST_Exception
    {
        /**
         * Get the WP_Error equivalent of the Exception.
         *
         * @return WP_Error
         */
        public function get_wp_error()
        {
        }
    }
}
namespace AutomateWoo\Rest_Api\Schema {
    /**
     * Schema for a Workflow object in the REST API.
     *
     * @since   4.9.0
     *
     * @package AutomateWoo\Rest_Api\Schema
     */
    trait WorkflowSchema
    {
        /**
         * Retrieves the item's schema, conforming to JSON Schema.
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Prepare the workflow for the REST response.
         *
         * @param Workflow        $workflow
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|mixed
         */
        public function prepare_item_for_response($workflow, $request)
        {
        }
        /**
         * Adds the schema from additional fields to a schema array.
         *
         * The type of object is inferred from the passed schema.
         *
         * @param array $schema Schema array.
         *
         * @return array Modified Schema array.
         */
        protected abstract function add_additional_fields_schema($schema);
    }
    /**
     * Context interface.
     *
     * Provides constants for REST API contexts.
     *
     * @since 4.9.0
     *
     * @package AutomateWoo\Rest_Api\Schema
     */
    interface Context
    {
        const VIEW = 'view';
        const EDIT = 'edit';
        const ALL = [self::VIEW, self::EDIT];
        const VIEW_ONLY = [self::VIEW];
        const EDIT_ONLY = [self::EDIT];
    }
}
namespace AutomateWoo\Rest_Api\Controllers {
    /**
     * Abstract AutomateWoo REST controller.
     *
     * @since 4.9.0
     */
    abstract class AbstractController extends \WP_REST_Controller
    {
        use \AutomateWoo\Rest_Api\Utilities\Controller_Namespace;
        /**
         * Get rest error from an exception.
         *
         * @since 5.0.0
         *
         * @param Exception $exception
         *
         * @return WP_Error
         */
        protected function get_rest_error_from_exception(\Exception $exception)
        {
        }
    }
    /**
     * Workflows Rest API controller.
     *
     * @since 4.9.0
     */
    class Workflows extends \AutomateWoo\Rest_Api\Controllers\AbstractController
    {
        use \AutomateWoo\Rest_Api\Schema\WorkflowSchema, \AutomateWoo\Rest_Api\Utilities\GetWorkflow;
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'workflows';
        /**
         * Register the routes.
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves a collection workflows.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Retrieves a single Workflow item.
         *
         * @param WP_REST_Request $request Full request object.
         *
         * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * ManualWorkflowRunner Rest API controller.
     *
     * @since 5.0.0
     */
    class ManualWorkflowRunner extends \AutomateWoo\Rest_Api\Controllers\AbstractController
    {
        use \AutomateWoo\Rest_Api\Utilities\GetWorkflow;
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'manual-workflow-runner';
        /**
         * Register the routes.
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves quick filter data for a workflow.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_quick_filter_data($request)
        {
        }
        /**
         * Find batch of quick filter matches for a workflow.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function find_matches($request)
        {
        }
        /**
         * Adds a batch of items to the queue.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function add_items_to_queue($request)
        {
        }
        /**
         * Check the workflow is a valid manual workflow.
         *
         * @param Workflow $workflow
         *
         * @throws RestException If not valid.
         */
        protected function validate_manual_workflow($workflow)
        {
        }
    }
    /**
     * Presets Rest API controller.
     *
     * @since 5.1.0
     */
    class WorkflowPresets extends \AutomateWoo\Rest_Api\Controllers\AbstractController
    {
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'presets';
        /**
         * Register the routes.
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves workflow presets and guides.
         *
         * This endpoint returns "workflow presets" and "workflow guides" where guides are just links to docs.
         * Eventually these guides will be converted to full presets.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Handle creating a workflow from a preset.
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function create_workflow($request)
        {
        }
        /**
         * Prepares the item for the REST response.
         *
         * @param PresetInterface  $preset  Preset object.
         * @param \WP_REST_Request $request Request object.
         *
         * @return \WP_REST_Response|\WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($preset, $request)
        {
        }
        /**
         * Get the Preset schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Memberships_Helper
     * @since 2.8.3
     */
    class Memberships_Helper
    {
        /**
         * @return array
         */
        static function get_membership_plans()
        {
        }
        /**
         * Get statuses without status prefix
         * @return array
         */
        static function get_membership_statuses()
        {
        }
    }
    /**
     * Class ShopDataItem
     *
     * 'Shop' is a psuedo data type since the shop is always available in every workflow and doesn't
     * need to be stored in the workflow queue or logs.
     *
     * @see     Shop
     * @since   5.1.0
     * @package AutomateWoo
     */
    class ShopDataItem
    {
        /**
         * Get the shop's current date time in UTC.
         *
         * @return DateTime
         *
         * @throws Exception In case of error.
         */
        public function get_current_datetime()
        {
        }
    }
    /**
     * Class LegacyAddonHandler
     *
     * @since 5.4.0
     */
    class LegacyAddonHandler
    {
        /**
         * @var string
         */
        private $subscriptions_addon_file = '';
        const SUBSCRIPTIONS_ADDON_CLASS = 'AutomateWoo_Subscriptions';
        const SUBSCRIPTIONS_ADDON_NAME = 'AutomateWoo - Subscriptions Add-on';
        /**
         * Init this class.
         */
        public function init()
        {
        }
        /**
         * Ensure legacy addons are deactivated.
         */
        protected function deactivate_legacy_addons()
        {
        }
        /**
         * Filter 'all_plugins' to overwrite the description for the legacy add-ons.
         *
         * @param array $all_plugins
         *
         * @return array[]
         */
        public function filter_all_plugins_to_overwrite_legacy_addon_data(array $all_plugins) : array
        {
        }
        /**
         * Gets the AutomateWoo_Subscriptions's class file path.
         *
         * @return string
         */
        private function get_subscriptions_addon_file() : string
        {
        }
    }
    /**
     * Mailer class for plain text emails.
     *
     * @since 4.4.0
     */
    class Mailer_Plain_Text extends \AutomateWoo\Mailer_Abstract
    {
        /**
         * The email format type.
         *
         * @var string
         */
        public $email_type = 'plain';
        /**
         * Get the email body.
         * For plain text emails simply returns the $content.
         *
         * @return string
         */
        public function get_email_body()
        {
        }
    }
}
namespace AutomateWoo\Actions {
    /**
     * Interface ActionInterface
     *
     * @since 5.2.0
     */
    interface ActionInterface
    {
        /**
         * Get the action's name.
         *
         * @return string
         */
        public function get_name();
        /**
         * Set the action's name.
         *
         * @param string $name
         */
        public function set_name($name);
        /**
         * Get the action's title.
         *
         * @param bool $prepend_group
         *
         * @return string
         */
        public function get_title($prepend_group = false);
        /**
         * Get the action's group.
         *
         * @return string
         */
        public function get_group();
        /**
         * Get the action's description.
         *
         * @return string
         */
        public function get_description();
        /**
         * Gets specific field belonging to the action.
         *
         * @param string $name
         *
         * @return Field|false
         */
        public function get_field($name);
        /**
         * Gets the action's fields.
         *
         * @return Field[]
         */
        public function get_fields();
        /**
         * Set the action's options.
         *
         * @param array $options
         */
        public function set_options($options);
        /**
         * Returns an option for use when running the action.
         *
         * Option value will already have been sanitized by it's field ::sanitize_value() method.
         *
         * @param string $field_name
         * @param bool   $process_variables
         * @param bool   $allow_html
         *
         * @return mixed Will vary depending on the field type specified in the action's fields.
         */
        public function get_option($field_name, $process_variables = false, $allow_html = false);
        /**
         * Get an option for use when editing the action.
         *
         * The value will be already sanitized by the field object.
         * This is used to displaying an option value for editing.
         *
         * @param string $field_name
         *
         * @return mixed
         */
        public function get_option_raw($field_name);
        /**
         * Run the action.
         *
         * @throws \Exception When an error occurs.
         */
        public function run();
    }
}
namespace AutomateWoo {
    /**
     * Abstract Class Action
     *
     * All workflow actions extend this class.
     */
    abstract class Action implements \AutomateWoo\Actions\ActionInterface
    {
        /**
         * The action's unique name/slug.
         *
         * @var string
         */
        public $name;
        /**
         * The data items required by the action.
         *
         * @var array
         */
        public $required_data_items = [];
        /**
         * The action's title.
         *
         * @var string
         */
        public $title;
        /**
         * The action's description.
         *
         * @var string
         */
        public $description;
        /**
         * The action's group.
         *
         * @var string
         */
        public $group;
        /**
         * The action's fields objects.
         *
         * @var Field[]
         */
        public $fields;
        /**
         * Array containing the action's option values.
         *
         * @var array
         */
        public $options;
        /**
         * The workflow the action belongs to.
         *
         * This prop may not be set depending on the context.
         *
         * @var Workflow
         */
        public $workflow;
        /**
         * Knows if admin details have been loaded.
         *
         * @var bool
         */
        protected $has_loaded_admin_details = false;
        /**
         * This method no longer has an explicit purpose and is deprecated.
         *
         * @deprecated
         */
        public function init()
        {
        }
        /**
         * Method to load the action's fields.
         *
         * TODO make protected method
         */
        public function load_fields()
        {
        }
        /**
         * Method to set the action's admin props.
         *
         * Admin props include: title, group and description.
         */
        protected function load_admin_details()
        {
        }
        /**
         * Loads the action's admin props.
         */
        protected function maybe_load_admin_details()
        {
        }
        /**
         * Get the action's title.
         *
         * @param bool $prepend_group
         * @return string
         */
        public function get_title($prepend_group = false)
        {
        }
        /**
         * Get the action's group.
         *
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * Get the action's description.
         *
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * Get the action's name.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Set the action's name.
         *
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * Get the action's description HTML.
         *
         * @return string
         */
        public function get_description_html()
        {
        }
        /**
         * Adds a field to the action.
         *
         * Should only be called in the load_fields() method.
         *
         * @param Field $field
         */
        protected function add_field($field)
        {
        }
        /**
         * Removes a field from the action.
         *
         * Should only be called in the load_fields() method.
         *
         * @param string $field_name
         */
        protected function remove_field($field_name)
        {
        }
        /**
         * Gets specific field belonging to the action.
         *
         * @param string $name
         *
         * @return Field|false
         */
        public function get_field($name)
        {
        }
        /**
         * Gets the action's fields.
         *
         * @return Field[]
         */
        public function get_fields()
        {
        }
        /**
         * Set the action's options.
         *
         * @param array $options
         */
        public function set_options($options)
        {
        }
        /**
         * Returns an option for use when running the action.
         *
         * Option value will already have been sanitized by it's field ::sanitize_value() method.
         *
         * @param string $field_name
         * @param bool   $process_variables
         * @param bool   $allow_html
         *
         * @return mixed Will vary depending on the field type specified in the action's fields.
         */
        public function get_option($field_name, $process_variables = false, $allow_html = false)
        {
        }
        /**
         * Process an option string value converting any variables.
         *
         * @since 5.2.0
         *
         * @param string $value
         * @param bool   $process_variables
         * @param bool   $allow_html
         *
         * @return string
         */
        protected function process_option_string_value(string $value, bool $process_variables, bool $allow_html)
        {
        }
        /**
         * Get an option for use when editing the action.
         *
         * The value will be already sanitized by the field object.
         * This is used to displaying an option value for editing.
         *
         * @since 4.4.0
         *
         * @param string $field_name
         *
         * @return mixed
         */
        public function get_option_raw($field_name)
        {
        }
        /**
         * Used to dynamically load option values for an action field.
         *
         * TODO move to HasDynamicFieldOptions interface
         *
         * @param string       $field_name
         * @param string|false $reference_field_value
         *
         * @return array
         */
        public function get_dynamic_field_options($field_name, $reference_field_value = false)
        {
        }
        /**
         * Check requirements for the action.
         *
         * TODO move to HasRequirements interface
         * TODO Ideally change behaviour to "get_requirements" rather than actually performing check
         *
         * Runs before an action is loaded in the admin area.
         */
        public function check_requirements()
        {
        }
        /**
         * Display a warning in the admin area.
         *
         * TODO move into admin/UI related code
         *
         * @param string $message
         */
        public function warning($message)
        {
        }
        /**
         * Get text for action deprecation warning.
         *
         * @return string
         */
        protected function get_deprecation_warning()
        {
        }
        /**
         * Does this action have a preview ability?
         *
         * @deprecated in 5.2.0 Use Previewable interface instead
         * @see PreviewableInterface
         *
         * @return bool
         */
        public function can_be_previewed()
        {
        }
        /**
         * Returns preview content.
         *
         * @deprecated in 5.2.0 Use Previewable interface instead
         * @see PreviewableInterface
         *
         * @return string|\WP_Error
         */
        public function preview()
        {
        }
    }
    /**
     * @class Action_Customer_Update_Meta
     */
    class Action_Customer_Update_Meta extends \AutomateWoo\Action
    {
        public $required_data_items = ['customer'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Subscription_Change_Status
     * @since 2.1.0
     */
    class Action_Subscription_Change_Status extends \AutomateWoo\Action
    {
        public $required_data_items = ['subscription'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Order_Update_Meta
     */
    class Action_Order_Update_Meta extends \AutomateWoo\Action
    {
        public $required_data_items = ['order'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * Class Action_Order_Item_Update_Meta.
     *
     * @since 4.5
     * @package AutomateWoo
     */
    class Action_Order_Item_Update_Meta extends \AutomateWoo\Action_Order_Update_Meta
    {
        /**
         * Data required for action
         *
         * @var array
         */
        public $required_data_items = ['order', 'order_item'];
        /**
         * Load admin details
         */
        public function load_admin_details()
        {
        }
        /**
         * Run action
         */
        public function run()
        {
        }
    }
    /**
     *	@class Action_Clear_Queued_Events
     * @since 2.2
     */
    class Action_Clear_Queued_Events extends \AutomateWoo\Action
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
}
namespace AutomateWoo\Traits {
    /**
     * Trait Tag_Field
     *
     * Helper functions to create a tags field and parse comma-separated tags.
     *
     * @since 4.8.0
     */
    trait TagField
    {
        /**
         * Add a tags field to the action.
         *
         * @param string $name  (Optional) The name for the tag.
         * @param string $title (Optional) The title to display for the tag.
         *
         * @return Text
         */
        protected function get_tags_field($name = null, $title = null)
        {
        }
        /**
         * Convert tags string to array.
         *
         * @param string $tags Comma-separated list of tags.
         *
         * @return array Array of tags.
         */
        protected function parse_tags_field($tags)
        {
        }
        /**
         * Convert a string of tags to an array, with lowercase keys.
         *
         * @param string $tags Comma-separated list of tags.
         *
         * @return array Array of tags with lowercase versions as keys.
         */
        protected function parse_tags_field_keys($tags)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Action_Mailchimp_Abstract
     */
    abstract class Action_Mailchimp_Abstract extends \AutomateWoo\Action
    {
        use \AutomateWoo\Traits\TagField;
        function load_admin_details()
        {
        }
        /**
         * @return Fields\Select
         */
        function add_list_field()
        {
        }
        /**
         * Get the MailChimp contact email field.
         *
         * @since 4.5
         *
         * @return Fields\Text
         */
        function get_contact_email_field()
        {
        }
        /**
         * Get the contact email option. Defaults to {{ customer.email }}.
         *
         * @since 4.5
         *
         * @return string|bool
         */
        function get_contact_email_option()
        {
        }
        /**
         * Add a tags field to the action.
         *
         * @param string $name  (Optional) The name for the tag.
         * @param string $title (Optional) The title to display for the tag.
         *
         * @return Text
         */
        protected function add_tags_field($name = null, $title = null)
        {
        }
        /**
         * Validate that a contact is a member of a given list.
         *
         * @param string $email   The email address.
         * @param string $list_id The list ID.
         *
         * @throws \Exception When the contact is not valid for the list.
         */
        protected function validate_contact($email, $list_id)
        {
        }
    }
    /**
     * @class Action_Mailchimp_Unsubscribe
     */
    class Action_Mailchimp_Unsubscribe extends \AutomateWoo\Action_Mailchimp_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Change_Workflow_Status
     */
    class Action_Change_Workflow_Status extends \AutomateWoo\Action
    {
        public $required_data_items = ['workflow'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Order_Change_Status
     * @since 1.1.4
     */
    class Action_Order_Change_Status extends \AutomateWoo\Action
    {
        public $required_data_items = ['order'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
}
namespace AutomateWoo\Actions\Subscriptions {
    /**
     * Define shared methods to add, remove or update line items on a subscription.
     *
     * @since 5.4.0
     */
    abstract class AbstractEditItem extends \AutomateWoo\Action
    {
        /**
         * A subscription is needed so that it can be edited by instances of this action.
         *
         * @var array
         */
        public $required_data_items = ['subscription'];
        /**
         * Flag to define whether the quantity input field should be marked as required.
         *
         * @var bool
         */
        protected $require_quantity_field = true;
        /**
         * Method to get the item to edit on a subscription, which might be a
         * WC_Product, WC_Coupon, or some other data type.
         *
         * @return mixed
         */
        protected abstract function get_object_for_edit();
        /**
         * Add, remove or update a line item on a subscription based on a provided object.
         *
         * The object to edit on a subscription can be a WC_Product, WC_Coupon, or some other WooCommerce data type.
         *
         * @param mixed            $object WC_Product, WC_Coupon, or some other WooCommerce data type. Will be the same data type as the return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of the subscription being edited by this action.
         *
         * @throws \Exception When there is an error.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected abstract function edit_subscription($object, $subscription);
        /**
         * Get the note to record on the subscription to record the line item change
         *
         * @param mixed $object WC_Product, WC_Coupon, or some other WooCommerce data type. Will be the same data type as the return value of @see $this->get_object_for_edit().
         * @return string
         */
        protected abstract function get_note($object);
        /**
         * Set the group for all edit actions that extend this class
         */
        public function load_admin_details()
        {
        }
        /**
         * Edit the item managed by this class on the subscription passed in the workflow's trigger
         *
         * @throws \Exception When there is an error.
         */
        public function run()
        {
        }
        /**
         * Add a note to record the edit action on the subscription.
         *
         * @param mixed            $object WC_Product, WC_Coupon, or some other WooCommerce data type. Will be the same data type as the return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of the subscription being edited by this action.
         */
        protected function add_note($object, $subscription)
        {
        }
        /**
         * Get the subscription passed in by the workflow's trigger.
         *
         * @return \WC_Subscription|false
         */
        protected function get_subscription_to_edit()
        {
        }
        /**
         * Add a field to enter the product line item quantity to the action's admin input field.
         *
         * @param int      $min Minimum value to allow as input. Default 1.
         * @param null|int $max Maximum value to allow as input. Default null, no maximum.
         */
        protected function add_quantity_field($min = 1, $max = null)
        {
        }
        /**
         * Field to set a name on the line item when this action is run
         */
        protected function add_name_field()
        {
        }
        /**
         * Get the title to display on the name field for this action
         */
        protected function get_name_field_title()
        {
        }
        /**
         * Get the description to display on the name field for this action
         */
        protected function get_name_field_description()
        {
        }
        /**
         * Get the description to display on the quantity field for this action
         */
        protected function get_quantity_field_description()
        {
        }
        /**
         * Field to set a price when this action is run
         */
        protected function add_cost_field()
        {
        }
        /**
         * Get the title to display on the price field for this action
         */
        protected function get_cost_field_title()
        {
        }
        /**
         * Get the description to display on the price field for this action
         */
        protected function get_cost_field_description()
        {
        }
        /**
         * Get the description to display on the price field for this action
         *
         * @deprecated in 5.1.0
         *
         * @return string
         */
        protected function get_recalculate_coupons_compatibility_text()
        {
        }
        /**
         * Recalculate a subscription's totals.
         *
         * Recalculates coupons if they have been applied to the subscription.
         *
         * @param \WC_Subscription $subscription
         *
         * @since 4.8.0
         */
        protected function recalculate_subscription_totals($subscription)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Define shared methods to add, remove or update product line items on a subscription.
     *
     * @class Action_Subscription_Edit_Product_Abstract
     * @since 4.4
     */
    abstract class Action_Subscription_Edit_Product_Abstract extends \AutomateWoo\Actions\Subscriptions\AbstractEditItem
    {
        /**
         * Flag to define whether the instance of this action requires a quantity input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_quantity_field = true;
        /**
         * Flag to define whether the instance of this action requires a name text input field.
         *
         * @var bool
         */
        protected $load_name_field = false;
        /**
         * Flag to define whether the instance of this action requires a price input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_cost_field = false;
        /**
         * Flag to define whether variable products should be included in search results for the
         * product select field.
         *
         * @var bool
         */
        protected $allow_variable_products = true;
        /**
         * Add a product selection field to the action's admin UI for store owners to choose what
         * product to edit on the trigger's subscription.
         *
         * Optionally also add the quantity input field for the product if the instance requires it.
         */
        public function load_fields()
        {
        }
        /**
         * Implement abstract Action_Subscription_Edit_Item_Abstract method to get the product to
         * edit on a subscription.
         *
         * @return \WC_Product|false
         */
        protected function get_object_for_edit()
        {
        }
        /**
         * Add a product selection field for this action
         */
        protected function add_product_select_field()
        {
        }
        /**
         * Get the title to display on the name field for this action
         */
        protected function get_name_field_title()
        {
        }
        /**
         * Get the description to display on the name field for this action
         */
        protected function get_name_field_description()
        {
        }
        /**
         * Get the title to display on the price field for this action
         */
        protected function get_cost_field_title()
        {
        }
        /**
         * Get the description to display on the price field for this action
         */
        protected function get_cost_field_description()
        {
        }
    }
    /**
     * Action to add a chosen product line item to a subscription with a chosen quantity.
     *
     * @class Action_Subscription_Add_Product
     * @since 4.4
     */
    class Action_Subscription_Add_Product extends \AutomateWoo\Action_Subscription_Edit_Product_Abstract
    {
        /**
         * Variable products should not be added as a line item to subscriptions, only variations.
         *
         * @var bool
         */
        protected $allow_variable_products = false;
        /**
         * Flag to define whether the instance of this action requires a name text input field.
         *
         * @var bool
         */
        protected $load_name_field = true;
        /**
         * Flag to define whether the instance of this action requires a price input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_cost_field = true;
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add a given product as a line item to a given subscription.
         *
         * @param \WC_Product      $product Product to add to the subscription.
         * @param \WC_Subscription $subscription Instance of subscription to add the product to.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($product, $subscription)
        {
        }
        /**
         * Get a message to add to the subscription to record the product being added by this action.
         *
         * Helpful for tracing the history of this action by viewing the subscription's notes.
         *
         * @param \WC_Product $product Product being added to the subscription. Required so its name can be added to the order note.
         * @return string
         */
        protected function get_note($product)
        {
        }
    }
    /**
     * Define shared methods to add, remove or update coupon line items on a subscription.
     *
     * @class Action_Subscription_Edit_Coupon_Abstract
     * @since 4.4
     */
    abstract class Action_Subscription_Edit_Coupon_Abstract extends \AutomateWoo\Actions\Subscriptions\AbstractEditItem
    {
        /**
         * Add a coupon selection field to the action's admin UI for store owners to choose what
         * coupon to edit on the trigger's subscription.
         *
         * Optionally also add the quantity input field for the coupon if the instance requires it.
         */
        public function load_fields()
        {
        }
        /**
         * Implement abstract Action_Subscription_Edit_Item_Abstract method to get the coupon to
         * edit on a subscription.
         *
         * @return \WC_Coupon|false
         */
        protected function get_object_for_edit()
        {
        }
        /**
         * Add a coupon selection field for this action
         */
        protected function add_coupon_select_field()
        {
        }
        /**
         * Get the codes of all non-AutomateWoo coupons.
         *
         * @return array Coupon codes (as both key and value of array)
         */
        protected function get_coupons_list()
        {
        }
    }
    /**
     * Action to add a chosen coupon code to a subscription.
     *
     * @class Action_Subscription_Add_Coupon
     * @since 4.4
     */
    class Action_Subscription_Add_Coupon extends \AutomateWoo\Action_Subscription_Edit_Coupon_Abstract
    {
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add a given coupon as a line item to a given subscription.
         *
         * @param \WC_Coupon       $coupon Coupon to add to the subscription.
         * @param \WC_Subscription $subscription Instance of subscription to add the coupon to.
         *
         * @throws \Exception When there is an error.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($coupon, $subscription)
        {
        }
        /**
         * Get a message to add to the subscription to record the coupon being added by this action.
         *
         * Helpful for tracing the history of this action by viewing the subscription's notes.
         *
         * @param \WC_Coupon $coupon Coupon being added to the subscription. Required so its name can be added to the order note.
         * @return string
         */
        protected function get_note($coupon)
        {
        }
        /**
         * Get the codes of all recurring coupons, as only these can be added to subscriptions.
         *
         * @return array Coupon codes (as both key and value of array)
         */
        protected function get_coupons_list()
        {
        }
    }
    /**
     * @class Action_Active_Campaign_Abstract
     */
    abstract class Action_Campaign_Monitor_Abstract extends \AutomateWoo\Action
    {
        function load_admin_details()
        {
        }
        /**
         * @return Fields\Text
         */
        function get_subscriber_email_field()
        {
        }
        /**
         * @return Fields\Text
         */
        function get_subscriber_name_field()
        {
        }
        /**
         * @return Fields\Select
         */
        function get_list_field()
        {
        }
        /**
         * @return Fields\Checkbox
         */
        function get_resubscribe_field()
        {
        }
    }
    /**
     * @class Action_Campaign_Monitor_Remove_Subscriber
     */
    class Action_Campaign_Monitor_Remove_Subscriber extends \AutomateWoo\Action_Campaign_Monitor_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Subscription_Send_Invoice
     * @since 3.5.0
     */
    class Action_Subscription_Send_Invoice extends \AutomateWoo\Action
    {
        public $required_data_items = ['subscription'];
        function load_admin_details()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Update_Product_Meta
     */
    class Action_Update_Product_Meta extends \AutomateWoo\Action
    {
        public $required_data_items = ['product'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * Class Action_Points_Rewards_Edit_Points_Abstract.
     *
     * An shared abstract class for manipulating customer points.
     *
     * @since   4.5.0
     * @package AutomateWoo
     */
    abstract class Action_Points_Rewards_Edit_Points_Abstract extends \AutomateWoo\Action
    {
        /**
         * Load required data.
         *
         * @var array
         */
        public $required_data_items = ['customer'];
        /**
         * Load admin description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields for points.
         */
        public function load_fields()
        {
        }
        /**
         * Modify Points
         *
         * @param string $action
         */
        public function modify_points($action)
        {
        }
    }
    /**
     * @class Action_Mailchimp_Update_Contact_Field
     * @since 2.9
     */
    class Action_Mailchimp_Update_Contact_Field extends \AutomateWoo\Action_Mailchimp_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * @param $field_name
         * @param $reference_field_value
         * @return array
         */
        function get_dynamic_field_options($field_name, $reference_field_value = false)
        {
        }
        /**
         * @throws \Exception
         */
        function run()
        {
        }
    }
}
namespace AutomateWoo\Actions {
    /**
     * Interface PreviewableInterface
     *
     * @since 5.2.0
     */
    interface PreviewableInterface extends \AutomateWoo\Actions\ActionInterface
    {
        /**
         * Returns preview content.
         *
         * E.g. the email preview HTML.
         *
         * @return string|WP_Error
         */
        public function get_preview();
    }
    /**
     * Interface TestableInterface
     *
     * @since 5.2.0
     */
    interface TestableInterface extends \AutomateWoo\Actions\ActionInterface
    {
        /**
         * Run the action as a test.
         *
         * @param array $args Optionally add args for the test.
         *
         * @return true|WP_Error
         */
        public function run_test(array $args = []);
    }
}
namespace AutomateWoo\Traits {
    /**
     * Class StringValidator
     *
     * @since 5.1.0
     */
    trait StringValidator
    {
        /**
         * Validate that an item is a string.
         *
         * @param mixed $value The value to validate.
         *
         * @throws InvalidArgument When $value is not a string.
         */
        public function validate_is_string($value)
        {
        }
    }
    /**
     * ArrayValidator Trait
     *
     * @since 5.1.0
     */
    trait ArrayValidator
    {
        use \AutomateWoo\Traits\StringValidator;
        /**
         * Validate that an item is an array or an object that can be accessed as an array.
         *
         * @param mixed $value The value to validate.
         *
         * @throws InvalidArgument When $value is not an array or an ArrayAccess object.
         */
        private function validate_is_array($value)
        {
        }
        /**
         * Validate that an item is an array of arrays, or objects that are accessible as an array.
         *
         * @param mixed $value The value to validate.
         *
         * @throws InvalidArgument When $value is not an array of arrays.
         */
        private function validate_array_of_arrays($value)
        {
        }
        /**
         * Validate that an item is an array of strings.
         *
         * @param mixed $value The value to validate.
         *
         * @throws InvalidArgument When $value is not an array of strings.
         */
        private function validate_array_of_strings($value)
        {
        }
        /**
         * Validate that an item is an array or an object that can be accessed as an array and the array is not empty.
         *
         * @param mixed $value The value to validate.
         *
         * @throws InvalidArgument When $value is not an array or it is empty.
         */
        private function validate_is_non_empty_array($value)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Abstract class for send email actions.
     *
     * @class Action_Send_Email_Abstract
     * @since 4.4.0
     */
    abstract class Action_Send_Email_Abstract extends \AutomateWoo\Action implements \AutomateWoo\Actions\PreviewableInterface, \AutomateWoo\Actions\TestableInterface
    {
        use \AutomateWoo\Traits\ArrayValidator;
        /**
         * Get the email type (html-template, html-raw, plain-text).
         *
         * @return string
         */
        public abstract function get_email_type();
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Get workflow email object for this action.
         *
         * Sets the email subject, content and reply_to from the action options.
         *
         * @param string $recipient
         * @param string $content
         *
         * @return Workflow_Email
         */
        public function get_workflow_email_object(string $recipient, string $content)
        {
        }
        /**
         * Log the result of a send email attempt.
         *
         * @param \WP_Error|bool $result
         */
        public function add_send_email_result_to_workflow_log($result)
        {
        }
        /**
         * Validate the args used to run a test of this action.
         *
         * @since 5.2.0
         *
         * @param array $args
         *
         * @throws InvalidArgument If test args are invalid.
         */
        protected function validate_test_args(array $args)
        {
        }
    }
    /**
     * @class Action_Send_Email
     */
    class Action_Send_Email extends \AutomateWoo\Action_Send_Email_Abstract
    {
        /**
         * Get the email type.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * Generates the HTML content for the email
         * @return string|\WP_Error
         */
        public function get_preview()
        {
        }
        /**
         * Run the action as a test.
         *
         * @param array $args Optionally add args for the test.
         *
         * @return true|WP_Error
         */
        public function run_test(array $args = [])
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Mailchimp_Subscribe
     */
    class Action_Mailchimp_Subscribe extends \AutomateWoo\Action_Mailchimp_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Order_Resend_Email
     * @since 2.2
     */
    class Action_Order_Resend_Email extends \AutomateWoo\Action
    {
        public $required_data_items = ['order'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * Action to remove all line items matching a chosen coupons ID from a workflow's subscription.
     *
     * @class Action_Subscription_Remove_Coupon
     * @since 4.4
     */
    class Action_Subscription_Remove_Coupon extends \AutomateWoo\Action_Subscription_Edit_Coupon_Abstract
    {
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Remove all line items for a coupon that have a code matching a given coupon.
         *
         * More than one line item may be removed if more than one line item matches the given
         * coupon's code.
         *
         * @param \WC_Coupon       $coupon Coupon to removed from the subscription.
         * @param \WC_Subscription $subscription Instance of subscription to remove the coupon from.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($coupon, $subscription)
        {
        }
        /**
         * Create a note recording the coupon name and workflow name to add after removing coupons.
         *
         * @param \WC_Coupon $coupon Coupon being removed from the subscription. Required so its name can be added to the order note.
         * @return string
         */
        protected function get_note($coupon)
        {
        }
    }
    /**
     * @class Action_Order_Add_Note
     * @since 3.5
     */
    class Action_Order_Add_Note extends \AutomateWoo\Action
    {
        public $required_data_items = ['order'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
        /**
         * Method to process custom Note author name set for the Action
         * In case 'WooCommerce' is set for the Author field, we do not apply any filters since that is the default behaviour
         * our system has.
         *
         * @param string $note_author
         */
        protected function add_custom_author(string $note_author)
        {
        }
    }
    /**
     * Action for adding a note to a Subscription.
     *
     * @class Action_Subscription_Add_Note
     * @since 4.6.0
     */
    class Action_Subscription_Add_Note extends \AutomateWoo\Action_Order_Add_Note
    {
        /**
         * Data items required for the action to run.
         *
         * @var array
         */
        public $required_data_items = ['subscription'];
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Called when an action should be run.
         */
        public function run()
        {
        }
    }
    /**
     * Class Action_Points_Rewards_Add_Points
     *
     * Increases customer's points.
     *
     * @since   4.5.0
     * @package AutomateWoo
     */
    class Action_Points_Rewards_Add_Points extends \AutomateWoo\Action_Points_Rewards_Edit_Points_Abstract
    {
        /**
         * Load admin description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Run
         */
        public function run()
        {
        }
    }
    /**
     * @class Action_Order_Trigger_Action
     * @since 2.3
     */
    class Action_Order_Trigger_Action extends \AutomateWoo\Action
    {
        public $required_data_items = ['order'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * Gets a list of WooCommerce order actions via the 'woocommerce_order_actions' filter.
         *
         * Because some 3rd party code (e.g. WC Subscriptions, WC Payments) expect a global $theorder object when this
         * filter runs we set dummy order object avoid errors.
         *
         * @see \WC_Meta_Box_Order_Actions::output
         *
         * @since 5.5.1
         *
         * @return array
         */
        protected function get_order_actions()
        {
        }
        function run()
        {
        }
    }
}
namespace AutomateWoo\Actions {
    /**
     * Class Mailchimp_Update_Tags
     *
     * @package AutomateWoo\Actions
     * @since 4.8.0
     */
    class Mailchimp_Update_Tags extends \AutomateWoo\Action_Mailchimp_Abstract
    {
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Generate the fields the user can set for the action.
         */
        public function load_fields()
        {
        }
        /**
         * Called when an action should be run.
         *
         * @throws \Exception When the contact isn't part of the list.
         */
        public function run()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Action_Custom_Function
     */
    class Action_Custom_Function extends \AutomateWoo\Action
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Active_Campaign_Abstract
     */
    abstract class Action_Active_Campaign_Abstract extends \AutomateWoo\Action
    {
        use \AutomateWoo\Traits\TagField;
        function load_admin_details()
        {
        }
        function check_requirements()
        {
        }
        /**
         * @return Fields\Text
         */
        function add_contact_email_field()
        {
        }
        function add_contact_fields()
        {
        }
        /**
         * @return Fields\Text
         */
        function add_tags_field()
        {
        }
    }
    /**
     * @class Action_Active_Campaign_Add_Tag
     * @since 2.0
     */
    class Action_Active_Campaign_Add_Tag extends \AutomateWoo\Action_Active_Campaign_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Mailchimp_Add_To_Group
     * @since 3.4.0
     */
    class Action_Mailchimp_Add_To_Group extends \AutomateWoo\Action_Mailchimp_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * @param $field_name
         * @param $reference_field_value
         * @return array
         */
        function get_dynamic_field_options($field_name, $reference_field_value = false)
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Mailchimp_Remove_From_Group
     * @since 3.4.0
     */
    class Action_Mailchimp_Remove_From_Group extends \AutomateWoo\Action_Mailchimp_Add_To_Group
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Active_Campaign_Remove_Tag
     * @since 2.0.0
     */
    class Action_Active_Campaign_Remove_Tag extends \AutomateWoo\Action_Active_Campaign_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * Action_Send_Email_Plain_Text class.
     *
     * @since 4.4.0
     */
    class Action_Send_Email_Plain_Text extends \AutomateWoo\Action_Send_Email_Abstract
    {
        /**
         * Get the email type.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load action fields.
         */
        public function load_fields()
        {
        }
        /**
         * Generates the HTML content for the email.
         *
         * @return string|\WP_Error
         */
        public function get_preview()
        {
        }
        /**
         * Run the action as a test.
         *
         * @param array $args Optionally add args for the test.
         *
         * @return true|WP_Error
         */
        public function run_test(array $args = [])
        {
        }
        /**
         * Run the action.
         */
        public function run()
        {
        }
        /**
         * Send an email to a single recipient.
         *
         * @param string $recipient_email
         * @param string $content
         * @param array  $recipient_args
         *
         * @return bool|\WP_Error
         */
        protected function send_email($recipient_email, $content, $recipient_args = [])
        {
        }
    }
    /**
     * @class Action_Active_Campaign_Update_Contact_Field
     */
    class Action_Active_Campaign_Update_Contact_Field extends \AutomateWoo\Action_Active_Campaign_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * @throws \Exception
         */
        function run()
        {
        }
    }
    /**
     * @class Action_Memberships_Abstract
     * @since 2.8
     */
    abstract class Action_Memberships_Abstract extends \AutomateWoo\Action
    {
        function load_admin_details()
        {
        }
    }
    /**
     * @class Action_Memberships_Change_Plan
     * @since 2.8
     */
    class Action_Memberships_Change_Plan extends \AutomateWoo\Action_Memberships_Abstract
    {
        public $required_data_items = ['customer'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
        /**
         * @param Customer                        $customer
         * @param \WC_Memberships_Membership_Plan $new_plan
         *
         * @throws \Exception
         */
        function create_membership($customer, $new_plan)
        {
        }
        /**
         * @param \WC_Memberships_User_Membership $membership
         * @param \WC_Memberships_Membership_Plan $new_plan
         */
        function change_membership_plan($membership, $new_plan)
        {
        }
    }
    /**
     * @class Action_Customer_Change_Role
     */
    class Action_Customer_Change_Role extends \AutomateWoo\Action
    {
        public $required_data_items = ['customer'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Order_Update_Customer_Shipping_Note
     */
    class Action_Order_Update_Customer_Shipping_Note extends \AutomateWoo\Action
    {
        public $required_data_items = ['order'];
        function load_admin_details()
        {
        }
        /**
         * @return mixed
         */
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Send_Email_Raw
     * @since 3.6.0
     */
    class Action_Send_Email_Raw extends \AutomateWoo\Action_Send_Email_Abstract
    {
        /**
         * Get the email type.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * Generates the HTML content for the email
         * @return string|\WP_Error
         */
        public function get_preview()
        {
        }
        /**
         * Run the action as a test.
         *
         * @param array $args Optionally add args for the test.
         *
         * @return true|WP_Error
         */
        public function run_test(array $args = [])
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Campaign_Monitor_Add_Subscriber
     */
    class Action_Campaign_Monitor_Add_Subscriber extends \AutomateWoo\Action_Campaign_Monitor_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * Class Action_Points_Rewards_Remove_Points
     *
     * Decreases customer's points.
     *
     * @since   4.5.0
     * @package AutomateWoo
     */
    class Action_Points_Rewards_Remove_Points extends \AutomateWoo\Action_Points_Rewards_Edit_Points_Abstract
    {
        /**
         * Load admin description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Run
         */
        public function run()
        {
        }
    }
    /**
     * @class Action_Memberships_Delete_User_Membership
     * @since 2.9
     */
    class Action_Memberships_Delete_User_Membership extends \AutomateWoo\Action_Memberships_Abstract
    {
        public $required_data_items = ['customer'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * @throws \Exception
         */
        function run()
        {
        }
    }
    /**
     * Action to remove all line items matching a chosen products ID from a workflow's subscription.
     *
     * @class Action_Subscription_Remove_Product
     * @since 4.4
     */
    class Action_Subscription_Remove_Product extends \AutomateWoo\Action_Subscription_Edit_Product_Abstract
    {
        /**
         * Overload parent::$requires_quantity_field to prevent the quantity field being added by
         * parent::load_fields(), as it is not used for product removal.
         *
         * @var bool
         */
        protected $load_quantity_field = false;
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Remove all line items for a product that have an ID matching a given product.
         *
         * Variations need to be removed by variation ID. They can not be removed by passing
         * the parent variable product's ID.
         *
         * More than one line item may be removed if more than one line item matches the given
         * product's ID.
         *
         * @param \WC_Product      $product Product to removed from the subscription.
         * @param \WC_Subscription $subscription Instance of subscription to remove the product from.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($product, $subscription)
        {
        }
        /**
         * Create a note recording the product name and workflow name to add after removing products.
         *
         * @param \WC_Product $product Product being removed from the subscription. Required so its name can be added to the order note.
         * @return string
         */
        protected function get_note($product)
        {
        }
    }
}
namespace AutomateWoo\Actions\Subscriptions {
    /**
     * Action to recalculate all taxes for a subscription.
     *
     * @since 5.4.0
     */
    class RecalculateTaxes extends \AutomateWoo\Action
    {
        /**
         * A subscription is needed to run this action.
         *
         * @var array
         */
        public $required_data_items = ['subscription'];
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Run the action.
         */
        public function run()
        {
        }
    }
    /**
     * Define shared methods to add, remove or update date fields on a subscription.
     *
     * @since 5.5.17
     */
    abstract class AbstractEditDateItem extends \AutomateWoo\Actions\Subscriptions\AbstractEditItem
    {
        /**
         * @var string Date field name to update for this subscription.
         */
        protected $date_field = '';
        /**
         * @var string Subscription date to update.
         */
        protected $subscription_date = '';
        /**
         * Edit the item managed by this class on the subscription passed in the workflow's trigger
         *
         * @throws \Exception When there is an error.
         */
        public function run()
        {
        }
        /**
         * Method to get the new date for the subscription.
         *
         * @return string MySQL date/time string representation of the DateTime object in UTC timezone.
         */
        protected function get_object_for_edit()
        {
        }
        /**
         * Edit the item managed by this class on the subscription passed in the workflow's trigger
         *
         * @param string           $new_date     Date string.
         * @param \WC_Subscription $subscription Instance of the subscription being edited by this action.
         *
         * @throws \Exception When there is an error.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        public function edit_subscription($new_date, $subscription)
        {
        }
    }
    /**
     * Change a subscription's end date.
     *
     * @since 5.5.17
     */
    class UpdateEndDate extends \AutomateWoo\Actions\Subscriptions\AbstractEditDateItem
    {
        /**
         * @var string Date field name to update for this subscription.
         */
        protected $date_field = 'end';
        /**
         * @var string Subscription date to update.
         */
        protected $subscription_date = 'end';
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load the fields required for the action.
         */
        public function load_fields()
        {
        }
        /**
         * Get the note on the subscription to record the end date change.
         *
         * @param string $new_end_date End date. The return value of @see $this->get_object_for_edit().
         */
        protected function get_note($new_end_date)
        {
        }
    }
    /**
     * Action to update a chosen product line item to a subscription with a chosen quantity.
     *
     * @since 5.4.0
     */
    class UpdateProduct extends \AutomateWoo\Action_Subscription_Edit_Product_Abstract
    {
        /**
         * Variable products should not be updateed as a line item to subscriptions, only variations.
         *
         * @var bool
         */
        protected $allow_variable_products = false;
        /**
         * Flag to define whether the instance of this action requires a name text input field.
         *
         * @var bool
         */
        protected $load_name_field = true;
        /**
         * Flag to define whether the instance of this action requires a price input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_cost_field = true;
        /**
         * Do not require the quantity input field.
         *
         * @var bool
         */
        protected $require_quantity_field = false;
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Update a given product as a line item to a given subscription.
         *
         * @param \WC_Product      $product Product to update to the subscription.
         * @param \WC_Subscription $subscription Instance of subscription to update the product to.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($product, $subscription)
        {
        }
        /**
         * Apply action changes to a specific subscription line item.
         *
         * @param \WC_Product            $product The line item product.
         * @param \WC_Order_Item_Product $item    Subscription line item.
         */
        protected function apply_changes_to_order_line_item(\WC_Product $product, \WC_Order_Item_Product $item)
        {
        }
        /**
         * Get the description to display on the quantity field for this action
         */
        protected function get_quantity_field_description()
        {
        }
        /**
         * Get the description to display on the cost field for this action
         */
        protected function get_cost_field_description()
        {
        }
        /**
         * Get a message to update to the subscription to record the product being updateed by this action.
         *
         * Helpful for tracing the history of this action by viewing the subscription's notes.
         *
         * @param \WC_Product $product Product being updateed to the subscription. Required so its name can be updateed to the order note.
         * @return string
         */
        protected function get_note($product)
        {
        }
    }
    /**
     * Change a subscription's billing period or interval.
     *
     * While the billing schedule is not a line item, this class still extends Action_Subscription_Edit_Item_Abstract
     * as it provides many useful methods for editing a subscription's billing schedule.
     *
     * @since 5.4.0
     */
    class UpdateSchedule extends \AutomateWoo\Actions\Subscriptions\AbstractEditItem
    {
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add billing interval & period selection field to the action's admin UI.
         */
        public function load_fields()
        {
        }
        /**
         * Method to get the billing schedule to set on the subscription.
         *
         * @return array
         */
        protected function get_object_for_edit()
        {
        }
        /**
         * Set the chosen billing interval and period on a subscription.
         *
         * @param array            $billing_schedule Billing schedule data. Same data as the return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of the subscription being edited by this action.
         *
         * @throws \Exception When there is an error.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($billing_schedule, $subscription)
        {
        }
        /**
         * Get the note to record on the subscription to record the line item change
         *
         * @param mixed $billing_schedule WC_Product, WC_Coupon, or some other WooCommerce data type. Will be the same data type as the return value of @see $this->get_object_for_edit().
         * @return string
         */
        protected function get_note($billing_schedule)
        {
        }
        /**
         * Add a number field to input the billing interval
         */
        protected function add_billing_interval_field()
        {
        }
        /**
         * Add a select field for the billing period
         */
        protected function add_billing_period_field()
        {
        }
        /**
         * Add a coupon selection field for this action
         */
        protected function add_recalculate_field()
        {
        }
    }
    /**
     * Change a subscription's next payment date.
     *
     * @since 5.4.0
     */
    class UpdateNextPaymentDate extends \AutomateWoo\Actions\Subscriptions\AbstractEditDateItem
    {
        /**
         * @var string Date field name to update for this subscription.
         */
        protected $date_field = 'payment';
        /**
         * @var string Subscription date to update.
         */
        protected $subscription_date = 'next_payment';
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load the fields required for the action.
         */
        public function load_fields()
        {
        }
        /**
         * Get the note on the subscription to record the next payment date change.
         *
         * @param string $new_next_payment_date Next payment date. The return value of @see $this->get_object_for_edit().
         */
        protected function get_note($new_next_payment_date)
        {
        }
    }
    /**
     * Change a subscription's currency.
     *
     * While the currency is not a line item, this class still extends Action_Subscription_Edit_Item_Abstract
     * as it provides many useful methods for editing a subscription's currency.
     *
     * @since 5.4.0
     */
    class UpdateCurrency extends \AutomateWoo\Actions\Subscriptions\AbstractEditItem
    {
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add currency selection field to the action's admin UI.
         */
        public function load_fields()
        {
        }
        /**
         * Method to get the chosen currency to set on the subscription.
         *
         * @return array
         */
        protected function get_object_for_edit()
        {
        }
        /**
         * Set the chosen currency on a subscription.
         *
         * @param string           $new_currency_code Currency code. One of the keys from get_woocommerce_currencies(). The return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of the subscription being edited by this action.
         *
         * @throws \Exception When there is an error.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($new_currency_code, $subscription)
        {
        }
        /**
         * Get the note to record on the subscription to record the currency change
         *
         * @param string $new_currency_code Currency code. One of the keys from get_woocommerce_currencies(). The return value of @see $this->get_object_for_edit().
         * @return string
         */
        protected function get_note($new_currency_code)
        {
        }
        /**
         * Add a select field for currency
         */
        protected function add_currency_code_field()
        {
        }
    }
    /**
     * Define shared methods to add, remove or update shipping line items on a subscription.
     *
     * @since 5.4.0
     */
    abstract class AbstractEditShipping extends \AutomateWoo\Actions\Subscriptions\AbstractEditItem
    {
        /**
         * Flag to define whether to include an "All shipping methods" option in the shipping
         * method select field for this action.
         *
         * @var bool
         */
        protected $include_all_shipping_method = false;
        /**
         * The option key when the "All shipping methods" option is included in the
         * shipping method select field for this action.
         *
         * @var string
         */
        protected $all_shipping_method_option_key = 'all';
        /**
         * Add a shipping selection field to the action's admin UI for store owners to choose what
         * shipping to edit on the trigger's subscription.
         *
         * Optionally also add the quantity input field for the shipping if the instance requires it.
         */
        public function load_fields()
        {
        }
        /**
         * Method to get the shipping fields input on the workflow.
         *
         * @return array
         */
        protected function get_object_for_edit()
        {
        }
        /**
         * Add a shipping selection field for this action
         */
        protected function add_shipping_select_field()
        {
        }
        /**
         * Get the codes of all non-AutomateWoo shippings.
         *
         * @return array Shipping codes (as both key and value of array)
         */
        protected function get_shipping_method_titles()
        {
        }
        /**
         * Get the codes of all non-AutomateWoo shippings.
         *
         * @return \WC_Shipping_Method[]
         */
        protected function get_shipping_methods()
        {
        }
        /**
         * Get the title to display on the name field for this action
         */
        protected function get_name_field_title()
        {
        }
        /**
         * Get the description to display on the name field for this action
         */
        protected function get_name_field_description()
        {
        }
        /**
         * Get the title to display on the price field for this action
         */
        protected function get_cost_field_title()
        {
        }
        /**
         * Get the description to display on the price field for this action
         */
        protected function get_cost_field_description()
        {
        }
    }
    /**
     * Action to add a chosen shipping line item to a subscription with a chosen cost.
     *
     * @since 5.4.0
     */
    class AddShipping extends \AutomateWoo\Actions\Subscriptions\AbstractEditShipping
    {
        /**
         * Overload parent::$requires_quantity_field to prevent the quantity field being added by
         * parent::load_fields(), as it is not used for shipping removal.
         *
         * @var bool
         */
        protected $load_quantity_field = false;
        /**
         * Flag to define whether the instance of this action requires a name text input field.
         *
         * @var bool
         */
        protected $load_name_field = true;
        /**
         * Flag to define whether the instance of this action requires a price input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_cost_field = true;
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add a given shipping as a line item to a given subscription.
         *
         * @param array            $shipping_data Shipping line item data. Same data as the return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of subscription to add the shipping to.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($shipping_data, $subscription)
        {
        }
        /**
         * Get a message to add to the subscription to record the shipping being added by this action.
         *
         * Helpful for tracing the history of this action by viewing the subscription's notes.
         *
         * @param array $shipping_data Shipping line item data. Same data as the return value of @see $this->get_object_for_edit().
         * @return string
         */
        protected function get_note($shipping_data)
        {
        }
    }
    /**
     * Action to remove a shipping method from a subscription.
     *
     * @since 5.4.0
     */
    class RemoveShipping extends \AutomateWoo\Actions\Subscriptions\AddShipping
    {
        /**
         * Flag to define whether to include an "All shipping methods" option in the shipping
         * method select field for this action.
         *
         * @var bool
         */
        protected $include_all_shipping_method = true;
        /**
         * Flag to define whether the instance of this action requires a name input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_name_field = false;
        /**
         * Flag to define whether the instance of this action requires a price input field to
         * be displayed on the action's admin UI.
         *
         * @var bool
         */
        protected $load_cost_field = false;
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add a given shipping as a line item to a given subscription.
         *
         * @param array            $shipping_data Shipping line item data. Same data as the return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of subscription to add the shipping to.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($shipping_data, $subscription)
        {
        }
        /**
         * Create a note recording the shipping method ID and workflow name to add after removing shipping.
         *
         * Helpful for tracing the history of this action by viewing the subscription's notes.
         *
         * @param array $shipping_data Shipping line item data. Same data as the return value of @see $this->get_object_for_edit().
         * @return string
         */
        protected function get_note($shipping_data)
        {
        }
    }
    /**
     * Change a subscription's trial end date.
     *
     * @since 5.5.17
     */
    class UpdateTrialEndDate extends \AutomateWoo\Actions\Subscriptions\AbstractEditDateItem
    {
        /**
         * @var string Date field name to update for this subscription.
         */
        protected $date_field = 'trial_end';
        /**
         * @var string Subscription date to update.
         */
        protected $subscription_date = 'trial_end';
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load the fields required for the action.
         */
        public function load_fields()
        {
        }
        /**
         * Get the note on the subscription to record the end date change.
         *
         * @param string $new_trial_end_date Trial end date. The return value of @see $this->get_object_for_edit().
         */
        protected function get_note($new_trial_end_date)
        {
        }
    }
    /**
     * Action to update a shipping method from a subscription.
     *
     * @since 5.4.0
     */
    class UpdateShipping extends \AutomateWoo\Actions\Subscriptions\AddShipping
    {
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Add a given shipping as a line item to a given subscription.
         *
         * @param array            $shipping_data Shipping line item data. Same data as the return value of @see $this->get_object_for_edit().
         * @param \WC_Subscription $subscription Instance of subscription to add the shipping to.
         *
         * @return bool True if the subscription was edited, false if no change was made.
         */
        protected function edit_subscription($shipping_data, $subscription)
        {
        }
        /**
         * Create a note recording the shipping method ID and workflow name to add after updating shipping.
         *
         * Helpful for tracing the history of this action by viewing the subscription's notes.
         *
         * @param array $shipping_data Shipping line item data. Same data as the return value of @see $this->get_object_for_edit().
         * @return string
         */
        protected function get_note($shipping_data)
        {
        }
    }
    /**
     * Action to regenerate download permissions for a subscription.
     *
     * @since 5.4.0
     */
    class RegenerateDownloadPermissions extends \AutomateWoo\Action
    {
        /**
         * A subscription is needed to run this action.
         *
         * @var array
         */
        public $required_data_items = ['subscription'];
        /**
         * Explain to store admin what this action does via a unique title and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Run the action.
         *
         * @throws Exception If there's an error running the action.
         */
        public function run()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Action_Send_SMS_Twilio
     */
    class Action_Send_SMS_Twilio extends \AutomateWoo\Action
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * @throws \Exception
         */
        function run()
        {
        }
        /**
         * Sends an SMS to one recipient.
         *
         * @since 4.3.2
         *
         * @param string $recipient_phone The phone number of the SMS recipient.
         * @param string $recipient_string Unprocessed recipient string.
         * @param string $message         The body of the SMS
         */
        public function send_sms($recipient_phone, $recipient_string, $message)
        {
        }
        /**
         * Determines if a recipient is the primary customer for the workflow.
         *
         * Must be used before the $recipient_phone has variables processed.
         *
         * @param string $recipient_field
         *
         * @return bool
         */
        public function is_recipient_the_primary_customer($recipient_field)
        {
        }
        /**
         * Process the URLs in an SMS body.
         * - Maybe converts URLs to trackable URLs
         * - Maybe shortens URL
         *
         * @since 4.3.2
         *
         * @param string $sms
         *
         * @return string
         */
        public function process_urls_in_sms($sms)
        {
        }
        /**
         * Processes a single URL in the SMS body.
         *
         * @param string $url
         *
         * @return string
         */
        public function callback_process_url($url)
        {
        }
    }
    /**
     * @class Action_Customer_Add_Tags
     */
    class Action_Customer_Add_Tags extends \AutomateWoo\Action
    {
        public $required_data_items = ['customer'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Customer_Remove_Tags
     */
    class Action_Customer_Remove_Tags extends \AutomateWoo\Action_Customer_Add_Tags
    {
        function load_admin_details()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Subscription_Update_Meta
     * @since 4.2
     */
    class Action_Subscription_Update_Meta extends \AutomateWoo\Action_Order_Update_Meta
    {
        public $required_data_items = ['subscription'];
        function load_admin_details()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Change_Post_Status
     * @since 2.0.0
     */
    class Action_Change_Post_Status extends \AutomateWoo\Action
    {
        public $required_data_items = ['post'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Add_To_Mad_Mimi_List
     */
    class Action_Add_To_Mad_Mimi_List extends \AutomateWoo\Action
    {
        public $required_data_items = ['customer'];
        function load_admin_details()
        {
        }
        function check_requirements()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Action_Active_Campaign_Create_Contact
     * @since 2.0
     */
    class Action_Active_Campaign_Create_Contact extends \AutomateWoo\Action_Active_Campaign_Abstract
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function run()
        {
        }
    }
    /**
     * @class Workflow
     */
    class Workflow
    {
        const POST_TYPE = 'aw_workflow';
        /** @var int */
        public $id;
        /** @var \WP_Post */
        public $post;
        /** @var string */
        public $title;
        /** @var Trigger */
        private $trigger;
        /** @var Actions[] */
        private $actions;
        /** @var Data_Layer */
        private $data_layer;
        /** @var Variables_Processor */
        private $variable_processor;
        /** @var Workflow_Location */
        private $location;
        /** @var Workflow_Location  */
        private $tax_location;
        /** @var Log */
        public $log;
        /** @var bool */
        public $exists = false;
        /** @var bool */
        public $preview_mode = false;
        /** @var bool */
        public $test_mode = false;
        /** @var bool */
        public $is_setup = false;
        /**
         * @param $post mixed (object or post ID)
         */
        function __construct($post)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * Set workflow ID.
         *
         * @since 5.1.0
         * @param int $id
         */
        public function set_id(int $id)
        {
        }
        /**
         * @return string
         */
        function get_title()
        {
        }
        /**
         * @return string
         */
        function get_date_created()
        {
        }
        /**
         * Get the workflow type.
         *
         * @since 5.0.0
         * @return string A valid workflow type.
         */
        public function get_type()
        {
        }
        /**
         * Set the workflow type.
         *
         * @since 5.0.0
         * @param string $type
         * @throws InvalidArgumentException If $type param is invalid.
         */
        public function set_type($type)
        {
        }
        /**
         * @return Variables_Processor
         */
        function variable_processor()
        {
        }
        /**
         * Process a single variable string and return the value.
         *
         * For example: "customer.email" or "order.items | template: 'order-table'"
         * This method should only be used if the workflow has a data layer.
         *
         * @since 4.4.0
         *
         * @param string $variable_string
         *
         * @return string
         */
        function process_variable($variable_string)
        {
        }
        /**
         * @return Data_Layer
         */
        function data_layer()
        {
        }
        /**
         * @return Trigger|ManualInterface|false
         */
        function get_trigger()
        {
        }
        /**
         * @return Action[]
         */
        function get_actions()
        {
        }
        /**
         * Returns the saved actions with their data
         *
         * @param $number
         * @return Action|false
         */
        function get_action($number)
        {
        }
        /**
         * @param Data_Layer|array $data_layer
         * @param bool $skip_validation
         * @param bool $force_immediate
         */
        function maybe_run($data_layer, $skip_validation = false, $force_immediate = false)
        {
        }
        /**
         * Check if workflow is missing some required data.
         *
         * This must be run after the setup() method.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function is_missing_required_data()
        {
        }
        /**
         * @return bool
         */
        function validate_workflow()
        {
        }
        /**
         * @return bool
         */
        function validate_rules()
        {
        }
        /**
         * Returns true if rule is missing data so that the rule is skipped
         *
         * @param array $rule
         * @return bool
         */
        function validate_rule($rule)
        {
        }
        /**
         * @return bool
         */
        function run()
        {
        }
        /**
         * Reset the workflow object
         * Clears any data that is related to the last run
         * The trigger and actions don't need to be reset because their data flows from the workflow options not the workflow data layer
         */
        function reset_data()
        {
        }
        /**
         * Create queued event for the workflow.
         *
         * @return Queued_Event|false
         */
        function queue()
        {
        }
        /**
         * Get the date the workflow should be queued for.
         *
         * @since 5.0.0
         *
         * @return DateTime|bool
         */
        public function get_queue_date()
        {
        }
        /**
         * Setup the state of the workflow before it is validated or checked
         * @param array|Data_Layer|bool $data
         */
        function setup($data = false)
        {
        }
        /**
         * Clean up after workflow run
         */
        function cleanup()
        {
        }
        /**
         * Record that the workflow has been run
         */
        function create_run_log()
        {
        }
        /**
         * @return int
         */
        function get_times_run()
        {
        }
        /**
         * @param bool $try_cache
         * @return int|string
         */
        function get_current_queue_count($try_cache = true)
        {
        }
        /**
         * @param string $name
         * @param bool $replace_vars
         * @return mixed
         */
        function get_option($name, $replace_vars = false)
        {
        }
        /**
         * Returns options are immediately, delayed, scheduled, datetime
         * @since 2.9
         * @return string
         */
        function get_timing_type()
        {
        }
        /**
         * Return the delay period in seconds
         *
         * @since 2.9
         * @param integer|null $current_timestamp the current timestamp, used for calculating 'month' delays.
         * @return integer
         */
        public function get_timing_delay($current_timestamp = null)
        {
        }
        /**
         * @return int
         */
        function get_timing_delay_number()
        {
        }
        /**
         * @return string
         */
        function get_timing_delay_unit()
        {
        }
        /**
         * Calculate the next point in time that matches the workflow scheduling options
         * @param bool|integer $current_timestamp - optional, not GMT
         * @return bool|DateTime
         */
        function calculate_scheduled_datetime($current_timestamp = false)
        {
        }
        /**
         * @return string
         */
        function get_scheduled_time()
        {
        }
        /**
         * Returns empty if set to any day, 1 (for Monday) through 7 (for Sunday)
         * @return array
         */
        function get_scheduled_days()
        {
        }
        /**
         * @return DateTime|bool
         */
        function get_fixed_time()
        {
        }
        /**
         * Get scheduled date as set by variable timing option
         * @return DateTime|bool
         */
        function get_variable_time()
        {
        }
        /**
         * Get the name of the workflow's trigger.
         *
         * @since 4.4.0
         *
         * @return string
         */
        function get_trigger_name()
        {
        }
        /**
         * Set the trigger for the workflow.
         *
         * @since 4.4.0
         *
         * @param $trigger_name
         */
        function set_trigger_name($trigger_name)
        {
        }
        /**
         * Get the workflow trigger options.
         * Values will be sanitized as per the fields set on the trigger object.
         *
         * @return array
         */
        function get_trigger_options()
        {
        }
        /**
         * Set the workflow trigger options.
         *
         * Also saves the trigger name if it's different.
         *
         * @since 4.4.0
         *
         * @param string $trigger_name
         * @param array  $trigger_options
         */
        function set_trigger_data($trigger_name, $trigger_options)
        {
        }
        /**
         * Get's the sanitized value of workflow trigger option.
         *
         * @param string $name
         * @param bool|string $default used when value is not set, this should only be if the option was added workflow was created
         *
         * @return mixed Will vary depending on the field type specified in the trigger's fields.
         */
        function get_trigger_option($name, $default = false)
        {
        }
        /**
         * Sanitizes an array of trigger data based on the fields of the trigger.
         *
         * @since 4.4.0
         *
         * @param string $trigger_name
         * @param array  $raw_options
         *
         * @return array
         */
        function sanitize_trigger_options($trigger_name, $raw_options)
        {
        }
        /**
         * Get actions data for the workflow.
         *
         * Values will be formatted as per the fields set on the action object.
         *
         * @since 4.4.0
         * @since 4.8.0 Added formatting to the fields.
         *
         * @return array
         */
        function get_actions_data()
        {
        }
        /**
         * Set the workflow actions data.
         *
         * Values will be sanitized as per the fields set on the action object. Data is
         * only sanitized before write, not before read.
         *
         * todo: Update data structure to use separate name and options keys
         *
         * @since 4.4.0
         *
         * @param array $raw_actions_data
         */
        function set_actions_data($raw_actions_data)
        {
        }
        /**
         * Sanitizes a array of action fields for a single action.
         *
         * @since 4.4.0
         *
         * @param array $action_fields
         *
         * @return array
         */
        function sanitize_action_fields($action_fields)
        {
        }
        /**
         * Format action fields according to the field type.
         *
         * @since 4.8.0
         *
         * @param array $action_fields
         *
         * @return array
         */
        public function format_action_fields($action_fields)
        {
        }
        /**
         * @param array $rule_options
         */
        function set_rule_data($rule_options)
        {
        }
        /**
         * @return array
         */
        function get_rule_data()
        {
        }
        /**
         * Get the number of rule groups on the workflow.
         *
         * @since 5.0.0
         *
         * @return int
         */
        public function get_rule_group_count()
        {
        }
        /**
         * Sanitizes all rule groups for a workflow.
         *
         * @since 4.4.0
         *
         * @param array $options
         *
         * @return array
         */
        function sanitize_rule_options($options)
        {
        }
        /**
         * Sanitizes a single rule.
         *
         * @param array $rule_fields
         *
         * @return array
         * @since 4.3.0
         */
        public function sanitize_rule_option($rule_fields)
        {
        }
        /**
         * Returns the log currently created by this workflow run.
         * If false is returned the log record may not have been created.
         *
         * @return Log|bool
         */
        function get_current_log()
        {
        }
        /**
         * Check if workflow is exempt from unsubscribing and allow filtering of unsubscribed prop.
         *
         * @param Customer $customer
         * @return bool
         */
        function is_customer_unsubscribed($customer)
        {
        }
        /**
         * Returns false if the workflow is exempt from unsubscribing.
         *
         * @param Customer $customer
         * @return bool|string
         */
        function get_unsubscribe_url($customer)
        {
        }
        /**
         * @return bool
         */
        function is_exempt_from_unsubscribing()
        {
        }
        /**
         * @param $user \WP_User or guest user
         *
         * @return bool
         */
        function is_first_run_for_user($user)
        {
        }
        /**
         * Counts items in log and in queue for this user and workflow
         *
         * @param $user \WP_User|Order_Guest
         * @return int
         */
        function get_times_run_for_user($user)
        {
        }
        /**
         * Counts items in log and in queue for this user and workflow
         *
         * @param Customer $customer
         * @return int
         */
        function get_run_count_for_customer($customer)
        {
        }
        /**
         * @param \WC_Order $order
         * @return int
         */
        function get_run_count_for_order($order)
        {
        }
        /**
         * Get times this workflow has run for a given subscription.
         *
         * @since 5.0.0
         *
         * @param WC_Subscription $subscription
         *
         * @return int
         */
        public function get_run_count_for_subscription(\WC_Subscription $subscription)
        {
        }
        /**
         * Counts items in log and in queue for this guest and workflow
         *
         * @param $guest Guest
         * @return int
         */
        function get_times_run_for_guest($guest)
        {
        }
        /**
         * Checks the logs to see if a workflow has already run for set data items.
         * This checks the log and the queue if necessary.
         *
         * The $within_timeframe parameter defines how far back to look for when the workflow has run.
         * If $timeframe is false then the query looks for all time.
         *
         * @since 3.8
         *
         * @param array|string $query_data_items Use the ID of the data item/s. When multiple values are supplied an AND query is used.
         *                                       E.g. Setting a product and customer will check if the workflow has run previously
         *                                       for the same product AND the same customer.
         * @param int|false    $within_timeframe in seconds
         * @param bool         $skip_queue_query
         *
         * @return bool
         */
        function has_run_for_data_item($query_data_items, $within_timeframe = false, $skip_queue_query = false)
        {
        }
        /**
         * @param $name
         * @param $item
         */
        function set_data_item($name, $item)
        {
        }
        /**
         * @param array|Data_Layer $data_layer
         * @param bool $reset_workflow_data
         */
        function set_data_layer($data_layer, $reset_workflow_data)
        {
        }
        /**
         * Retrieve and validate a data item
         *
         * @param $name string
         * @return mixed
         */
        function get_data_item($name)
        {
        }
        /**
         * Is workflow active.
         *
         * @return bool
         */
        public function is_active()
        {
        }
        /**
         * Get workflow status.
         *
         * Possible statuses are active|disabled|trash
         *
         * @since 4.6
         *
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string $status active|disabled or publish|aw-disabled
         */
        function update_status($status)
        {
        }
        /**
         * @return bool
         */
        function is_tracking_enabled()
        {
        }
        /**
         * @return bool
         */
        function is_conversion_tracking_enabled()
        {
        }
        /**
         * @return bool
         */
        function is_ga_tracking_enabled()
        {
        }
        /**
         * @return string
         */
        function get_ga_tracking_params()
        {
        }
        /**
         * @param string $url
         * @return string
         */
        function append_ga_tracking_to_url($url)
        {
        }
        /**
         * @return false|string
         */
        function get_language()
        {
        }
        /**
         * Return array with all versions of this workflow including the original
         * @return array
         */
        function get_translation_ids()
        {
        }
        /**
         * @param $key
         * @param bool $single
         * @return mixed
         */
        function get_meta($key, $single = true)
        {
        }
        /**
         * @param $key
         * @param $value
         * @return bool|int
         */
        public function update_meta($key, $value)
        {
        }
        /**
         * Enabling preview mode also enables test mode
         */
        function enable_preview_mode()
        {
        }
        /**
         * Enable test mode
         */
        function enable_test_mode()
        {
        }
        /**
         * @return bool
         */
        function is_test_mode()
        {
        }
        /**
         * @return bool
         */
        function is_preview_mode()
        {
        }
        /**
         * @param Action $action
         * @param $note
         */
        function log_action_note($action, $note)
        {
        }
        /**
         * @param Action $action
         * @param $error
         */
        function log_action_error($action, $error)
        {
        }
        /**
         * Logs the error response from the Mailer class.
         * Separates true mail errors from unsubscribes and blacklist errors and logs them accordingly.
         *
         * @param \WP_Error $error
         * @param Action $action
         */
        function log_action_email_error($error, $action)
        {
        }
        /**
         * Returns the location based on the customer in the workflow data layer.
         *
         * @return Workflow_Location
         */
        function get_location()
        {
        }
        /**
         * @return Workflow_Location
         */
        function get_tax_location()
        {
        }
        /**
         * Set tax location for the current workflow user
         *
         * @param $location
         * @param $tax_class
         * @return array
         */
        function filter_tax_location($location, $tax_class)
        {
        }
        /**
         * @param $name
         * @param $item
         * @deprecated
         */
        function add_data_item($name, $item)
        {
        }
        /**
         * @deprecated use log_action_note
         * @param Action $action
         * @param $note
         */
        function add_action_log_note($action, $note)
        {
        }
        /**
         * Get an action based on field data.
         *
         * @since 4.8.0
         *
         * @param array $field_data
         *
         * @return Action The action object for the data.
         * @throws Exception When the Action could not be resolved to an object.
         */
        public function get_action_from_action_fields($field_data)
        {
        }
    }
    /**
     * @class Queue_Query
     * @since 2.1.0
     */
    class Queue_Query extends \AutomateWoo\Query_Data_Layer_Abstract
    {
        /** @var string */
        public $table_id = 'queue';
        /** @var string  */
        protected $model = 'AutomateWoo\\Queued_Event';
        /** @var string  */
        public $meta_table_id = 'queue-meta';
        /**
         * @since 3.8
         * @param int|array $workflow_id
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_workflow($workflow_id, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $date
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_date_due($date, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param bool $failed
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_failed($failed, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $date
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_date_created($date, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param $start_date
         * @param $end_date
         * @return $this
         */
        function where_date_created_between($start_date, $end_date)
        {
        }
        /**
         * @since 4.0
         * @param Customer $customer
         * @param bool $include_guest_matches include matching guest results
         * @param bool $include_advocate_matches
         * @return $this
         */
        function where_customer_or_legacy_user($customer, $include_guest_matches = false, $include_advocate_matches = false)
        {
        }
        /**
         * @since 3.8
         * @param string $data_type
         * @return string
         */
        function get_data_layer_meta_key($data_type)
        {
        }
        /**
         * @since 3.8
         * @param string $data_type
         * @param mixed $data_object
         * @return string
         */
        function get_data_layer_meta_value($data_type, $data_object)
        {
        }
        /**
         * @return Queued_Event[]
         */
        function get_results()
        {
        }
    }
}
namespace AutomateWoo\Orders {
    /**
     * Class StatusTransition.
     *
     * @since 5.2.0
     */
    class StatusTransition
    {
        /**
         * @var string
         */
        protected $old_status;
        /**
         * @var string
         */
        protected $new_status;
        /**
         * StatusTransition constructor.
         *
         * @param string $old_status
         * @param string $new_status
         */
        public function __construct(string $old_status, string $new_status)
        {
        }
        /**
         * @return string
         */
        public function get_old_status() : string
        {
        }
        /**
         * @return string
         */
        public function get_new_status() : string
        {
        }
        /**
         * Is the order transitioning from an unpaid to paid status?
         *
         * @return bool
         */
        public function is_becoming_paid() : bool
        {
        }
        /**
         * Is the order transitioning from a paid to unpaid status?
         *
         * @return bool
         */
        public function is_becoming_unpaid() : bool
        {
        }
        /**
         * Is the order transitioning from an uncounted to counted status?
         *
         * @return bool
         */
        public function is_becoming_counted() : bool
        {
        }
        /**
         * Is the order transitioning from a counted to uncounted status?
         *
         * @return bool
         */
        public function is_becoming_uncounted() : bool
        {
        }
    }
}
namespace AutomateWoo\Orders\Observers\Traits {
    /**
     * Trait HandleOrderStatusChanged
     *
     * @since 5.2.0
     */
    trait HandleOrderStatusChanged
    {
        /**
         * Handle an order status change.
         *
         * @param WC_Order         $order
         * @param StatusTransition $transition
         */
        protected abstract function handle_order_status_changed(\WC_Order $order, \AutomateWoo\Orders\StatusTransition $transition);
        /**
         * Add hooks.
         */
        protected function add_handle_order_status_changed_hooks()
        {
        }
        /**
         * Handle the initial order status change action.
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         */
        public function handle_initial_order_status_changed(int $order_id, string $old_status, string $new_status)
        {
        }
    }
    /**
     * Trait HandleOrderDeleted
     *
     * @since 5.2.0
     */
    trait HandleOrderDeleted
    {
        /**
         * Handle before order is deleted or trashed.
         *
         * @param WC_Order $order
         */
        protected abstract function handle_order_deleted(\WC_Order $order);
        /**
         * Add hooks.
         */
        protected function add_handle_order_deleted_hooks()
        {
        }
        /**
         * Handle initial post trash and deletion.
         * Triggered when the posts table is used for orders.
         *
         * @param int $post_id
         */
        public function handle_post_trashed_or_deleted(int $post_id)
        {
        }
        /**
         * Handle initial order trash and deletion.
         * Triggered when HPOS is enabled.
         *
         * @param int      $order_id
         * @param WC_Order $order
         */
        public function handle_order_trashed_or_deleted(int $order_id, \WC_Order $order)
        {
        }
    }
}
namespace AutomateWoo\Orders\Observers {
    /**
     * Class GuestMostRecentOrderUpdater
     *
     * Updates the guests most recent order prop based on order activity.
     *
     * @since 5.2.0
     */
    class GuestMostRecentOrderUpdater
    {
        use \AutomateWoo\Orders\Observers\Traits\HandleOrderStatusChanged, \AutomateWoo\Orders\Observers\Traits\HandleOrderDeleted;
        /**
         * Register hooks.
         */
        public function register()
        {
        }
        /**
         * Handle an order status change.
         *
         * @param WC_Order         $order
         * @param StatusTransition $transition
         */
        protected function handle_order_status_changed(\WC_Order $order, \AutomateWoo\Orders\StatusTransition $transition)
        {
        }
        /**
         * Handle before order is deleted or trashed.
         *
         * @param WC_Order $order
         */
        protected function handle_order_deleted(\WC_Order $order)
        {
        }
        /**
         * Recalculate last_purchased date for customer.
         *
         * @param WC_Order $order
         */
        protected function process_update(\WC_Order $order)
        {
        }
    }
    /**
     * Class CustomerLastPurchasedDateUpdater
     *
     * Updates the 'last_purchased' customer field based on order activity.
     *
     * @since 5.2.0
     */
    class CustomerLastPurchasedDateUpdater
    {
        use \AutomateWoo\Orders\Observers\Traits\HandleOrderStatusChanged, \AutomateWoo\Orders\Observers\Traits\HandleOrderDeleted;
        /**
         * @var ActionSchedulerInterface
         */
        protected $action_scheduler;
        /**
         * CustomerLastPurchasedDateUpdater constructor.
         *
         * @param ActionSchedulerInterface $action_scheduler
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler)
        {
        }
        /**
         * Register hooks.
         */
        public function register()
        {
        }
        /**
         * Handle an order status change.
         *
         * @param WC_Order         $order
         * @param StatusTransition $transition
         */
        protected function handle_order_status_changed(\WC_Order $order, \AutomateWoo\Orders\StatusTransition $transition)
        {
        }
        /**
         * Handle before order is deleted or trashed.
         *
         * @param WC_Order $order
         */
        protected function handle_order_deleted(\WC_Order $order)
        {
        }
        /**
         * @param int $customer_id
         */
        public function process_async_update(int $customer_id)
        {
        }
        /**
         * Recalculate last_purchased date for customer.
         *
         * @param Customer $customer
         */
        protected function process_update(\AutomateWoo\Customer $customer)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Class to manage admin notices.
     *
     * @since   4.7.0
     * @package AutomateWoo
     */
    class AdminNotices
    {
        /**
         * Store of admin notices.
         *
         * @var array
         */
        private static $notices;
        /**
         * Whether notices have been changed and need to be saved.
         *
         * @var bool
         */
        private static $has_changes = false;
        /**
         * Define whether AdminNotices::init() has run.
         *
         * @var bool
         */
        private static $did_init = false;
        /**
         * Init admin notices.
         */
        public static function init()
        {
        }
        /**
         * Get current admin notices.
         *
         * @return array
         */
        public static function get_notices()
        {
        }
        /**
         * Add a notice.
         *
         * @param string $name
         */
        public static function add_notice($name)
        {
        }
        /**
         * Remove a notice.
         *
         * @param string $name
         */
        public static function remove_notice($name)
        {
        }
        /**
         * Save notices to database.
         */
        public static function save_notices()
        {
        }
        /**
         * Output admin notices.
         */
        public static function output_notices()
        {
        }
        /**
         * Remove notice by ajax request.
         */
        public static function handle_ajax_remove_notice()
        {
        }
        /**
         * Output the notice about upcoming minimum requirements changes.
         *
         * @since 4.9.5
         */
        private static function output_requirements_changes_notice()
        {
        }
    }
    /**
     * @class Database_Table
     * @since 2.8.2
     */
    abstract class Database_Table
    {
        /** @var string */
        protected $name;
        /** @var string */
        public $primary_key;
        /** @var string (only for meta tables) */
        public $object_id_column;
        /** @var int */
        public $max_index_length = 191;
        /**
         * Getter method for inaccessible class properties.
         *
         * @since 5.0.0
         *
         * @param string $key The name of the class property to retrieve.
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @return array
         */
        public abstract function get_columns();
        /**
         * Get SQL-escaped table name.
         *
         * @since 4.6.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get SQL-escaped object ID column.
         *
         * @since 4.6.0
         *
         * @return string
         */
        public function get_object_id_column()
        {
        }
        /**
         * @return string
         * @since 2.9.9
         */
        public function get_install_query()
        {
        }
        /**
         * Install the database table
         */
        public function install()
        {
        }
        /**
         * @return string
         */
        public function get_collate()
        {
        }
    }
}
namespace AutomateWoo\DatabaseTables {
    /**
     * Guest meta database table class.
     *
     * @since 2.9
     */
    class GuestMeta extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * CustomerMeta database table class.
     *
     * @since 4.6.0
     * @package AutomateWoo
     */
    class CustomerMeta extends \AutomateWoo\Database_Table
    {
        /**
         * CustomerMeta constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get table columns.
         *
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * Get table install SQL.
         *
         * @return string
         */
        public function get_install_query()
        {
        }
    }
    /**
     * Log meta database table class.
     *
     * @since 2.8.2
     */
    class LogMeta extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Events database table class.
     *
     * @since 3.4.0
     */
    class Events extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Guests database table class.
     *
     * @since 2.8.2
     */
    class Guests extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Carts database table class.
     *
     * @since 2.8.2
     */
    class Carts extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Queue database table class.
     *
     * @since 2.8.2
     */
    class Queue extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Logs database table class.
     *
     * @since 2.8.2
     */
    class Logs extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Customers database table class.
     *
     * @since 3.0.0
     */
    class Customers extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
    /**
     * Queue meta database table class.
     *
     * @since 2.9.7
     */
    class QueueMeta extends \AutomateWoo\Database_Table
    {
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_columns()
        {
        }
        /**
         * @return string
         */
        function get_install_query()
        {
        }
    }
}
namespace AutomateWoo\Rules {
    /**
     * @class Rule
     */
    abstract class Rule
    {
        /** @var string */
        public $name;
        /** @var string */
        public $title;
        /** @var string */
        public $group;
        /** @var string string|number|object|select  */
        public $type;
        /**
         * Define the data type used by the rule.
         * This is a required property.
         *
         * @var string
         */
        public $data_item;
        /** @var array  */
        public $compare_types = [];
        /** @var \AutomateWoo\Workflow */
        private $workflow;
        /** @var bool - e.g meta rules have 2 value fields so their value data is an stored as an array */
        public $has_multiple_value_fields = false;
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * Init the rule.
         */
        public abstract function init();
        /**
         * Validates that a given workflow data item passed the rule validation
         * based on the supplied $compare_type and $value.
         *
         * @param mixed  $data_item    A valid workflow data item e.g. an instance of `\WC_Order` for an order based rule.
         * @param string $compare_type The user selected compare type for the rule.
         * @param mixed  $value        The user entered value for the rule. This value is validated by the validate_value() method beforehand.
         *
         * @return bool
         */
        public abstract function validate($data_item, $compare_type, $value);
        /**
         * @param $workflow
         */
        function set_workflow($workflow)
        {
        }
        /**
         * @return \AutomateWoo\Workflow
         */
        function get_workflow()
        {
        }
        /**
         * @since 4.2
         * @return \AutomateWoo\Data_Layer
         */
        function data_layer()
        {
        }
        /**
         * Get is/is not compare types.
         *
         * @since 4.6
         *
         * @return array
         */
        public function get_is_or_not_compare_types()
        {
        }
        /**
         * @return array
         */
        function get_string_compare_types()
        {
        }
        /**
         * @return array
         */
        function get_multi_string_compare_types()
        {
        }
        /**
         * @return array
         */
        function get_float_compare_types()
        {
        }
        /**
         * @return array
         */
        function get_integer_compare_types()
        {
        }
        /**
         * Get multi-select match compare types.
         *
         * @since 4.6
         *
         * @return array
         */
        public function get_multi_select_compare_types()
        {
        }
        /**
         * Get includes or not includes compare types.
         *
         * @since 4.6
         *
         * @return array
         */
        public function get_includes_or_not_compare_types()
        {
        }
        /**
         * @param $compare_type
         * @return bool
         */
        function is_string_compare_type($compare_type)
        {
        }
        /**
         * @param $compare_type
         * @return bool
         */
        function is_integer_compare_type($compare_type)
        {
        }
        /**
         * @param $compare_type
         * @return bool
         */
        function is_float_compare_type($compare_type)
        {
        }
        /**
         * @param $compare_type
         * @return bool
         */
        function is_is_or_is_not_compare_type($compare_type)
        {
        }
        /**
         * Validate a string based rule value.
         *
         * @param string $actual_value
         * @param string $compare_type
         * @param string $expected_value
         *
         * @return bool
         */
        function validate_string($actual_value, $compare_type, $expected_value)
        {
        }
        /**
         * Only supports 'contains', 'is', 'starts_with', 'ends_with'
         *
         * @param array $actual_values
         * @param string $compare_type
         * @param string $expected_value
         * @return bool
         */
        function validate_string_multi($actual_values, $compare_type, $expected_value)
        {
        }
        /**
         * @param $actual_value
         * @param $compare_type
         * @param $expected_value
         * @return bool
         */
        function validate_number($actual_value, $compare_type, $expected_value)
        {
        }
        /**
         * @param $number
         * @return bool
         */
        function is_whole_number($number)
        {
        }
        /**
         * Determine the rule group based on it's title.
         *
         * If the group prop is already set that will be used.
         *
         * @since 4.5.0
         *
         * @return string
         */
        public function determine_rule_group()
        {
        }
        /**
         * Validates string regex rule.
         *
         * @since 4.6.0
         *
         * @param string $string
         * @param string $regex
         *
         * @return bool
         */
        protected function validate_string_regex($string, $regex)
        {
        }
        /**
         * Remove the global regex modifier as it is not supported by PHP.
         *
         * @since 4.6.0
         *
         * @param string $regex
         *
         * @return string
         */
        protected function remove_global_regex_modifier($regex)
        {
        }
        /**
         * Sanitizes the rule's value.
         *
         * This method runs before WRITING a value to the DB but doesn't run before READING.
         *
         * @since 4.6.0
         *
         * @param mixed $value
         *
         * @return mixed
         */
        public function sanitize_value($value)
        {
        }
        /**
         * Formats a rule's value for display in the rules UI.
         *
         * @since 4.6.0
         *
         * @param mixed $value
         *
         * @return mixed
         */
        public function format_value($value)
        {
        }
        /**
         * Validate the rule's user entered value.
         *
         * @since 5.1.0
         *
         * @param mixed $value
         *
         * @throws UnexpectedValueException When the value is not valid.
         */
        public function validate_value($value)
        {
        }
    }
    /**
     * Class Select_Rule_Abstract.
     *
     * @since 4.6
     * @package AutomateWoo\Rules
     */
    abstract class Select_Rule_Abstract extends \AutomateWoo\Rules\Rule
    {
        /**
         * The rule type.
         *
         * @var string
         */
        public $type = 'select';
        /**
         * Allow multiple selections?
         *
         * @var bool
         */
        public $is_multi = false;
        /**
         * Init rule.
         */
        public function init()
        {
        }
        /**
         * Validate a select rule.
         *
         * @param string|array $actual Will be an array when is_multi prop is true.
         * @param string       $compare_type
         * @param array|string $expected
         *
         * @return bool
         */
        public function validate_select($actual, $compare_type, $expected)
        {
        }
        /**
         * Validate select rule, but case insensitive.
         *
         * @since 4.4.0
         *
         * @param array|string $actual Will be an array when is_multi prop is true.
         * @param string       $compare_type
         * @param array|string $expected
         *
         * @return bool
         */
        public function validate_select_case_insensitive($actual, $compare_type, $expected)
        {
        }
    }
    /**
     * Class Preloaded_Select_Rule_Abstract
     *
     * @since 4.6
     * @package AutomateWoo\Rules
     */
    abstract class Preloaded_Select_Rule_Abstract extends \AutomateWoo\Rules\Select_Rule_Abstract
    {
        /**
         * Cached select options. Leave public for JSON.
         *
         * @var array
         */
        public $select_choices;
        /**
         * Load select choices for rule.
         *
         * @return array
         */
        public function load_select_choices()
        {
        }
        /**
         * Get the select choices for the rule.
         *
         * Choices are cached in memory.
         *
         * @return array
         */
        public function get_select_choices()
        {
        }
    }
    /**
     * @deprecated in favour of Preloaded_Select_Rule_Abstract
     */
    abstract class Abstract_Select extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        /**
         * Select_Rule_Abstract constructor.
         */
        public function __construct()
        {
        }
    }
}
namespace AutomateWoo\Rules\Interfaces {
    /**
     * Interface QuickFilterable
     *
     * @since 5.0.0
     * @package AutomateWoo\Rules
     */
    interface QuickFilterable
    {
        /**
         * Get quick filter clause for this rule.
         *
         * Quick filter clauses are used to get reduce the number of possible matches for a workflow.
         *
         * For example, with the order status rule, quick filtering will reduce the total possible order matches
         * by adding a 'post_status' arg to the database query.
         *
         * Quick filtering lets us get a rough idea of how many possible matches there are for a workflow based on its rules.
         *
         * Please note that not all rules will be able to support quick filtering.
         *
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @throws Exception When there's an error getting the clause.
         *
         * @return ClauseInterface|ClauseInterface[] A single clause or an array of clauses.
         */
        public function get_quick_filter_clause($compare_type, $value);
    }
}
namespace AutomateWoo\Rules {
    /**
     * Abstract date class for rules.
     *
     * @since 4.4
     */
    abstract class Abstract_Date extends \AutomateWoo\Rules\Rule
    {
        /**
         * The type.
         *
         * @var string
         */
        public $type = 'date';
        /**
         * We use multiple values to assimilate time frame and time measure.
         *
         * @var bool
         */
        public $has_multiple_value_fields = true;
        /**
         * Is it future?
         *
         * @var bool
         */
        public $has_is_future_comparision = false;
        /**
         * Is it past?
         *
         * @var bool
         */
        public $has_is_past_comparision = false;
        /**
         * Is after specific date?
         *
         * @var bool
         */
        public $has_is_after = true;
        /**
         * Is before specific date?
         *
         * @var bool
         */
        public $has_is_before = true;
        /**
         * Is it on a specific date date?
         *
         * @var bool
         */
        public $has_is_on = true;
        /**
         * Is not on a specific date?
         *
         * @var bool
         */
        public $has_is_not_on = true;
        /**
         * Only one date per rule.
         *
         * @var bool
         */
        public $is_multi = false;
        /**
         * Is day of the week.
         *
         * @var bool
         */
        public $has_days_of_the_week = true;
        /**
         * Is between dates.
         *
         * @var bool
         */
        public $has_is_between_dates = true;
        /**
         * Is not set?
         *
         * @var bool
         */
        public $has_is_not_set = true;
        /**
         * Is set?
         *
         * @var bool
         */
        public $has_is_set = true;
        /**
         * Our rule uses datepicker?
         *
         * @var bool
         */
        public $uses_datepicker = false;
        /**
         * Rule select options.
         *
         * @var array
         */
        public $select_choices;
        /**
         * Abstract_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Validates a timeframe between dates and that the timeframe is the expected.
         *
         * @param DateTime $date      The date to validate.
         * @param string   $compare   Date compare type: is_in_the_next, is_not_in_the_next, is_in_the_last, is_not_in_the_last
         * @param int      $timeframe The timeframe we want to validate.
         * @param string   $measure   Days or Hours.
         *
         * @return bool
         */
        protected function validate_date_diff($date, $compare, $timeframe, $measure)
        {
        }
        /**
         * Are we running a in/not in the next/last validation?
         *
         * @param string $compare Compare we want to run.
         *
         * @return bool
         */
        private function is_past_future_validation($compare)
        {
        }
        /**
         * Validates if a date is the same, based on Y-m-d format.
         *
         * @param DateTime $date1 First date.
         * @param DateTime $date2 Second date for comparision.
         *
         * @return bool
         */
        private function validate_same_date($date1, $date2)
        {
        }
        /**
         * Are we running a same/not same date validation?
         *
         * @param string $compare Compare we want to run.
         *
         * @return bool
         */
        private function is_same_date_validation($compare)
        {
        }
        /**
         * Validates if a date is after/before a second date.
         *
         * @param DateTime $date1       Is date1 before/after.
         * @param DateTime $date2       Date2?.
         * @param string   $comparision after/before.
         *
         * @return bool
         */
        private function validate_before_after_date($date1, $date2, $comparision)
        {
        }
        /**
         * Are we running a before/after validation?
         *
         * @param string $compare Compare we want to run.
         *
         * @return bool
         */
        private function is_before_after_validation($compare)
        {
        }
        /**
         * Validates that our day is of the days in the array.
         *
         * @param DateTime $date         Must be UTC.
         * @param array    $days_of_week Which days of the week we want to search against.
         *
         * @return bool
         */
        private function validate_is_day_of_week($date, $days_of_week)
        {
        }
        /**
         * Are we running a day_of_week validation?
         *
         * @param string $compare Compare we want to run.
         *
         * @return bool
         */
        private function is_days_of_week_validation($compare)
        {
        }
        /**
         * Validates that a date is between two other dates.
         *
         * All dates must be in the same timezone.
         *
         * @param DateTime $date Date that we are checking is between $from and $to
         * @param DateTime $from Date we are checking from.
         * @param DateTime $to   Date we are checking up to.
         *
         * @return bool
         */
        private function validate_is_between_dates($date, $from, $to)
        {
        }
        /**
         * Are we running a between_dates validation?
         *
         * @param string $compare Compare we want to run.
         *
         * @return bool
         */
        private function is_between_dates_validation($compare)
        {
        }
        /**
         * Validates that we're passing a correct number of days and we're checking more than 0 days.
         *
         * @param string         $compare What variables we're using to compare.
         * @param array|int      $value   The value to compare.
         * @param DateTime|false $date    The date used for the comparision. Must be UTC.
         *
         * @return bool
         */
        public function validate_date($compare, $value, $date)
        {
        }
        /**
         * Attempts to do a more logical validation for empty dates.
         *
         * This method will ALWAYS validate true when using the comparative 'is_not_in_the_last' or 'is_not_in_the_next'.
         * This is because if you have the following rule 'workflow has not run for the customer in the last hour',
         * and in fact the workflow has NEVER run for the customer, it's more logical for validation to be true.
         *
         * Logically VALID comparatives for empty dates are:
         * - is_not_set Date is empty so 'is not set' is logically true
         * - is_not_in_the_next|is_not_in_the_last Date is empty so it has not happened AT ALL
         * - is_not_on Date is empty so it's 'not on' all dates, therefore validates true
         *
         * Logically INVALID comparatives for empty dates are:
         * - is_after|is_before It's not before or after any date
         * - is_on It's not 'on' any date
         * - is_in_the_next|is_in_the_last Date has not ever happened
         * - days_of_the_week Date didn't run on any day
         * - is_between Date can't be between any dates.
         *
         * @param string $comparative The type of comparison.
         *
         * @return bool
         */
        public function validate_logical_empty_date($comparative)
        {
        }
    }
}
namespace AutomateWoo\Rules\Utilities {
    /**
     * Trait TimestampQuickFilter
     *
     * @since   5.0.0
     * @package AutomateWoo\Rules\Utilities
     */
    trait DateQuickFilter
    {
        /**
         * Get quick filter clause for a date rule.
         *
         * All date values specified in rules are assumed to be in the site's timezone since they are user facing.
         *
         * // Todo handle logical empty dates, see \AutomateWoo\Rules\Abstract_Date::validate_logical_empty_date()
         *
         * @param string $property     The clause property.
         * @param string $compare_type Supports date-based compare types.
         * @param array  $rule_values
         *
         * @return ClauseInterface|DateTimeClause|SetClause
         *
         * @throws Exception When there's an error getting the clause.
         */
        protected function generate_date_quick_filter_clause($property, $compare_type, $rule_values)
        {
        }
        /**
         * Get quick filter clause for between 2 dates.
         *
         * @param string $property
         * @param string $from_date Expects a valid date string without a time set.
         * @param string $to_date   Expects a valid date string without a time set.
         * @param string $operator
         *
         * @return DateTimeClause
         * @throws Exception When there's an error getting the clause.
         */
        protected function generate_date_between_quick_filter_clause($property, $from_date, $to_date, $operator = 'BETWEEN')
        {
        }
    }
}
namespace AutomateWoo\Rules {
    /**
     * Subscription trial end date rule.
     *
     * @class Subscription_Trial_End_Date
     */
    class Subscription_Trial_End_Date extends \AutomateWoo\Rules\Abstract_Date implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\DateQuickFilter;
        /**
         * Data item.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Subscription_Trial_End_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates our rule.
         *
         * @param \WC_Subscription $subscription The subscription object.
         * @param string           $compare      Rule to compare.
         * @param array|null       $value        The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value = null)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Customer_Role
     */
    class Customer_Role extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param \AutomateWoo\Customer $customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
}
namespace AutomateWoo\Rules\Utilities {
    /**
     * Trait ArrayQuickFilter
     *
     * @since   5.0.0
     * @package AutomateWoo\Rules\Utilities
     */
    trait ArrayQuickFilter
    {
        /**
         * Get quick filter clause for this rule.
         *
         * @param string $property     The property to filter against.
         * @param string $compare_type Supports only simple array compare types 'is' or 'is_not'.
         *                             'matches_any', 'matches_all', 'matches_none' can't be quick filtered.
         * @param array  $value
         *
         * @return ClauseInterface
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        protected function generate_array_quick_filter_clause($property, $compare_type, $value)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Rule_Order_Payment_Gateway
     */
    class Rule_Order_Payment_Gateway extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         *
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause.
         *
         * @since 5.0.0
         *
         * @param mixed  $value
         * @param string $compare_type
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
}
namespace AutomateWoo\Rules {
    /**
     * Class Subscription_Payment_Method
     *
     * @package AutomateWoo\Rules
     */
    class Subscription_Payment_Method extends \AutomateWoo\Rule_Order_Payment_Gateway
    {
        /**
         * Define the data type used by the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Init rule.
         */
        public function init()
        {
        }
        /**
         * Load rule select choices.
         *
         * @return array
         */
        public function load_select_choices()
        {
        }
    }
}
namespace AutomateWoo\Rules\Utilities {
    /**
     * Trait NumericQuickFilter
     *
     * @since   5.0.0
     * @package AutomateWoo\Rules\Utilities
     */
    trait NumericQuickFilter
    {
        /**
         * Get quick filter clause for a numeric rule.
         *
         * @param string           $property     The property to filter against.
         * @param string           $compare_type Supports float and integer compare types.
         * @param float|int|string $value
         *
         * @return ClauseInterface
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        protected function generate_numeric_quick_filter_clause($property, $compare_type, $value)
        {
        }
    }
    /**
     * Trait DataTypeConditions
     *
     * @since   5.0.0
     * @package AutomateWoo\Rules\Utilities
     */
    trait DataTypeConditions
    {
        /**
         * Is a data type equal to 'order' or 'subscription'.
         *
         * @param string $data_type
         *
         * @return bool
         */
        protected function is_data_type_order_or_subscription($data_type)
        {
        }
    }
    /**
     * Trait StringQuickFilter
     *
     * @since   5.0.0
     * @package AutomateWoo\Rules\Utilities
     */
    trait StringQuickFilter
    {
        /**
         * Get quick filter clause for a string compare rule.
         *
         * @param string $property     The property to filter against.
         * @param string $compare_type Supports string-based compare types.
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws InvalidArgumentException When there's an error getting the clause.
         */
        protected function generate_string_quick_filter_clause($property, $compare_type, $value)
        {
        }
    }
}
namespace AutomateWoo\Rules {
    /**
     * Class Searchable_Select_Rule_Abstract.
     *
     * Base class for rules that use an AJAX search to find values.
     *
     * @since 4.6
     * @package AutomateWoo\Rules
     */
    abstract class Searchable_Select_Rule_Abstract extends \AutomateWoo\Rules\Select_Rule_Abstract
    {
        /**
         * The rule type.
         *
         * @var string
         */
        public $type = 'object';
        /**
         * The CSS class to use on the search field.
         *
         * @var string
         */
        public $class = 'automatewoo-json-search';
        /**
         * The field placeholder.
         *
         * @var string
         */
        public $placeholder;
        /**
         * Get the ajax action to use for the AJAX search.
         *
         * @return string
         */
        public abstract function get_search_ajax_action();
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Override this method to alter how saved values are displayed.
         *
         * @param string $value
         *
         * @return string
         */
        public function get_object_display_value($value)
        {
        }
    }
    /**
     * @class Abstract_Number
     */
    abstract class Abstract_Number extends \AutomateWoo\Rules\Rule
    {
        public $type = 'number';
        /**
         * Set whether the rule supports floats or only integers.
         *
         * @var bool
         */
        public $support_floats = true;
        function __construct()
        {
        }
        /**
         * Sanitizes the field value.
         *
         * Removes currency symbols, thousand separators and sets correct decimal places.
         *
         * @since 4.6.0
         *
         * @param string $value
         *
         * @return string
         */
        public function sanitize_value($value)
        {
        }
        /**
         * Formats a rule's value for display in the rules UI.
         *
         * @since 4.6.0
         *
         * @param string|int $value
         *
         * @return string
         */
        public function format_value($value)
        {
        }
    }
    /**
     * @class Customer_Run_Count
     */
    class Customer_Run_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param \AutomateWoo\Customer $customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * Class Order_Item_Total
     *
     * @since 4.9.0
     */
    class Order_Item_Total extends \AutomateWoo\Rules\Abstract_Number
    {
        /**
         * Data item the rule uses.
         *
         * @var string
         */
        public $data_item = 'order_item';
        /**
         * Support float values.
         *
         * @var bool
         */
        public $support_floats = true;
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule.
         *
         * @param \WC_Order_Item_Product $item
         * @param string                 $compare
         * @param string                 $value
         *
         * @return bool
         */
        public function validate($item, $compare, $value)
        {
        }
    }
    /**
     * Class Customer_2nd_Last_Order_Date
     *
     * @since 4.8.0
     *
     * @package AutomateWoo\Rules
     */
    class Customer_2nd_Last_Order_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * Define the data type used by the rule.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Customer_2nd_Last_Order_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validate rule.
         *
         * @param \AutomateWoo\Customer $customer
         * @param string                $compare
         * @param array                 $value
         *
         * @return bool
         */
        public function validate($customer, $compare, $value = null)
        {
        }
    }
    /**
     * @class Abstract_Bool
     */
    abstract class Abstract_Bool extends \AutomateWoo\Rules\Rule
    {
        public $type = 'bool';
        public $select_choices;
        function __construct()
        {
        }
    }
    /**
     * OrderIsCustomersFirst rule class.
     */
    class OrderIsCustomersFirst extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Status
     */
    class Order_Status extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param \WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param array  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * Class ShopCurrentDateTime.
     *
     * @since   5.1.0
     * @package AutomateWoo\Rules
     */
    class ShopCurrentDateTime extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * Data item type.
         *
         * @var string
         */
        public $data_item = 'shop';
        /**
         * Use is not set comparison.
         *
         * @var bool
         */
        public $has_is_set = false;
        /**
         * Use is not set comparison.
         *
         * @var bool
         */
        public $has_is_not_set = false;
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param ShopDataItem $shop
         * @param string       $compare
         * @param array|null   $value
         *
         * @return bool
         */
        public function validate($shop, $compare, $value = null)
        {
        }
    }
    /**
     * @class Cart_Item_Tags
     */
    class Cart_Item_Tags extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $cart \AutomateWoo\Cart
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($cart, $compare, $expected)
        {
        }
    }
    /**
     * @class Customer_Active_Membership_Plans
     */
    class Customer_Active_Membership_Plans extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * @class Subscription_Status
     */
    class Subscription_Status extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        public $data_item = 'subscription';
        function init()
        {
        }
        function load_select_choices()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($subscription, $compare, $value)
        {
        }
        /**
         * Get quick filter clause.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param array  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Abstract_Select_Single
     */
    abstract class Abstract_Select_Single extends \AutomateWoo\Rules\Rule
    {
        public $type = 'select';
        public $is_single_select = true;
        /** @var array - leave public for json */
        public $select_choices;
        /** @var string */
        public $placeholder;
        /**
         * Don't gather select choices on construct as there could be a lot of data
         * @return array
         */
        abstract function get_select_choices();
    }
    /**
     * @class Customer_Is_Mailchimp_Subscriber
     */
    class Customer_Is_Mailchimp_Subscriber extends \AutomateWoo\Rules\Abstract_Select_Single
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @return array
         */
        function get_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        public function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * Subscription_Has_Payment_Method rule class.
     *
     * @since 4.4.3
     */
    class Subscription_Has_Payment_Method extends \AutomateWoo\Rules\Abstract_Bool implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        /**
         * Data item for the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule.
         *
         * @param \WC_Subscription $subscription
         * @param string           $compare
         * @param string           $value
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value)
        {
        }
        /**
         * Get quick filter clause.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * Subscription next payment date rule.
     *
     * @class Subscription_Next_Payment_Date
     */
    class Subscription_Next_Payment_Date extends \AutomateWoo\Rules\Abstract_Date implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\DateQuickFilter;
        /**
         * Data item.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Subscription_Next_Payment_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates our rule.
         *
         * @param \WC_Subscription $subscription The subscription object.
         * @param string           $compare      Rule to compare.
         * @param array|null       $value        The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value = null)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Abstract_String
     */
    abstract class Abstract_String extends \AutomateWoo\Rules\Rule
    {
        public $type = 'string';
        function __construct()
        {
        }
    }
    /**
     * @class Customer_City
     */
    class Customer_City extends \AutomateWoo\Rules\Abstract_String
    {
        public $data_item = 'customer';
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * @class Product_Categories
     */
    class Product_Categories extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = 'product';
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $product \WC_Product|\WC_Product_Variation
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($product, $compare, $expected)
        {
        }
    }
    /**
     * Class Order_Item_Subtotal
     *
     * @since 4.9.0
     */
    class Order_Item_Subtotal extends \AutomateWoo\Rules\Order_Item_Total
    {
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule.
         *
         * @param \WC_Order_Item_Product $item
         * @param string                 $compare
         * @param string                 $value
         *
         * @return bool
         */
        public function validate($item, $compare, $value)
        {
        }
    }
    /**
     * Customer last review date rule.
     *
     * @Class Customer_Last_Review_Date
     */
    class Customer_Last_Review_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * What data we're using to validate.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Customer_Last_Review_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \AutomateWoo\Customer $customer The customer.
         * @param string                $compare  What variables we're using to compare.
         * @param array|null            $value    The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($customer, $compare, $value = null)
        {
        }
    }
    /**
     * @class Customer_Tags
     */
    class Customer_Tags extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * Customer last order date rule.
     *
     * @Class Customer_Last_Order_Date
     */
    class Customer_Last_Order_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * What date we're using to validate.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Customer_Last_Order_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \AutomateWoo\Customer $customer The customer.
         * @param string                $compare  What variables we're using to compare.
         * @param array|null            $value    The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($customer, $compare, $value = null)
        {
        }
    }
    /**
     * @class Review_Rating
     */
    class Review_Rating extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'review';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $review \AutomateWoo\Review
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($review, $compare, $value)
        {
        }
    }
    /**
     * Class Product_Select_Rule_Abstract
     *
     * @package AutomateWoo\Rules
     */
    abstract class Product_Select_Rule_Abstract extends \AutomateWoo\Rules\Searchable_Select_Rule_Abstract
    {
        /**
         * The CSS class to use on the search field.
         *
         * @var string
         */
        public $class = 'wc-product-search';
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Display product name on frontend.
         *
         * @param int $product_id
         * @return string|int
         */
        public function get_object_display_value($product_id)
        {
        }
        /**
         * Get the ajax action to use for the AJAX search.
         *
         * @return string
         */
        public function get_search_ajax_action()
        {
        }
    }
    /**
     * @class Cart_Items
     */
    class Cart_Items extends \AutomateWoo\Rules\Product_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        function init()
        {
        }
        /**
         * @param \AutomateWoo\Cart $cart
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($cart, $compare, $value)
        {
        }
    }
    /**
     * @class Abstract_Meta
     */
    abstract class Abstract_Meta extends \AutomateWoo\Rules\Rule
    {
        /** @var string */
        public $type = 'meta';
        /** @var bool */
        public $has_multiple_value_fields = true;
        /**
         * Abstract_Meta constructor.
         */
        public function __construct()
        {
        }
        /**
         * Validate a meta value.
         *
         * @param mixed  $actual_value
         * @param string $compare_type
         * @param mixed  $expected_value
         * @return bool
         */
        public function validate_meta($actual_value, $compare_type, $expected_value)
        {
        }
        /**
         * Determine whether the meta field can reasonably be evaluated as a number, specifically for
         * numeric comparisons (greater/less/multiples) and for numeric is/is not.
         * This can facilitate better comparisons (for example, "5" = "5.0" in numeric comparisons,
         * but not in string comparisons).
         *
         * @since 5.1.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return bool True if the meta field is determined to be numeric.
         */
        protected function is_numeric_meta_field($compare_type, $value)
        {
        }
        /**
         * Return an associative array with 'key' and 'value' elements.
         *
         * @param mixed $value
         * @return array|false
         */
        public function prepare_value_data($value)
        {
        }
    }
    /**
     * @class Order_Item_Meta
     */
    class Order_Item_Meta extends \AutomateWoo\Rules\Abstract_Meta
    {
        /** @var string */
        public $data_item = 'order_item';
        /**
         * Init the rule
         */
        public function init()
        {
        }
        /**
         * Validate the rule based on options set by a workflow
         *
         * @param \WC_Order_Item_Product $order_item
         * @param string                 $compare_type
         * @param array                  $value_data
         *
         * @return bool
         */
        public function validate($order_item, $compare_type, $value_data)
        {
        }
    }
}
namespace AutomateWoo\Rules\Interfaces {
    /**
     * Interface NonPrimaryDataTypeQuickFilterableInterface
     *
     * @since 5.0.0
     * @package AutomateWoo\Rules
     */
    interface NonPrimaryDataTypeQuickFilterable
    {
        /**
         * Get any non-primary data type quick filter clauses for this rule.
         *
         * For example, this lets customer rules add filters to order and subscription queries.
         *
         * See also \AutomateWoo\Rules\QuickFilterableInterface::get_quick_filter_clause()
         *
         * @param string $data_type    The data type that is being filtered.
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @throws Exception When there's an error getting the clause.
         *
         * @return ClauseInterface|ClauseInterface[]
         */
        public function get_non_primary_quick_filter_clause($data_type, $compare_type, $value);
    }
}
namespace AutomateWoo\Rules {
    /**
     * @class Customer_Phone
     */
    class Customer_Phone extends \AutomateWoo\Rules\Abstract_String implements \AutomateWoo\Rules\Interfaces\NonPrimaryDataTypeQuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\StringQuickFilter;
        use \AutomateWoo\Rules\Utilities\DataTypeConditions;
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
        /**
         * Get any non-primary data type quick filter clauses for this rule.
         *
         * @since 5.0.0
         *
         * @param string $data_type    The data type that is being filtered.
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_non_primary_quick_filter_clause($data_type, $compare_type, $value)
        {
        }
    }
    /**
     * SubscriptionPaymentCount rule class.
     */
    class SubscriptionPaymentCount extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'subscription';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param WC_Subscription $subscription
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($subscription, $compare, $value)
        {
        }
    }
    /**
     * CartItemCount class.
     */
    class CartItemCount extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param Cart $cart
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($cart, $compare, $value)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Rule_Order_Item_Categories
     */
    class Rule_Order_Item_Categories extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = 'order';
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($order, $compare, $expected)
        {
        }
    }
}
namespace AutomateWoo\Rules {
    /**
     * Class for the 'Subscription - Item Categories' rule.
     */
    class Subscription_Item_Categories extends \AutomateWoo\Rule_Order_Item_Categories
    {
        /**
         * Data type used by the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
    }
    /**
     * @class Order_Is_Subscription_Parent
     * @since 4.3
     */
    class Order_Is_Subscription_Parent extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Coupon_Count
     * @since 4.2
     */
    class Order_Coupon_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'order';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * Class Subscription_Coupon_Count
     *
     * @since   4.5.0
     * @package AutomateWoo\Rules
     */
    class Subscription_Coupon_Count extends \AutomateWoo\Rules\Order_Coupon_Count
    {
        /**
         * Data item for the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
    }
    /**
     * @class Customer_State
     */
    class Customer_State extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\NonPrimaryDataTypeQuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        use \AutomateWoo\Rules\Utilities\DataTypeConditions;
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
        /**
         * Get any non-primary data type quick filter clauses for this rule.
         *
         * @since 5.0.0
         *
         * @param string $data_type    The data type that is being filtered.
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @return ClauseInterface|ClauseInterface[]
         *
         * @throws Exception When there is an error.
         */
        public function get_non_primary_quick_filter_clause($data_type, $compare_type, $value)
        {
        }
    }
    /**
     * @class AW_Rule_Is_Guest_Order
     */
    class Order_Is_Guest_Order extends \AutomateWoo\Rules\Abstract_Bool implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        /**
         * @var string $data_item
         */
        public $data_item = 'order';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validates the rule based on options set by a workflow
         * The $data_item passed will already be validated
         *
         * @param \WC_Order $order
         * @param mixed     $compare
         * @param string    $value
         * @return bool
         */
        public function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for the rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type (Usually empty)
         * @param string $value        (Usually yes/no)
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Customer_Has_Active_Subscription
     */
    class Customer_Has_Active_Subscription extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * Class Order_Coupons.
     *
     * @package AutomateWoo\Rules
     */
    class Order_Coupons extends \AutomateWoo\Rules\Searchable_Select_Rule_Abstract
    {
        /**
         * The rule's primary data item.
         *
         * @var string
         */
        public $data_item = 'order';
        /**
         * The CSS class to use on the search field.
         *
         * @var string
         */
        public $class = 'wc-product-search';
        /**
         * This rule supports multiple selections.
         *
         * @var bool
         */
        public $is_multi = true;
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Get the ajax action to use for the AJAX search.
         *
         * @return string
         */
        public function get_search_ajax_action()
        {
        }
        /**
         * Validate the rule for a given order.
         *
         * @param \WC_Order $order
         * @param string    $compare
         * @param array     $expected_coupons
         *
         * @return bool
         */
        public function validate($order, $compare, $expected_coupons)
        {
        }
    }
    /**
     * Class Cart_Coupons
     *
     * @package AutomateWoo\Rules
     */
    class Cart_Coupons extends \AutomateWoo\Rules\Order_Coupons
    {
        /**
         * The rule's primary data item.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validate the rule for a given cart.
         *
         * @param \AutomateWoo\Cart $cart
         * @param string            $compare
         * @param array             $expected_coupons
         *
         * @return bool
         */
        public function validate($cart, $compare, $expected_coupons)
        {
        }
    }
    /**
     * @class Order_Is_Subscription_Renewal
     * @since 2.9
     */
    class Order_Is_Subscription_Renewal extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Coupons_Text_Match
     */
    class Order_Coupons_Text_Match extends \AutomateWoo\Rules\Abstract_String
    {
        /** @var array  */
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param \WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Customer_Review_Count
     */
    class Customer_Review_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * OrderTotal rules class.
     */
    class OrderTotal extends \AutomateWoo\Rules\Abstract_Number implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\NumericQuickFilter;
        public $data_item = 'order';
        public $support_floats = true;
        function init()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * OrderIsPos rule class.
     */
    class OrderIsPos extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * Subscription end date rule.
     *
     * @class Subscription_End_Date
     */
    class Subscription_End_Date extends \AutomateWoo\Rules\Abstract_Date implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\DateQuickFilter;
        /**
         * Data item.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Subscription_End_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \WC_Subscription $subscription The subscription object.
         * @param string           $compare      Rule to compare.
         * @param array|null       $value        The values we have to compare. Null is only allowed when $compare is
         *                                       is_not_set.
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value = null)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * Subscription last payment date rule.
     *
     * @class Subscription_Last_Payment_Date
     */
    class Subscription_Last_Payment_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * Data item.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Subscription_Last_Payment_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates our rule.
         *
         * @param \WC_Subscription $subscription The subscription object.
         * @param string           $compare      Rule to compare.
         * @param array|null       $value        The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value = null)
        {
        }
    }
    /**
     * @class Customer_Total_Spent
     */
    class Customer_Total_Spent extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $support_floats = true;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Shipping_Method
     */
    class Order_Shipping_Method extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = 'order';
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Line_Count
     */
    class Order_Line_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'order';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Items
     */
    class Order_Items extends \AutomateWoo\Rules\Product_Select_Rule_Abstract
    {
        public $data_item = 'order';
        public function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        public function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Subscription_Items
     */
    class Subscription_Items extends \AutomateWoo\Rules\Order_Items
    {
        public $data_item = 'subscription';
        function init()
        {
        }
    }
    /**
     * @class Product
     */
    class Product extends \AutomateWoo\Rules\Product_Select_Rule_Abstract
    {
        public $data_item = 'product';
        function init()
        {
        }
        /**
         * @param \WC_Product|\WC_Product_Variation $product
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($product, $compare, $expected)
        {
        }
    }
    /**
     * @class Order_Item_Count
     */
    class Order_Item_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::ORDER;
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * Customer Points Class.
     *
     * @class Points_Rewards_Customer_Points
     */
    class Points_Rewards_Customer_Points extends \AutomateWoo\Rules\Abstract_Number
    {
        /**
         * Customer.
         *
         * @var string $data_item
         */
        public $data_item = 'customer';
        /**
         * Supports float.
         *
         * @var bool $support_floats
         */
        public $support_floats = false;
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validate method.
         *
         * @param \AutomateWoo\Customer $customer
         * @param string                $compare
         * @param string                $value
         *
         * @return bool
         */
        public function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * CartTotal rule class.
     */
    class CartTotal extends \AutomateWoo\Rules\Abstract_Number
    {
        /** @var string  */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        public $support_floats = true;
        function init()
        {
        }
        /**
         * @param Cart $cart
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($cart, $compare, $value)
        {
        }
    }
    /**
     * Cart created date rule.
     *
     * @class Cart_Created_Date
     */
    class Cart_Created_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * Data item type.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        /**
         * Cart_Created_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \AutomateWoo\Cart $cart    The cart.
         * @param string            $compare What variables we're using to compare.
         * @param array|null        $value   The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($cart, $compare, $value = null)
        {
        }
    }
    /**
     * OrderHasCrossSells rule class.
     */
    class OrderHasCrossSells extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * Customer first order date rule.
     *
     * @Class Customer_First_Order_Date
     */
    class Customer_First_Order_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * What data we're using to validate.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Customer_First_Order_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \AutomateWoo\Customer $customer The customer.
         * @param string                $compare  What variables we're using to compare.
         * @param array|null            $value    The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($customer, $compare, $value = null)
        {
        }
    }
    /**
     * Subscription Can Renew Early class.
     *
     * @since 4.5.0
     *
     * @class Subscription_Can_Renew_Early
     */
    class Subscription_Can_Renew_Early extends \AutomateWoo\Rules\Abstract_Bool
    {
        /**
         * Data Item.
         *
         * @var string $data_item
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::SUBSCRIPTION;
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validate.
         *
         * @param \WC_Subscription $subscription
         * @param string           $compare
         * @param string           $value
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Subscription_Failed_Automatic_Payment_Retry_Count
     */
    class Order_Subscription_Failed_Automatic_Payment_Retry_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'order';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Meta
     */
    class Order_Meta extends \AutomateWoo\Rules\Abstract_Meta implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\StringQuickFilter, \AutomateWoo\Rules\Utilities\NumericQuickFilter;
        /** @var string */
        public $data_item = 'order';
        /** @var string the prefix of the property name for Quick Filter clauses */
        public static $property_prefix = 'meta.';
        /**
         * Init the rule
         */
        public function init()
        {
        }
        /**
         * Validate the rule based on options set by a workflow
         * The $order passed will already be validated
         *
         * @param \WC_Order $order
         * @param string    $compare_type
         * @param array     $value_data
         * @return bool
         */
        public function validate($order, $compare_type, $value_data)
        {
        }
        /**
         * Get quick filter clause for the rule.
         *
         * @since 5.1.0
         *
         * @param string $compare_type textual representation of the comparison operator
         * @param array  $value array containing the custom meta key and value
         *
         * @return ClauseInterface StringClause, NumericClause, or NoOpClause
         *
         * @throws InvalidArgumentException When there's an error generating the clause.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Cart_Item_Categories
     */
    class Cart_Item_Categories extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CART;
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $cart \AutomateWoo\Cart
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($cart, $compare, $expected)
        {
        }
    }
    /**
     * @class Customer_Order_Count
     */
    class Customer_Order_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * @class Customer_Is_Guest
     */
    class Customer_Is_Guest extends \AutomateWoo\Rules\Abstract_Bool
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Item_Quantity
     */
    class Order_Item_Quantity extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'order_item';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param $order_item array|\WC_Order_Item_Product
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order_item, $compare, $value)
        {
        }
    }
    /**
     * GuestOrderCount rule class.
     */
    class GuestOrderCount extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'guest';
        public $support_floats = false;
        /**
         * Init
         */
        function init()
        {
        }
        /**
         * @param Guest $guest
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($guest, $compare, $value)
        {
        }
    }
    /**
     * @class Customer_Order_Statuses
     */
    class Customer_Order_Statuses extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * Class Order_Item_Tax_Total
     *
     * @since 4.9.0
     */
    class Order_Item_Tax_Total extends \AutomateWoo\Rules\Order_Item_Total
    {
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule.
         *
         * @param \WC_Order_Item_Product $item
         * @param string                 $compare
         * @param string                 $value
         *
         * @return bool
         */
        public function validate($item, $compare, $value)
        {
        }
    }
    /**
     * OrderShippingCountry rule class.
     */
    class OrderShippingCountry extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * Order paid date rule.
     *
     * @Class   Order_Paid_Date
     * @package AutomateWoo\Rules
     */
    class Order_Paid_Date extends \AutomateWoo\Rules\Abstract_Date implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\DateQuickFilter;
        /**
         * Data item type.
         *
         * @var string
         */
        public $data_item = 'order';
        /**
         * Order_Paid_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \WC_Order  $order   The order.
         * @param string     $compare What variables we're using to compare.
         * @param array|null $value   The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($order, $compare, $value = null)
        {
        }
        /**
         * Get quick filter clause.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * GuestEmail rule class.
     */
    class GuestEmail extends \AutomateWoo\Rules\Abstract_String
    {
        public $data_item = 'guest';
        function init()
        {
        }
        /**
         * @param Guest $guest
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($guest, $compare, $value)
        {
        }
    }
    /**
     * OrderShippingMethodString rule class.
     */
    class OrderShippingMethodString extends \AutomateWoo\Rules\Abstract_String
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * OrderRunCount rule class.
     */
    class OrderRunCount extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::ORDER;
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Customer_State_Text_Match
     */
    class Customer_State_Text_Match extends \AutomateWoo\Rules\Abstract_String
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * @class Customer_Company
     */
    class Customer_Company extends \AutomateWoo\Rules\Abstract_String
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
    }
    /**
     * Subscription created date rule.
     *
     * @Class   Subscription_Created_Date
     * @package AutomateWoo\Rules
     */
    class Subscription_Created_Date extends \AutomateWoo\Rules\Abstract_Date implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\DateQuickFilter;
        /**
         * Data item type.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Subscription_Created_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \WC_Subscription $subscription The subscription.
         * @param string           $compare      What variables we're using to compare.
         * @param array|null       $value        The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value = null)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * GuestRunCount rule class.
     */
    class GuestRunCount extends \AutomateWoo\Rules\Abstract_Number
    {
        public $data_item = 'guest';
        public $support_floats = false;
        function init()
        {
        }
        /**
         * @param Guest $guest
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($guest, $compare, $value)
        {
        }
    }
    /**
     * Class Order_Item_Product
     *
     * @since 4.9.0
     */
    class Order_Item_Product extends \AutomateWoo\Rules\Product_Select_Rule_Abstract
    {
        /**
         * Data item the rule uses.
         *
         * @var string
         */
        public $data_item = 'order_item';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule.
         *
         * @param \WC_Order_Item_Product $item
         * @param string                 $compare
         * @param string                 $expected
         *
         * @return bool
         */
        public function validate($item, $compare, $expected)
        {
        }
    }
    /**
     * @class Customer_Country
     */
    class Customer_Country extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\NonPrimaryDataTypeQuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        use \AutomateWoo\Rules\Utilities\DataTypeConditions;
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
        /**
         * Get any non-primary data type quick filter clauses for this rule.
         *
         * @since 5.0.0
         *
         * @param string $data_type    The data type that is being filtered.
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_non_primary_quick_filter_clause($data_type, $compare_type, $value)
        {
        }
    }
    /**
     * @class Subscription_Requires_Manual_Renewal
     */
    class Subscription_Requires_Manual_Renewal extends \AutomateWoo\Rules\Abstract_Bool implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        /** @var string */
        public $data_item = 'subscription';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * @param \WC_Subscription $subscription
         * @param string           $compare
         * @param string           $value
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param array  $value
         *
         * @return ClauseInterface
         *
         * @throws \InvalidArgumentException When the value is invalid.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Subscription_Meta
     */
    class Subscription_Meta extends \AutomateWoo\Rules\Abstract_Meta
    {
        /** @var string */
        public $data_item = 'subscription';
        /**
         * Init the rule
         */
        public function init()
        {
        }
        /**
         * Validate the rule based on options set by a workflow
         *
         * @param \WC_Subscription $subscription
         * @param string           $compare_type
         * @param array            $value_data
         *
         * @return bool
         */
        public function validate($subscription, $compare_type, $value_data)
        {
        }
    }
    /**
     * @class Customer_Purchased_Categories
     */
    class Customer_Purchased_Categories extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($customer, $compare, $expected)
        {
        }
    }
    /**
     * Subscription_Coupons rule class.
     *
     * @since   4.5.0
     * @package AutomateWoo\Rules
     */
    class Subscription_Coupons extends \AutomateWoo\Rules\Order_Coupons
    {
        /**
         * Data item for the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
    }
    /**
     * @class Order_Billing_Country
     */
    class Order_Billing_Country extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for the rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Customer_Meta
     */
    class Customer_Meta extends \AutomateWoo\Rules\Abstract_Meta
    {
        /** @var string */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Init the rule
         */
        public function init()
        {
        }
        /**
         * Validate the rule based on options set by a workflow
         *
         * @param \AutomateWoo\Customer $customer
         * @param string                $compare
         * @param array                 $value_data
         * @return bool
         */
        public function validate($customer, $compare, $value_data)
        {
        }
    }
    /**
     * Class Order_Subscription_Order_Type
     *
     * @since 4.8.0
     * @package AutomateWoo\Rules
     */
    class Order_Subscription_Order_Type extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        /**
         * Rule data type.
         *
         * @var string
         */
        public $data_item = 'order';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Load select choices for rule.
         *
         * @return array
         */
        public function load_select_choices()
        {
        }
        /**
         * Validate rule.
         *
         * @param \WC_Order $order
         * @param string    $compare
         * @param array     $value
         *
         * @return bool
         */
        public function validate($order, $compare, $value)
        {
        }
    }
    /**
     * @class Order_Customer_Provided_Note
     */
    class Order_Customer_Provided_Note extends \AutomateWoo\Rules\Abstract_String implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\StringQuickFilter;
        /** @var string */
        public $data_item = 'order';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validates the rule based on options set by a workflow
         *
         * @param \WC_Order $order
         * @param string    $compare
         * @param string    $value
         * @return bool
         */
        public function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for the rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param string $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * @class Order_Created_Via
     */
    class Order_Created_Via extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\ArrayQuickFilter;
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * Load select choices.
         *
         * @return array
         */
        public function load_select_choices()
        {
        }
        /**
         * @param \WC_Order $order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
        /**
         * Get quick filter clause for this rule.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param array  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Rule_Order_Item_Tags
     */
    class Rule_Order_Item_Tags extends \AutomateWoo\Rules\Preloaded_Select_Rule_Abstract
    {
        public $data_item = 'order';
        public $is_multi = true;
        function init()
        {
        }
        /**
         * @return array
         */
        function load_select_choices()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $expected
         * @return bool
         */
        function validate($order, $compare, $expected)
        {
        }
    }
}
namespace AutomateWoo\Rules {
    /**
     * Workflow last customer run date rule.
     *
     * @class Workflow_Last_Customer_Run_Date
     */
    class Workflow_Last_Customer_Run_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * What data we're using to validate.
         *
         * @var string
         */
        public $data_item = 'customer';
        /**
         * Workflow_Last_Customer_Run_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \AutomateWoo\Customer $customer The customer to validate.
         * @param string                $compare  The type of comparison.
         * @param mixed                 $value    The values we have to compare. Null is allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($customer, $compare, $value = null)
        {
        }
    }
    /**
     * @class Abstract_Object
     * @deprecated in favour of AutomateWoo\Rules\Searchable_Select_Rule_Abstract
     */
    abstract class Abstract_Object extends \AutomateWoo\Rules\Rule
    {
        /** @var string  */
        public $type = 'object';
        /** @var bool  */
        public $is_multi = false;
        /** @var string */
        public $ajax_action;
        /** @var string  */
        public $class = 'automatewoo-json-search';
        /** @var string */
        public $placeholder;
        function __construct()
        {
        }
        /**
         * Override this method to alter how saved values are displayed.
         *
         * @param string $value
         *
         * @return string
         */
        public function get_object_display_value($value)
        {
        }
    }
    /**
     * @class Customer_Email
     */
    class Customer_Email extends \AutomateWoo\Rules\Abstract_String implements \AutomateWoo\Rules\Interfaces\NonPrimaryDataTypeQuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\StringQuickFilter;
        use \AutomateWoo\Rules\Utilities\DataTypeConditions;
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
        /**
         * Get any non-primary data type quick filter clauses for this rule.
         *
         * @since 5.0.0
         *
         * @param string $data_type    The data type that is being filtered.
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_non_primary_quick_filter_clause($data_type, $compare_type, $value)
        {
        }
    }
    /**
     * Order date rule.
     *
     * @class Order_Created_Date
     */
    class Order_Created_Date extends \AutomateWoo\Rules\Abstract_Date implements \AutomateWoo\Rules\Interfaces\QuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\DateQuickFilter;
        /**
         * Data item type.
         *
         * @var string
         */
        public $data_item = 'order';
        /**
         * Order_Created_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \WC_Order  $order   Order we're validating against.
         * @param string     $compare What variables we're using to compare.
         * @param array|null $value   The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($order, $compare, $value = null)
        {
        }
        /**
         * Get quick filter clause.
         *
         * @since 5.0.0
         *
         * @param string $compare_type
         * @param mixed  $value
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_quick_filter_clause($compare_type, $value)
        {
        }
    }
    /**
     * Customer account created date rule.
     *
     * @Class Customer_Account_Created_Date
     */
    class Customer_Account_Created_Date extends \AutomateWoo\Rules\Abstract_Date
    {
        /**
         * What data we're using to validate.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Customer_Account_Created_Date constructor.
         */
        public function __construct()
        {
        }
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Validates rule.
         *
         * @param \AutomateWoo\Customer $customer The customer.
         * @param string                $compare  What variables we're using to compare.
         * @param array|null            $value    The values we have to compare. Null is only allowed when $compare is is_not_set.
         *
         * @return bool
         */
        public function validate($customer, $compare, $value = null)
        {
        }
    }
    /**
     * Class Subscription_Run_Count
     *
     * @version 5.0.0
     * @package AutomateWoo\Rules
     */
    class Subscription_Run_Count extends \AutomateWoo\Rules\Abstract_Number
    {
        /**
         * The data type used by the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Set whether the rule supports floats or only integers.
         *
         * @var bool
         */
        public $support_floats = false;
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule.
         *
         * @param WC_Subscription $subscription
         * @param string          $compare
         * @param string          $value
         *
         * @return bool
         */
        public function validate($subscription, $compare, $value)
        {
        }
    }
    /**
     * Class Customer_Purchased_Products
     *
     * @package AutomateWoo\Rules
     */
    class Customer_Purchased_Products extends \AutomateWoo\Rules\Product_Select_Rule_Abstract
    {
        /**
         * The rule's primary data item.
         *
         * @var string
         */
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        /**
         * Init the rule.
         */
        public function init()
        {
        }
        /**
         * Validate the rule for a given customer.
         *
         * @param \AutomateWoo\Customer $customer
         * @param string                $compare
         * @param string|int            $expected_value
         *
         * @return bool
         */
        public function validate($customer, $compare, $expected_value)
        {
        }
    }
    /**
     * @class Customer_Postcode
     */
    class Customer_Postcode extends \AutomateWoo\Rules\Abstract_String implements \AutomateWoo\Rules\Interfaces\NonPrimaryDataTypeQuickFilterable
    {
        use \AutomateWoo\Rules\Utilities\StringQuickFilter;
        use \AutomateWoo\Rules\Utilities\DataTypeConditions;
        public $data_item = \AutomateWoo\DataTypes\DataTypes::CUSTOMER;
        function init()
        {
        }
        /**
         * @param $customer \AutomateWoo\Customer
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($customer, $compare, $value)
        {
        }
        /**
         * Get any non-primary data type quick filter clauses for this rule.
         *
         * @since 5.0.0
         *
         * @param string $data_type    The data type that is being filtered.
         * @param string $compare_type The rule's compare type.
         * @param mixed  $value        The rule's expected value.
         *
         * @return ClauseInterface
         *
         * @throws Exception When there is an error.
         */
        public function get_non_primary_quick_filter_clause($data_type, $compare_type, $value)
        {
        }
    }
    /**
     * Class Subscription_Coupons_Text_Match
     *
     * @since   4.5.0
     * @package AutomateWoo\Rules
     */
    class Subscription_Coupons_Text_Match extends \AutomateWoo\Rules\Order_Coupons_Text_Match
    {
        /**
         * Data item for the rule.
         *
         * @var string
         */
        public $data_item = 'subscription';
        /**
         * Init the rule.
         */
        public function init()
        {
        }
    }
    /**
     * @class Order_Items_Text_Match
     */
    class Order_Items_Text_Match extends \AutomateWoo\Rules\Abstract_String
    {
        public $data_item = 'order';
        function init()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $compare
         * @param $value
         * @return bool
         */
        function validate($order, $compare, $value)
        {
        }
    }
}
namespace AutomateWoo\Event_Helpers {
    /**
     * Class Review_Posted.
     */
    class Review_Posted
    {
        /**
         * Init the event helper.
         */
        public static function init()
        {
        }
        /**
         * Catch any comments approved on creation
         *
         * @param int        $comment_id
         * @param WP_Comment $comment
         */
        public static function catch_new_comments(int $comment_id, \WP_Comment $comment)
        {
        }
        /**
         * Catch any comments that were approved after creation
         *
         * @param int|string $new_status
         * @param int|string $old_status
         * @param WP_Comment $comment
         */
        public static function catch_comment_approval($new_status, $old_status, \WP_Comment $comment)
        {
        }
        /**
         * Maybe do the review posted action.
         *
         * @param WP_Comment $comment
         */
        private static function maybe_dispatch_event(\WP_Comment $comment)
        {
        }
    }
    /**
     * @class User_Registration
     */
    class User_Registration
    {
        /** @var bool */
        static $_created_via_ultimate_members_signup = false;
        static function init()
        {
        }
        /**
         * User has just been saved in database
         * @param int $user_id
         */
        static function user_created($user_id)
        {
        }
        /**
         * @param $user_id
         */
        static function user_registered($user_id)
        {
        }
    }
    /**
     * @class Product_Goes_On_Sale
     */
    class Products_On_Sale
    {
        static function init()
        {
        }
        static function compare_on_sale_lists()
        {
        }
    }
    /**
     * @class Subscription_Status_Changed
     */
    class Subscription_Status_Changed
    {
        /** @var bool */
        public static $_doing_payment = false;
        static function init()
        {
        }
        /**
         * @param $subscription_id
         */
        static function before_payment($subscription_id)
        {
        }
        /**
         * @param $subscription_id
         */
        static function after_payment($subscription_id)
        {
        }
        /**
         * @param \WC_Subscription $subscription
         * @param string $new_status
         * @param string $old_status
         */
        static function status_changed($subscription, $new_status, $old_status)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Order_Note class.
     *
     * Supports notes added to subscriptions.
     *
     * @since 2.2
     */
    class Order_Note
    {
        /** @var int */
        public $id;
        /** @var string */
        public $content;
        /**
         * The ID of the associated order or subscription.
         *
         * @var int
         */
        public $order_id;
        /** @var bool */
        public $is_customer_note;
        /**
         * @param $id
         * @param $content
         * @param $order_id
         */
        function __construct($id, $content, $order_id)
        {
        }
        /**
         * @return bool
         */
        function is_customer_note()
        {
        }
        /**
         * @return string
         */
        function get_type()
        {
        }
    }
    /**
     * @class Model
     *
     * @property $id
     */
    abstract class Model
    {
        /** @var string : required for every model and must have a corresponding Database_Table */
        public $table_id;
        /** @var bool */
        public $exists = false;
        /** @var array */
        public $data = [];
        /** @var array - data as it last existed in the database */
        public $original_data = [];
        /** @var array */
        public $changed_fields = [];
        /** @var string */
        public $object_type;
        /**
         * @return int
         */
        function get_id()
        {
        }
        /**
         * @param int $id
         */
        function set_id($id)
        {
        }
        /**
         * Fill model with data
         *
         * @param array $row
         */
        function fill($row)
        {
        }
        /**
         * @param $value string|int
         * @param $field string
         */
        function get_by($field, $value)
        {
        }
        /**
         * Magic method for accessing db fields
         *
         * @param string $key
         * @return mixed
         */
        function __get($key)
        {
        }
        /**
         * Magic method for setting db fields
         *
         * @param $key
         * @param $value
         */
        function __set($key, $value)
        {
        }
        /**
         * @param $key
         * @param $value
         */
        function set_prop($key, $value)
        {
        }
        /**
         * @param $key
         * @return bool
         */
        function has_prop($key)
        {
        }
        /**
         * @param $key
         * @return mixed
         */
        function get_prop($key)
        {
        }
        /**
         * @return Database_Table
         */
        function get_table()
        {
        }
        /**
         * @return string
         */
        function get_table_name()
        {
        }
        /**
         * Inserts or updates the model
         * Only updates modified fields
         *
         * @return bool True on success, false on error.
         */
        public function save()
        {
        }
        /**
         * @return void
         */
        function delete()
        {
        }
        /**
         * @param $column
         * @return bool|DateTime
         */
        protected function get_date_column($column)
        {
        }
        /**
         * Sets the value of a date column from  a mixed input.
         *
         * $value can be an instance of WC_DateTime the timezone will be ignored.
         * If $value is a string it must be MYSQL formatted.
         *
         * @param string                                      $column
         * @param \WC_DateTime|DateTime|\DateTime|string|null $value
         */
        protected function set_date_column($column, $value)
        {
        }
    }
    /**
     * Contains functions relevant to open, click, conversion tracking.
     *
     * @since 3.9
     */
    class Tracking
    {
        /**
         * @param Workflow $workflow
         * @return string
         */
        static function get_open_tracking_url($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @param $redirect
         * @return string
         */
        static function get_click_tracking_url($workflow, $redirect)
        {
        }
        /**
         * Records the open track event if a valid log id is passed.
         * Then outputs a blank GIF image.
         */
        static function handle_open_tracking_url()
        {
        }
        /**
         * Records the click event and then redirects the user if safe.
         * Still allow redirect if log param is invalid, when testing a '0' value for log is used.
         */
        static function handle_click_tracking_url()
        {
        }
        /**
         * @return string
         */
        static function safe_redirect_fallback()
        {
        }
        /**
         * Is the useragent excluded from tracking.
         *
         * @since 4.8.1
         *
         * @return bool
         */
        public static function is_excluded_user_agent()
        {
        }
    }
    /**
     * @class Integrations
     */
    class Integrations
    {
        const REQUIRED_SUBSCRIPTIONS_VERSION = '2.5';
        const REQUIRED_BOOKINGS_VERSION = '1.15.35';
        const REQUIRED_MEMBERSHIPS_VERSION = '1.7';
        const REQUIRED_POINTS_AND_REWARDS_VERSION = '1.6.15';
        const REQUIRED_WOOCOMMERCE_BLOCKS_VERSION = '6.3.0';
        const REQUIRED_DEPOSITS_VERSION = '1.4';
        const REQUIRED_FREE_GIFT_COUPONS_VERSION = '2.0.0';
        /** @var Integration_Mailchimp */
        private static $mailchimp;
        /** @var Integration_ActiveCampaign */
        private static $activecampaign;
        /** @var Integration_Campaign_Monitor */
        private static $campaign_monitor;
        /** @var Integration_Twilio */
        private static $twilio;
        /** @var Integration_Bitly */
        private static $bitly;
        /**
         * Is the WooCommerce Subscriptions plugin active or
         * is the WC_Subscriptions_Core_Plugin class available?
         *
         * @since 4.5.0
         *
         * @param string $min_version
         *
         * @return bool
         */
        static function is_subscriptions_active($min_version = self::REQUIRED_SUBSCRIPTIONS_VERSION)
        {
        }
        /**
         * Check if MailPoet is active
         *
         * @since 5.6.4
         *
         * @return bool
         */
        public static function is_mailpoet_active()
        {
        }
        /**
         * Check if the MailPoet customizer for WooCommerce emails is enabled
         *
         * @since 5.6.4
         *
         * @return bool
         */
        public static function is_mailpoet_overriding_styles()
        {
        }
        /**
         * @return bool
         */
        static function is_wpml()
        {
        }
        /**
         * @return bool
         */
        static function is_woo_pos()
        {
        }
        /**
         * @return bool
         */
        static function is_memberships_enabled()
        {
        }
        /**
         * @return bool
         */
        static function is_mc4wp()
        {
        }
        /**
         * @return Integration_Twilio|false
         */
        static function get_twilio()
        {
        }
        /**
         * @return Integration_Bitly|false
         */
        static function get_bitly()
        {
        }
        /**
         * @return Integration_Mailchimp|false
         */
        static function mailchimp()
        {
        }
        /**
         * @return Integration_ActiveCampaign
         */
        static function activecampaign()
        {
        }
        /**
         * @return Integration_Campaign_Monitor
         */
        static function campaign_monitor()
        {
        }
        /**
         * is_points_rewards_active method.
         *
         * @since 4.5.0
         *
         * @param string $min_version
         *
         * @return bool
         */
        static function is_points_rewards_active($min_version = self::REQUIRED_POINTS_AND_REWARDS_VERSION)
        {
        }
        /**
         * is_woocommerce_blocks_active method.
         *
         * @since 5.6.0
         *
         * @param string $min_version
         *
         * @return bool
         */
        static function is_woocommerce_blocks_active($min_version = self::REQUIRED_WOOCOMMERCE_BLOCKS_VERSION)
        {
        }
        /**
         * Is the WooCommerce Deposits plugin active?
         *
         * @since 4.8.0
         *
         * @param string $min_version
         *
         * @return bool
         */
        public static function is_deposits_active($min_version = self::REQUIRED_DEPOSITS_VERSION)
        {
        }
        /**
         * is_free_gift_coupons_active method.
         *
         * @since 4.8.4
         *
         * @param string $min_version
         *
         * @return bool
         */
        static function is_free_gift_coupons_active($min_version = self::REQUIRED_FREE_GIFT_COUPONS_VERSION)
        {
        }
        /**
         * Is WooCommerce Bookings active?
         *
         * @since 5.3.0
         *
         * @param string $min_version
         *
         * @return bool
         */
        public static function is_bookings_active(string $min_version = self::REQUIRED_BOOKINGS_VERSION) : bool
        {
        }
        /**
         * @deprecated in favour of Integrations::is_subscriptions_active()
         *
         * @return bool
         */
        static function subscriptions_enabled()
        {
        }
    }
    /**
     * Class to manage triggers that are initiated in the background.
     *
     * TODO Most of the functionality in this class can be removed once the Trigger_Background_Processed_Abstract is removed.
     *
     * @class Workflow_Background_Process_Helper
     * @since 3.8
     */
    class Workflow_Background_Process_Helper
    {
        /**
         * Trigger must extend Trigger_Background_Processed_Abstract
         *
         * NOTE: A site could update to version 5.1 (ActionScheduler conversion) while a legacy background process is
         * running. Currently backwards compatibility is maintained for the legacy process. However, it's also possible that
         * a currently running process uses a trigger that has been switched to use the new jobs system and now implements
         * BatchedWorkflowInterface. In this case the job will restart because the $offset argument is ignored by the new
         * system. This is actually works well because it lowers the chance that items will be missed on the day of updating
         * to 5.1 and all our background process triggers already have a protection to avoid duplicates.
         *
         * @param int $workflow_id
         * @param int $offset The DB query offset for the trigger.
         */
        static function init_process($workflow_id, $offset = 0)
        {
        }
        /**
         * Start a batched workflow job.
         *
         * @since 5.1.0
         * @param Workflow $workflow
         */
        protected static function start_batched_workflow_job($workflow)
        {
        }
        /**
         * Schedules a follow up event, one minute from now that will init another batch of tasks.
         *
         * @param int $workflow_id
         * @param int $new_offset
         */
        private static function schedule_next_batch($workflow_id, $new_offset)
        {
        }
        /**
         * Used to start the background processor on shutdown
         */
        static function start_workflow_background_process()
        {
        }
        /**
         * Get the batch size for workflows that use the background processor.
         *
         * This is the max number of items that will be passed to the background processor at once.
         *
         * @since 4.5
         *
         * @param Workflow $workflow
         *
         * @return int
         */
        private static function get_background_process_batch_size($workflow)
        {
        }
        /**
         * Log the background trigger activity.
         *
         * @since 4.6
         *
         * @param Workflow $workflow
         * @param int $task_count
         * @param int $offset
         */
        private static function log_process_activity($workflow, $task_count, $offset)
        {
        }
    }
    /**
     * @class Privacy_Exporters
     * @since 4.0
     */
    class Privacy_Exporters
    {
        static $limit = 10;
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_data($email, $page)
        {
        }
        /**
         * @param string $email
         * @return array
         */
        static function get_customer_personal_data($email)
        {
        }
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_cart($email, $page)
        {
        }
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_workflow_logs($email, $page)
        {
        }
        /**
         * @param Log $log
         * @return array
         */
        public static function get_log_data($log)
        {
        }
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_workflow_queue($email, $page)
        {
        }
        /**
         * @param Queued_Event $event
         * @return array
         */
        public static function get_queued_event_data($event)
        {
        }
        /**
         * @param Data_Layer $data_layer
         * @return array
         */
        public static function format_data_layer($data_layer)
        {
        }
    }
    /**
     * Multi-lingual helper class
     * @class Language
     */
    class Language
    {
        /**
         * @return bool
         */
        static function is_multilingual()
        {
        }
        /**
         * @return string
         */
        static function get_default()
        {
        }
        /**
         * Returns empty string if multi-lingual is not enabled
         * @return string
         */
        static function get_current()
        {
        }
        /**
         * Set language back to original
         */
        static function set_original()
        {
        }
        /**
         * @param $language
         */
        static function set_current($language)
        {
        }
        /**
         * Make language choice for guests and users persist
         */
        static function make_language_persistent()
        {
        }
        /**
         * @param $user Order_Guest|\WP_User
         * @return string|false
         */
        static function get_user_language($user)
        {
        }
        /**
         * @param $user_id
         * @param $language
         */
        static function set_user_language($user_id, $language)
        {
        }
        /**
         * @param Guest $guest
         * @return string
         */
        static function get_guest_language($guest)
        {
        }
    }
    /**
     * @class Post_Types
     */
    class Post_Types
    {
        static function init()
        {
        }
        static function register_post_types()
        {
        }
        /**
         *
         */
        static function register_post_status()
        {
        }
        /**
         * Change messages when a post type is updated.
         *
         * @param  array $messages
         * @return array
         */
        static function register_post_updated_messages($messages)
        {
        }
        /**
         * Specify custom bulk actions messages for different post types.
         *
         * @param  array $bulk_messages Array of messages.
         * @param  array $bulk_counts Array of how many objects were updated.
         * @return array
         */
        public static function register_bulk_post_updated_messages($bulk_messages, $bulk_counts)
        {
        }
    }
    /**
     * Class Abstract_Model_With_Meta_Table
     *
     * @since 4.6.0
     * @package AutomateWoo
     */
    abstract class Abstract_Model_With_Meta_Table extends \AutomateWoo\Model
    {
        /**
         * Stores meta data changes for this object.
         *
         * @var array
         */
        protected $meta_data_changes = [];
        /**
         * Returns the ID of the model's meta table.
         *
         * @return string
         */
        public abstract function get_meta_table_id();
        /**
         * Get the table object used for meta data.
         *
         * @return Database_Table|false
         */
        public function get_meta_table()
        {
        }
        /**
         * Get the meta data table name.
         *
         * @return string
         */
        public function get_meta_table_name()
        {
        }
        /**
         * Get the meta data object ID column. E.g. 'event_id'
         *
         * @return string
         */
        public function get_meta_object_id_column()
        {
        }
        /**
         * Get object's, yet to be applied, meta data changes.
         *
         * @return array
         */
        public function get_meta_data_changes()
        {
        }
        /**
         * Get a single meta value by key.
         *
         * Returns an empty string if field is empty or doesn't exist.
         *
         * @param string $key
         *
         * @return mixed
         */
        public function get_meta($key)
        {
        }
        /**
         * Updates a single meta data prop.
         *
         * @param string $key
         * @param mixed  $value
         */
        public function update_meta($key, $value)
        {
        }
        /**
         * Deletes meta data by meta key.
         *
         * @since 4.0
         *
         * @param string $key
         */
        public function delete_meta($key)
        {
        }
        /**
         * Determine if specific meta field is set in the DB.
         *
         * @param string $key
         *
         * @return bool
         */
        private function meta_data_exists($key)
        {
        }
        /**
         * Save object meta data.
         *
         * Applies meta data changes found in self::$meta_data_changes.
         */
        public function save_meta_data()
        {
        }
        /**
         * Prepare meta value to be saved in database.
         *
         * @param mixed $value
         *
         * @return mixed
         */
        protected function prepare_meta_value_for_db($value)
        {
        }
        /**
         * Save the object including meta data.
         */
        public function save()
        {
        }
        /**
         * Delete the object.
         */
        public function delete()
        {
        }
        /**
         * Fill model with data.
         *
         * @param array $row
         */
        public function fill($row)
        {
        }
        /**
         * Get cache key for a specified meta key.
         *
         * @since 4.6.0
         *
         * @param string $key
         *
         * @return string
         */
        protected function get_meta_cache_key($key)
        {
        }
        /**
         * Get cache group for meta values.
         *
         * @since 4.6.0
         *
         * @return string
         */
        protected function get_meta_cache_group()
        {
        }
        /**
         * Add meta to object
         *
         * Alias for self::update_meta()
         *
         * @deprecated
         *
         * @param string $key
         * @param mixed  $value
         */
        public function add_meta($key, $value)
        {
        }
    }
    /**
     * @class Guest
     *
     * @property string $id
     * @property string $tracking_key
     * @property string $created
     * @property string $last_active
     */
    class Guest extends \AutomateWoo\Abstract_Model_With_Meta_Table
    {
        /** @var string */
        public $table_id = 'guests';
        /** @var string  */
        public $object_type = 'guest';
        /** @var string */
        private $formatted_billing_address;
        /**
         * Returns the ID of the model's meta table.
         *
         * @return string
         */
        public function get_meta_table_id()
        {
        }
        /**
         * @param $id
         */
        function __construct($id = false)
        {
        }
        /**
         * @param string $email
         */
        function set_email($email)
        {
        }
        /**
         * @return string
         */
        function get_email()
        {
        }
        /**
         * @deprecated Use customer key
         *
         * @param string $key
         */
        function set_key($key)
        {
        }
        /**
         * @deprecated Use customer key
         *
         * @return string
         */
        function get_key()
        {
        }
        /**
         * @param DateTime $date
         */
        function set_date_created($date)
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_created()
        {
        }
        /**
         * @param DateTime $date
         */
        function set_date_last_active($date)
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_last_active()
        {
        }
        /**
         * @param string $language
         */
        function set_language($language)
        {
        }
        /**
         * @return string
         */
        function get_language()
        {
        }
        /**
         * @since 4.0
         * @param int $order_id
         */
        function set_most_recent_order_id($order_id)
        {
        }
        /**
         * Most recent order that isn't failed.
         *
         * @since 4.0
         * @return int
         */
        function get_most_recent_order_id()
        {
        }
        /**
         * @since 4.2
         * @param string $version
         */
        function set_version($version)
        {
        }
        /**
         * @return string
         */
        function get_version()
        {
        }
        /**
         * Updates the 'most_recent_order' cache.
         * @return int
         */
        function recache_most_recent_order_id()
        {
        }
        /**
         * @return string
         */
        function get_full_name()
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_first_name($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_last_name($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_phone($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_country($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_company($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_address_1($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_address_2($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_city($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_state($presubmit_only = false)
        {
        }
        /**
         * @param bool $presubmit_only
         * @return string
         */
        function get_postcode($presubmit_only = false)
        {
        }
        /**
         * Update guest ip and active date
         */
        function do_check_in()
        {
        }
        /**
         * Retrieve a valid checkout field if one is stored in meta or get from an order belonging to the guest
         * @param $field
         * @param bool $presubmit_only set true to bypass most recent order
         * @return mixed
         */
        function get_checkout_field($field, $presubmit_only = false)
        {
        }
        /**
         * If $order is not set, most recent order will be used.
         *
         * @param string $field
         * @param bool|\WC_Order $order
         * @return mixed
         */
        function get_checkout_field_from_order($field, $order = false)
        {
        }
        /**
         * @return \WC_Order|false
         */
        function get_most_recent_order()
        {
        }
        /**
         * @return Cart|false
         */
        function get_cart()
        {
        }
        /**
         * The locked guest status is used by the presubmit capture module.
         *
         * If a guest is not locked their email address may be changed if the capture email address is modified.
         * But allowing emails to change later can cause for confusing issues, hence this logic.
         *
         * A guest becomes locked 10 minutes after they are created or once they place an order.
         *
         * @return bool
         */
        function is_locked()
        {
        }
        /**
         * @return string
         */
        public function get_formatted_billing_address()
        {
        }
        /**
         * Delete any presubmit billing data excluding the actual guest email
         * @since 4.0
         */
        function delete_presubmit_data()
        {
        }
        function delete_cart()
        {
        }
        function delete()
        {
        }
    }
    /**
     * @class Conversions
     * @since 2.1
     */
    class Conversions
    {
        /**
         * Max number of days that a purchase to be considered a conversion
         * @return int
         */
        static function get_conversion_window()
        {
        }
        /**
         * @param int $order_id
         */
        static function check_order_for_conversion($order_id)
        {
        }
        /**
         * @param Customer $customer
         * @param DateTime $conversion_window_start
         * @param DateTime $conversion_window_end
         * @return Log[]
         */
        static function get_logs_by_customer($customer, $conversion_window_start, $conversion_window_end)
        {
        }
        /**
         * Checks if order and log (i.e. sent workflow) is a valid conversion.
         *
         * @since 4.8.0
         *
         * @param \WC_Order $order
         * @param Log       $log
         *
         * @return bool
         */
        protected static function is_valid_conversion($order, $log)
        {
        }
        /**
         * Checks if the order was created via the checkout.
         *
         * We consider an order with the 'created_via' prop set to checkout or an order with a cart hash to be created via the checkout.
         *
         * This method should return false for automatic subscription renewals, rest API orders and POS orders.
         *
         * @since 4.8.0
         *
         * @param \WC_Order $order
         *
         * @return bool
         */
        protected static function is_order_created_via_checkout($order)
        {
        }
    }
    /**
     * Simpler version of \WP_Error
     *
     * @since 3.9
     */
    class Error
    {
        /** @var string */
        public $message;
        /** @var string */
        public $code;
        /**
         * Error constructor.
         *
         * @param string $message
         * @param string $code (optional)
         */
        public function __construct($message, $code = '')
        {
        }
        /**
         * @return string
         */
        public function get_message()
        {
        }
        /**
         * @return string
         */
        public function get_code()
        {
        }
    }
}
namespace AutomateWoo\Exceptions {
    /**
     * AutomateWoo User Facing Exception Interface.
     *
     * User facing exceptions should have translatable messages.
     *
     * @since   4.9.0
     * @package AutomateWoo\Exceptions
     */
    interface UserFacingException extends \AutomateWoo\Exceptions\Exception
    {
    }
    /**
     * InvalidPreviewData exception class.
     *
     * @since   4.9.2
     * @package AutomateWoo\Exceptions
     */
    class InvalidPreviewData extends \InvalidArgumentException implements \AutomateWoo\Exceptions\UserFacingException
    {
        /**
         * Creates a new instance of the exception when an action can't be previewed.
         *
         * @return static
         */
        public static function invalid_action()
        {
        }
        /**
         * Creates a new instance of the exception with a generic message.
         *
         * @return static
         */
        public static function generic()
        {
        }
        /**
         * Creates a new instance of the exception when a valid order isn't found.
         *
         * @return static
         */
        public static function order_not_found()
        {
        }
        /**
         * Get an exception for when a preview data item was not found.
         *
         * @param string $data_type The type of data that is needed.
         *
         * @return static
         */
        public static function data_item_needed(string $data_type)
        {
        }
    }
    /**
     * Class InvalidWorkflow
     *
     * @since 5.1.0
     */
    class InvalidWorkflow extends \RuntimeException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Create a new exception when a given workflow ID already exists.
         *
         * @param string|int $id
         *
         * @return static
         */
        public static function workflow_exists($id) : \AutomateWoo\Exceptions\InvalidWorkflow
        {
        }
        /**
         * Create a new exception when there is an issue creating a new workflow.
         *
         * @param string $error
         *
         * @return InvalidWorkflow
         */
        public static function error_creating_workflow($error) : \AutomateWoo\Exceptions\InvalidWorkflow
        {
        }
    }
    /**
     * InvalidPath class.
     *
     * @package AutomateWoo\Exceptions
     * @since   5.1.0
     */
    class InvalidPath extends \InvalidArgumentException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Return a new instance of the exception when a file does not exist.
         *
         * @param string $path The provided path.
         *
         * @return static
         */
        public static function file_does_not_exist($path)
        {
        }
        /**
         * Return a new instance of the exception when a path is not a directory.
         *
         * @param string $path The provided path.
         *
         * @return static
         */
        public static function path_not_directory($path)
        {
        }
    }
    /**
     * Class InvalidValue.
     *
     * @version 5.3.0
     */
    class InvalidValue extends \UnexpectedValueException implements \AutomateWoo\Exceptions\UserFacingException
    {
        /**
         * Create a new exception for when an item is not found.
         *
         * @param string $item_name Optional name of the item.
         *
         * @return static
         */
        public static function item_not_found(string $item_name = '') : \AutomateWoo\Exceptions\InvalidValue
        {
        }
    }
    /**
     * Class InvalidStatus
     *
     * @since 5.1.0
     */
    class InvalidStatus extends \RuntimeException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Create a new exception when the given workflow status is invalid.
         *
         * @param string $status The invalid status.
         *
         * @return static
         */
        public static function unknown_status(string $status) : \AutomateWoo\Exceptions\InvalidStatus
        {
        }
        /**
         * Create a new exception when the given workflow status does not have a mapped post status.
         *
         * @param string $status The invalid status.
         *
         * @return InvalidStatus
         */
        public static function no_post_staus(string $status) : \AutomateWoo\Exceptions\InvalidStatus
        {
        }
    }
    /**
     * InvalidClass Exception class.
     *
     * @since   4.9.0
     * @package AutomateWoo\Exceptions
     */
    class InvalidClass extends \InvalidArgumentException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Create a new instance of the exception when the given class does not exist.
         *
         * @param string $class The non-existent class.
         *
         * @return static
         */
        public static function does_not_exist($class)
        {
        }
        /**
         * Create a new instance of the exception when the given class does not implement the given interface.
         *
         * @param string $class     The class that should implement the interface.
         * @param string $interface An interface name the class should implement.
         *
         * @return static
         */
        public static function does_not_implement_interface($class, $interface)
        {
        }
    }
    /**
     * InvalidIntegration exception class.
     *
     * Thrown when a required integration is invalid.
     *
     * @version 5.3.0
     */
    class InvalidIntegration extends \LogicException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Create exception for when an integration plugin is not active.
         *
         * @param string $name
         *
         * @return static
         */
        public static function plugin_not_active(string $name) : \AutomateWoo\Exceptions\InvalidIntegration
        {
        }
        /**
         * Create exception for when an integration plugin version is not supported.
         *
         * @param string $name
         * @param string $min_required_version
         *
         * @return static
         */
        public static function plugin_version_not_supported(string $name, string $min_required_version) : \AutomateWoo\Exceptions\InvalidIntegration
        {
        }
    }
    /**
     * Class InvalidArgument
     *
     * @since 5.1.0
     */
    class InvalidArgument extends \InvalidArgumentException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Return a new instance of an exception for an invalid type.
         *
         * @param string $type The type that was expected, e.g. string, bool, etc.
         *
         * @return static
         */
        public static function invalid_parameter_type(string $type) : \AutomateWoo\Exceptions\InvalidArgument
        {
        }
        /**
         * Return a new instance of an exception for an invalid argument.
         *
         * @param string $valid_argument_description
         *
         * @return static
         */
        public static function invalid_argument(string $valid_argument_description) : \AutomateWoo\Exceptions\InvalidArgument
        {
        }
        /**
         * Return a new instance of an exception for an missing required argument.
         *
         * @param string $name The name of the required argument.
         *
         * @return static
         */
        public static function missing_required(string $name) : \AutomateWoo\Exceptions\InvalidArgument
        {
        }
        /**
         * Return a new instance of an exception for an invalid argument.
         *
         * @return static
         */
        public static function empty() : \AutomateWoo\Exceptions\InvalidArgument
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Queue_Manager
     */
    class Queue_Manager
    {
        /**
         * @param $code
         * @return string
         */
        static function get_failure_message($code)
        {
        }
        /**
         * Returns the meta key that a data item is mapped to in queue meta.
         *
         * @param $data_type_id string
         * @return bool|string
         */
        static function get_data_layer_storage_key($data_type_id)
        {
        }
        /**
         * @param $data_type_id
         * @param $data_item : must be validated
         * @return mixed
         */
        static function get_data_layer_storage_value($data_type_id, $data_item)
        {
        }
    }
}
namespace AutomateWoo\Blocks {
    /**
     * Class Marketing_Optin_Block
     *
     * Class for integrating marketing optin block with WooCommerce Checkout
     *
     * @since 5.6.0
     */
    class Marketing_Optin_Block implements \Automattic\WooCommerce\Blocks\Integrations\IntegrationInterface
    {
        /**
         * The name of the integration.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * When called invokes any initialization/setup for the integration.
         */
        public function initialize()
        {
        }
        /**
         * Returns an array of script handles to enqueue in the frontend context.
         *
         * @return string[]
         */
        public function get_script_handles()
        {
        }
        /**
         * Returns an array of script handles to enqueue in the editor context.
         *
         * @return string[]
         */
        public function get_editor_script_handles()
        {
        }
        /**
         * Decide if the current customer already opted in or not.
         *
         * @return boolean
         */
        public function is_customer_subscribed()
        {
        }
        /**
         * An array of key, value pairs of data made available to the block on the client side.
         *
         * @return array
         */
        public function get_script_data()
        {
        }
        /**
         * Get the file modified time as a cache buster if we're in dev mode.
         *
         * @param string $file Local path to the file.
         * @return string The cache buster value to use for the given file.
         */
        protected function get_file_version($file)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Mailer_Raw_HTML
     * @since 3.6.0
     */
    class Mailer_Raw_HTML extends \AutomateWoo\Mailer
    {
        /**
         * Inline styles already contained in the HTML
         *
         * @param string|null $content
         * @return string
         */
        function style_inline($content)
        {
        }
        /**
         * @return string
         */
        function get_email_body()
        {
        }
    }
}
namespace AutomateWoo\Jobs {
    /**
     * Interface JobInterface.
     *
     * @since   5.0.0
     * @package AutomateWoo\Jobs
     */
    interface JobInterface
    {
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name();
        /**
         * Init the job.
         */
        public function init();
    }
    /**
     * Interface ActionSchedulerJobInterface.
     *
     * @since 5.2.0
     */
    interface ActionSchedulerJobInterface extends \AutomateWoo\Jobs\JobInterface
    {
        /**
         * Get the hook name for the "process item" action.
         *
         * This method is required by the job monitor.
         *
         * @return string
         */
        public function get_process_item_hook();
    }
    /**
     * Interface OneTimeActionSchedulerJobInterface.
     *
     * A "one time job" is a job that receives all the items it needs to process immediately instead of in batches.
     *
     * @since 5.2.0
     */
    interface OneTimeActionSchedulerJobInterface extends \AutomateWoo\Jobs\ActionSchedulerJobInterface
    {
        /**
         * Starts the job.
         *
         * @param array[] $items The items to process in the job.
         *                       Items are stored in the database so don't include full objects.
         *
         * @throws InvalidArgument If an item is not valid.
         */
        public function start(array $items = []);
        /**
         * Handles the process item job action.
         *
         * @param array $item
         *
         * @throws Exception If an error occurs.
         * @throws InvalidArgument If args or an item is invalid.
         */
        public function handle_process_item_action(array $item);
    }
    /**
     * AbstractActionSchedulerJob class.
     *
     * Abstract class for jobs that use ActionScheduler.
     *
     * @since 5.2.0
     */
    abstract class AbstractActionSchedulerJob implements \AutomateWoo\Jobs\ActionSchedulerJobInterface
    {
        /**
         * @var ActionSchedulerInterface
         */
        protected $action_scheduler;
        /**
         * @var ActionSchedulerJobMonitor
         */
        protected $monitor;
        /**
         * AbstractActionSchedulerJob constructor.
         *
         * @param ActionSchedulerInterface  $action_scheduler
         * @param ActionSchedulerJobMonitor $monitor
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\Jobs\ActionSchedulerJobMonitor $monitor)
        {
        }
        /**
         * Get the base name for the job's scheduled actions.
         *
         * @return string
         */
        protected function get_hook_base_name()
        {
        }
        /**
         * Get the hook name for the "process item" action.
         *
         * This method is required by the job monitor.
         *
         * @return string
         */
        public function get_process_item_hook()
        {
        }
    }
    /**
     * AbstractOneTimeActionSchedulerJob class.
     *
     * A "one time job" is a job that receives all the items it needs to process immediately instead of in batches.
     *
     * @since 5.2.0
     */
    abstract class AbstractOneTimeActionSchedulerJob extends \AutomateWoo\Jobs\AbstractActionSchedulerJob implements \AutomateWoo\Jobs\OneTimeActionSchedulerJobInterface
    {
        use \AutomateWoo\Traits\ArrayValidator;
        /**
         * Process a single item.
         *
         * @param array $item A single item to process. Expects a validated item.
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected abstract function process_item(array $item);
        /**
         * Init the batch schedule for the job.
         *
         * The job name is used to generate the schedule event name.
         */
        public function init()
        {
        }
        /**
         * Starts the job.
         *
         * @param array[] $items The items to process in the job.
         *                       Items are stored in the database so don't include full objects.
         *
         * @throws InvalidArgument If an item is not valid.
         */
        public function start(array $items = [])
        {
        }
        /**
         * Handles the process item job action.
         *
         * @param array $item
         *
         * @throws Exception If an error occurs.
         * @throws InvalidArgument If args or an item is invalid.
         */
        public function handle_process_item_action(array $item)
        {
        }
        /**
         * Validate an item to be processed by the job.
         *
         * @param array $item
         *
         * @throws InvalidArgument If the item is not valid.
         */
        protected function validate_item(array $item)
        {
        }
    }
    /**
     * Class ToolTaskRunner
     *
     * Runs background tasks as required by AutomateWoo\Tools.
     *
     * @since 5.2.0.
     */
    class ToolTaskRunner extends \AutomateWoo\Jobs\AbstractOneTimeActionSchedulerJob
    {
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @var ToolsService
         */
        protected $tools_service;
        /**
         * ToolTaskRunner constructor.
         *
         * @param ActionSchedulerInterface  $action_scheduler
         * @param ActionSchedulerJobMonitor $monitor
         * @param ToolsService              $tools
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\Jobs\ActionSchedulerJobMonitor $monitor, \AutomateWoo\Tools\ToolsService $tools)
        {
        }
        /**
         * Process a single item.
         *
         * @param array $item A single item to process. Expects a validated item.
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         * @throws RuntimeException If tool is not found.
         */
        protected function process_item(array $item)
        {
        }
        /**
         * Validate an item to be processed by the job.
         *
         * @param array $item
         *
         * @throws InvalidArgument If the item is not valid.
         */
        protected function validate_item(array $item)
        {
        }
    }
    /**
     * Interface BatchedActionSchedulerJobInterface.
     *
     * @since 5.2.0
     */
    interface BatchedActionSchedulerJobInterface extends \AutomateWoo\Jobs\ActionSchedulerJobInterface
    {
        /**
         * Start the job.
         *
         * @param array $args Optionally set args to be available during this instance of the job.
         */
        public function start(array $args = []);
        /**
         * Handles batch creation action hook.
         *
         * @hooked automatewoo/jobs/{$job_name}/create_batch
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job.
         *
         * @throws Exception If an error occurs.
         */
        public function handle_create_batch_action(int $batch_number, array $args);
        /**
         * Handles processing single item action hook.
         *
         * @hooked automatewoo/jobs/{$job_name}/process_item
         *
         * @param mixed $item A single job item from the current batch.
         * @param array $args The args for this instance of the job.
         *
         * @throws Exception If an error occurs.
         */
        public function handle_process_item_action($item, array $args);
    }
    /**
     * Interface JobRegistryInterface.
     *
     * @since 5.1.0
     */
    interface JobRegistryInterface
    {
        /**
         * Get a single registered job.
         *
         * @param string $name
         *
         * @return JobInterface
         *
         * @throws JobException If the job is not found.
         * @throws InvalidClass|InvalidArgument When there is an invalid job class.
         */
        public function get(string $name) : \AutomateWoo\Jobs\JobInterface;
        /**
         * Get an array of all registered jobs.
         *
         * @return JobInterface[]
         *
         * @throws InvalidClass|InvalidArgument When there is an error loading jobs.
         */
        public function list() : array;
    }
    /**
     * JobRegistry class.
     *
     * @since 5.1.0
     */
    class JobRegistry implements \AutomateWoo\Jobs\JobRegistryInterface
    {
        use \AutomateWoo\Traits\ArrayValidator;
        /**
         * Array of job objects with their names as keys.
         *
         * @var JobInterface[]
         */
        protected $jobs;
        /**
         * @var ActionSchedulerInterface
         */
        protected $action_scheduler;
        /**
         * @var OptionsStore
         */
        protected $options_store;
        /**
         * @var ToolsService
         */
        protected $tools_service;
        /**
         * BatchedJobInitializer constructor.
         *
         * @param ActionSchedulerInterface $action_scheduler
         * @param OptionsStore             $options_store
         * @param ToolsService             $tools_service
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\OptionsStore $options_store, \AutomateWoo\Tools\ToolsService $tools_service)
        {
        }
        /**
         * Get a single registered job.
         *
         * @param string $name
         *
         * @return JobInterface
         *
         * @throws InvalidClass|InvalidArgument When there is an error loading jobs.
         * @throws JobException If the job is not found.
         */
        public function get(string $name) : \AutomateWoo\Jobs\JobInterface
        {
        }
        /**
         * Get an array of all registered jobs.
         *
         * @return JobInterface[]
         *
         * @throws InvalidClass|InvalidArgument When there is an error loading jobs.
         */
        public function list() : array
        {
        }
        /**
         * Load jobs.
         *
         * Only loads jobs the first time it's called.
         *
         * @throws InvalidArgument|InvalidClass When there is an error loading jobs.
         */
        protected function load_jobs()
        {
        }
    }
    /**
     * Interface StartOnHookInterface.
     *
     * Jobs that implement this interface will start on a specific action hook, e.g. automatewoo_hourly_worker.
     *
     * @since 5.1.0
     */
    interface StartOnHookInterface extends \AutomateWoo\Jobs\JobInterface
    {
        /**
         * Get the name of an action hook to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook();
    }
    /**
     * AbstractBatchedActionSchedulerJob class.
     *
     * Enables a job to be processed in recurring scheduled batches with queued events.
     *
     * Notes:
     * - Uses ActionScheduler's very scalable async actions feature which will run async batches in loop back requests until all batches are done
     * - Items may be processed concurrently by AS, but batches will be created one after the other, not concurrently
     * - The job will not start if it is already running
     *
     * @since 5.1.0
     */
    abstract class AbstractBatchedActionSchedulerJob extends \AutomateWoo\Jobs\AbstractActionSchedulerJob implements \AutomateWoo\Jobs\BatchedActionSchedulerJobInterface
    {
        use \AutomateWoo\Traits\ArrayValidator;
        /**
         * Whether multiple instances of the job should be allowed to run concurrently.
         *
         * If the job is scheduled to run frequently, e.g. in less than 10 minute intervals, it's a good idea
         * to disallow concurrency to prevent race conditions.
         *
         * @var bool
         */
        protected $allow_concurrent = false;
        /**
         * Get a new batch of items.
         *
         * If no items are returned the job will stop.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job. Args are already validated.
         *
         * @return string[]|int[]|array[]
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected abstract function get_batch(int $batch_number, array $args);
        /**
         * Process a single item.
         *
         * @param string|int|array $item A single item from the get_batch() method. Expects a validated item.
         * @param array            $args The args for this instance of the job. Args are already validated.
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected abstract function process_item($item, array $args);
        /**
         * Validate an item to be processed by the job.
         *
         * @param mixed $item
         *
         * @throws InvalidArgument If the item is not valid.
         */
        protected abstract function validate_item($item);
        /**
         * Can the job start.
         *
         * @return bool Returns true if the job can start.
         *
         * @throws Exception An exception may be thrown in child method.
         */
        protected function can_start() : bool
        {
        }
        /**
         * Init the batch schedule for the job.
         *
         * The job name is used to generate the schedule event name.
         */
        public function init()
        {
        }
        /**
         * Get the hook name for the "create batch" action.
         *
         * @return string
         */
        protected function get_create_batch_hook()
        {
        }
        /**
         * Enqueue the "create_batch" action provided it doesn't already exist.
         *
         * To make minimize the resource use of starting the job the batch creation is handled async.
         *
         * @param array $args Optionally set args to be available during this instance of the job.
         *
         * @throws InvalidArgument If args are invalid.
         * @throws Exception An exception may be thrown from child class.
         */
        public function start(array $args = [])
        {
        }
        /**
         * Handles batch creation action hook.
         *
         * @hooked automatewoo/jobs/{$job_name}/create_batch
         *
         * Schedules an action to run immediately for each item in the batch.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job.
         *
         * @throws Exception If an error occurs.
         * @throws JobException If the job failure rate is too high.
         * @throws InvalidArgument If args or an item is invalid.
         */
        public function handle_create_batch_action(int $batch_number, array $args)
        {
        }
        /**
         * Get job batch size.
         *
         * @return int
         */
        protected function get_batch_size()
        {
        }
        /**
         * Get the query offset based on a given batch number and the specified batch size.
         *
         * @param int $batch_number
         *
         * @return int
         */
        protected function get_query_offset(int $batch_number) : int
        {
        }
        /**
         * Handles processing single item action hook.
         *
         * @hooked automatewoo/jobs/{$job_name}/process_item
         *
         * @param mixed $item A single job item from the current batch.
         * @param array $args The args for this instance of the job.
         *
         * @throws Exception If an error occurs.
         * @throws InvalidArgument If args or an item is invalid.
         */
        public function handle_process_item_action($item, array $args)
        {
        }
        /**
         * Schedule a new "create batch" action to run immediately.
         *
         * @param int   $batch_number The batch number for the new batch.
         * @param array $args         The args for this instance of the job.
         */
        protected function schedule_create_batch_action(int $batch_number, array $args)
        {
        }
        /**
         * Check if this job is running.
         *
         * The job is considered to be running if a "create_batch" action is currently pending or in-progress.
         *
         * @return bool
         */
        protected function is_running() : bool
        {
        }
        /**
         * Validate the job args.
         *
         * @param array $args The args for this instance of the job.
         */
        protected function validate_args(array $args)
        {
        }
        /**
         * Called when the job is completed.
         *
         * @param int   $final_batch_number The final batch number when the job was completed.
         *                                  If equal to 1 then no items were processed by the job.
         * @param array $args               The args for this instance of the job.
         */
        protected function handle_complete(int $final_batch_number, array $args)
        {
        }
    }
}
namespace AutomateWoo\Traits {
    /**
     * IntegerValidator trait.
     *
     * @since 5.1.0
     */
    trait IntegerValidator
    {
        /**
         * Validate that an value is a positive integer.
         *
         * @param mixed $value The value to validate.
         *
         * @throws InvalidArgument When $value is not valid.
         */
        public function validate_positive_integer($value)
        {
        }
    }
}
namespace AutomateWoo\Jobs\Traits {
    /**
     * Trait ValidateItemAsIntegerId
     *
     * @since 5.1.0
     */
    trait ValidateItemAsIntegerId
    {
        use \AutomateWoo\Traits\IntegerValidator;
        /**
         * Validate an item.
         *
         * @param mixed $item
         *
         * @throws InvalidArgument If the item is not valid.
         */
        protected function validate_item($item)
        {
        }
    }
}
namespace AutomateWoo\Jobs {
    /**
     * Job to run queued workflow when they are scheduled to run.
     *
     * @since 5.1.0
     */
    class RunQueuedWorkflows extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob implements \AutomateWoo\Jobs\StartOnHookInterface
    {
        use \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId;
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get the name of an action to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook()
        {
        }
        /**
         * Can the job start.
         *
         * Because this job runs every 2 minutes this method is over-ridden here to prevent a create batch action from
         * being created every 2 minutes.
         *
         * @return bool Returns true if the job can start.
         */
        protected function can_start() : bool
        {
        }
        /**
         * Get a new batch of items.
         *
         * If no items are returned the job will stop.
         *
         * @param int   $batch_number The batch number increments for each new batch in the a job cycle.
         * @param array $args         The args for this instance of the job.
         *
         * @return int[]
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Process a single item.
         *
         * @param int   $item A single item from the get_batch() method. Expects a validated item.
         * @param array $args The args for this instance of the job.
         *
         * @throws JobException When the item can't be processed.
         */
        protected function process_item($item, array $args)
        {
        }
    }
}
namespace AutomateWoo\Jobs\Traits {
    /**
     * Trait ItemDeletionDate.
     *
     * @since   5.0.0
     * @package AutomateWoo\Jobs
     */
    trait ItemDeletionDate
    {
        /**
         * Get the number of days after which the item should be deleted.
         *
         * @return int
         */
        public abstract function get_deletion_period();
        /**
         * Get the deletion date.
         *
         * @return DateTime|false
         */
        protected function get_deletion_date()
        {
        }
    }
}
namespace AutomateWoo\Jobs {
    /**
     * Job that deletes expired coupons after a specified amount of time.
     *
     * @since   5.0.0
     * @package AutomateWoo\Jobs
     */
    class DeleteExpiredCoupons extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob implements \AutomateWoo\Jobs\StartOnHookInterface
    {
        use \AutomateWoo\Jobs\Traits\ItemDeletionDate, \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId;
        /**
         * @var OptionsStore $options_store
         */
        protected $options_store;
        /**
         * AbstractBatchedJob constructor.
         *
         * @param ActionSchedulerInterface  $action_scheduler
         * @param ActionSchedulerJobMonitor $monitor
         * @param OptionsStore              $options_store
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\Jobs\ActionSchedulerJobMonitor $monitor, \AutomateWoo\OptionsStore $options_store)
        {
        }
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get the name of an action to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook()
        {
        }
        /**
         * Get the number of days before expired coupons are deleted.
         *
         * @return int
         */
        public function get_deletion_period()
        {
        }
        /**
         * Can the job start.
         *
         * @return bool Returns true if the job can start.
         *
         * @throws InvalidArgument If option value is invalid.
         */
        protected function can_start() : bool
        {
        }
        /**
         * Get a new batch of items.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job.
         *
         * @return int[]
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Handle a single item.
         *
         * @param int   $coupon_id
         * @param array $args The args for this instance of the job.
         */
        protected function process_item($coupon_id, array $args)
        {
        }
    }
    /**
     * Class ActionSchedulerJobMonitor
     *
     * @since 5.1.0
     */
    class ActionSchedulerJobMonitor
    {
        /**
         * @var ActionSchedulerInterface
         */
        protected $action_scheduler;
        /**
         * ActionSchedulerInterface constructor.
         *
         * @param ActionSchedulerInterface $action_scheduler
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler)
        {
        }
        /**
         * Check whether the failure rate is above a threshold within the last hour.
         *
         * To protect against failing jobs running forever the job's failure rate is checked before creating a new batch.
         * By default, a job is stopped if it has 5 failures in the last hour.
         *
         * @param ActionSchedulerJobInterface $job
         *
         * @throws JobException If the job's error rate is above the threshold.
         */
        public function validate_failure_rate(\AutomateWoo\Jobs\ActionSchedulerJobInterface $job)
        {
        }
        /**
         * Get the batched job failure rate threshold (per hour).
         *
         * @return int
         */
        protected function get_failure_rate_threshold()
        {
        }
    }
    /**
     * JobService class.
     *
     * @version 5.1.0
     */
    class JobService
    {
        use \AutomateWoo\Traits\ArrayValidator;
        /**
         * @var JobRegistryInterface
         */
        protected $registry;
        /**
         * JobService constructor.
         *
         * @param JobRegistryInterface $registry
         */
        public function __construct(\AutomateWoo\Jobs\JobRegistryInterface $registry)
        {
        }
        /**
         * Initialize all jobs.
         *
         * @throws InvalidClass|InvalidArgument When there is an error loading jobs.
         */
        public function init_jobs()
        {
        }
        /**
         * Get a job by name.
         *
         * @param string $name The job name.
         *
         * @return JobInterface
         *
         * @throws JobException If the job is not found.
         * @throws InvalidClass|InvalidArgument When there is an invalid job class.
         */
        public function get_job(string $name) : \AutomateWoo\Jobs\JobInterface
        {
        }
    }
    /**
     * Goes through every guest order and creates a customer for it.
     *
     * @since 5.2.0
     */
    class SetupGuestCustomers extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob implements \AutomateWoo\Jobs\StartOnHookInterface
    {
        use \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId;
        /**
         * Setup guest customer complete option name
         *
         * @var string
         */
        protected $complete_option = '_automatewoo_setup_guest_customers_complete';
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get the name of an action to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook()
        {
        }
        /**
         * Process a single item.
         *
         * @param int   $order_id
         * @param array $args     The args for this instance of the job. Args are already validated.
         *
         * @throws JobException If item can't be found.
         */
        protected function process_item($order_id, array $args)
        {
        }
        /**
         * Get a new batch of items.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job. Args are already validated.
         *
         * @return int[]
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Can the job start.
         *
         * @return bool Returns true if the job can start.
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function can_start() : bool
        {
        }
        /**
         * Called when the job is completed.
         *
         * @param int   $final_batch_number The final batch number when the job was completed.
         *                                  If equal to 1 then no items were processed by the job.
         * @param array $args               The args for this instance of the job.
         */
        protected function handle_complete(int $final_batch_number, array $args)
        {
        }
    }
    /**
     * Job that deletes failed queued workflows after a specified amount of time.
     *
     * @since   5.0.0
     * @package AutomateWoo\Jobs
     */
    class DeleteFailedQueuedWorkflows extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob implements \AutomateWoo\Jobs\StartOnHookInterface
    {
        use \AutomateWoo\Jobs\Traits\ItemDeletionDate, \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId;
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get the name of an action to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook()
        {
        }
        /**
         * Get the number of days before queued workflows are deleted.
         *
         * @return int
         */
        public function get_deletion_period()
        {
        }
        /**
         * Get a batch of items to be deleted.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job.
         *
         * @return int[]
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Process a single item.
         *
         * @param int   $item
         * @param array $args The args for this instance of the job.
         *
         * @throws JobException If item can't be found.
         */
        protected function process_item($item, array $args)
        {
        }
    }
    /**
     * JobException class.
     *
     * @since 5.1.0
     */
    class JobException extends \RuntimeException implements \AutomateWoo\Exceptions\Exception
    {
        /**
         * Create a new exception when a job does not exist.
         *
         * @param string $name
         *
         * @return static
         */
        public static function job_does_not_exist(string $name) : \AutomateWoo\Jobs\JobException
        {
        }
        /**
         * Create a new exception instance for when a job item is not found.
         *
         * @return static
         */
        public static function item_not_found() : \AutomateWoo\Jobs\JobException
        {
        }
        /**
         * Create a new exception instance for when a job is stopped due to a high failure rate.
         *
         * @param string $job_name
         *
         * @return static
         */
        public static function stopped_due_to_high_failure_rate(string $job_name) : \AutomateWoo\Jobs\JobException
        {
        }
    }
    /**
     * Finds active carts that appear to be abandoned and changes their status.
     *
     * @since 5.1.0
     */
    class AbandonedCarts extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob implements \AutomateWoo\Jobs\StartOnHookInterface
    {
        use \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId;
        /**
         * @var OptionsStore $options_store
         */
        protected $options_store;
        /**
         * AbstractBatchedJob constructor.
         *
         * @param ActionSchedulerInterface  $action_scheduler
         * @param ActionSchedulerJobMonitor $monitor
         * @param OptionsStore              $options_store
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\Jobs\ActionSchedulerJobMonitor $monitor, \AutomateWoo\OptionsStore $options_store)
        {
        }
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get the name of an action to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook()
        {
        }
        /**
         * Get the base abandoned carts query for this job.
         *
         * @return Cart_Query
         * @throws Exception On date error.
         */
        protected function get_base_abandoned_carts_query()
        {
        }
        /**
         * Can the job start.
         *
         * Because this job runs every 2 minutes this method is over-ridden here to prevent a create batch action from
         * being created every 2 minutes.
         *
         * @return bool Returns true if the job can start.
         *
         * @throws Exception On date parse error.
         */
        protected function can_start() : bool
        {
        }
        /**
         * Get a new batch of items.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job. Args are already validated.
         *
         * @return int[]
         * @throws Exception On date parse error.
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Process a single item.
         *
         * @param int   $cart_id
         * @param array $args The args for this instance of the job. Args are already validated.
         *
         * @throws JobException If item can't be found.
         */
        protected function process_item($cart_id, array $args)
        {
        }
    }
    /**
     * Creates customer records for all registered users.
     *
     * @since 5.2.0
     */
    class SetupRegisteredCustomers extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob implements \AutomateWoo\Jobs\StartOnHookInterface
    {
        use \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId;
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get the name of an action to attach the job's start method to.
         *
         * @return string
         */
        public function get_start_hook()
        {
        }
        /**
         * Process a single item.
         *
         * @param int   $user_id
         * @param array $args    The args for this instance of the job. Args are already validated.
         *
         * @throws JobException If item can't be found.
         */
        protected function process_item($user_id, array $args)
        {
        }
        /**
         * Get a new batch of items.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job. Args are already validated.
         *
         * @return int[]
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Called when the job is completed.
         *
         * @param int   $final_batch_number The final batch number when the job was completed.
         *                                  If equal to 1 then no items were processed by the job.
         * @param array $args               The args for this instance of the job.
         *
         * @throws JobException If the job is not found.
         */
        protected function handle_complete(int $final_batch_number, array $args)
        {
        }
    }
    /**
     * WishlistItemOnSale job class.
     *
     * Requires a 'products' arg which contains an array of product IDs that are recently on sale.
     *
     * @since 5.1.0
     */
    class WishlistItemOnSale extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob
    {
        use \AutomateWoo\Jobs\Traits\ValidateItemAsIntegerId, \AutomateWoo\Traits\ArrayValidator;
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get a new batch of items.
         *
         * If no items are returned the job will stop.
         *
         * @param int   $batch_number The batch number increments for each new batch in the job cycle.
         * @param array $args         The args for this instance of the job. Args are already validated.
         *
         * @return int[]
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Process a single item.
         *
         * @param int   $item A single item from the get_batch() method. Expects a validated item.
         * @param array $args The args for this instance of the job. Args are already validated.
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function process_item($item, array $args)
        {
        }
        /**
         * Validate the job args.
         *
         * @param array $args The args for this instance of the job.
         *
         * @throws InvalidArgument If args are invalid.
         */
        protected function validate_args(array $args)
        {
        }
    }
    /**
     * BatchedWorkflows class.
     *
     * Requires a 'workflow' arg which contains the workflow ID to process items for.
     *
     * @since 5.1.0
     */
    class BatchedWorkflows extends \AutomateWoo\Jobs\AbstractBatchedActionSchedulerJob
    {
        use \AutomateWoo\Traits\IntegerValidator, \AutomateWoo\Traits\ArrayValidator;
        /**
         * This job is allowed to run concurrently.
         *
         * This is because it is manually started and multiple workflows can be have job instances at the same time.
         *
         * @var bool
         */
        protected $allow_concurrent = true;
        /**
         * @var callable
         */
        protected $get_workflow_callable;
        /**
         * AbstractBatchedJob constructor.
         *
         * @param ActionSchedulerInterface  $action_scheduler
         * @param ActionSchedulerJobMonitor $monitor
         * @param callable                  $get_workflow
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\Jobs\ActionSchedulerJobMonitor $monitor, callable $get_workflow)
        {
        }
        /**
         * Get the name of the job.
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get a new batch of items.
         *
         * @param int   $batch_number The batch number increments for each new batch in the a job cycle.
         * @param array $args         The args for this instance of the job. Args are already validated.
         *
         * @return array
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function get_batch(int $batch_number, array $args)
        {
        }
        /**
         * Handle a single item.
         *
         * @param mixed $item The item to process.
         * @param array $args The args for this instance of the job. Args are already validated.
         *
         * @throws Exception If an error occurs. The exception will be logged by ActionScheduler.
         */
        protected function process_item($item, array $args)
        {
        }
        /**
         * Validate the job args.
         *
         * @param array $args The args for this instance of the job.
         *
         * @throws InvalidArgument If args are invalid.
         */
        protected function validate_args(array $args)
        {
        }
        /**
         * Validate an item to be processed by the job.
         *
         * @param mixed $item
         *
         * @throws InvalidArgument If the item is not valid.
         */
        protected function validate_item($item)
        {
        }
        /**
         * Validate the workflow.
         *
         * It must exist, be active and its trigger should be an instance of Trigger_Background_Processed_Abstract.
         *
         * @param Workflow|false $workflow
         *
         * @throws RuntimeException If the workflow doesn't validate correctly.
         */
        protected function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Abstract for API integration classes.
     *
     * @class Integration
     * @since 2.3
     */
    abstract class Integration
    {
        /** @var string */
        public $integration_id;
        /** @var bool */
        public $log_errors = true;
        /**
         * @param $message
         */
        public function log($message)
        {
        }
        /**
         * @param Remote_Request $request
         */
        public function maybe_log_request_errors($request)
        {
        }
    }
}
namespace AutomateWoo\Background_Processes {
    /**
     * Base background process class
     */
    abstract class Base extends \AW_WP_Background_Process
    {
        /** @var string */
        public $action;
        /**
         * Background Processor base constructor.
         * Deliberately doesn't call parent method.
         */
        public function __construct()
        {
        }
        /**
         * @return boolean
         */
        public function has_queued_items()
        {
        }
        /**
         * Use this instead of dispatch to start process
         * @return bool|\WP_Error
         */
        public function start()
        {
        }
        /**
         * Process completed
         */
        protected function complete()
        {
        }
        /**
         * Reduce time limit to 10s
         * @return bool
         */
        protected function time_exceeded()
        {
        }
        /**
         * Reduce memory limit
         * @return bool
         */
        protected function memory_exceeded()
        {
        }
        /**
         * Handle
         *
         * Pass each queue item to the task handler, while remaining
         * within server memory and time limit constraints.
         */
        protected function handle()
        {
        }
        /**
         * @param $message
         */
        public function log($message)
        {
        }
        /**
         * over-ridden due to issue https://github.com/A5hleyRich/wp-background-processing/issues/7
         *
         * this method actually creates a new batch rather it doesn't replace existing queued items
         *
         * @return $this
         */
        public function save()
        {
        }
        /**
         * Dispatch background process.
         *
         * @return array|\WP_Error
         */
        public function dispatch()
        {
        }
        /**
         * Schedule health check if not scheduled
         */
        public function maybe_schedule_health_check()
        {
        }
        /**
         * Replace parent method to schedule health check 1 minute from now.
         * This is preferred rather than setting the health check to run instantly.
         * This value could actually be set for longer but if there is an issue with the HTTP request
         * this acts as a fallback method of processing events.
         *
         * @since 4.4
         */
        protected function schedule_event()
        {
        }
        /**
         * @return array
         */
        function get_data()
        {
        }
        /**
         * @return \stdClass
         */
        function get_next_batch()
        {
        }
        /**
         * Get query args
         *
         * @return array
         */
        protected function get_query_args()
        {
        }
        /**
         * Get post args
         *
         * @return array
         */
        protected function get_post_args()
        {
        }
        /**
         * Get dispatch URL for HTTP post.
         *
         * @since 4.4.0
         *
         * @return string
         */
        public function get_post_url()
        {
        }
        /**
         * @return string
         */
        public function get_ajax_action()
        {
        }
    }
    /**
     * Background processor for events
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     */
    class Event_Runner extends \AutomateWoo\Background_Processes\Base
    {
        /** @var string  */
        public $action = 'events';
        /**
         * @param int $event_id
         * @return bool
         */
        protected function task($event_id)
        {
        }
    }
    /**
     * Background processor for any workflows.
     *
     * It's better not to have a separate process for each workflow since there doesn't
     * appear to be any restriction on different processes running at the same time.
     *
     * Triggers that use this background process must extend Trigger_Background_Processed_Abstract.
     *
     * @deprecated in 5.1.0 and replaced with an ActionScheduler job. Temporarily kept for backwards compatibility.
     *
     * @since 3.7
     */
    class Workflows extends \AutomateWoo\Background_Processes\Base
    {
        /** @var string  */
        public $action = 'workflows';
        /**
         * @param array $data
         * @return mixed
         */
        protected function task($data)
        {
        }
        /**
         * Smoothly handles legacy background processor tasks by mapping them to an upgraded trigger.
         *
         * @param Trigger  $trigger
         * @param Workflow $workflow
         * @param array    $item
         *
         * @since 5.1
         */
        private function maybe_handle_legacy_pending_task($trigger, $workflow, $item)
        {
        }
    }
    /**
     * Background processor for the Wishlist Item On Sale trigger
     *
     * @deprecated in 5.1.0 and replaced with an ActionScheduler job.
     *             This is only maintained to help smooth the transition by processing any remaining tasks
     *             at the time of updating to AW 5.1.0.
     *
     * TODO remove this in 5.2
     */
    class Wishlist_Item_On_Sale extends \AutomateWoo\Background_Processes\Base
    {
        /** @var string  */
        public $action = 'wishlist_item_on_sale';
        /**
         * @param array $data
         * @return bool
         */
        protected function task($data)
        {
        }
    }
    /**
     * Background processor for tools.
     *
     * @deprecated in 5.2.0 and replaced with the ToolTaskRunner job powered by ActionScheduler.
     * @see \AutomateWoo\Jobs\ToolTaskRunner
     *
     * @since 3.8
     */
    class Tools extends \AutomateWoo\Background_Processes\Base
    {
        /** @var string  */
        public $action = 'tools';
        /**
         * @param array $data
         * @return mixed
         */
        protected function task($data)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Installer
     */
    class Installer
    {
        /** @var array */
        static $db_updates = ['2.6.0', '2.6.1', '2.7.0', '2.9.7', '3.0.0', '3.5.0', '3.6.0', '4.0.0', '5.0.0', '5.1.0', '5.3.0'];
        /** @var int  */
        static $db_update_items_processed = 0;
        static function init()
        {
        }
        /**
         * Admin init
         */
        static function admin_init()
        {
        }
        /**
         * Checks and logs if plugin files have been updated.
         *
         * @since 4.3.0
         */
        static function check_if_plugin_files_updated()
        {
        }
        /**
         * Install
         */
        static function install()
        {
        }
        /**
         * Runs when AW is installed for the first time.
         *
         * On the other hand `Installer::install()` runs on every plugin update.
         *
         * @since 4.7.0
         */
        private static function first_install()
        {
        }
        /**
         * @return bool
         */
        static function is_database_upgrade_required()
        {
        }
        /**
         * @return array
         */
        static function get_required_database_updates()
        {
        }
        /**
         * Handle updates, may be called multiple times to batch complete
         * Returns false if updates are still required
         * @return bool
         */
        static function run_database_updates()
        {
        }
        /**
         * Return true if update is complete, return false if another pass is required
         * @param $version
         * @return bool
         */
        static function run_database_update($version)
        {
        }
        /**
         * Returns the item to process count for all currently required updates.
         *
         * @return int
         */
        static function get_database_update_items_to_process_count()
        {
        }
        /**
         * Update version to current
         * @param $version string
         */
        private static function update_database_version($version)
        {
        }
        /**
         * Renders prompt notice for user to update
         */
        static function data_upgrade_prompt()
        {
        }
        /**
         * @return bool
         */
        static function is_data_update_screen()
        {
        }
        /**
         * Show action links on the plugin screen.
         *
         * @param	mixed $links Plugin Action links
         * @return	array
         */
        static function plugin_action_links($links)
        {
        }
        static function do_plugin_updated_actions()
        {
        }
        /**
         * Creates required pages, run on every update, so it can be repeated without creating duplicates
         */
        static function create_pages()
        {
        }
    }
    /**
     * @class Fields_Helper
     */
    class Fields_Helper
    {
        /**
         * @return array
         */
        static function get_categories_list()
        {
        }
        /**
         * @since 3.2.8
         * @return array
         */
        static function get_product_tags_list()
        {
        }
        /**
         * @since 3.3.2
         * @return array
         */
        static function get_coupons_list()
        {
        }
        /**
         * @return array
         */
        static function get_user_tags_list()
        {
        }
    }
}
namespace AutomateWoo\Async_Events {
    /**
     * Class Abstract_Async_Event
     *
     * @since 4.8.0
     */
    abstract class Abstract_Async_Event
    {
        /**
         * The unique name/ID of the event.
         *
         * @var string
         */
        protected $event_name;
        /**
         * Set any events that this event is dependant on.
         *
         * @var array
         */
        protected $event_dependencies;
        /**
         * @var ActionSchedulerInterface
         */
        protected $action_scheduler;
        /**
         * Init the event.
         */
        public abstract function init();
        /**
         * Abstract_Async_Event constructor.
         *
         * @param ActionSchedulerInterface $action_scheduler
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler)
        {
        }
        /**
         * Get the event name.
         *
         * @return string
         */
        public function get_event_name()
        {
        }
        /**
         * Set the event name.
         *
         * @param string $event_name
         */
        public function set_event_name($event_name)
        {
        }
        /**
         * Get the events this event is dependant on.
         *
         * @return array
         */
        public function get_event_dependencies()
        {
        }
        /**
         * Set the events this event is dependant on.
         *
         * @deprecated in 5.2.0 because it's preferable for events to define their own dependencies.
         *
         * @param array|string $event_dependencies
         */
        public function set_event_dependencies($event_dependencies)
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Create async event.
         *
         * Uses $this->get_hook_name() for the hook name.
         *
         * @param array $event_args The args for the event.
         *
         * @since 5.2.0
         */
        protected function create_async_event(array $event_args)
        {
        }
    }
    /**
     * Class Membership_Status_Changed
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Membership_Status_Changed extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule event.
         *
         * @param \WC_Memberships_User_Membership $membership The membership
         * @param string                          $old_status Old status, without the wcm- prefix
         * @param string                          $new_status New status, without the wcm- prefix
         */
        public function schedule_event($membership, $old_status, $new_status)
        {
        }
    }
    /**
     * Class Order_Pending
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Order_Pending extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Order pending uses the order created async event.
         *
         * @var array
         */
        protected $event_dependencies = ['order_created'];
        /**
         * Init order pending async event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule order pending event in 5 mins.
         *
         * @param int $order_id
         */
        public function schedule_pending_check($order_id)
        {
        }
        /**
         * Clear scheduled event if order is no longer pending.
         *
         * @param int    $order_id
         * @param string $old_status
         */
        public function maybe_clear_scheduled_check($order_id, $old_status)
        {
        }
        /**
         * Maybe do order pending action.
         *
         * @param int $order_id
         */
        public function do_pending_check($order_id)
        {
        }
    }
    /**
     * Event to fire when an order is first paid, supports payments by invoice, cheque, bank etc
     *
     * @since 4.8.0
     */
    class Order_Paid extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Set any events that this event is dependant on.
         *
         * @var array
         */
        protected $event_dependencies = ['order_status_changed'];
        /**
         * Init order paid event helper.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Determines whether the status change means the order is now paid.
         *
         * If the order is paid an action is triggered. This action can only run once for each order.
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         */
        public function handle_async_order_status_changed($order_id, $old_status, $new_status)
        {
        }
    }
    /**
     * Trait UniqueEventsForRequestHelper
     *
     * Helper to record and check whether async event has been created for the given item in the current request.
     *
     * @since 5.2.0
     */
    trait UniqueEventsForRequestHelper
    {
        /**
         * Array of IDs of items that that were created in the current request.
         *
         * @since 5.2.0
         *
         * @var int[]
         */
        protected $created_event_item_ids = [];
        /**
         * Check if a given item ID is unique for this event during the current request.
         *
         * @param int $item_id
         *
         * @return bool
         */
        protected function check_item_is_unique_for_event(int $item_id) : bool
        {
        }
        /**
         * Record that an event was added for the item ID.
         *
         * @param int $item_id
         */
        protected function record_event_added_for_item(int $item_id)
        {
        }
    }
    /**
     * Class Order_Created
     *
     * @since 4.8.0
     */
    class Order_Created extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        use \AutomateWoo\Async_Events\UniqueEventsForRequestHelper;
        const MAYBE_ORDER_CREATED_HOOK = 'automatewoo/async/maybe_order_created';
        const ORDER_CREATED_META_KEY = '_automatewoo_order_created';
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Handle order status change.
         *
         * @param int      $order_id
         * @param string   $old_status
         * @param string   $new_status
         * @param WC_Order $order
         *
         * @since 5.5.23
         */
        public function handle_order_status_changed(int $order_id, string $old_status, string $new_status, \WC_Order $order)
        {
        }
        /**
         * Handle post status transition.
         *
         * @param string  $new_status
         * @param string  $old_status
         * @param WP_Post $post
         *
         * @deprecated use \AutomateWoo\Async_Events\Order_Created::handle_order_status_changed()
         */
        public function handle_transition_post_status(string $new_status, string $old_status, \WP_Post $post)
        {
        }
        /**
         * An order was created.
         *
         * @param int|string $order_id
         * @param WC_Order   $order
         */
        public function enqueue_maybe_order_created_async_event($order_id, $order = null)
        {
        }
        /**
         * Handles async order created event.
         *
         * Prevents duplicate events from running with a meta check.
         *
         * @param int $order_id
         */
        public function maybe_do_order_created_action(int $order_id)
        {
        }
    }
    /**
     * Class Subscription_Renewal_Payment_Complete
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Renewal_Payment_Complete extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule event.
         *
         * @param WC_Subscription $subscription
         * @param WC_Order        $order
         */
        public function schedule_event($subscription, $order)
        {
        }
    }
    /**
     * Class Subscription_Renewal_Payment_Failed
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Renewal_Payment_Failed extends \AutomateWoo\Async_Events\Subscription_Renewal_Payment_Complete
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
    }
    /**
     * Class User_Registered
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class User_Registered extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Handle user registered event.
         *
         * Async user registration hook, allows checkout and other third party plugins to add data before we run triggers.
         *
         * @param int $user_id
         */
        public function handle_user_registered(int $user_id)
        {
        }
    }
    /**
     * Class MembershipCreated
     *
     * @since 5.2.0
     */
    class MembershipCreated extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        const NAME = 'membership_created';
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Handle membership created action.
         *
         * @param \WC_Memberships_Membership_Plan $plan
         * @param array                           $args
         */
        public function handle_membership_created($plan, $args)
        {
        }
    }
    /**
     * Class BookingCreated
     *
     * @since   5.3.0
     * @package AutomateWoo
     */
    class BookingCreated extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        const NAME = 'booking_created';
        /**
         * @var Bookings
         */
        protected $bookings_proxy;
        /**
         * BookingCreated constructor.
         *
         * @since 5.4.0
         *
         * @param ActionSchedulerInterface $action_scheduler
         * @param Bookings                 $bookings_proxy
         */
        public function __construct(\AutomateWoo\ActionScheduler\ActionSchedulerInterface $action_scheduler, \AutomateWoo\Proxies\Bookings $bookings_proxy)
        {
        }
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Dispatch async event for consumption by triggers.
         *
         * @since 5.4.0
         *
         * @param int $booking_id Booking id.
         */
        public function handle_new_booking(int $booking_id)
        {
        }
        /**
         * Listens for when a booking status transitions from a "draft" type to a "non-draft" type.
         *
         * @since 5.4.0
         *
         * @param string $old_status
         * @param string $new_status
         * @param int    $booking_id Booking id.
         */
        public function handle_booking_status_changed(string $old_status, string $new_status, int $booking_id)
        {
        }
        /**
         * Dispatch an interim scheduled action to ensure we don't interfere with the initial booking status change and
         * creation hooks.
         *
         * Calling ::save() on a booking object during a complex booking life-cycle event could cause unintended side-effects.
         *
         * @since 5.4.0
         *
         * @param int $booking_id
         */
        protected function dispatch_interim_booking_created_event(int $booking_id)
        {
        }
        /**
         * Get the interim async event hook name.
         *
         * @see BookingCreated::dispatch_interim_booking_created_event()
         *
         * @since 5.4.0
         *
         * @return string
         */
        protected function get_interim_hook_name() : string
        {
        }
        /**
         * Handle the interim booking created hook.
         *
         * @since 5.4.0
         *
         * @param int $booking_id
         */
        public function handle_interim_booking_created_event(int $booking_id)
        {
        }
        /**
         * Dispatch the final booking created event but only allow one to fire per booking.
         *
         * @param WC_Booking $booking
         */
        protected function dispatch_final_booking_created_event(\WC_Booking $booking)
        {
        }
    }
    /**
     * Class Subscription_Status_Changed
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Status_Changed extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule async event.
         *
         * @param int    $subscription_id
         * @param string $new_status
         * @param string $old_status
         */
        public function schedule_event($subscription_id, $new_status, $old_status)
        {
        }
    }
    /**
     * Class Order_Status_Changed
     *
     * @since 4.8.0
     */
    class Order_Status_Changed extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init order status changed async event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule event.
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         */
        public function schedule_event($order_id, $old_status, $new_status)
        {
        }
    }
    /**
     * Class Review_Approved
     *
     * @since   4.8.0
     * @package AutomateWoo
     */
    class Review_Approved extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule async event.
         *
         * @param Review $review
         */
        public function schedule_event($review)
        {
        }
    }
    /**
     * Class Subscription_Created
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Created extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        use \AutomateWoo\Async_Events\UniqueEventsForRequestHelper;
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Handle subscription created.
         *
         * @param \WC_Subscription|int $subscription
         */
        public function handle_subscription_created($subscription)
        {
        }
    }
    /**
     * Class BookingStatusChanged
     *
     * @since 5.3.0
     * @package AutomateWoo
     */
    class BookingStatusChanged extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        const NAME = 'booking_status_changed';
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Schedule bookings status change event for consumption by triggers.
         *
         * Doesn't dispatch for 'was-in-cart' status changes because this status isn't a real booking status and essentially
         * functions as a 'trash' status. The was in cart is used when a booking cart item is removed from the cart.
         *
         * @param string $from       Previous status.
         * @param string $to         New (current) status.
         * @param int    $booking_id Booking id.
         */
        public function schedule_event(string $from, string $to, int $booking_id)
        {
        }
    }
    /**
     * Class MC4WP_Form_Success
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class MC4WP_Form_Success extends \AutomateWoo\Async_Events\Abstract_Async_Event
    {
        /**
         * Init the event.
         */
        public function init()
        {
        }
        /**
         * Get the async event hook name.
         *
         * @since 5.2.0
         *
         * @return string
         */
        public function get_hook_name() : string
        {
        }
        /**
         * Schedule event.
         *
         * @param \MC4WP_Form $form
         */
        public function schedule_event($form)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Class WooCommerce_Blocks_Integration
     *
     * @since 5.5.9
     * @package AutomateWoo
     */
    class WooCommerce_Blocks_Integration
    {
        /**
         * WooCommerce_Blocks_Integration constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register blocks.
         */
        public function register_blocks()
        {
        }
        /**
         * Load blocks in frontend with Checkout.
         *
         * @param IntegrationRegistry $integration_registry
         */
        public function register_checkout_frontend_blocks($integration_registry)
        {
        }
        /**
         * This allows dynamic (JS) blocks to access attributes in the frontend.
         *
         * @param string[] $allowed_blocks
         */
        public function add_attributes_to_frontend_blocks($allowed_blocks)
        {
        }
        /**
         * Add schema Store API to support posted data.
         */
        public function extend_store_api()
        {
        }
    }
    /**
     * Communication_Page
     * @since 4.0
     */
    class Communication_Page
    {
        /**
         * Init runs when on the communication preferences page
         */
        static function init()
        {
        }
        static function output_preferences_shortcode()
        {
        }
        /**
         * @param Customer $customer
         */
        static function output_preferences_form($customer)
        {
        }
        static function output_signup_form()
        {
        }
    }
}
namespace {
    // phpcs:ignoreFile
    /**
     * @class AutomateWoo_Legacy
     */
    abstract class AutomateWoo_Legacy
    {
        /**
         * @deprecated
         * @var AutomateWoo\Admin
         */
        public $admin;
        /**
         * @var AutomateWoo\Session_Tracker
         * @deprecated
         */
        public $session_tracker;
        /**
         * @return string
         * @since 2.4.4
         * @deprecated use WC_Geolocation::get_ip_address()
         */
        function get_ip()
        {
        }
        /**
         * @deprecated
         * @param $id
         * @return AutomateWoo\Log|bool
         */
        function get_log($id)
        {
        }
        /**
         * @deprecated
         * @param $id
         * @return AutomateWoo\Workflow|bool
         */
        function get_workflow($id)
        {
        }
        /**
         * @deprecated
         * @param $id
         * @return AutomateWoo\Queued_Event|bool
         */
        function get_queued_event($id)
        {
        }
        /**
         * @deprecated
         * @param $id
         * @return AutomateWoo\Guest|bool
         */
        function get_guest($id)
        {
        }
        /**
         * @deprecated
         * @param $id
         * @return AutomateWoo\Cart|bool
         */
        function get_cart($id)
        {
        }
    }
    /**
     * AutomateWoo plugin singleton.
     *
     * @class   AutomateWoo
     * @package AutomateWoo
     */
    final class AutomateWoo extends \AutomateWoo_Legacy
    {
        /**
         * The plugin version.
         *
         * @var string
         */
        public $version;
        /**
         * The plugin slug 'automatewoo'.
         *
         * @var string
         */
        public $plugin_slug;
        /**
         * The plugin basename 'automatewoo/automatewoo.php'.
         *
         * @var string
         */
        public $plugin_basename;
        /**
         * The plugin website URL.
         *
         * @var string
         */
        public $website_url = 'https://automatewoo.com/';
        /**
         * Order helper class.
         *
         * @var AutomateWoo\Order_Helper
         */
        public $order_helper;
        /**
         * Options class.
         *
         * @var AutomateWoo\Options
         */
        private $options;
        /**
         * ActionScheduler instance.
         *
         * @var ActionSchedulerInterface
         */
        private $action_scheduler;
        /**
         * PresetService class.
         *
         * @var PresetService
         */
        private $preset_service;
        /**
         * JobService class.
         *
         * @var JobService
         */
        private $job_service;
        /**
         * OptionsStore class.
         *
         * @var OptionsStore
         */
        private $options_store;
        /**
         * Tools registry class.
         *
         * @var ToolsService
         */
        private $tools_service;
        /**
         * Instance of singleton.
         *
         * @var AutomateWoo
         */
        private static $instance = \null;
        /**
         * Constructor
         */
        private function __construct()
        {
        }
        /**
         * Init
         */
        public function init()
        {
        }
        /**
         * File includes.
         */
        public function includes()
        {
        }
        /**
         * Plugin options.
         *
         * @return AutomateWoo\Options
         */
        public function options()
        {
        }
        /**
         * What type of request is this?
         *
         * @param string $type Ajax, frontend or admin.
         *
         * @return bool
         */
        public function is_request($type)
        {
        }
        /**
         * Returns true if the request is a non-legacy REST API request.
         *
         * Legacy REST requests should still run some extra code for backwards compatibility.
         *
         * Copy of \WooCommerce::is_rest_api_request() which was added around 3.6
         *
         * @since 4.5.4
         *
         * @todo: replace this function once core WP function is available: https://core.trac.wordpress.org/ticket/42061.
         *
         * @return bool
         */
        public function is_rest_api_request()
        {
        }
        /**
         * Get the URL to something in the plugin dir.
         *
         * @param string $end End of the URL.
         *
         * @return string
         */
        public function url($end = '')
        {
        }
        /**
         * Get the URL to something in the plugin admin assets dir.
         *
         * @param string $end End of the URL.
         *
         * @return string
         */
        public function admin_assets_url($end = '')
        {
        }
        /**
         * Get the path to something in the plugin dir.
         *
         * @param string $end End of the path.
         *
         * @return string
         */
        public function path($end = '')
        {
        }
        /**
         * Get the path to something in the plugin admin dir.
         *
         * @param string $end End of the path.
         *
         * @return string
         */
        public function admin_path($end = '')
        {
        }
        /**
         * Get the path to something in the plugin library dir.
         *
         * @param string $end End of the path.
         *
         * @return string
         */
        public function lib_path($end = '')
        {
        }
        /**
         * Return true if AutomateWoo is installed.
         *
         * @since 4.9.2
         *
         * @return bool
         */
        public function is_installed()
        {
        }
        /**
         * Get ActionScheduler.
         *
         * @return ActionSchedulerInterface
         */
        public function action_scheduler()
        {
        }
        /**
         * Returns the PresetService
         *
         * @return PresetService
         */
        public function preset_service()
        {
        }
        /**
         * Get job service class.
         *
         * @return JobService
         */
        public function job_service()
        {
        }
        /**
         * Get job service class.
         *
         * @return OptionsStore
         */
        public function options_store()
        {
        }
        /**
         * Get tools registry class.
         *
         * @return ToolsService
         */
        public function tools_service()
        {
        }
        /**
         * Get bookings proxy class.
         *
         * @return BookingsProxy
         */
        public function bookings_proxy() : \AutomateWoo\Proxies\Bookings
        {
        }
        /**
         * Return the singleton instance.
         *
         * @return AutomateWoo
         */
        public static function instance()
        {
        }
    }
}
namespace AutomateWoo\ActivityPanelInbox {
    /**
     * Add the Welcome note on first install and remove it if the plugin is deactivated.
     *
     * @package AutomateWoo\ActivityPanelInbox
     * @since 5.1.0
     */
    class WelcomeNote
    {
        use \Automattic\WooCommerce\Admin\Notes\NoteTraits;
        const NOTE_NAME = 'automatewoo-welcome';
        /**
         * Init the hooks for the note.
         */
        public static function init()
        {
        }
        /**
         * Get the note.
         */
        public static function get_note()
        {
        }
    }
    /**
     * Add note when updating to AW 5.4 stating that the AW Subscription add-on has been added to core.
     *
     * @since 5.4.0
     */
    class SubscriptionsAddonDeactivatedNote
    {
        use \Automattic\WooCommerce\Admin\Notes\NoteTraits;
        const NOTE_NAME = 'automatewoo-subscriptions-addon-deactivated';
        /**
         * Init the hooks for the note.
         */
        public function init()
        {
        }
        /**
         * Maybe add note on AW version changed action.
         *
         * @param string $old_version
         */
        public function handle_automatewoo_version_changed(string $old_version)
        {
        }
        /**
         * Get the note.
         */
        public static function get_note()
        {
        }
    }
    /**
     * Add the Update note when updating from < $version to >= $version and remove
     * the note if the plugin is deactivated.
     * Also remove the Welcome note and any prior Update notes if present, to avoid
     * double notes.
     *
     * @package AutomateWoo\ActivityPanelInbox
     * @since 5.1.0
     */
    class UpdateNote
    {
        use \Automattic\WooCommerce\Admin\Notes\NoteTraits;
        const NOTE_NAME = 'automatewoo-update';
        /** @var string The version this notice relates to. */
        protected static $version = '5.1';
        /**
         * Init the hooks for the note.
         */
        public static function init()
        {
        }
        /**
         * Add the Update note if notes are enabled and it's the first update to $version or higher.
         *
         * @param string $old_version previously installed version.
         * @param string $new_version newly updated version.
         *
         * @throws \Exception If the data store fails to load.
         */
        public static function maybe_add_activity_panel_inbox_note($old_version, $new_version)
        {
        }
        /**
         * Get the note.
         */
        public static function get_note()
        {
        }
        /**
         * Find any older Update notes and remove them.
         */
        public static function possibly_delete_older_update_notes()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Factory
     * @since 2.9
     */
    abstract class Factory
    {
        /** @var array - must NOT be declared in child class  */
        static $cache = [];
        /** @var string - must be declared in child class */
        static $model;
        /**
         * Fetches the object type from factories array
         * @return string
         */
        static function get_object_type()
        {
        }
        /**
         * @param integer $object_id
         * @return Model|bool|mixed
         */
        static function get($object_id)
        {
        }
        /**
         * @deprecated
         * @param $object
         * @return Model|bool
         */
        static function load($object)
        {
        }
        /**
         * Setup cache array for type
         */
        static function setup_cache()
        {
        }
        /**
         * Does the object existing the cache, returns true if the object is false in the cache
         * @param $object_id
         * @return bool
         */
        static function is_cached($object_id)
        {
        }
        /**
         * @param $object_id
         * @return bool|Model
         */
        static function get_cached($object_id)
        {
        }
        /**
         * Cache the fact that the object does not exist
         * @param $object_id
         */
        static function cache_nonexistent_object($object_id)
        {
        }
        /**
         * @param Model $object
         */
        static function update_cache($object)
        {
        }
        /**
         * @param Model $object
         */
        static function clean_cache($object)
        {
        }
        /**
         * Clears cache property for object based on new and existing values
         *
         * @since 3.4.2
         * @param Model $object
         * @param string $prop
         * @param string $group
         */
        static function clear_cached_prop($object, $prop, $group)
        {
        }
    }
    /**
     * @class Queued_Event_Factory
     * @since 2.9
     */
    class Queued_Event_Factory extends \AutomateWoo\Factory
    {
        static $model = 'AutomateWoo\\Queued_Event';
        /**
         * @param int $id
         * @return Queued_Event|bool
         */
        static function get($id)
        {
        }
    }
    /**
     * Class to define AutomateWoo constants.
     *
     * @class Constants
     * @package AutomateWoo
     */
    class Constants
    {
        /**
         * Initialize AW constants
         */
        public static function init()
        {
        }
        /**
         * Set defaults
         */
        public static function set_defaults()
        {
        }
    }
    /**
     * @class Trigger
     */
    abstract class Trigger
    {
        /** @var string */
        public $title;
        /** @var string */
        public $name;
        /** @var string */
        public $description;
        /** @var string */
        public $group;
        /** @var array */
        public $supplied_data_items = [];
        /** @var array */
        public $fields = [];
        /** @var array */
        public $options;
        /** @var array */
        protected $rules;
        /** @var bool */
        protected $has_loaded_fields = false;
        /** @var bool */
        public $has_loaded_admin_details = false;
        /** @var array */
        protected $limit_trigger_to_specific_workflows = [];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events;
        /**
         * Define whether workflows using this trigger can be queued. Defaults to true
         * @since 3.8
         */
        const SUPPORTS_QUEUING = true;
        /**
         * Define if workflows using this trigger are run daily at a specific time. Defaults to false.
         * @since 3.8
         */
        const SUPPORTS_CUSTOM_TIME_OF_DAY = false;
        abstract function register_hooks();
        /**
         * Construct
         */
        function __construct()
        {
        }
        /**
         * Init
         */
        function init()
        {
        }
        /**
         * Method to set title, group, description and other admin props
         */
        function load_admin_details()
        {
        }
        /**
         * Registers any fields used on for a trigger
         */
        function load_fields()
        {
        }
        /**
         * Admin info loader
         */
        function maybe_load_admin_details()
        {
        }
        /**
         * Field loader
         */
        function maybe_load_fields()
        {
        }
        /**
         * @param \AutomateWoo\Workflow $workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        /**
         * @param $option object
         */
        function add_field($option)
        {
        }
        /**
         * @param $option_name
         */
        function remove_field($option_name)
        {
        }
        /**
         * @return array
         */
        function get_supplied_data_items()
        {
        }
        /**
         * @param string $name
         *
         * @return Fields\Field|false
         */
        function get_field($name)
        {
        }
        /**
         * @return Fields\Field[]
         */
        function get_fields()
        {
        }
        /**
         * @return bool
         */
        function has_workflows()
        {
        }
        /**
         * @return array
         */
        function get_workflow_ids()
        {
        }
        /**
         * @return Workflow[]
         */
        function get_workflows()
        {
        }
        /**
         * Every data item registered with the trigger should be supplied to this method in its object form.
         * E.g. a 'user' should be passed as a WP_User object, and an 'order' should be passed as a WC_Order object
         *
         * @param Data_Layer|array $data_layer
         */
        function maybe_run($data_layer = [])
        {
        }
        /**
         * @return string
         */
        function get_name()
        {
        }
        /**
         * @param string $name
         */
        function set_name($name)
        {
        }
        /**
         * @return string
         */
        function get_title()
        {
        }
        /**
         * @return string
         */
        function get_group()
        {
        }
        /**
         * @return string|null
         */
        function get_description()
        {
        }
        /**
         * @return string
         */
        function get_description_html()
        {
        }
        /**
         * @param $options array
         * @deprecated
         */
        function set_options($options)
        {
        }
        /**
         * Will return all data if $field is false
         *
         * @param string $field
         * @return mixed
         *
         * @deprecated use $workflow->get_trigger_option()
         */
        function get_option($field)
        {
        }
        /**
         * This method is called just before a queued workflow runs
         *
         * @param Workflow $workflow
         * @return bool
         */
        function validate_before_queued_event($workflow)
        {
        }
        /**
         * Checks if this trigger's language matches that of the user or guest
         *
         * @param Workflow $workflow
         * @return bool
         */
        function validate_workflow_language($workflow)
        {
        }
        /**
         * @since 4.2.0
         * @param array|int $workflow_ids
         */
        function limit_trigger_to_specific_workflows($workflow_ids)
        {
        }
        /**
         * @since 4.2.0
         * Removes trigger limitation and allows triggering for any workflow
         */
        function remove_limit_trigger_to_specific_workflows()
        {
        }
        protected function add_field_validate_queued_order_status()
        {
        }
        /**
         *
         */
        protected function add_field_user_pause_period()
        {
        }
        /**
         * @param $object_name
         */
        protected function add_field_recheck_status($object_name)
        {
        }
        /**
         * Order status field must be named 'order_status'
         *
         * @param $trigger Trigger
         * @param $order \WC_Order
         * @deprecated
         * @return bool
         * @since 2.0
         */
        protected function validate_order_status_field($trigger, $order)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        protected function validate_field_user_pause_period($workflow)
        {
        }
        /**
         * @param $allowed_statuses array|string
         * @param $current_status string
         *
         * @return bool
         */
        protected function validate_status_field($allowed_statuses, $current_status)
        {
        }
        /**
         * Get the order status change hook, async or instant
         * @return string
         */
        protected function get_hook_order_status_changed()
        {
        }
        /**
         * Get the subscription status change hook, async or instant
         * @return string
         */
        protected function get_hook_subscription_status_changed()
        {
        }
        /**
         * @return string
         */
        protected function get_deprecation_warning()
        {
        }
        /**
         * Get the trigger's required async events.
         *
         * @since 4.8.0
         *
         * @return array
         */
        public function get_required_async_events()
        {
        }
        /**
         * Set the trigger's required async events.
         *
         * @since 4.8.0
         *
         * @param array|string $required_async_events
         */
        public function set_required_async_events($required_async_events)
        {
        }
        /**
         * Get the order paid, async or instant
         *
         * @deprecated because automatewoo/order/paid is now also async due to #158
         *
         * @return string
         */
        protected function get_hook_order_paid()
        {
        }
        /**
         * Used to dynamically load option values for a trigger field.
         *
         * @param string       $field_name
         * @param string|false $reference_field_value
         *
         * @return array
         * @since 5.6.6
         */
        public function get_dynamic_field_options($field_name, $reference_field_value = false)
        {
        }
    }
    /**
     * @class Trigger_Abstract_Abandoned_Cart
     */
    abstract class Trigger_Abstract_Abandoned_Cart extends \AutomateWoo\Trigger
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param Cart $cart
         * @param string $old_status
         * @param string $new_status
         */
        function status_changed($cart, $old_status, $new_status)
        {
        }
        /**
         * @param Cart $cart
         */
        function cart_abandoned($cart)
        {
        }
        /**
         * @param Model|Cart $object
         */
        function cart_deleted($object)
        {
        }
        /**
         * @param Cart $cart
         */
        function maybe_clear_queued_emails($cart)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @class Trigger_Abandoned_Cart_Customer
     */
    class Trigger_Abandoned_Cart_Customer extends \AutomateWoo\Trigger_Abstract_Abandoned_Cart
    {
        public $supplied_data_items = ['customer', 'cart'];
        function load_admin_details()
        {
        }
    }
    /**
     * @class Trigger_Abstract_Memberships
     * @since 2.8.3
     */
    abstract class Trigger_Abstract_Memberships extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['membership', 'customer'];
        function load_admin_details()
        {
        }
        /**
         * @return Fields\Select
         */
        function get_field_membership_plans()
        {
        }
    }
    /**
     * @class Trigger_Membership_Status_Changed
     * @since 2.8.3
     */
    class Trigger_Membership_Status_Changed extends \AutomateWoo\Trigger_Abstract_Memberships
    {
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = 'membership_status_changed';
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param int $membership_id
         * @param string $old_status
         * @param string $new_status
         */
        function handle_async_event($membership_id, $old_status, $new_status)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        /**
         * Ensures 'to' status has not changed while sitting in queue
         *
         * @param $workflow
         * @return bool
         */
        function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @class Trigger_Abstract_Order_Base
     */
    abstract class Trigger_Abstract_Order_Base extends \AutomateWoo\Trigger
    {
        /** @var bool - define if the trigger runs per order or per line item, used by the manual order trigger */
        public $is_run_for_each_line_item = false;
        function __construct()
        {
        }
        function load_admin_details()
        {
        }
        /**
         * @param int|\WC_Order $order
         * @return \WC_Order|false
         */
        function get_order($order)
        {
        }
        /**
         * @param \WC_Order|int $order
         */
        function trigger_for_order($order)
        {
        }
        /**
         * @param int|\WC_Order $order
         */
        function trigger_for_each_order_item($order)
        {
        }
    }
    /**
     * @class Trigger_Abstract_Order_Status_Base
     */
    abstract class Trigger_Abstract_Order_Status_Base extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = ['order_status_changed', 'order_pending'];
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = false;
        /**
         * Registers fields used for this trigger.
         */
        public function load_fields()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Trigger a status change when an order is created as pending.
         *
         * @param int $order_id
         */
        public function order_pending($order_id)
        {
        }
        /**
         * Handle a status change event from old status > new status.
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         */
        public function status_changed($order_id, $old_status, $new_status)
        {
        }
        /**
         * Validate the order status still matches the trigger before a queued event is run.
         *
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @class Trigger_User_Purchases_From_Taxonomy_Term
     */
    class Trigger_User_Purchases_From_Taxonomy_Term extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Order_Paid
     */
    class Trigger_Order_Paid extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'order_paid';
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Class Subscription_Order_Paid.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Order_Paid extends \AutomateWoo\Trigger_Order_Paid
    {
        /**
         * Subscription_Order_Paid constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Trigger for subscription order.
         *
         * @param \WC_Order|int $order
         */
        public function trigger_for_order($order)
        {
        }
        /**
         * Validate workflow.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Class Trigger_Abstract_Downloadable_Content.
     *
     * @since 5.6.6
     * @package AutomateWoo
     */
    abstract class Trigger_Abstract_Downloadable_Content extends \AutomateWoo\Trigger
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = [\AutomateWoo\DataTypes\DataTypes::PRODUCT, \AutomateWoo\DataTypes\DataTypes::ORDER, \AutomateWoo\DataTypes\DataTypes::CUSTOMER, \AutomateWoo\DataTypes\DataTypes::DOWNLOAD];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Provide dynamic options for the downloadable files field.
         *
         * @param string $field_name            Field name.
         * @param string $reference_field_value Reference field value.
         * @return array
         */
        public function get_dynamic_field_options($field_name, $reference_field_value = false)
        {
        }
        /**
         * Maybe run downloadable content workflows.
         *
         * @param int        $download_id Download ID.
         * @param WC_Product $product Product object.
         * @param WC_Order   $order Order object.
         * @param Customer   $customer Customer object.
         * @param boolean    $prevent_duplicates Prevent duplicate triggers?
         */
        protected function maybe_run_workflows($download_id, $product, $order, $customer, $prevent_duplicates = false)
        {
        }
    }
    /**
     * Class Trigger_Downloadable_Product_Purchased.
     *
     * @since 5.6.6
     * @package AutomateWoo
     */
    class Trigger_Downloadable_Product_Purchased extends \AutomateWoo\Trigger_Abstract_Downloadable_Content
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = [\AutomateWoo\DataTypes\DataTypes::PRODUCT, \AutomateWoo\DataTypes\DataTypes::ORDER, \AutomateWoo\DataTypes\DataTypes::CUSTOMER];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle file downloaded event.
         *
         * @param int $order_id Order ID.
         */
        public function handle_grant_product_download_permissions($order_id)
        {
        }
    }
}
namespace AutomateWoo\Triggers\Utilities {
    /**
     * Trait BookingDataLayer
     *
     * @since 5.3.0
     */
    trait BookingDataLayer
    {
        /**
         * Get the supplied data items for a booking.
         *
         * @return string[]
         */
        protected function get_supplied_data_items_for_booking() : array
        {
        }
        /**
         * Generate a booking data layer from a booking object.
         *
         * Includes booking, customer, booking product data types.
         *
         * @param WC_Booking $booking
         *
         * @return Data_Layer
         *
         * @throws InvalidValue If the booking's customer or booking is not found.
         */
        protected function generate_booking_data_layer(\WC_Booking $booking) : \AutomateWoo\Data_Layer
        {
        }
    }
    /**
     * Trait CustomTimeOfDayTrait
     *
     * @since 5.1.0
     */
    trait CustomTimeOfDay
    {
        /**
         * Register hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Returns the time of day field.
         *
         * @return TimeField
         */
        protected function get_field_time_of_day()
        {
        }
        /**
         * Get description text explaining the workflow is not run immediately.
         *
         * @return string
         */
        protected function get_description_text_workflow_not_immediate()
        {
        }
    }
    /**
     * Trait BookingsGroup
     *
     * Declare trigger as belonging to Bookings group.
     *
     * @since 5.3.0
     */
    trait BookingsGroup
    {
        /**
         * @return string
         */
        public function get_group()
        {
        }
    }
    /**
     * Trait HandleOrderNoteAdded.
     *
     * @since 5.2.0
     */
    trait HandleOrderNoteAdded
    {
        /**
         * Handle when an order note is added.
         *
         * @param Order_Note $order_note
         * @param WC_Order   $order
         */
        protected abstract function handle_order_note_added(\AutomateWoo\Order_Note $order_note, \WC_Order $order);
        /**
         * Get order types to target in the order note trigger.
         *
         * @return array
         */
        protected abstract function get_target_order_types() : array;
        /**
         * Register hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle the initial `woocommerce_order_note_added` action.
         *
         * @param int|false $comment_id
         * @param WC_Order  $order
         */
        public function handle_initial_order_note_added_action($comment_id, \WC_Order $order)
        {
        }
    }
    /**
     * Trait SubscriptionGroup
     *
     * Sets the trigger in the 'Subscriptions' group.
     *
     * @since 5.2.0
     */
    trait SubscriptionGroup
    {
        /**
         * @return string
         */
        public function get_group()
        {
        }
    }
    /**
     * Trait OrderGroup
     *
     * Sets the trigger in the 'Orders' group.
     *
     * @since 5.2.0
     */
    trait OrderGroup
    {
        /**
         * @return string
         */
        public function get_group()
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Interface BatchedWorkflowInterface
     *
     * Triggers can implement this interface to be compatible with the BatchedWorkflows job.
     *
     * @since 5.1.0
     */
    interface BatchedWorkflowInterface
    {
        /**
         * Get a batch of items to process for given workflow.
         *
         * @param Workflow $workflow
         * @param int      $offset The batch query offset.
         * @param int      $limit  The max items for the query.
         *
         * @return array[] Array of items in array format. Items will be stored in the database so they should be IDs not objects.
         */
        public function get_batch_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit) : array;
        /**
         * Process a single item for a workflow to process.
         *
         * @param Workflow $workflow
         * @param array    $item
         */
        public function process_item_for_workflow(\AutomateWoo\Workflow $workflow, array $item);
    }
    /**
     * Class AbstractBatchedDailyTrigger
     *
     * @since 5.1.0
     */
    abstract class AbstractBatchedDailyTrigger extends \AutomateWoo\Trigger implements \AutomateWoo\Triggers\BatchedWorkflowInterface
    {
        use \AutomateWoo\Triggers\Utilities\CustomTimeOfDay;
        /**
         * Set that the trigger supports customer time of day functions
         */
        const SUPPORTS_CUSTOM_TIME_OF_DAY = true;
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Order_Processing
     */
    class Trigger_Order_Processing extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = 'processing';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * @class Trigger_Order_Created_Each_Line_Item
     * @since 2.9
     */
    class Trigger_Order_Created_Each_Line_Item extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'order_created';
        public $is_run_for_each_line_item = true;
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
    }
    /**
     * @class Trigger_Wishlist_Item_Goes_On_Sale
     */
    class Trigger_Wishlist_Item_Goes_On_Sale extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['customer', 'product', 'wishlist'];
        const SUPPORTS_QUEUING = false;
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param array $products
         */
        public function handle_products_on_sale($products)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * Class Trigger_Background_Process_Abstract
     *
     * @deprecated in 5.1.0 use AutomateWoo\Triggers\AbstractBatchedDailyTrigger instead.
     *
     * @since 4.5
     * @package AutomateWoo
     */
    abstract class Trigger_Background_Processed_Abstract extends \AutomateWoo\Trigger
    {
        use \AutomateWoo\Triggers\Utilities\CustomTimeOfDay;
        /**
         * Set that the trigger supports customer time of day functions
         */
        const SUPPORTS_CUSTOM_TIME_OF_DAY = true;
        /**
         * Method that the 'workflows' background processor will pass data back to when processing.
         *
         * @param \AutomateWoo\Workflow $workflow
         * @param array                 $data
         */
        public abstract function handle_background_task($workflow, $data);
        /**
         * Should return an array of tasks to be background processed.
         *
         * @param \AutomateWoo\Workflow $workflow
         * @param int                   $limit The limit to use when querying tasks.
         * @param int                   $offset The offset to use when querying tasks.
         *
         * @return array
         */
        public abstract function get_background_tasks($workflow, $limit, $offset = 0);
    }
    /**
     * @class Trigger_Customer_New_Account
     */
    class Trigger_Customer_New_Account extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['customer'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = 'user_registered';
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param $user_id
         */
        function user_registered($user_id)
        {
        }
    }
    /**
     * @class Trigger_Order_Completed
     */
    class Trigger_Order_Completed extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = 'completed';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * @class Trigger_Subscription_Before_Renewal
     * @since 2.6.2
     */
    class Trigger_Subscription_Before_Renewal extends \AutomateWoo\Triggers\AbstractBatchedDailyTrigger
    {
        use \AutomateWoo\Traits\IntegerValidator;
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['customer', 'subscription'];
        /**
         * Method to set the action's admin props.
         *
         * Admin props include: title, group and description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Get a batch of items to process for given workflow.
         *
         * @param Workflow $workflow
         * @param int      $offset The batch query offset.
         * @param int      $limit  The max items for the query.
         *
         * @return array[] Array of items in array format. Items will be stored in the database so they should be IDs not objects.
         *
         * @throws InvalidArgument If workflow 'days before' option is not valid.
         */
        public function get_batch_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit) : array
        {
        }
        /**
         * Process a single item for a workflow to process.
         *
         * @param Workflow $workflow
         * @param array    $item
         */
        public function process_item_for_workflow(\AutomateWoo\Workflow $workflow, array $item)
        {
        }
        /**
         * Get subscriptions that match the workflow's date params.
         *
         * @param Workflow $workflow
         * @param int      $offset
         * @param int      $limit
         *
         * @return int[] Array of subscription IDs.
         *
         * @throws InvalidArgument If workflow 'days before' option is not valid.
         */
        protected function get_subscriptions_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit)
        {
        }
        /**
         * Query subscriptions for a specific day.
         *
         * @param DateTime $date          The target date in UTC timezone.
         * @param string   $date_meta_key The subscription date meta key to query.
         * @param array    $statuses      The subscription statues to query.
         * @param int      $offset
         * @param int      $limit
         *
         * @return int[] Array of subscription IDs.
         */
        protected function query_subscriptions_for_day(\AutomateWoo\DateTime $date, string $date_meta_key, array $statuses, int $offset, int $limit)
        {
        }
        /**
         * Handle workflow validation.
         *
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
        /**
         * Validate before a queued workflow event.
         *
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @deprecated Use the Subscription_Workflow_Helper class instead.
     *
     * @class Trigger_Abstract_Subscriptions
     * @since 2.1
     */
    abstract class Trigger_Abstract_Subscriptions extends \AutomateWoo\Trigger
    {
        /** @var bool - trigger can run per subscription or per line item */
        public $is_run_for_each_line_item = false;
        function __construct()
        {
        }
        function load_admin_details()
        {
        }
        /**
         * @param int|\WC_Subscription $subscription
         */
        function trigger_for_subscription($subscription)
        {
        }
        /**
         * @param int|\WC_Subscription $subscription
         */
        function trigger_for_each_subscription_line_item($subscription)
        {
        }
        function add_field_subscription_products()
        {
        }
        function add_field_active_only()
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        protected function validate_subscription_products_field($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        protected function validate_subscription_active_only_field($workflow)
        {
        }
        /**
         * @param $subscription
         * @return \WC_Subscription|false
         */
        function get_subscription($subscription)
        {
        }
    }
    /**
     * Trigger_Customer_Before_Saved_Card_Expiry class.
     *
     * @since 3.7.0
     */
    class Trigger_Customer_Before_Saved_Card_Expiry extends \AutomateWoo\Triggers\AbstractBatchedDailyTrigger
    {
        /**
         * @var string[]
         */
        public $supplied_data_items = ['customer', 'card'];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Get credit cards based on the specified days before expiry field.
         *
         * @param Workflow $workflow
         * @param int      $limit
         * @param int      $offset
         *
         * @return array
         */
        protected function get_cards_by_expiry($workflow, $limit, $offset)
        {
        }
        /**
         * Get a batch of items to process for given workflow.
         *
         * @param Workflow $workflow
         * @param int      $offset The batch query offset.
         * @param int      $limit  The max items for the query.
         *
         * @return array[] Array of items in array format. Items will be stored in the database so they should be IDs not objects.
         */
        public function get_batch_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit) : array
        {
        }
        /**
         * Process a single item for a workflow to process.
         *
         * @param Workflow $workflow
         * @param array    $item
         *
         * @throws InvalidArgument If token is not set.
         * @throws RuntimeException If token is not found.
         */
        public function process_item_for_workflow(\AutomateWoo\Workflow $workflow, array $item)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Order_Pending
     */
    class Trigger_Order_Pending extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = 'pending';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * @class Trigger_Order_Refunded
     */
    class Trigger_Order_Refunded extends \AutomateWoo\Trigger
    {
        /**
         * Set data items available in trigger.
         *
         * @var array
         */
        public $supplied_data_items = [\AutomateWoo\DataTypes\DataTypes::ORDER, \AutomateWoo\DataTypes\DataTypes::REFUND, \AutomateWoo\DataTypes\DataTypes::CUSTOMER];
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = 'refunded';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Support manual refunds only?
         *
         * @return bool
         */
        public function support_manual_refund_only()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Catches the action and calls the maybe_run() method.
         *
         * @param int $refund_id Refund ID.
         */
        public function catch_hooks($refund_id)
        {
        }
    }
    /**
     * @class Trigger_Order_Refunded_Manual
     *
     * @since 5.6.2
     */
    class Trigger_Order_Refunded_Manual extends \AutomateWoo\Trigger_Order_Refunded
    {
        /**
         * Load trigger admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Support manual refunds only?
         *
         * @return bool
         */
        public function support_manual_refund_only()
        {
        }
    }
    /**
     * This trigger hooks in the the order completed action but will only fire once when a users total spend reaches a certain amount.
     *
     * @class Trigger_Customer_Total_Spend_Reaches
     */
    class Trigger_Customer_Total_Spend_Reaches extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        public $supplied_data_items = ['customer', 'order'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = 'order_status_changed';
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * Must run after customer totals have been updated
         */
        function register_hooks()
        {
        }
        /**
         * @param $order_id
         * @param $old_status
         * @param $new_status
         */
        function catch_hooks($order_id, $old_status, $new_status)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * Class Trigger_File_Not_Yet_Downloaded.
     *
     * @since 5.6.6
     * @package AutomateWoo
     */
    class Trigger_File_Not_Yet_Downloaded extends \AutomateWoo\Trigger_Abstract_Downloadable_Content
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Queue 'not_yet_downloaded' events for each downloadable file in the order.
         *
         * @param int $order_id
         */
        public function queue_download_reminders($order_id)
        {
        }
        /**
         * Maybe clear queued events.
         *
         * @param string $user_email  User Email address.
         * @param string $order_key   Order key.
         * @param int    $product_id  Product ID.
         * @param int    $user_id     User ID.
         * @param int    $download_id Download ID.
         * @param int    $order_id    Order ID.
         */
        public function maybe_clear_queued_events($user_email, $order_key, $product_id, $user_id, $download_id, $order_id)
        {
        }
        /**
         * Ensures file is not downloaded by user while sitting in queue
         * We are already clearing queued events on file download, but this is an extra check
         * To ensure the file is not downloaded before the event is run
         *
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Manual trigger interface.
     *
     * @since   5.0.0
     * @package AutomateWoo\Triggers
     */
    interface ManualInterface
    {
        /**
         * Get primary data type.
         *
         * The primary data type is used for quick filtering.
         *
         * @return string
         */
        public function get_primary_data_type();
        /**
         * Get data layer from primary data item.
         *
         * Used to run the workflow manually.
         *
         * @param int $item_id
         *
         * @return Data_Layer|false
         */
        public function get_data_layer($item_id);
    }
    /**
     * Abstract class for manual triggers.
     *
     * @since   5.0.0
     * @package AutomateWoo
     */
    abstract class AbstractManual extends \AutomateWoo\Trigger implements \AutomateWoo\Triggers\ManualInterface
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
    }
    /**
     * Class SubscriptionManual
     *
     * @since   5.0.0
     * @package AutomateWoo
     */
    class SubscriptionManual extends \AutomateWoo\Triggers\AbstractManual
    {
        /**
         * Set data items available in trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['subscription', 'customer'];
        /**
         * Get primary data type.
         *
         * @return string
         */
        public function get_primary_data_type()
        {
        }
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get data layer from primary data item.
         *
         * @param int $subscription
         *
         * @return Data_Layer|bool
         */
        public function get_data_layer($subscription)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Order_Payment_Received_Each_Line_Item
     */
    class Trigger_Order_Paid_Each_Line_Item extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'order_paid';
        public $is_run_for_each_line_item = true;
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
    }
    /**
     * @class Trigger_Subscription_Payment_Failed
     */
    class Trigger_Subscription_Payment_Failed extends \AutomateWoo\Trigger
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['customer', 'subscription', 'order'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'subscription_renewal_payment_failed';
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param int $subscription_id
         * @param int $order_id
         */
        function handle_payment_failed($subscription_id, $order_id)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Order_Cancelled
     */
    class Trigger_Order_Cancelled extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = 'cancelled';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * @class Trigger_Wishlist_Item_Added
     * @since 2.3
     */
    class Trigger_Wishlist_Item_Added extends \AutomateWoo\Trigger
    {
        /**
         * Declare limit field support.
         *
         * @var boolean
         */
        public $supplied_data_items = ['customer', 'wishlist', 'product'];
        /**
         * Method to set title, group, description and other admin props
         */
        public function load_admin_details()
        {
        }
        /**
         * Registers any fields used on for a trigger
         */
        public function load_fields()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Route hooks through here.
         *
         * @param int $product_id
         * @param int $wishlist_id
         * @param int $user_id
         */
        public function catch_hooks($product_id, $wishlist_id, $user_id)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @class Trigger_MC4WP_Form_Submission
     * @since 3.0.0
     */
    class Trigger_MC4WP_Form_Submission extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['customer'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = 'mc4wp_form_success';
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param int $current_form_id
         * @param int $customer_id
         */
        function handle_async_event($current_form_id, $customer_id)
        {
        }
    }
    /**
     * @class Trigger_Order_Created
     */
    class Trigger_Order_Created extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'order_created';
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
    }
    /***
     * Trigger_Order_Note_Added class.
     *
     * @since 2.2
     */
    class Trigger_Order_Note_Added extends \AutomateWoo\Trigger
    {
        use \AutomateWoo\Triggers\Utilities\HandleOrderNoteAdded, \AutomateWoo\Triggers\Utilities\OrderGroup;
        /**
         * Declares data items available in trigger.
         *
         * @var array
         */
        public $supplied_data_items = [\AutomateWoo\DataTypes\DataTypes::ORDER, \AutomateWoo\DataTypes\DataTypes::ORDER_NOTE, \AutomateWoo\DataTypes\DataTypes::CUSTOMER];
        /**
         * Load trigger admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load trigger fields.
         */
        public function load_fields()
        {
        }
        /**
         * Get order types to target in the order note trigger.
         *
         * @since 5.2.0
         *
         * @return array
         */
        protected function get_target_order_types() : array
        {
        }
        /**
         * Handle when an order note is added.
         *
         * @since 5.0.0
         *
         * @param Order_Note $order_note
         * @param WC_Order   $order
         */
        protected function handle_order_note_added(\AutomateWoo\Order_Note $order_note, \WC_Order $order)
        {
        }
        /**
         * Validate a workflow.
         *
         * This method is also used by the subscription note added trigger.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Order_Status_Changes
     */
    class Trigger_Order_Status_Changes extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Registers fields used for this trigger.
         */
        public function load_fields()
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
        /**
         * Ensures 'to' status has not changed while sitting in queue
         *
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Class Subscription_Order_Status_Changes.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Order_Status_Changes extends \AutomateWoo\Trigger_Order_Status_Changes
    {
        /**
         * Subscription_Order_Status_Changes constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Trigger for subscription order.
         *
         * @param int|\WC_Order $order
         */
        public function trigger_for_order($order)
        {
        }
        /**
         * Validate workflow.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Abandoned_Cart_User
     */
    class Trigger_Abandoned_Cart_User extends \AutomateWoo\Trigger_Abstract_Abandoned_Cart
    {
        public $supplied_data_items = ['cart', 'customer'];
        function load_admin_details()
        {
        }
        /**
         * @param Cart $cart
         */
        function cart_abandoned($cart)
        {
        }
        /**
         * @param Cart $cart
         */
        function maybe_clear_queued_emails($cart)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Order_On_Hold
     */
    class Trigger_Order_On_Hold extends \AutomateWoo\Trigger_Abstract_Order_Status_Base
    {
        /**
         * Target transition status.
         *
         * @var string|false
         */
        public $target_status = 'on-hold';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * Class Trigger_Subscription_Created.
     *
     * @since 3.0
     * @package AutomateWoo
     */
    class Trigger_Subscription_Created extends \AutomateWoo\Trigger
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['subscription', 'customer'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'subscription_created';
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle subscription created event.
         *
         * @param int $subscription_id
         */
        public function handle_subscription_created($subscription_id)
        {
        }
        /**
         * Validate a workflow.
         *
         * @param Workflow $workflow
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Class Subscription_Created_Each_Line_Item.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Created_Each_Line_Item extends \AutomateWoo\Trigger_Subscription_Created
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['subscription', 'customer', 'product', 'subscription_item'];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Handle subscription created event.
         *
         * @param int $subscription_id
         */
        public function handle_subscription_created($subscription_id)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Review_Posted
     */
    class Trigger_Review_Posted extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['review', 'customer', 'product'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'review_approved';
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param int $review_id
         */
        function catch_hooks(int $review_id)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Subscription_Before_End
     */
    class Trigger_Subscription_Before_End extends \AutomateWoo\Trigger_Subscription_Before_Renewal
    {
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * Get subscriptions that match the workflow's date params.
         *
         * @param Workflow $workflow
         * @param int      $offset
         * @param int      $limit
         *
         * @return int[] Array of subscription IDs.
         *
         * @throws InvalidArgument If workflow 'days before' option is not valid.
         */
        protected function get_subscriptions_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit)
        {
        }
        /**
         * Validate before a queued workflow event.
         *
         * Ensures that the subscription is either active or pending cancellation.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Class OrderNoteAddedEachLineItem.
     *
     * @since   5.0.0
     * @package AutomateWoo\Triggers
     */
    class OrderNoteAddedEachLineItem extends \AutomateWoo\Trigger_Order_Note_Added
    {
        /**
         * Declares data items available in trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['order', 'order_note', 'customer', 'order_item', 'product'];
        /**
         * Load trigger admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Handle when an order note is added.
         *
         * @param Order_Note $order_note
         * @param WC_Order   $order
         */
        protected function handle_order_note_added(\AutomateWoo\Order_Note $order_note, \WC_Order $order)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Subscription_Status_Changed
     */
    class Trigger_Subscription_Status_Changed extends \AutomateWoo\Trigger
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['subscription', 'customer'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = 'subscription_status_changed';
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Registers fields used for this trigger.
         */
        public function load_fields()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * @param int    $subscription_id
         * @param string $new_status
         * @param string $old_status
         */
        public function handle_status_changed($subscription_id, $new_status, $old_status)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
        /**
         * Ensures 'to' status has not changed while sitting in queue.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * Class Trigger_Subscription_Status_Changed_Each_Line_Item
     *
     * @since 2.9
     * @package AutomateWoo
     */
    class Trigger_Subscription_Status_Changed_Each_Line_Item extends \AutomateWoo\Trigger_Subscription_Status_Changed
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['subscription', 'customer', 'product', 'subscription_item'];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Handle status changed.
         *
         * @param int    $subscription_id
         * @param string $new_status
         * @param string $old_status
         */
        public function handle_status_changed($subscription_id, $new_status, $old_status)
        {
        }
    }
    /**
     * Class Trigger_Customer_Opted_Out
     */
    class Trigger_Customer_Opted_Out extends \AutomateWoo\Trigger
    {
        /**
         * Sets the supplied data items.
         *
         * @var array
         */
        public $supplied_data_items = ['customer'];
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Register trigger hook.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle opt-out.
         *
         * @param Customer $customer
         */
        public function handle_opt_out($customer)
        {
        }
    }
    /**
     * Class Trigger_Downloadable_File_Downloaded.
     *
     * @since 5.6.6
     * @package AutomateWoo
     */
    class Trigger_File_Downloaded extends \AutomateWoo\Trigger_Abstract_Downloadable_Content
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Register trigger hooks.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle file downloaded event.
         *
         * @param string $user_email  User Email address.
         * @param string $order_key   Order key.
         * @param int    $product_id  Product ID.
         * @param int    $user_id     User ID.
         * @param int    $download_id Download ID.
         * @param int    $order_id    Order ID.
         */
        public function handle_file_downloaded($user_email, $order_key, $product_id, $user_id, $download_id, $order_id)
        {
        }
    }
    /**
     * @class Trigger_Guest_Created
     * @since 2.4.9
     */
    class Trigger_Guest_Created extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['guest', 'customer'];
        function load_admin_details()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param $guest Guest
         */
        function catch_hooks($guest)
        {
        }
    }
    /**
     * @class Trigger_Customer_Win_Back
     */
    class Trigger_Customer_Win_Back extends \AutomateWoo\Triggers\AbstractBatchedDailyTrigger
    {
        /**
         * @var string[]
         */
        public $supplied_data_items = ['customer', 'order'];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Get a batch of items to process for given workflow.
         *
         * @param Workflow $workflow
         * @param int      $offset The batch query offset.
         * @param int      $limit  The max items for the query.
         *
         * @return array[] Array of items in array format. Items will be stored in the database so they should be IDs not objects.
         */
        public function get_batch_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit) : array
        {
        }
        /**
         * Process a single item for a workflow to process.
         *
         * @param Workflow $workflow
         * @param array    $item
         *
         * @throws InvalidArgument If customer is not set.
         * @throws RuntimeException If there is an error.
         */
        public function process_item_for_workflow(\AutomateWoo\Workflow $workflow, array $item)
        {
        }
        /**
         * Fetch users by date using the last order meta field.
         *
         * @param Workflow $workflow
         * @param int      $limit
         * @param int      $offset
         *
         * @return Customer[]
         */
        protected function get_customers_matching_last_purchase_range($workflow, $limit, $offset)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return DateTime|bool
         */
        protected function get_min_last_order_date($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return DateTime|bool
         */
        protected function get_max_last_order_date($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @class Trigger_Workflow_Times_Run_Reaches
     */
    class Trigger_Workflow_Times_Run_Reaches extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['workflow'];
        function load_admin_details()
        {
        }
        /**
         * Add options to the trigger
         */
        function load_fields()
        {
        }
        /**
         * When could this trigger run?
         */
        function register_hooks()
        {
        }
        /**
         * Route hooks through here
         *
         * @param $workflow Workflow
         */
        function catch_hooks($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Order_Status_Changes_Each_Line_Item
     * @since 2.9
     */
    class Trigger_Order_Status_Changes_Each_Line_Item extends \AutomateWoo\Trigger_Order_Status_Changes
    {
        /**
         * Run trigger for each order line item.
         *
         * @var bool
         */
        public $is_run_for_each_line_item = true;
        /**
         * Method to set title, group, description and other admin props.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * Trigger_Subscription_Note_Added class.
     *
     * @since 4.5
     */
    class Trigger_Subscription_Note_Added extends \AutomateWoo\Trigger_Order_Note_Added
    {
        use \AutomateWoo\Triggers\Utilities\SubscriptionGroup;
        /**
         * Declares data items available in trigger.
         *
         * @var array
         */
        public $supplied_data_items = [\AutomateWoo\DataTypes\DataTypes::SUBSCRIPTION, \AutomateWoo\DataTypes\DataTypes::ORDER_NOTE, \AutomateWoo\DataTypes\DataTypes::CUSTOMER];
        /**
         * Load trigger admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get order types to target in the order note trigger.
         *
         * @since 5.2.0
         *
         * @return array
         */
        protected function get_target_order_types() : array
        {
        }
        /**
         * Handle when an order note is added.
         *
         * @since 5.2.0
         *
         * @param Order_Note $order_note
         * @param WC_Order   $subscription
         */
        protected function handle_order_note_added(\AutomateWoo\Order_Note $order_note, \WC_Order $subscription)
        {
        }
    }
    /**
     * @class Trigger_Abandoned_Cart_Guest
     */
    class Trigger_Abandoned_Cart_Guest extends \AutomateWoo\Trigger_Abstract_Abandoned_Cart
    {
        public $supplied_data_items = ['cart', 'guest', 'customer'];
        function load_admin_details()
        {
        }
        /**
         * @param Cart $cart
         */
        function cart_abandoned($cart)
        {
        }
        /**
         * @param Cart $cart
         */
        function maybe_clear_queued_emails($cart)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Subscription_Trial_End
     * @since 2.1.0
     */
    class Trigger_Subscription_Trial_End extends \AutomateWoo\Trigger
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['customer', 'subscription'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * Handle subscription trial end event.
         *
         * @param int $subscription_id
         */
        function handle_trial_end($subscription_id)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * @class Trigger_Subscription_Payment_Complete
     */
    class Trigger_Subscription_Payment_Complete extends \AutomateWoo\Trigger
    {
        /**
         * Sets supplied data for the trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['customer', 'subscription', 'order'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var string|array
         */
        protected $required_async_events = 'subscription_renewal_payment_complete';
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param int $subscription_id
         * @param int $order_id
         */
        function handle_payment_complete($subscription_id, $order_id)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        function validate_before_queued_event($workflow)
        {
        }
    }
    /**
     * @class Trigger_Customer_Order_Count_Reaches
     */
    class Trigger_Customer_Order_Count_Reaches extends \AutomateWoo\Trigger_Abstract_Order_Base
    {
        public $supplied_data_items = ['customer', 'order'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = 'order_status_changed';
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        /**
         * Must run after customer totals have been updated
         */
        function register_hooks()
        {
        }
        /**
         * @param int $order_id
         * @param string $old_status
         * @param string $new_status
         */
        function catch_hooks($order_id, $old_status, $new_status)
        {
        }
        /**
         * @param Workflow $workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * @class BookingCreated
     *
     * @since 5.3.0
     */
    class BookingCreated extends \AutomateWoo\Trigger
    {
        use \AutomateWoo\Triggers\Utilities\BookingsGroup, \AutomateWoo\Triggers\Utilities\BookingDataLayer;
        /**
         * @var BookingsInterface Proxy for functionality from WooCommerce Bookings extension.
         */
        protected $bookings_proxy;
        /**
         * Async events required by the trigger.
         *
         * @var array|string
         */
        protected $required_async_events = \AutomateWoo\Async_Events\BookingCreated::NAME;
        /**
         * Constructor
         *
         * @param BookingsInterface $bookings_proxy Bookings proxy class.
         */
        public function __construct(\AutomateWoo\Proxies\BookingsInterface $bookings_proxy)
        {
        }
        /**
         * Declare our UI metadata.
         */
        public function load_admin_details()
        {
        }
        /**
         * Register handlers to drive triggers from internal AW async event hook.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle the booking created event.
         *
         * @param int $booking_id
         */
        public function handle_booking_created(int $booking_id)
        {
        }
    }
    /**
     * Class Subscription_Order_Created.
     *
     * This trigger works like the Order Created trigger but includes a subscription data type and only triggers for orders created via a subscription.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Order_Created extends \AutomateWoo\Trigger_Order_Created
    {
        /**
         * Subscription_Order_Created constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Load fields.
         */
        public function load_fields()
        {
        }
        /**
         * Trigger for subscription order.
         *
         * @param \WC_Order|int $order
         */
        public function trigger_for_order($order)
        {
        }
        /**
         * Validate workflow.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Wishlist_Reminder
     */
    class Trigger_Wishlist_Reminder extends \AutomateWoo\Triggers\AbstractBatchedDailyTrigger
    {
        public $supplied_data_items = ['customer', 'wishlist'];
        const SUPPORTS_QUEUING = false;
        function load_admin_details()
        {
        }
        /**
         * Add options to the trigger
         */
        function load_fields()
        {
        }
        /**
         * Get a batch of items to process for given workflow.
         *
         * @param Workflow $workflow
         * @param int      $offset The batch query offset.
         * @param int      $limit  The max items for the query.
         *
         * @return array[] Array of items in array format. Items will be stored in the database so they should be IDs not objects.
         */
        public function get_batch_for_workflow(\AutomateWoo\Workflow $workflow, int $offset, int $limit) : array
        {
        }
        /**
         * Process a single item for a workflow to process.
         *
         * @param Workflow $workflow
         * @param array    $item
         *
         * @throws InvalidArgument If wishlist is not set
         * @throws RuntimeException If the item fails to be processed.
         */
        public function process_item_for_workflow(\AutomateWoo\Workflow $workflow, array $item)
        {
        }
        /**
         * @param $workflow Workflow
         *
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        /**
         * Check that the wishlist was created at least 1 interval ago by using the date created property.
         *
         * The date created property was added in v3.7 so we must assume that wishlists might not have this set.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        protected function validate_wishlist_date_created($workflow)
        {
        }
    }
    /**
     * @class Trigger_User_Purchases_Product_Variation_With_Attribute
     */
    class Trigger_User_Purchases_Product_Variation_With_Attribute extends \AutomateWoo\Trigger
    {
        public $supplied_data_items = ['customer', 'order', 'order_item', 'product'];
        /**
         * Async events required by the trigger.
         *
         * @since 4.8.0
         * @var array|string
         */
        protected $required_async_events = ['order_status_changed', 'order_pending'];
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param $order_id
         */
        function order_pending($order_id)
        {
        }
        /**
         * @param int $order_id
         * @param string $old_status
         * @param string $new_status
         */
        function status_changed($order_id, $old_status, $new_status)
        {
        }
        /**
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * @class BookingStatusChanged
     *
     * @since 5.3.0
     */
    class BookingStatusChanged extends \AutomateWoo\Trigger
    {
        use \AutomateWoo\Triggers\Utilities\BookingsGroup, \AutomateWoo\Triggers\Utilities\BookingDataLayer;
        /**
         * @var BookingsInterface Proxy for functionality from WooCommerce Bookings extension.
         */
        protected $bookings_proxy;
        /**
         * Async events required by the trigger.
         *
         * @var array|string
         */
        protected $required_async_events = \AutomateWoo\Async_Events\BookingStatusChanged::NAME;
        /**
         * Constructor
         *
         * @param BookingsInterface $bookings_proxy Bookings proxy class.
         */
        public function __construct(\AutomateWoo\Proxies\BookingsInterface $bookings_proxy)
        {
        }
        /**
         * Declare our UI metadata.
         */
        public function load_admin_details()
        {
        }
        /**
         * Declare our trigger options.
         */
        public function load_fields()
        {
        }
        /**
         * Register handlers to drive triggers from internal AW async event hook.
         */
        public function register_hooks()
        {
        }
        /**
         * @param int    $booking_id
         * @param string $old_status
         * @param string $new_status
         */
        public function handle_status_changed(int $booking_id, string $old_status, string $new_status)
        {
        }
        /**
         * @param \AutomateWoo\Workflow $workflow
         *
         * @return bool
         */
        public function validate_workflow($workflow)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Trigger_Membership_Created
     * @since 2.9
     */
    class Trigger_Membership_Created extends \AutomateWoo\Trigger_Abstract_Memberships
    {
        /**
         * Async events required by the trigger.
         *
         * @since 5.2.0
         * @var array|string
         */
        protected $required_async_events = \AutomateWoo\Async_Events\MembershipCreated::NAME;
        public $_membership_created_via_admin;
        function load_admin_details()
        {
        }
        function load_fields()
        {
        }
        function register_hooks()
        {
        }
        /**
         * @param $new_status
         * @param $old_status
         * @param \WP_Post $post
         */
        function transition_post_status($new_status, $old_status, $post)
        {
        }
        /**
         * @param \WC_Memberships_Membership_Plan $plan
         * @param $args
         */
        function membership_created_via_admin($plan, $args)
        {
        }
        /**
         * Handle async membership created event.
         *
         * @param int|string $membership_id
         */
        public function handle_membership_created_async($membership_id)
        {
        }
        /**
         * Maybe run trigger for a given membership.
         *
         * @param int $membership_id
         */
        protected function maybe_run_for_membership(int $membership_id)
        {
        }
        /**
         * @param Workflow $workflow
         *
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
    }
    /**
     * Class Trigger_Customer_Opted_In
     */
    class Trigger_Customer_Opted_In extends \AutomateWoo\Trigger
    {
        /**
         * Sets the supplied data items.
         *
         * @var array
         */
        public $supplied_data_items = ['customer'];
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Register trigger hook.
         */
        public function register_hooks()
        {
        }
        /**
         * Handle opt-in.
         *
         * @param Customer $customer
         */
        public function handle_opt_in($customer)
        {
        }
    }
}
namespace AutomateWoo\Triggers {
    /**
     * Class OrderManual
     *
     * @since   5.0.0
     * @package AutomateWoo
     */
    class OrderManual extends \AutomateWoo\Triggers\AbstractManual
    {
        /**
         * Set data items available in trigger.
         *
         * @var array
         */
        public $supplied_data_items = ['order', 'customer'];
        /**
         * Get primary data type.
         *
         * @return string
         */
        public function get_primary_data_type()
        {
        }
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get data layer from primary data item.
         *
         * @param int $order
         *
         * @return Data_Layer|bool
         */
        public function get_data_layer($order)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Class Points_Rewards_Integration
     *
     * @since 4.5.0
     * @package AutomateWoo
     */
    class Points_Rewards_Integration
    {
        /**
         * Points_Rewards_Integration constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get default event description
         *
         * @return string
         */
        public static function get_default_event_description()
        {
        }
        /**
         * Modify event description.
         *
         * @param string $event_description
         * @param string $event_type
         * @param object $event
         *
         * @return string
         */
        public function filter_points_modified_description($event_description, $event_type, $event)
        {
        }
        /**
         * Add Rules.
         *
         * @param array $rule_paths
         *
         * @return array
         */
        public function add_points_rewards_rules($rule_paths)
        {
        }
        /**
         * Add Actions.
         *
         * @param array $includes
         *
         * @return array
         */
        public function add_points_rewards_actions($includes)
        {
        }
        /**
         * Add Points Variable.
         *
         * @param array $variable_paths
         *
         * @return array
         */
        public function add_points_rewards_variables($variable_paths)
        {
        }
    }
    /**
     * Workflow management class
     *
     * @class Workflows
     */
    class Workflows
    {
        /**
         * Add hooks
         */
        static function init()
        {
        }
        /**
         * Get workflow types.
         *
         * @since 5.0.0
         * @return array
         */
        public static function get_types()
        {
        }
        /**
         * @param int $post_id
         */
        public static function do_workflow_updated_action($post_id)
        {
        }
        /**
         * Trigger the workflow created action.
         *
         * @since 4.9.0
         *
         * @param int $post_id The post ID for the Workflow.
         */
        public static function do_workflow_created_action($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        public static function do_workflow_deleted_action($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        static function maybe_cleanup_workflow_data($post_id)
        {
        }
        /**
         * Delete logs, unsubscribes, queue related to a workflow
         *
         * @param int $workflow_id
         */
        static function delete_related_data($workflow_id)
        {
        }
        /**
         * Updates custom time of day cron hook if needed.
         *
         * @since 3.8
         * @param int $workflow_id
         */
        static function maybe_schedule_custom_time_of_day_event($workflow_id)
        {
        }
        /**
         * @since 3.8
         *
         * @param Workflow $workflow
         * @param bool $clear_if_time_has_passed_for_today
         */
        static function schedule_custom_time_of_day_event($workflow, $clear_if_time_has_passed_for_today = false)
        {
        }
        /**
         * Resets all cron events for custom time of day workflows.
         *
         * @since 3.8
         */
        static function schedule_all_custom_time_of_day_events()
        {
        }
        /**
         * Get number of manual workflows.
         *
         * @since 5.0.0
         *
         * @return int
         */
        public static function get_manual_workflows_count()
        {
        }
    }
    /**
     * @class Preview_Data
     * @since 2.4.6
     */
    class Preview_Data
    {
        /**
         * The current preview workflow.
         *
         * @since 4.6.0
         *
         * @var Workflow
         */
        private static $preview_workflow;
        /**
         * @param array $required_items list of specific data items to get for preview
         *
         * @return array
         * @throws InvalidPreviewData When there's an error getting the preview data.
         */
        static function get_preview_data_layer($required_items = [])
        {
        }
        /**
         * Generate a previewable or testable action object filled with preview data.
         *
         * @param int    $workflow_id
         * @param int    $action_number
         * @param string $mode test|preview
         *
         * @return Action|PreviewableInterface|TestableInterface
         *
         * TODO Remove Action return type when code-hinting isn't required for public Action props
         *
         * @throws InvalidPreviewData When there's an error with the preview data.
         */
        static function generate_preview_action($workflow_id, $action_number, $mode = 'preview')
        {
        }
        /**
         * Get an order for preview.
         *
         * @param int $offset used to do multiple attempts to get a valid order
         *
         * @return WC_Order
         * @throws InvalidPreviewData When no preview order is found.
         */
        protected static function get_preview_order($offset = 0)
        {
        }
        /**
         * Add customer language filter.
         *
         * @since 4.6.0
         *
         * @param Action $action
         */
        public static function add_customer_language_filter($action)
        {
        }
        /**
         * Filter the current customers language when previewing.
         * Make it the same as the preview workflow language.
         *
         * @since 4.6.0
         *
         * @param string $lang
         * @param Customer $customer
         *
         * @return string
         */
        public static function filter_customer_language($lang, $customer)
        {
        }
        /**
         * Remove customer language filter.
         *
         * @since 4.6.0
         *
         * @param Action $action
         */
        public static function remove_customer_language_filter($action)
        {
        }
        /**
         * Get preview products.
         *
         * @return array
         *
         * @throws InvalidPreviewData When no products found.
         */
        protected static function get_preview_product_ids() : array
        {
        }
    }
    /**
     * @class Factories
     * @since 2.9
     */
    class Factories
    {
        /** @var array */
        private static $factories;
        /**
         * @return array
         */
        static function get_factories()
        {
        }
        /**
         * @param $type
         * @return bool|Factory
         */
        static function get_factory($type)
        {
        }
        /**
         * @param Model $object
         */
        static function update_object_cache($object)
        {
        }
        /**
         * @param Model $object
         */
        static function clean_object_cache($object)
        {
        }
    }
    /**
     * @class Log_Factory
     * @since 2.9
     */
    class Log_Factory extends \AutomateWoo\Factory
    {
        static $model = 'AutomateWoo\\Log';
        /**
         * @param int $id
         * @return Log|bool
         */
        static function get($id)
        {
        }
    }
    /**
     * @class Format
     * @since 2.9
     */
    class Format
    {
        const MYSQL = 'Y-m-d H:i:s';
        /**
         * @param int|string|DateTime|\WC_DateTime $date
         * @param bool|int $max_diff Set to 0 to disable diff format
         * @param bool $convert_from_gmt If its gmt convert it to local time
         * @param bool $shorten_month
         *
         * @since 3.8 $shorten_month param added
         *
         * @return string|false
         */
        static function datetime($date, $max_diff = false, $convert_from_gmt = true, $shorten_month = false)
        {
        }
        /**
         * @param int|string|DateTime|\WC_DateTime $date
         * @param bool|int $max_diff
         * @param bool $convert_from_gmt If its gmt convert it to local time
         * @param bool $shorten_month
         *
         * @since 3.8 $shorten_month param added
         *
         * @return string|false
         */
        static function date($date, $max_diff = false, $convert_from_gmt = true, $shorten_month = false)
        {
        }
        /**
         * @since 3.8
         * @param bool $shorten_month
         * @return string
         */
        static function get_date_format($shorten_month = false)
        {
        }
        /**
         * @param integer $timestamp
         * @return string
         */
        private static function human_time_diff($timestamp)
        {
        }
        /**
         * @param int|string|DateTime $date
         * @return int|bool
         */
        static function mixed_date_to_timestamp($date)
        {
        }
        /**
         * @param integer $day - 1 (for Monday) through 7 (for Sunday)
         * @return string|false
         */
        static function weekday($day)
        {
        }
        /**
         * @param integer $day - 1 (for Monday) through 7 (for Sunday)
         * @return string|false
         */
        static function weekday_abbrev($day)
        {
        }
        /**
         * @param string|array $time
         * @return string
         */
        static function time_of_day($time)
        {
        }
        /**
         * Format a price decimal value.
         *
         * Does NOT localize the decimal.
         *
         * @param float|string $number
         * @param int          $places
         * @param bool         $trim_zeros
         *
         * @return string
         */
        public static function decimal($number, $places = null, $trim_zeros = false)
        {
        }
        /**
         * @param Customer $customer
         * @return string
         */
        static function customer($customer)
        {
        }
        /**
         * @since 4.0
         * @param $email
         * @return string
         */
        static function email($email)
        {
        }
        /**
         * @since 4.0
         * @param $val
         * @return string
         */
        static function bool($val)
        {
        }
        /**
         * @deprecated Use Format::decimal() which will round automatically.
         *
         * @param string|float $number
         * @param $places
         * @return float
         */
        static function round($number, $places = null)
        {
        }
        /**
         * Format a HTML link for an ID number.
         *
         * @param string  $url
         * @param integer $id
         * @return string Formatted link.
         */
        public static function html_id_link(string $url, int $id)
        {
        }
        /**
         * Format a HTML link.
         *
         * @param string $url
         * @param string $text
         * @return string Formatted link.
         */
        public static function html_link(string $url, string $text)
        {
        }
    }
    /**
     * Integration with WC transactional emails.
     *
     * @since 3.8
     */
    class WC_Emails
    {
        /** @var \WC_Email */
        public static $current_email;
        /**
         * Init
         */
        static function init()
        {
        }
        /**
         * @param $email_heading
         * @param $email
         */
        static function header($email_heading, $email)
        {
        }
        /**
         * Unset current email property
         */
        static function footer()
        {
        }
        /**
         * @return bool
         */
        static function is_email()
        {
        }
        /**
         * @return \WC_Email
         */
        static function get_current_email_object()
        {
        }
        /**
         * Returns the email of the current recipient
         * @return string|false
         */
        static function get_current_recipient()
        {
        }
        /**
         * Returns the email of the current recipient
         * @return string|false
         */
        static function is_customer_email()
        {
        }
    }
    /**
     * Class Event_Query.
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     */
    class Event_Query extends \AutomateWoo\Query_Abstract
    {
        /**
         * Set's the database table ID.
         *
         * @var string
         */
        public $table_id = 'events';
        /**
         * Set's the class to use for the return object.
         *
         * @var string
         */
        public $model = 'AutomateWoo\\Event';
        /**
         * Query based on event hook prop.
         *
         * @since 4.8.0
         *
         * @param string|array $hook
         * @param string       $compare Defaults to '=' or 'IN' if array
         *
         * @return $this
         */
        public function where_hook($hook, $compare = null)
        {
        }
        /**
         * Query based on event args. Uses hash of args.
         *
         * Array comparison is not available because $args is always converted to a string (hashed).
         *
         * @since 4.8.0
         *
         * @param array  $args
         * @param string $compare Defaults to '='.
         *
         * @return $this
         */
        public function where_args($args, $compare = null)
        {
        }
        /**
         * Get results.
         *
         * @return Event[]
         */
        public function get_results()
        {
        }
    }
    /**
     * Class Shipment_Tracking_Integration
     *
     * Handles integration with the WC Shipment Tracking extension.
     *
     * @since 4.6.0
     * @package AutomateWoo
     */
    final class Shipment_Tracking_Integration
    {
        /**
         * Get a specific shipment tracking field from an order.
         *
         * We get the field from the first tracking number only. i.e. we don't support multiple tracking numbers.
         *
         * Fields are: date_shipped, formatted_tracking_provider, tracking_number, formatted_tracking_link
         *
         * @param \WC_Order $order
         * @param string    $field
         *
         * @return false|string
         */
        public static function get_shipment_tracking_field($order, $field)
        {
        }
    }
    /**
     * @class Variable
     * @since 2.4
     */
    abstract class Variable
    {
        /** @var string */
        protected $name;
        /** @var string */
        protected $description;
        /**
         * Stores parameter field objects.
         *
         * @var Fields\Field[]
         */
        protected $parameter_fields = [];
        /** @var string */
        protected $data_type;
        /** @var string */
        protected $data_field;
        /** @var bool */
        public $use_fallback = true;
        /** @var bool */
        public $has_loaded_admin_details = false;
        /**
         * Optional method
         */
        function init()
        {
        }
        /**
         * Method to set description and other admin props
         */
        function load_admin_details()
        {
        }
        function maybe_load_admin_details()
        {
        }
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * Sets the name, data_type and data_field props
         * @param $name
         */
        function setup($name)
        {
        }
        /**
         * @return string
         */
        function get_description()
        {
        }
        /**
         * Get the parameter fields for the variable.
         *
         * @since 4.6.0
         *
         * @return Fields\Field[]
         */
        public function get_parameter_fields()
        {
        }
        /**
         * @return string
         */
        function get_name()
        {
        }
        /**
         * @return string
         */
        function get_data_type()
        {
        }
        /**
         * @return string
         */
        function get_data_field()
        {
        }
        /**
         * Add a parameter field to the variable.
         *
         * @since 4.6.0
         *
         * @param Fields\Field $field
         */
        protected function add_parameter_field(\AutomateWoo\Fields\Field $field)
        {
        }
        /**
         * Add a text parameter field to the variable.
         *
         * @param string $name
         * @param string $description
         * @param bool   $required
         * @param string $placeholder
         * @param array  $extra
         */
        protected function add_parameter_text_field($name, $description, $required = false, $placeholder = '', $extra = [])
        {
        }
        /**
         * Add a select parameter field to the variable.
         *
         * @param string $name
         * @param string $description
         * @param array  $options
         * @param bool   $required
         * @param array  $extra
         */
        protected function add_parameter_select_field($name, $description, $options = [], $required = false, $extra = [])
        {
        }
    }
    /**
     * @class Database_Tables
     * @since 2.8.2
     */
    class Database_Tables extends \AutomateWoo\Registry
    {
        /** @var array */
        static $includes;
        /** @var Database_Table[] */
        static $loaded = [];
        /**
         * Updates any tables as required
         */
        static function install_tables()
        {
        }
        /**
         * @return array
         */
        static function load_includes()
        {
        }
        /**
         * @return Database_Table[]
         */
        static function get_all()
        {
        }
        /**
         * Get a database table object.
         *
         * @param $table_id
         *
         * @return Database_Table
         *
         * @throws Exception When table failed to load.
         */
        static function get($table_id)
        {
        }
    }
    /**
     * @class Remote_Request
     * @since 2.3.1
     */
    class Remote_Request
    {
        /** @var string */
        public $method;
        /** @var string */
        public $url;
        /** @var array */
        public $http_success_codes = [200, 201, 202, 203, 204];
        /**
         * Response from wp_remote_request()
         * @var array|\WP_Error
         */
        public $request;
        /**
         * Passes to wp_remote_request()
         *
         * @param $url
         * @param $args
         */
        function __construct($url, $args)
        {
        }
        /**
         * Checks if the remote HTTP request failed.
         *
         * Note: This doesn't check the response, it only checks that some response was received.
         *
         * @return bool
         */
        function is_http_error()
        {
        }
        /**
         * Checks if a valid HTTP response code was returned.
         *
         * @return bool
         */
        function is_api_error()
        {
        }
        /**
         * Checks if the remote request was successful.
         *
         * Checks that the API returned a success HTTP response code e.g. 200.
         *
         * @return bool
         */
        function is_successful()
        {
        }
        /**
         * Returns the HTTP error message if the request failed and no response was received.
         *
         * @return string|false
         */
        function get_http_error_message()
        {
        }
        /**
         * Returns the HTTP status code of the request.
         *
         * Returns 503 if the request failed.
         *
         * @return int
         */
        function get_response_code()
        {
        }
        /**
         * Returns the HTTP request response message.
         *
         * @return string
         */
        function get_response_message()
        {
        }
        /**
         * Returns the processed request body.
         *
         * JSON will be decoded.
         *
         * @return array|false
         */
        function get_body()
        {
        }
        /**
         * Returns the unprocessed request body.
         *
         * @return string
         */
        function get_body_raw()
        {
        }
        /**
         * Checks if the HTTP status code is a success code.
         *
         * @return bool
         */
        function is_http_success_code()
        {
        }
        /**
         * @deprecated
         * @return bool
         */
        function is_failed()
        {
        }
        /**
         * @deprecated
         * @return bool
         */
        function get_error_message()
        {
        }
    }
}
namespace AutomateWoo\Entity {
    /**
     * ToArray interface.
     *
     * @since   5.1.0
     * @package AutomateWoo\Entity
     */
    interface ToArray
    {
        /**
         * Convert the object's data to an array.
         *
         * @return array
         */
        public function to_array() : array;
    }
}
namespace AutomateWoo\Traits {
    /**
     * NamedEntity trait.
     *
     * @since   5.1.0
     * @package AutomateWoo\Traits
     */
    trait NamedEntity
    {
        /**
         * @var string
         */
        protected $name = '';
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @param string $name
         *
         * @return $this
         */
        public function set_name($name)
        {
        }
    }
    /**
     * OptionsEntity trait.
     *
     * @since   5.1.0
     * @package AutomateWoo\Traits
     */
    trait OptionsEntity
    {
        /**
         * @var array
         */
        protected $options = [];
        /**
         * @return array
         */
        public function get_options()
        {
        }
        /**
         * @param string     $key
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function get_option($key, $default = null)
        {
        }
        /**
         * @param array $options
         *
         * @return $this
         */
        public function set_options($options)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         *
         * @return mixed
         */
        public function set_option($key, $value)
        {
        }
    }
}
namespace AutomateWoo\Entity {
    /**
     * NamedEntity class.
     *
     * @since   5.1.0
     * @package AutomateWoo\Entity
     */
    abstract class NamedEntityWithOptions implements \AutomateWoo\Entity\ToArray
    {
        use \AutomateWoo\Traits\NamedEntity, \AutomateWoo\Traits\OptionsEntity;
        /**
         * NamedEntityWithOptions constructor.
         *
         * @param string $name    The entity name.
         * @param array  $options Options for the entity.
         */
        public function __construct($name, $options = [])
        {
        }
        /**
         * Convert the object's data to an array.
         *
         * @return array
         */
        public function to_array() : array
        {
        }
    }
    /**
     * @class Workflow
     * @since 5.1.0
     */
    class Workflow
    {
        const TYPE_AUTOMATIC = 'automatic';
        const TYPE_MANUAL = 'manual';
        const ORIGIN_MANUALLY_CREATED = 'manually_created';
        /**
         * @var int
         */
        protected $id = 0;
        /**
         * @var string
         */
        protected $type = self::TYPE_AUTOMATIC;
        /**
         * @var Status
         */
        protected $status;
        /**
         * @var string
         */
        protected $title = '';
        /**
         * @var WorkflowTiming
         */
        protected $timing;
        /**
         * @var bool
         */
        protected $is_transactional = false;
        /**
         * @var bool
         */
        protected $is_tracking_enabled = false;
        /**
         * @var bool
         */
        protected $is_conversion_tracking_enabled = false;
        /**
         * Google Analytics link tracking
         *
         * This will be appended to every URL in the email content or SMS body. e.g. utm_source=automatewoo&utm_medium=email&utm_campaign=example
         *
         * @var string
         */
        protected $ga_link_tracking = '';
        /**
         * @var Trigger
         */
        protected $trigger;
        /**
         * Multiple groups of rules.
         *
         * @var RuleGroup[]
         */
        protected $rule_groups = [];
        /**
         * @var Action[]
         */
        protected $actions = [];
        /**
         * The origin of the workflow indicating how it was created (e.g. manually, a preset name, etc.)
         *
         * @var string
         */
        protected $origin = self::ORIGIN_MANUALLY_CREATED;
        /**
         * Workflow constructor.
         *
         * @param Trigger             $trigger
         * @param string              $type
         * @param WorkflowTiming|null $timing Used when the workflow type is 'automatic'
         * @param Status|null         $status
         */
        public function __construct(\AutomateWoo\Entity\Trigger $trigger, string $type = self::TYPE_AUTOMATIC, $timing = null, $status = null)
        {
        }
        /**
         * @return int
         */
        public function get_id() : int
        {
        }
        /**
         * @param int $id
         * @return $this
         */
        public function set_id(int $id)
        {
        }
        /**
         * @return string
         */
        public function get_type() : string
        {
        }
        /**
         * @param string $type
         * @return $this
         */
        public function set_type(string $type)
        {
        }
        /**
         * @return Status
         */
        public function get_status() : \AutomateWoo\Workflows\Status
        {
        }
        /**
         * @param Status $status
         * @return $this
         */
        public function set_status(\AutomateWoo\Workflows\Status $status)
        {
        }
        /**
         * @return string
         */
        public function get_title() : string
        {
        }
        /**
         * @param string $title
         * @return $this
         */
        public function set_title(string $title)
        {
        }
        /**
         * @return WorkflowTiming
         */
        public function get_timing() : \AutomateWoo\Entity\WorkflowTiming
        {
        }
        /**
         * @param WorkflowTiming $timing
         * @return $this
         */
        public function set_timing(\AutomateWoo\Entity\WorkflowTiming $timing)
        {
        }
        /**
         * @return bool
         */
        public function is_transactional() : bool
        {
        }
        /**
         * @param bool $is_transactional
         * @return $this
         */
        public function set_is_transactional($is_transactional)
        {
        }
        /**
         * @return bool
         */
        public function is_tracking_enabled() : bool
        {
        }
        /**
         * @param bool $is_tracking_enabled
         * @return $this
         */
        public function set_is_tracking_enabled($is_tracking_enabled)
        {
        }
        /**
         * @return bool
         */
        public function is_conversion_tracking_enabled() : bool
        {
        }
        /**
         * @param bool $is_conversion_tracking_enabled
         * @return $this
         */
        public function set_is_conversion_tracking_enabled($is_conversion_tracking_enabled)
        {
        }
        /**
         * @return string
         */
        public function get_ga_link_tracking() : string
        {
        }
        /**
         * @param string $ga_link_tracking
         * @return Workflow
         */
        public function set_ga_link_tracking(string $ga_link_tracking)
        {
        }
        /**
         * @return Trigger
         */
        public function get_trigger()
        {
        }
        /**
         * @param Trigger $trigger
         * @return $this
         */
        public function set_trigger(\AutomateWoo\Entity\Trigger $trigger)
        {
        }
        /**
         * @return RuleGroup[]
         */
        public function get_rule_groups()
        {
        }
        /**
         * @param RuleGroup[] $rule_groups
         *
         * @return $this
         */
        public function set_rule_groups($rule_groups)
        {
        }
        /**
         * @param RuleGroup $rule
         *
         * @return $this
         */
        public function add_rule_group(\AutomateWoo\Entity\RuleGroup $rule)
        {
        }
        /**
         * @return Action[]
         */
        public function get_actions()
        {
        }
        /**
         * @param Action[] $actions
         * @return $this
         */
        public function set_actions($actions)
        {
        }
        /**
         * @param Action $action
         * @return $this
         */
        public function add_action(\AutomateWoo\Entity\Action $action)
        {
        }
        /**
         * @param string|int $index
         * @return $this
         */
        public function remove_action($index)
        {
        }
        /**
         * @return string
         */
        public function get_origin() : string
        {
        }
        /**
         * @param string $origin
         *
         * @return Workflow
         */
        public function set_origin(string $origin) : \AutomateWoo\Entity\Workflow
        {
        }
    }
    /**
     * RuleGroup class.
     *
     * @since   5.1.0
     * @package AutomateWoo\Entity
     */
    class RuleGroup implements \AutomateWoo\Entity\ToArray
    {
        /**
         * Array of rule objects.
         *
         * @var Rule[]
         */
        protected $rules;
        /**
         * RuleGroup constructor.
         *
         * @param Rule[] $rules
         */
        public function __construct($rules = [])
        {
        }
        /**
         * Get the rules in this group.
         *
         * @return Rule[]
         */
        public function get_rules()
        {
        }
        /**
         * Set the array of rules within this group.
         *
         * @param Rule[] $rules Array of rule objects.
         *
         * @return $this
         */
        public function set_rules($rules)
        {
        }
        /**
         * Add a rule to this group.
         *
         * @param Rule $rule The rule to add.
         *
         * @return $this
         */
        public function add_rule(\AutomateWoo\Entity\Rule $rule)
        {
        }
        /**
         * Convert the object's data to an array.
         *
         * @return array
         */
        public function to_array() : array
        {
        }
    }
    /**
     * @since 5.1.0
     */
    interface WorkflowTiming
    {
        /**
         * @return string
         */
        public function get_type();
    }
    /**
     * WorkflowTimingAbstract class.
     *
     * @since   5.1.0
     * @package AutomateWoo\Entity
     */
    abstract class WorkflowTimingBase implements \AutomateWoo\Entity\WorkflowTiming
    {
        const TYPE = '__TYPE__';
        /**
         * Get the type of Workflow timing.
         *
         * @return string
         * @throws LogicException When a child class doesn't override the TYPE constant.
         */
        public function get_type()
        {
        }
    }
    /**
     * @class WorkflowTimingImmediate
     * @since 5.1.0
     */
    class WorkflowTimingImmediate extends \AutomateWoo\Entity\WorkflowTimingBase
    {
        const TYPE = 'immediately';
    }
    /**
     * @class WorkflowTimingVariable
     * @since 5.1.0
     */
    class WorkflowTimingVariable extends \AutomateWoo\Entity\WorkflowTimingBase
    {
        const TYPE = 'datetime';
        /**
         * @var string
         */
        protected $variable;
        /**
         * @param string $variable
         */
        public function __construct($variable)
        {
        }
        /**
         * @return string
         */
        public function get_variable()
        {
        }
        /**
         * @param string $variable
         * @return $this
         */
        public function set_variable($variable)
        {
        }
    }
    /**
     * @class Trigger
     * @since 5.1.0
     */
    class Trigger extends \AutomateWoo\Entity\NamedEntityWithOptions
    {
    }
    /**
     * @class Action
     * @since 5.1.0
     */
    class Action extends \AutomateWoo\Entity\NamedEntityWithOptions
    {
    }
    /**
     * @class WorkflowTimingDelayed
     * @since 5.1.0
     */
    class WorkflowTimingDelayed extends \AutomateWoo\Entity\WorkflowTimingBase
    {
        const TYPE = 'delayed';
        const DELAY_UNIT_MINUTE = 'm';
        const DELAY_UNIT_HOUR = 'h';
        const DELAY_UNIT_DAY = 'd';
        const DELAY_UNIT_WEEK = 'w';
        const DELAY_UNIT_MONTH = 'month';
        /**
         * @var int
         */
        protected $delay_value;
        /**
         * @var string
         */
        protected $delay_unit;
        /**
         * @param int    $delay_value
         * @param string $delay_unit
         */
        public function __construct($delay_value, $delay_unit)
        {
        }
        /**
         * @return int
         */
        public function get_delay_value()
        {
        }
        /**
         * @param int $delay_value
         * @return $this
         */
        public function set_delay_value($delay_value)
        {
        }
        /**
         * @return int
         */
        public function get_delay_unit()
        {
        }
        /**
         * @param int $delay_unit
         * @return $this
         */
        public function set_delay_unit($delay_unit)
        {
        }
    }
    /**
     * @class WorkflowTimingScheduled
     * @since 5.1.0
     */
    class WorkflowTimingScheduled extends \AutomateWoo\Entity\WorkflowTimingDelayed
    {
        const TYPE = 'scheduled';
        /**
         * @var string
         */
        protected $scheduled_time;
        /**
         * @var int ISO-8601 numeric representation of the day of the week. 1 (for Monday) through 7 (for Sunday).
         */
        protected $scheduled_day;
        /**
         * @param int    $scheduled_day
         * @param int    $scheduled_hour
         * @param int    $scheduled_minute
         * @param int    $delay_value
         * @param string $delay_unit
         */
        public function __construct($scheduled_day, $scheduled_hour, $scheduled_minute, $delay_value, $delay_unit)
        {
        }
        /**
         * @return string
         */
        public function get_scheduled_time()
        {
        }
        /**
         * @param int $hour
         * @param int $minute
         * @return $this
         */
        public function set_scheduled_time($hour = 0, $minute = 0)
        {
        }
        /**
         * @return int
         */
        public function get_scheduled_day()
        {
        }
        /**
         * @param int $scheduled_day ISO-8601 numeric representation of the day of the week
         * @return $this
         */
        public function set_scheduled_day($scheduled_day)
        {
        }
    }
    /**
     * @class WorkflowTimingFixed
     * @since 5.1.0
     */
    class WorkflowTimingFixed extends \AutomateWoo\Entity\WorkflowTimingBase
    {
        const TYPE = 'fixed';
        /**
         * @var DateTime
         */
        protected $fixed_date;
        /**
         * @param DateTime $fixed_date
         */
        public function __construct(\AutomateWoo\DateTime $fixed_date)
        {
        }
        /**
         * @return DateTime
         */
        public function get_fixed_datetime()
        {
        }
        /**
         * @param DateTime $fixed_date
         * @return $this
         */
        public function set_fixed_datetime(\AutomateWoo\DateTime $fixed_date)
        {
        }
    }
    /**
     * @class Rule
     * @since 5.1.0
     */
    class Rule implements \AutomateWoo\Entity\ToArray
    {
        use \AutomateWoo\Traits\NamedEntity;
        /**
         * @var string|null
         */
        protected $compare;
        /**
         * @var mixed
         */
        protected $value;
        /**
         * Rule constructor.
         *
         * @param string      $name
         * @param string|null $compare
         * @param mixed       $value
         */
        public function __construct($name, $compare = null, $value = null)
        {
        }
        /**
         * @return string|null
         */
        public function get_compare()
        {
        }
        /**
         * @param string|null $compare
         *
         * @return $this
         */
        public function set_compare($compare)
        {
        }
        /**
         * @return mixed
         */
        public function get_value()
        {
        }
        /**
         * @param mixed $value
         *
         * @return $this
         */
        public function set_value($value)
        {
        }
        /**
         * Convert the object's data to an array.
         *
         * @return array
         */
        public function to_array() : array
        {
        }
    }
}
namespace AutomateWoo\Fields {
    /**
     * @class Field
     */
    abstract class Field
    {
        /** @var string - deprecated, use $title */
        protected $default_title;
        /** @var string - deprecated, use $name */
        protected $default_name;
        /** @var string */
        protected $title;
        /** @var string */
        protected $name;
        /** @var string */
        protected $type;
        /** @var string */
        protected $description;
        /** @var string trigger or action */
        protected $name_base;
        /** @var bool */
        protected $required = false;
        /** @var array */
        protected $classes = [];
        /**
         * Extra attributes that will appended to the HTML field element.
         *
         * @var array
         */
        protected $extra_attrs = [];
        /** @var string */
        protected $placeholder = '';
        /**
         * Field meta data.
         *
         * This prop can be used when misc data needs to be added to the field.
         * Not to be confused with $this->extra_attrs.
         *
         * @since 4.6.0
         *
         * @var array
         */
        public $meta = [];
        /**
         * Output the field HTML.
         *
         * @param mixed $value
         */
        abstract function render($value);
        /**
         * Field constructor.
         */
        function __construct()
        {
        }
        /**
         * @param $name
         * @return $this
         */
        function set_name($name)
        {
        }
        /**
         * @param $title
         * @return $this
         */
        function set_title($title)
        {
        }
        /**
         * @return string
         */
        function get_title()
        {
        }
        /**
         * @return string
         */
        function get_name()
        {
        }
        /**
         * @return string
         */
        function get_type()
        {
        }
        /**
         * @param $description
         * @return $this
         */
        function set_description($description)
        {
        }
        /**
         * @return string
         */
        function get_description()
        {
        }
        /**
         * @param $placeholder string
         * @return $this
         */
        function set_placeholder($placeholder)
        {
        }
        /**
         * @return string
         */
        function get_placeholder()
        {
        }
        /**
         * @param $classes string
         * @return $this
         */
        function add_classes($classes)
        {
        }
        /**
         * @param bool $implode
         * @return array|string
         */
        function get_classes($implode = true)
        {
        }
        /**
         * @param $name
         * @param $value
         * @return $this
         */
        function add_extra_attr($name, $value = null)
        {
        }
        /**
         * @param $name
         * @return bool
         */
        function has_data_attr($name)
        {
        }
        /**
         * @param $name
         * @param $value
         * @return $this
         */
        function add_data_attr($name, $value = null)
        {
        }
        /**
         * Outputs the extra field attrs in HTML attribute format.
         */
        function output_extra_attrs()
        {
        }
        /**
         * @param bool $required
         * @return $this
         */
        function set_required($required = true)
        {
        }
        /**
         * @return bool
         */
        function get_required()
        {
        }
        /**
         * @return $this
         */
        function set_disabled()
        {
        }
        /**
         * @param $name_base
         * @return $this
         */
        function set_name_base($name_base)
        {
        }
        /**
         * @return bool
         */
        function get_name_base()
        {
        }
        /**
         * @return string
         */
        function get_full_name()
        {
        }
        /**
         * @param string $options
         * @return $this
         */
        function set_variable_validation($options = '')
        {
        }
        /**
         * If $options is left blank then the field not support variables
         *
         * @param string $options
         * @return $this
         */
        function set_validation($options = '')
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * This method runs before WRITING a value to the DB but doesn't run before READING.
         *
         * Defaults to sanitize as a single line string. Override this method for fields that should be sanitized differently.
         *
         * @since 4.4.0
         *
         * @param string $value
         *
         * @return string
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * @class Text
     */
    class Text extends \AutomateWoo\Fields\Field
    {
        protected $name = 'text_input';
        protected $type = 'text';
        public $multiple = false;
        /**
         * Define whether HTML entities should be decoded before the field is rendered.
         *
         * @since 4.4.0
         *
         * @var bool
         */
        public $decode_html_entities_before_render = true;
        function __construct()
        {
        }
        /**
         * @param bool $multi
         *
         * @return $this
         */
        function set_multiple($multi = true)
        {
        }
        /**
         * Output the field HTML.
         *
         * @param string $value
         */
        function render($value)
        {
        }
    }
    /**
     * @class Text_Area
     */
    class Text_Area extends \AutomateWoo\Fields\Text
    {
        protected $name = 'text_area';
        protected $type = 'text_area';
        /**
         * Determines if HTML will be allowed in the field value.
         * By default HTML tags will be stripped.
         *
         * @var bool|string|array
         */
        protected $allow_html = false;
        function __construct()
        {
        }
        /**
         * @param int $rows
         *
         * @return $this
         */
        function set_rows($rows)
        {
        }
        /**
         * Determines if HTML will be allowed in the field value.
         *
         * @param bool|string|array $allow_html Default is false.
         *  false - Strips all HTML
         *  true - Sanitize content for allowed HTML tags in post content, uses wp_kses_post()
         *  array|string - List of allowed HTML elements for wp_kses()
         *
         * @return $this
         */
        function set_allow_html($allow_html)
        {
        }
        /**
         * Output the field HTML.
         *
         * @param string $value
         */
        function render($value)
        {
        }
        /**
         * Sanitizes the value of the field.
         * Type of sanitization varies based on the value of $this->allow_html.
         *
         * @since 4.4.0
         *
         * @param string $value
         *
         * @return string
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * Textarea field for raw HTML input.
     *
     * @class HTML_Textarea
     */
    class HTML_Textarea extends \AutomateWoo\Fields\Text_Area
    {
        /**
         * Prevent decoding HTML entities before the field is rendered.
         *
         * @since 4.4.0
         *
         * @var bool
         */
        public $decode_html_entities_before_render = false;
        /**
         * HTML_Textarea constructor.
         */
        public function __construct()
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param string $value The value of the field.
         *
         * @return string
         */
        public function sanitize_value($value)
        {
        }
    }
    /**
     * @class Select
     */
    class Select extends \AutomateWoo\Fields\Field
    {
        protected $name = 'select';
        protected $type = 'select';
        protected $default_option;
        public $multiple = false;
        protected $options = [];
        public $dynamic_options_reference_field_name;
        /**
         * @param bool $show_placeholder
         */
        function __construct($show_placeholder = true)
        {
        }
        /**
         * @param $options
         * @return $this
         */
        function set_options($options)
        {
        }
        /**
         * @return array
         */
        function get_options()
        {
        }
        /**
         * @param $option
         * @return $this
         */
        function set_default($option)
        {
        }
        /**
         * @param bool $multi
         * @return $this
         */
        function set_multiple($multi = true)
        {
        }
        /**
         * @param $reference_field_name
         * @return $this
         */
        function set_dynamic_options_reference($reference_field_name)
        {
        }
        /**
         * @return bool
         */
        function has_dynamic_options()
        {
        }
        /**
         * @param $value
         * @return void
         */
        function render($value = false)
        {
        }
        /**
         * Render a single select box.
         *
         * @param string $value
         */
        protected function render_single($value)
        {
        }
        /**
         * Render a multi-select box.
         *
         * @param array $values
         */
        protected function render_multiple($values)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param array|string $value
         *
         * @return array|string
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * This select field is limited to subscription products.
     * This generally shouldn't be used because any product can be used as a subscription.
     *
     * @class Subscription_Products
     */
    class Subscription_Products extends \AutomateWoo\Fields\Select
    {
        protected $name = 'subscription_products';
        public $multiple = true;
        function __construct()
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param array|string $value
         *
         * @return array|string
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * @class Order_Status
     */
    class Order_Status extends \AutomateWoo\Fields\Select
    {
        protected $name = 'order_status';
        /**
         * @param bool $allow_all
         */
        function __construct($allow_all = true)
        {
        }
    }
    /**
     * @class Number
     */
    class Number extends \AutomateWoo\Fields\Text
    {
        protected $name = 'number_input';
        protected $type = 'number';
        function __construct()
        {
        }
        /**
         * @param $min string
         * @return $this
         */
        function set_min($min)
        {
        }
        /**
         * @param $max string
         * @return $this
         */
        function set_max($max)
        {
        }
        /**
         * Sanitizes the value of a number field.
         *
         * If the field is not required, the field can be left blank.
         *
         * @since 4.4.0
         *
         * @param string $value
         *
         * @return string|float
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * @class Workflow
     */
    class Workflow extends \AutomateWoo\Fields\Select
    {
        protected $name = 'workflow';
        /** @var array  */
        public $query_args = [];
        /**
         * @param bool $show_placeholder
         */
        function __construct($show_placeholder = true)
        {
        }
        /**
         * @return array
         */
        function get_options()
        {
        }
        /**
         * @param $key
         * @param $value
         * @return $this
         */
        function add_query_arg($key, $value)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param array|string $value
         *
         * @return array|string
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * @class Subscription_Status
     */
    class Subscription_Status extends \AutomateWoo\Fields\Select
    {
        protected $name = 'subscription_status';
        /**
         * @param bool $allow_all
         */
        function __construct($allow_all = true)
        {
        }
    }
    /**
     * @class Taxonomy
     */
    class Taxonomy extends \AutomateWoo\Fields\Select
    {
        protected $name = 'taxonomy';
        function __construct($show_placeholder = true)
        {
        }
        /**
         * @return array
         */
        function get_options()
        {
        }
    }
    /**
     * @class Attribute
     */
    class Attribute extends \AutomateWoo\Fields\Select
    {
        protected $name = 'attribute';
        /**
         * @param bool $show_placeholder
         */
        function __construct($show_placeholder = true)
        {
        }
    }
    /**
     * @class Category
     */
    class Category extends \AutomateWoo\Fields\Field
    {
        protected $name = 'category';
        protected $type = 'category';
        function __construct()
        {
        }
        /**
         * @param $value
         */
        function render($value)
        {
        }
    }
    /**
     * Email_Content class.
     */
    class Email_Content extends \AutomateWoo\Fields\Field
    {
        /**
         * Field name.
         *
         * @var string
         */
        protected $name = 'email_content';
        /**
         * Field type.
         *
         * @var string
         */
        protected $type = 'email-content';
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Render the field.
         *
         * @param string $value
         */
        public function render($value)
        {
        }
        /**
         * Insert script to init the WYSIWYG editor.
         *
         * @param string $id
         */
        public function ajax_init($id)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param string $value
         *
         * @return string
         */
        public function sanitize_value($value)
        {
        }
    }
    /**
     * @class Date
     */
    class Date extends \AutomateWoo\Fields\Text
    {
        function __construct()
        {
        }
    }
    /**
     * Class Order_Note_Type
     * @since 3.5.0
     */
    class Order_Note_Type extends \AutomateWoo\Fields\Select
    {
        /**
         * @param bool $show_placeholder
         */
        function __construct($show_placeholder = true)
        {
        }
    }
    /**
     * Class Searchable_Select_Abstract
     *
     * Abstract base class for AJAX searchable select fields.
     *
     * @since 4.6.0
     * @package AutomateWoo\Fields
     */
    abstract class Searchable_Select_Abstract extends \AutomateWoo\Fields\Field
    {
        /**
         * Field type.
         *
         * @var string
         */
        protected $type = 'searchable-select';
        /**
         * Whether to allow multiple selections.
         *
         * @var bool
         */
        protected $multiple = false;
        /**
         * Get the ajax action to use for the search.
         *
         * @return string
         */
        protected abstract function get_search_ajax_action();
        /**
         * Searchable_Select_Abstract constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get the displayed value of a selected option.
         *
         * @param string $value
         *
         * @return string
         */
        protected function get_select_option_display_value($value)
        {
        }
        /**
         * Output field HTML.
         *
         * @param int|array|string $values
         */
        public function render($values)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @param array|string $value
         *
         * @return array|string
         */
        public function sanitize_value($value)
        {
        }
        /**
         * Set multiple prop.
         *
         * @param bool $multiple
         *
         * @return $this
         */
        public function set_multiple($multiple)
        {
        }
        /**
         * Is multiple prop enabled.
         *
         * @return bool
         */
        public function is_multiple()
        {
        }
    }
    /**
     * Searchable coupon field class.
     *
     * @since 4.6.0
     * @package AutomateWoo\Fields
     */
    class Coupon extends \AutomateWoo\Fields\Searchable_Select_Abstract
    {
        /**
         * The default name for this field.
         *
         * @var string
         */
        protected $name = 'coupon';
        /**
         * Get the ajax action to use for the search.
         *
         * @return string
         */
        protected function get_search_ajax_action()
        {
        }
        /**
         * Get the displayed value of a selected option.
         *
         * @param string $value
         *
         * @return string
         */
        protected function get_select_option_display_value($value)
        {
        }
    }
    /**
     * Class EmailAddressWithName
     *
     * @since 5.2.0
     */
    class EmailAddressWithName extends \AutomateWoo\Fields\Field
    {
        /**
         * @var string
         */
        protected $type = 'email-address-with-name';
        /**
         * Render the field.
         *
         * @param array $value
         */
        public function render($value)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @param array $value
         *
         * @return array
         */
        public function sanitize_value($value)
        {
        }
    }
    /**
     * Searchable product field class.
     *
     * @package AutomateWoo\Fields
     */
    class Product extends \AutomateWoo\Fields\Searchable_Select_Abstract
    {
        /**
         * The default name for this field.
         *
         * @var string
         */
        protected $name = 'product';
        /**
         * Allow product variations to be possible selections.
         *
         * @var bool
         */
        public $allow_variations = false;
        /**
         * Flag to define whether variable products should be included in search results for the select box.
         *
         * @var bool
         */
        public $allow_variable = true;
        /**
         * Product constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get the ajax action to use for the search.
         *
         * @return string
         */
        protected function get_search_ajax_action()
        {
        }
        /**
         * Get the displayed value of a selected option.
         *
         * @param string $value
         *
         * @return string
         */
        protected function get_select_option_display_value($value)
        {
        }
        /**
         * Set allow_variations property.
         *
         * @since 4.6.0
         *
         * @param bool $allow
         *
         * @return $this
         */
        public function set_allow_variations($allow)
        {
        }
        /**
         * Set allow_variable property.
         *
         * @since 4.6.0
         *
         * @param bool $allow
         *
         * @return $this
         */
        public function set_allow_variable($allow)
        {
        }
    }
    /**
     * @class User_Role
     */
    class User_Role extends \AutomateWoo\Fields\Select
    {
        protected $name = 'user_type';
        // legacy name
        /**
         * @param bool $allow_all
         */
        function __construct($allow_all = true)
        {
        }
    }
    /**
     * @class Attribute_Term
     */
    class Attribute_Term extends \AutomateWoo\Fields\Field
    {
        protected $name = 'term';
        protected $type = 'term';
        function __construct()
        {
        }
        /**
         * @param array $values
         */
        function render($values)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param array $value
         *
         * @return array
         */
        function sanitize_value($value)
        {
        }
    }
}
namespace AutomateWoo\Formatters {
    interface Formattable
    {
        /**
         * Format a value for display in the UI.
         *
         * @param mixed $value The value to format.
         *
         * @return mixed The formatted value.
         */
        public function format_value($value);
    }
    trait Boolean_Formatter
    {
        /**
         * Format a value for display in the UI.
         *
         * @param mixed $value The value to format.
         *
         * @return bool The formatted value.
         */
        public function format_value($value)
        {
        }
    }
}
namespace AutomateWoo\Fields {
    /**
     * @class Checkbox
     */
    class Checkbox extends \AutomateWoo\Fields\Field implements \AutomateWoo\Formatters\Formattable
    {
        use \AutomateWoo\Formatters\Boolean_Formatter;
        protected $name = 'checkbox';
        protected $type = 'checkbox';
        public $default_to_checked = false;
        function __construct()
        {
        }
        /**
         * @param bool $checked
         * @return $this
         */
        function set_default_to_checked($checked = true)
        {
        }
        /**
         * @param $value
         */
        function render($value)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param string $value
         *
         * @return string
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * @class Taxonomy_Term
     */
    class Taxonomy_Term extends \AutomateWoo\Fields\Field
    {
        protected $name = 'term';
        protected $type = 'term';
        function __construct()
        {
        }
        /**
         * @param string $value
         */
        function render($value)
        {
        }
    }
    /**
     * @class BookingStatus
     */
    class BookingStatus extends \AutomateWoo\Fields\Select
    {
        /**
         * @var $name Field type name.
         */
        protected $name = 'booking_status';
        /**
         * @param bool $allow_all
         */
        public function __construct($allow_all = true)
        {
        }
    }
    /**
     * @class Text
     */
    class Time extends \AutomateWoo\Fields\Field
    {
        protected $name = 'time';
        protected $type = 'text';
        protected $show_24hr_note = true;
        /**
         * Set the maximum value for the hours field.
         *
         * @var int
         */
        public $max_hours = 23;
        function __construct()
        {
        }
        /**
         * @param $show
         * @return $this
         */
        function set_show_24hr_note($show)
        {
        }
        /**
         * @param array $value
         */
        function render($value)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * @since 4.4.0
         *
         * @param array $value
         *
         * @return array
         */
        function sanitize_value($value)
        {
        }
    }
    /**
     * @class Payment_Gateway
     */
    class Payment_Gateway extends \AutomateWoo\Fields\Select
    {
        protected $name = 'payment_gateway';
        public $multiple = true;
        /**
         * @param bool $show_placeholder
         */
        function __construct($show_placeholder = true)
        {
        }
    }
    /**
     * Class Before_After_Day
     *
     * @since 4.5
     *
     * @package AutomateWoo\Fields
     */
    class Before_After_Day extends \AutomateWoo\Fields\Field
    {
        /**
         * The field's default name.
         *
         * @var string
         */
        protected $name = 'before_after_day';
        /**
         * The field type.
         *
         * @var string
         */
        protected $type = 'field-group';
        /**
         * Before_After_Day constructor.
         */
        public function __construct()
        {
        }
        /**
         * Renders field.
         *
         * @param array $value
         */
        public function render($value)
        {
        }
        /**
         * Sanitizes the value of the field.
         *
         * Converts the field value to an integer.
         *
         * @param array $value
         *
         * @return int|false
         */
        public function sanitize_value($value)
        {
        }
    }
    /**
     * Number field that only allows positive values (>0)
     *
     * @class Positive_Number
     * @since 4.9.4
     * @package AutomateWoo\Fields
     */
    class Positive_Number extends \AutomateWoo\Fields\Number
    {
        /**
         * Positive_Number constructor.
         */
        public function __construct()
        {
        }
    }
    /**
     * @class Tag
     */
    class Tag extends \AutomateWoo\Fields\Field
    {
        protected $name = 'tag';
        protected $type = 'tag';
        function __construct()
        {
        }
        /**
         * @param $value
         */
        function render($value)
        {
        }
    }
    /**
     * @class User_Tags
     */
    class User_Tags extends \AutomateWoo\Fields\Select
    {
        protected $name = 'user_tags';
        public $multiple = true;
        /**
         * @param bool $show_placeholder
         */
        function __construct($show_placeholder = true)
        {
        }
    }
    /**
     * @class Price
     */
    class Price extends \AutomateWoo\Fields\Text
    {
        protected $name = 'price';
        protected $type = 'text';
        function __construct()
        {
        }
        /**
         * Sanitizes the field value.
         *
         * Removes currency symbols, thousand separators and sets correct decimal places.
         * Empty string values are deliberately allowed.
         *
         * @since 4.4.0
         * @since 4.6.0 Adds support for workflow variables.
         *
         * @param string $value
         *
         * @return string
         */
        public function sanitize_value($value)
        {
        }
        /**
         * Output the field HTML.
         *
         * @param string $value
         */
        public function render($value)
        {
        }
    }
    /**
     * @class Countries
     */
    class Countries extends \AutomateWoo\Fields\Select
    {
        protected $name = 'countries';
        public $multiple = true;
        function __construct()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Download class.
     *
     * @since 5.6.6
     */
    class Download
    {
        /**
         * Download ID.
         *
         * @var int
         */
        public $id;
        /**
         * The ID of the associated product.
         *
         * @var int
         */
        public $product_id;
        /**
         * The ID of the associated order.
         *
         * @var int
         */
        public $order_id;
        /**
         * Constructor.
         *
         * @param int $id
         * @param int $product_id
         * @param int $order_id
         */
        public function __construct($id, $product_id, $order_id)
        {
        }
        /**
         * Get the download ID.
         *
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * Get the product ID.
         *
         * @return int
         */
        public function get_product_id()
        {
        }
        /**
         * Get the order ID.
         *
         * @return int
         */
        public function get_order_id()
        {
        }
        /**
         * Get the file name.
         *
         * @return string
         */
        public function get_file_name()
        {
        }
        /**
         * Get the download URL.
         *
         * @return string
         */
        public function get_download_url()
        {
        }
        /**
         * Get the download count.
         *
         * @return int
         */
        public function get_download_count()
        {
        }
    }
    /**
     * @class Privacy
     * @since 4.0
     */
    class Privacy_Abstract extends \WC_Abstract_Privacy
    {
        /**
         * @param string $id
         * @param string $name
         * @param callable $callback
         */
        public function add_exporter($id, $name, $callback)
        {
        }
        /**
         * @param string $id
         * @param string $name
         * @param callable $callback
         */
        public function add_eraser($id, $name, $callback)
        {
        }
        /**
         * Parse export data in array format where keys are the name of the data.
         *
         * @param array $data
         * @return array
         */
        public static function parse_export_data_array($data)
        {
        }
    }
}
namespace AutomateWoo\SystemChecks {
    /**
     * Class AbstractSystemCheck
     *
     * @package AutomateWoo\SystemChecks
     */
    abstract class AbstractSystemCheck
    {
        /** @var string */
        public $title;
        /** @var string */
        public $description;
        /** @var bool */
        public $high_priority = false;
        /**
         * @return array
         */
        abstract function run();
        /**
         * @param string $message
         * @return array
         */
        function success($message = '')
        {
        }
        /**
         * @param string $message
         * @return array
         */
        function error($message = '')
        {
        }
    }
    /**
     * CronRunning system check class.
     *
     * @package AutomateWoo\SystemChecks
     */
    class CronRunning extends \AutomateWoo\SystemChecks\AbstractSystemCheck
    {
        /**
         * AW_System_Check_Cron_Running constructor.
         */
        function __construct()
        {
        }
        /**
         * Perform the check
         */
        function run()
        {
        }
    }
    /**
     * Class DatabaseTablesExist
     *
     * @package AutomateWoo\SystemChecks
     */
    class DatabaseTablesExist extends \AutomateWoo\SystemChecks\AbstractSystemCheck
    {
        function __construct()
        {
        }
        /**
         * Perform the check
         */
        function run()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Guest_Query
     * @since 2.0
     */
    class Guest_Query extends \AutomateWoo\Query_Abstract
    {
        /** @var string */
        public $table_id = 'guests';
        /** @var string  */
        public $meta_table_id = 'guest-meta';
        /** @var string  */
        protected $model = 'AutomateWoo\\Guest';
        /**
         * @since 4.1
         * @param int|array $order_id
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_most_recent_order($order_id, $compare = false)
        {
        }
        /**
         * @since 4.2
         * @param string $version
         * @param $compare bool|string - defaults to '='
         * @return $this
         */
        function where_version($version, $compare = false)
        {
        }
        /**
         * @return Guest[]
         */
        function get_results()
        {
        }
    }
    /**
     * @class Data_Layer
     */
    class Data_Layer
    {
        /**
         * When true, data from the order is used instead of the user data.
         * E.g. order billing first name will be used instead of the first name in user meta.
         * Also the language of the order overrides the customers language when this is true.
         * This property also applies to subscriptions.
         *
         * In the case of a referral trigger the customer could be the advocate and the order will belong to the friend.
         *
         * @since 4.2
         * @var bool
         */
        public $order_belongs_to_customer = true;
        private $data = [];
        /**
         * @param array $data
         */
        function __construct($data = [])
        {
        }
        /**
         * Initiate the data layer
         */
        function init()
        {
        }
        /**
         * Auto fill customer based on user and user based on customer for compatibility with legacy triggers, rules etc
         */
        function ensure_customer_object_compatibility()
        {
        }
        function clear()
        {
        }
        /**
         * Returns unvalidated data layer
         * @return array
         */
        function get_raw_data()
        {
        }
        /**
         * @param $type
         * @param $item
         */
        function set_item($type, $item)
        {
        }
        /**
         * @param string $type
         * @return mixed
         */
        function get_item($type)
        {
        }
        /**
         * @return Customer|false
         */
        function get_customer()
        {
        }
        /**
         * @return Cart|false
         */
        function get_cart()
        {
        }
        /**
         * @return Guest|bool
         */
        function get_guest()
        {
        }
        /**
         * @return \WP_User|Order_Guest|false
         */
        function get_user()
        {
        }
        /**
         * @return \WC_Order|false
         */
        function get_order()
        {
        }
        /**
         * @return \WC_Subscription|false
         */
        function get_subscription()
        {
        }
        /**
         * @return \WC_Booking|false
         */
        function get_booking()
        {
        }
        /**
         * @return array|\WC_Order_Item_Product|false
         */
        function get_order_item()
        {
        }
        /**
         * @return \WC_Memberships_User_Membership|false
         */
        function get_membership()
        {
        }
        /**
         * @return Wishlist|false
         */
        function get_wishlist()
        {
        }
        /**
         * @return \WC_Product|false
         */
        function get_product()
        {
        }
        /**
         * @return Order_Note|false
         */
        function get_order_note()
        {
        }
        /**
         * @return \WP_Comment|false
         */
        function get_comment()
        {
        }
        /**
         * @return Review|false
         */
        function get_review()
        {
        }
        /**
         * @return Workflow|false
         */
        function get_workflow()
        {
        }
        /**
         * @return \WP_Term|false
         */
        function get_category()
        {
        }
        /**
         * @return \WP_Term|false
         */
        function get_tag()
        {
        }
        /**
         * This should return the language of the customer in the data layer.
         *
         * @return string|bool
         */
        function get_language()
        {
        }
        /**
         * Alias for $this->get_language()
         * @return bool|string
         */
        function get_customer_language()
        {
        }
        /**
         * Gets the customer email based on the data layer.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_email()
        {
        }
        /**
         * Gets the customer first name based on the data layer.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_first_name()
        {
        }
        /**
         * Gets the customer last name based on the data layer.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_last_name()
        {
        }
        /**
         * Gets the customer full name based on the data layer.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_full_name()
        {
        }
        /**
         * Gets the customer billing phone.
         * Doesn't parse or format.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_phone()
        {
        }
        /**
         * Gets the customer billing company.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_company()
        {
        }
        /**
         * Gets the customer billing country code.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_country()
        {
        }
        /**
         * Gets the customer billing state.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_state()
        {
        }
        /**
         * Gets the customer billing city.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_city()
        {
        }
        /**
         * Gets the customer billing postcode.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_postcode()
        {
        }
        /**
         * Gets the customer billing address 1.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_address_1()
        {
        }
        /**
         * Gets the customer billing address 2.
         *
         * @since 4.2
         * @return string
         */
        function get_customer_address_2()
        {
        }
        /**
         * @since 4.2
         * @param bool $include_name
         * @return array
         */
        function get_customer_address_array($include_name = true)
        {
        }
        /**
         * Is the data layer missing data?
         *
         * Data can be missing if it has been deleted e.g. if an order has been trashed.
         *
         * @since 4.6
         *
         * @return bool
         */
        public function is_missing_data()
        {
        }
    }
    /**
     * Class AbstractOptionsStore.
     *
     * @since 5.1.0
     */
    abstract class AbstractOptionsStore
    {
        /**
         * Get the prefix for options used the wp_options table.
         *
         * @return string
         */
        public abstract function get_prefix() : string;
        /**
         * Get an array of option defaults.
         *
         * @return array
         */
        public abstract function get_defaults() : array;
        /**
         * Get bool WP option.
         *
         * Booleans are stored as 'yes' 'no' values in the database.
         *
         * @param string $option_name
         *
         * @return bool
         *
         * @throws InvalidArgument If the option value is invalid.
         */
        protected function get_bool_option(string $option_name) : bool
        {
        }
        /**
         * Get the value of an option or fallback to the default.
         *
         * @param string $option_name
         *
         * @return mixed The value of the option.
         *               Returns null if there is no default and the option doesn't exist or is an empty string.
         */
        protected function get_option(string $option_name)
        {
        }
    }
    /**
     * Class PluginOptions.
     *
     * The intention is this class will eventually replace the \AutomateWoo\Options class as it is injectable and mockable
     * while \AutomateWoo\Options is not.
     *
     * @since 5.1.0
     */
    class OptionsStore extends \AutomateWoo\AbstractOptionsStore
    {
        use \AutomateWoo\Traits\IntegerValidator;
        /**
         * Get the prefix for options used the wp_options table.
         *
         * @return string
         */
        public function get_prefix() : string
        {
        }
        /**
         * Get an array of option defaults.
         *
         * @return array
         */
        public function get_defaults() : array
        {
        }
        /**
         * Is expired coupon cleaning enabled?
         *
         * @return bool
         *
         * @throws InvalidArgument If the option value is invalid.
         */
        public function get_clean_expired_coupons_enabled() : bool
        {
        }
        /**
         * Is cart tracking enabled?
         *
         * @return bool
         *
         * @throws InvalidArgument If the option value is invalid.
         */
        public function get_cart_tracking_enabled() : bool
        {
        }
        /**
         * Is cart tracking enabled?
         *
         * @return int
         *
         * @throws InvalidArgument If the option value is invalid.
         */
        public function get_abandoned_cart_timeout() : int
        {
        }
        /**
         * Is opt-in mode enabled or is site using opt-out mode.
         *
         * @since 5.2.0
         *
         * @return bool
         */
        public function get_optin_enabled()
        {
        }
    }
    /**
     * @class Privacy
     * @since 4.0
     */
    class Privacy extends \AutomateWoo\Privacy_Abstract
    {
        /**
         * Init - hook into events.
         */
        public function __construct()
        {
        }
        /**
         * Add suggested privacy policy content for the privacy policy page.
         */
        public function get_privacy_message()
        {
        }
    }
    /**
     * Class Async_Request_Abstract.
     * Adds some simple functionality on top of WP_Async_Request.
     *
     * @since 3.8
     */
    abstract class Async_Request_Abstract extends \AW_WP_Async_Request
    {
        public function __construct()
        {
        }
        /**
         * Get post args
         *
         * @return array
         */
        protected function get_post_args()
        {
        }
        /**
         * @return array
         */
        function get_raw_request_data()
        {
        }
    }
}
namespace AutomateWoo\DatabaseUpdates {
    /**
     * Class AbstractDatabaseUpdate
     *
     * @since   2.9.7
     * @package AutomateWoo\DatabaseUpdates
     */
    abstract class AbstractDatabaseUpdate
    {
        /**
         * Whether the update is completed after the process has been dispatched.
         *
         * @var bool
         */
        protected $is_complete = false;
        /**
         * A count of items processed in the current dispatch process.
         *
         * @var int
         */
        protected $items_processed = 0;
        /**
         * The version number for the update.
         *
         * @var string
         */
        protected $version;
        /**
         * Process a database update batch.
         *
         * This method will be continue being called in separate wp-ajax requests until it returns true.
         *
         * @return bool Return true if update is complete, false if not yet complete.
         */
        protected abstract function process();
        /**
         * Runs immediately before a database update begins.
         */
        protected function start()
        {
        }
        /**
         * Called immediately after database update is completed.
         */
        protected function finish()
        {
        }
        /**
         * Get the option name that stores if the update has started.
         *
         * @return string
         */
        protected function get_started_option_name()
        {
        }
        /**
         * Dispatches a call to start or continue processing a database update.
         */
        public function dispatch_process()
        {
        }
        /**
         * Returns true if the update is completed with caveats.
         * - It only knows if the process was completed after calling `dispatch_process()`.
         *
         * @return bool
         */
        public function is_complete()
        {
        }
        /**
         * Returns the count of items run in a single request, not a running total.
         *
         * @return int
         */
        public function get_items_processed_count()
        {
        }
        /**
         * Return 0 if the total is unknown.
         *
         * @return int
         * @since 4.3.0
         */
        public function get_items_to_process_count()
        {
        }
        /**
         * Log an error while processing the update.
         *
         * @param string $message
         */
        protected function log_processing_error(string $message)
        {
        }
    }
    class Database_Update_4_0_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        protected $version = '4.0.0';
        protected function start()
        {
        }
        /**
         * @return bool
         */
        protected function process()
        {
        }
        /**
         * @since 4.3.0
         * @return bool|int
         */
        public function get_items_to_process_count()
        {
        }
    }
    /**
     * Class Database_Update_5_0_0
     *
     * @package AutomateWoo\DatabaseUpdates
     */
    class Database_Update_5_0_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        /** @var string */
        protected $version = '5.0.0';
        /**
         * @return bool
         */
        protected function process()
        {
        }
        /**
         * @return bool|int
         */
        public function get_items_to_process_count()
        {
        }
        /**
         * @param int $limit
         * @return Workflow_Query
         */
        private function get_workflows_query($limit)
        {
        }
        /**
         * Called immediately after database update is completed.
         */
        protected function finish()
        {
        }
    }
    /**
     * Class Database_Update_3_5_0
     *
     * @package AutomateWoo\DatabaseUpdates
     */
    class Database_Update_3_5_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        /** @var string */
        protected $version = '3.5.0';
        /**
         * Runs immediately before a database update begins.
         */
        protected function start()
        {
        }
        /**
         * @return bool
         */
        protected function process()
        {
        }
    }
    /**
     * Class Database_Update_5_3_0
     *
     * Alters AW's custom meta tables to allow `null` meta values since dbDelta() won't make this change.
     */
    class Database_Update_5_3_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        /** @var string */
        protected $version = '5.3.0';
        /**
         * @return string[]
         */
        private function get_tables_to_update()
        {
        }
        /**
         * Process a database update batch.
         *
         * @return bool Return true if update is complete, false if not yet complete.
         */
        protected function process()
        {
        }
        /**
         * @return bool|int
         */
        public function get_items_to_process_count()
        {
        }
    }
    /**
     * Class Database_Update_5_1_0
     *
     * @package AutomateWoo\DatabaseUpdates
     */
    class Database_Update_5_1_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        const UPDATE_ITEMS_OPTIONS_KEY = 'automatewoo_update_items';
        /** @var string */
        protected $version = '5.1.0';
        /**
         * Runs immediately before a database update begins.
         */
        protected function start()
        {
        }
        /**
         * Called immediately after database update is completed.
         */
        protected function finish()
        {
        }
        /**
         * @return bool
         */
        protected function process()
        {
        }
        /**
         * @return bool|int
         */
        public function get_items_to_process_count()
        {
        }
        /**
         * @param Workflow $workflow
         */
        private function update_shop_products_variables($workflow)
        {
        }
        /**
         * Return the list of IDs of all the workflows in the database
         *
         * @return int[]
         */
        private function get_all_workflow_ids()
        {
        }
    }
    class Database_Update_3_0_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        protected $version = '3.0.0';
        protected function start()
        {
        }
        protected function finish()
        {
        }
        /**
         * @return bool
         */
        protected function process()
        {
        }
        /**
         * @param Workflow $workflow
         */
        function convert_workflow_from_user_to_customer_data_type($workflow)
        {
        }
        /**
         * @param Workflow $workflow
         */
        function convert_legacy_abandoned_cart_workflow($workflow)
        {
        }
    }
    class Database_Update_2_9_7 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        protected $version = '2.9.7';
        /**
         * @return bool
         */
        protected function process()
        {
        }
    }
    /**
     * Class Database_Update_3_6_0
     *
     * @package AutomateWoo\DatabaseUpdates
     */
    class Database_Update_3_6_0 extends \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate
    {
        /** @var string  */
        protected $version = '3.6.0';
        /**
         * @return bool
         */
        protected function process()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Events
     * @since 3.4.0
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     */
    class Events
    {
        /** @var Events_Runner_Async_Request  */
        private static $events_runner_async_request;
        /** @var array of event IDs */
        static $events_runner_async_request_data = [];
        /** @var array Store of events created in the current request */
        static $events_created_in_request = [];
        /**
         * @return Events_Runner_Async_Request
         */
        static function get_event_runner_async_request()
        {
        }
        /**
         * @return int
         */
        static function get_batch_size()
        {
        }
        /**
         * Check for events due to be run
         */
        static function run_due_events()
        {
        }
        /**
         * Schedule async event.
         *
         * If $unique_for_request is set to true, multiple identical events will be blocked from creation in the same request.
         * The database won't be queried to determine if the event is unique.
         *
         * If AUTOMATEWOO_ENABLE_INSTANT_EVENT_DISPATCHING is true a HTTP request will be dispatched
         * at shutdown that will instantly run the event.
         *
         * @deprecated in 5.2.0 use AW()->action_scheduler()->enqueue_async_event() instead.
         *
         * @since 4.3.0 $unique_for_request arg added
         *
         * @param string $hook
         * @param array  $args
         * @param bool   $unique_for_request
         *
         * @return Event|bool
         */
        static function schedule_async_event($hook, $args = [], $unique_for_request = false)
        {
        }
        /**
         * Schedules an event.
         *
         * @deprecated in 5.2.0 use AW()->action_scheduler()->schedule_single() instead.
         *
         * @param DateTime|string|int $date Accepts timestamps
         * @param string              $hook
         * @param array               $args
         *
         * @return Event|false
         */
        static function schedule_event($date, $hook, $args = [])
        {
        }
        /**
         * Unschedules all events attached to the hook with the specified arguments.
         *
         * @param string $hook
         * @param array $args optional
         */
        static function clear_scheduled_hook($hook, $args = [])
        {
        }
        /**
         * Experimental method to run the events background processor at the shut down event.
         * To reduce the delay involved in async events.
         *
         * @param int|bool $event_id
         * @since 3.7
         */
        static function dispatch_events_starter_request_at_shutdown($event_id)
        {
        }
        static function dispatch_events_starter_request()
        {
        }
        /**
         * Adds an event to the $events_created_in_request store.
         *
         * @since 4.3.0
         *
         * @param string $hook The event hook.
         * @param string $args_hash The event args hash.
         */
        static function add_to_events_created_in_request_store($hook, $args_hash)
        {
        }
        /**
         * @since 4.3.0
         *
         * @param string $hook
         * @param string $args_hash
         *
         * @return bool
         */
        static function is_event_unique_for_current_request($hook, $args_hash)
        {
        }
        /**
         * @since 4.3.0
         *
         * @param array $args
         *
         * @return string
         */
        static function get_event_args_hash($args)
        {
        }
    }
    /**
     * @class Ajax
     * @since 2.7
     */
    class Ajax
    {
        /**
         * Init
         */
        static function init()
        {
        }
        /**
         * @param  string $request Optional
         * @return string
         */
        static function get_endpoint($request)
        {
        }
        /**
         * Set WC AJAX constant and headers.
         */
        static function maybe_define_ajax()
        {
        }
        /**
         * Send headers
         */
        private static function send_headers()
        {
        }
        /**
         * Check for AW Ajax request and fire action.
         */
        static function do_ajax()
        {
        }
        /**
         * @param mixed $data
         */
        static function send_json_success($data = null)
        {
        }
        /**
         * @param mixed $data
         */
        static function send_json_error($data = null)
        {
        }
    }
    /**
     * @class Cart_Factory
     * @since 2.9
     */
    class Cart_Factory extends \AutomateWoo\Factory
    {
        static $model = 'AutomateWoo\\Cart';
        /**
         * @param int $cart_id
         * @return Cart|bool
         */
        static function get($cart_id)
        {
        }
        /**
         * @param $guest_id
         * @return Cart|bool
         */
        static function get_by_guest_id($guest_id)
        {
        }
        /**
         * @param $user_id
         * @return Cart|bool
         */
        static function get_by_user_id($user_id)
        {
        }
        /**
         * @param $token
         * @return Cart|bool
         */
        static function get_by_token($token)
        {
        }
        /**
         * @param Cart $cart
         */
        static function update_cache($cart)
        {
        }
        /**
         * @param Cart $cart
         */
        static function clean_cache($cart)
        {
        }
    }
    /**
     * @since 4.2
     */
    class Workflow_Fatal_Error_Monitor
    {
        /** @var Workflow|false */
        private static $workflow = false;
        /**
         * Begin error monitoring
         * @param Workflow $workflow
         */
        static function attach($workflow)
        {
        }
        /**
         * End error monitoring
         */
        static function detach()
        {
        }
        static function handle_unexpected_shutdown()
        {
        }
        /**
         * @param array $error
         */
        static function add_error_to_workflow_log($error)
        {
        }
    }
    /**
     * Class PreSubmit
     * @package AutomateWoo
     * @since 2.9
     */
    class PreSubmit
    {
        /**
         * @return array
         */
        static function get_email_capture_selectors()
        {
        }
        /**
         * @return array
         */
        static function get_checkout_capture_fields()
        {
        }
        /**
         * @return bool
         */
        static function is_capture_permitted()
        {
        }
        /**
         * @param $field_name
         * @return bool
         */
        static function is_checkout_capture_field($field_name)
        {
        }
        /**
         * Capture guest email
         */
        static function ajax_capture_email()
        {
        }
        /**
         * Capture an additional field from the checkout page
         */
        static function ajax_capture_checkout_field()
        {
        }
        /**
         * @return array
         */
        static function get_js_params()
        {
        }
        /**
         * Checks if pre-submit capture is permitted.
         * If capture, not permitted, error JSON will be sent and request will die.
         *
         * @since 4.4.0
         */
        static function do_capture_permitted_check()
        {
        }
    }
    /**
     * @class Replace_Helper
     * @since 2.1.9
     */
    class Replace_Helper
    {
        /** @var array */
        public $patterns = ['text_urls' => ['match' => 0, 'expression' => "/(?<!a href=\")(?<!src=\")((http|ftp)+(s)?:\\/\\/[^<>\\s]+)/i"], 'href_urls' => ['match' => 1, 'expression' => '/href=["\']?([^"\'>]+)["\']?/'], 'variables' => ['match' => 1, 'expression' => '/{{(.*?)}}/']];
        /** @var string */
        public $selected_pattern;
        /** @var string */
        public $string;
        /** @var callable */
        public $callback;
        /**
         * @param $string
         * @param callable $callback
         * @param string $pattern_name
         */
        function __construct($string, $callback, $pattern_name = '')
        {
        }
        /**
         * @return mixed
         */
        function process()
        {
        }
        /**
         * Pre process match before using the actual callback
         * @param $match
         * @return string
         */
        function callback($match)
        {
        }
    }
    /**
     * @class Options
     * @since 2.0.2
     *
     * @property string $version
     *
     * @property bool $abandoned_cart_enabled
     * @property int $abandoned_cart_timeout
     * @property string $guest_email_capture_scope (checkout,all)
     * @property bool $clean_expired_coupons
     * @property bool $clear_inactive_carts_after
     * @property bool $abandoned_cart_includes_pending_orders
     *
     * @property bool $email_from_name
     * @property bool $email_from_address
     *
     * @property bool $twilio_integration_enabled
     * @property string $twilio_from
     * @property string $twilio_auth_id
     * @property string $twilio_auth_token
     *
     * @property bool $campaign_monitor_enabled
     * @property bool $campaign_monitor_api_key
     * @property bool $campaign_monitor_client_id
     *
     * @property bool $active_campaign_integration_enabled
     * @property string $active_campaign_api_url
     * @property string $active_campaign_api_key
     *
     * @property string $bitly_api
     * @property bool $bitly_shorten_sms_links
     *
     * @property int $conversion_window
     *
     * @property bool $enable_background_system_check
     *
     */
    class Options extends \AutomateWoo\Options_API
    {
        /** @var string */
        public $prefix = 'automatewoo_';
        function __construct()
        {
        }
        /**
         * Returns the version of the database to handle migrations.
         *
         * Is autoloaded.
         *
         * @since 4.3.0
         *
         * @return string
         */
        static function database_version()
        {
        }
        /**
         * Returns the stored version of the plugin files. Used to log when file updates occur.
         *
         * Is autoloaded.
         *
         * @since 4.3.0
         *
         * @return string
         */
        static function file_version()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function optin_enabled()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function session_tracking_enabled()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function session_tracking_requires_cookie_consent()
        {
        }
        /**
         * @since 4.0
         * @return string
         */
        static function session_tracking_consent_cookie_name()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function presubmit_capture_enabled()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function abandoned_cart_enabled()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function checkout_optin_enabled()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function account_optin_enabled()
        {
        }
        /**
         * @since 4.0
         * @return string
         */
        static function optin_checkbox_text()
        {
        }
        /**
         * @since 4.0
         * @return int
         */
        static function communication_page_id()
        {
        }
        /**
         * @since 4.0
         * @return int
         */
        static function signup_page_id()
        {
        }
        /**
         * @since 4.0
         * @return string
         */
        static function communication_page_legal_text()
        {
        }
        /**
         * @since 4.0
         * @return bool
         */
        static function communication_account_tab_enabled()
        {
        }
        /**
         * Get mailchimp_enabled option.
         *
         * @since 4.4
         *
         * @return bool
         */
        static function mailchimp_enabled()
        {
        }
        /**
         * Get mailchimp_api_key option.
         *
         * @since 4.4
         *
         * @return string
         */
        static function mailchimp_api_key()
        {
        }
    }
}
namespace AutomateWoo\DataTypes {
    /**
     * Class AbstractDataType.
     *
     * @since   2.4.6
     * @package AutomateWoo
     */
    abstract class AbstractDataType
    {
        /**
         * The ID (or slug) of the data type.
         *
         * @var string
         */
        public $id;
        /**
         * Get the data type ID.
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Set the data type ID.
         *
         * @param string $id
         */
        public function set_id($id)
        {
        }
        /**
         * Check that a data item is valid for it's type.
         *
         * @param mixed $item
         *
         * @return bool
         */
        public abstract function validate($item);
        /**
         * Compress a data item to a storable format (typically an ID).
         *
         * $item should be validated before being passed to this method.
         *
         * @param mixed $item
         *
         * @return int|string|null Returns int|string if successful or null on failure.
         */
        public abstract function compress($item);
        /**
         * Get the full item from its stored format.
         *
         * @param int|string|null $compressed_item
         * @param array           $compressed_data_layer
         *
         * @return mixed
         */
        public abstract function decompress($compressed_item, $compressed_data_layer);
        /**
         * Get singular name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_singular_name()
        {
        }
        /**
         * Get singular name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
    /**
     * OrderNote data type class.
     */
    class OrderNote extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * OrderItem data type class.
     */
    class OrderItem extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param mixed $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WC_Order_Item $item
         *
         * @return int
         */
        function compress($item)
        {
        }
        /**
         * Order items are retrieved from the order object so we must ensure that an order is always present in the data layer
         *
         * @param int   $order_item_id
         * @param array $compressed_data_layer
         *
         * @return mixed
         */
        function decompress($order_item_id, $compressed_data_layer)
        {
        }
    }
    /**
     * Class SubscriptionItem
     *
     * @since 4.8.0
     */
    class SubscriptionItem extends \AutomateWoo\DataTypes\OrderItem
    {
        /**
         * Subscription items are retrieved from the order object so we must ensure that an order is always
         * present in the data layer.
         *
         * @param int   $order_item_id
         * @param array $compressed_data_layer
         *
         * @return mixed
         */
        public function decompress($order_item_id, $compressed_data_layer)
        {
        }
    }
    /**
     * Workflow data type class.
     */
    class Workflow extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WorkflowModel $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Subscription data type class.
     */
    class Subscription extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WC_Subscription $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return WC_Subscription|false
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
        /**
         * Get singular name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_singular_name()
        {
        }
        /**
         * Get plural name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
    /**
     * @class Guest
     */
    class Guest extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param GuestModel $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Card data type class
     * @since 3.7
     */
    class Card extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WC_Payment_Token_CC $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return WC_Payment_Token_CC|WC_Payment_Token|false
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Post data type class.
     */
    class Post extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WP_Post $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Order data type class.
     */
    class Order extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param \WC_Order $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
        /**
         * Get singular name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_singular_name()
        {
        }
        /**
         * Get plural name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
    /**
     * Refund data type class.
     *
     * @since 5.6.2
     */
    class Refund extends \AutomateWoo\DataTypes\Order
    {
        /**
         * Get singular name for data type.
         *
         * @return string
         */
        public function get_singular_name()
        {
        }
        /**
         * Get plural name for data type.
         *
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
    /**
     * Booking data type class.
     *
     * Note: This class is only loaded if the Bookings extension is active.
     *
     * @since 5.3.0
     */
    class Booking extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @var BookingsInterface
         */
        protected $bookings;
        /**
         * Booking constructor.
         *
         * @param BookingsInterface $bookings Bookings service class.
         */
        public function __construct(\AutomateWoo\Proxies\BookingsInterface $bookings)
        {
        }
        /**
         * Check that an item is a valid object.
         *
         * @param mixed $item
         *
         * @return bool
         */
        public function validate($item) : bool
        {
        }
        /**
         * Compress a item to a storable format (typically an ID).
         *
         * @param mixed $item
         *
         * @return int|null Returns int if successful or null on failure.
         */
        public function compress($item)
        {
        }
        /**
         * Get the full item from its stored format.
         *
         * @param int|string|null $compressed_item
         * @param array           $compressed_data_layer
         *
         * @return WC_Booking|null Returns a booking object or null on failure.
         */
        public function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Download data type class.
     */
    class Download extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * Check that a data item is valid for it's type.
         *
         * @param DownloadModel $item DownloadModel object.
         * @return bool
         */
        public function validate($item)
        {
        }
        /**
         * Compress a data item to a ID.
         *
         * @param \WC_Customer_Download $item
         * @return mixed
         */
        public function compress($item)
        {
        }
        /**
         * Get the full item from its stored format.
         *
         * @param string $compressed_item
         * @param array  $compressed_data_layer
         * @return mixed
         */
        public function decompress($compressed_item, $compressed_data_layer)
        {
        }
        /**
         * Get singular name for data type.
         *
         * @return string
         */
        public function get_singular_name()
        {
        }
        /**
         * Get plural name for data type.
         *
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
    /**
     * Product data type class.
     */
    class Product extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WC_Product $item
         *
         * @return int
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * ProductCategory data type class.
     */
    class ProductCategory extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return WP_Term|false
         */
        public function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * ProductTag data type class.
     */
    class ProductTag extends \AutomateWoo\DataTypes\ProductCategory
    {
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return WP_Term|false
         */
        public function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Data types registry/service class.
     *
     * @since 2.4.6
     */
    class DataTypes extends \AutomateWoo\Registry
    {
        const BOOKING = 'booking';
        const CARD = 'card';
        const CART = 'cart';
        const CATEGORY = 'category';
        const COMMENT = 'comment';
        const CUSTOMER = 'customer';
        const DOWNLOAD = 'download';
        const GUEST = 'guest';
        const MEMBERSHIP = 'membership';
        const ORDER = 'order';
        const REFUND = 'refund';
        const ORDER_ITEM = 'order_item';
        const ORDER_NOTE = 'order_note';
        const POST = 'post';
        const PRODUCT = 'product';
        const REVIEW = 'review';
        const SHOP = 'shop';
        const SUBSCRIPTION = 'subscription';
        const SUBSCRIPTION_ITEM = 'subscription_item';
        const TAG = 'tag';
        const USER = 'user';
        const WISHLIST = 'wishlist';
        const WORKFLOW = 'workflow';
        /** @var array */
        protected static $includes;
        /** @var array */
        protected static $loaded = [];
        /**
         * @return array
         */
        public static function load_includes()
        {
        }
        /**
         * Get a data type object.
         *
         * @param string $data_type_id
         *
         * @return AbstractDataType|false
         */
        public static function get($data_type_id)
        {
        }
        /**
         * Runs after a valid item is loaded.
         *
         * @param string           $data_type_id
         * @param AbstractDataType $data_type
         */
        public static function after_loaded($data_type_id, $data_type)
        {
        }
        /**
         * Get data types that shouldn't be stored.
         *
         * @return array
         */
        public static function get_non_stored_data_types()
        {
        }
        /**
         * Check if a data type should be stored.
         *
         * @param string $data_type_id
         *
         * @return bool
         * @since 5.1.0
         */
        public static function is_non_stored_data_type($data_type_id)
        {
        }
        /**
         * Checks that data type object is valid.
         *
         * @param mixed $item
         *
         * @return bool
         * @since 4.9.0
         */
        public static function is_item_valid($item)
        {
        }
        /**
         * Get the constructor args for an item.
         *
         * @param string $name
         *
         * @return array
         */
        protected static function get_item_constructor_args(string $name) : array
        {
        }
    }
    /**
     * @class Comment
     */
    class Comment extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return \WP_Comment|false
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * User data type class.
     */
    class User extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param \WP_User|Order_Guest $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param \WP_User $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * @class Cart
     */
    class Cart extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param CartModel $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Membership data type class.
     *
     * @since 2.8.3
     */
    class Membership extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param \WC_Memberships_User_Membership $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Shop data type class.
     *
     * 'Shop' is a psuedo data type since the shop is always available in every workflow and doesn't
     * need to be stored in the workflow queue or logs.
     *
     * @since 5.1.0
     */
    class Shop extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * The shop data item is always valid.
         *
         * @param mixed $item
         *
         * @return bool
         */
        public function validate($item)
        {
        }
        /**
         * The shop data item doesn't need compressing.
         *
         * @param mixed $item
         *
         * @return null
         */
        public function compress($item)
        {
        }
        /**
         * Decompress a data item.
         * Usually involves getting the full object from an ID.
         *
         * @param mixed $compressed_item
         * @param array $compressed_data_layer
         *
         * @return ShopDataItem
         */
        public function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * Wishlist data type class.
     */
    class Wishlist extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param WishlistModel $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
    /**
     * @class Customer
     */
    class Customer extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param mixed $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param CustomerModel $item
         * @return int
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return mixed
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
        /**
         * Get singular name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_singular_name()
        {
        }
        /**
         * Get plural name for data type.
         *
         * @since 5.0.0
         *
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
    /**
     * Review data type class.
     */
    class Review extends \AutomateWoo\DataTypes\AbstractDataType
    {
        /**
         * @param $item
         * @return bool
         */
        function validate($item)
        {
        }
        /**
         * @param ReviewModel $item
         * @return mixed
         */
        function compress($item)
        {
        }
        /**
         * @param $compressed_item
         * @param $compressed_data_layer
         * @return ReviewModel|false
         */
        function decompress($compressed_item, $compressed_data_layer)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Sanitizer
     * @class Clean
     * @since 2.9
     */
    class Clean
    {
        /**
         * @param $string
         * @return string
         */
        static function string($string)
        {
        }
        /**
         * @param $email
         * @return string
         */
        static function email($email)
        {
        }
        /**
         * Sanitize a multi-line string. Will strip HTML tags.
         *
         * @param string $text
         *
         * @return string
         */
        static function textarea($text)
        {
        }
        /**
         * Cleans a NON-localized price value so it's ready for DB storage.
         *
         * @since 4.4.0
         *
         * @param string|float $price
         * @param int          $decimal_places
         *
         * @return string
         */
        public static function price($price, $decimal_places = null)
        {
        }
        /**
         * Cleans a localized price value so it's ready for DB storage.
         *
         * WARNING - This method can only be called once on a price value.
         * Using it multiple times can lead to prices multiplying by 10 when '.' is set to the store's thousands separator.
         *
         * @since 4.6.0
         *
         * @param string|float $price
         * @param int          $decimal_places Optional - Uses the WC options value if not set.
         *
         * @return string
         */
        public static function localized_price($price, $decimal_places = null)
        {
        }
        /**
         * @param array $var
         * @return array
         */
        static function ids($var)
        {
        }
        /**
         * @param string|int $id
         * @return int
         */
        static function id($id)
        {
        }
        /**
         * @param $var
         * @return array|string
         */
        static function recursive($var)
        {
        }
        /**
         * @param string|array $values
         * @return array
         */
        static function multi_select_values($values)
        {
        }
        /**
         * Convert comma delimited string to array.
         *
         * @param string $list
         * @return array
         */
        static function comma_delimited_string($list)
        {
        }
        /**
         * Performs a basic sanitize for AW email content permitting all HTML.
         *
         * Can contain unprocessed variables {{}}.
         *
         * @since 4.3
         *
         * @param string $content
         *
         * @return string
         */
        static function email_content($content)
        {
        }
        /**
         * HTML encodes emoji's in string or array.
         *
         * @since 4.3
         *
         * @param string|array $data
         *
         * @return string|array
         */
        static function encode_emoji($data)
        {
        }
    }
    /**
     * @class Workflow_Email
     * @since 2.8.6
     */
    class Workflow_Email
    {
        /**
         * The type of the email.
         * Default: 'html-template'
         *
         * @since 4.4.0
         * @var string (html-template, html-raw, plain-text)
         */
        protected $type = 'html-template';
        /** @var Workflow  */
        public $workflow;
        /** @var string */
        public $recipient;
        /** @var string */
        public $subject;
        /**
         * The content of the email.
         *
         * @var string
         */
        public $content;
        /** @var string */
        public $heading;
        /** @var string */
        private $preheader;
        /**
         * Reply to email address.
         *
         * @var string
         */
        private $reply_to = '';
        /** @var string */
        public $template;
        /** @var bool */
        protected $tracking_enabled = false;
        /** @var bool */
        public $include_automatewoo_styles = true;
        /**
         * @param Workflow $workflow  The workflow that is sending the email.
         * @param string   $recipient The email address of the recipient. Must be a single email.
         * @param string   $subject   The email subject.
         * @param string   $content   The main email content. Depending on the $type property this can be raw HTML (html-raw),
         *                            plain text (plain-text) or content to be wrapped in a template (html-template).
         */
        public function __construct(\AutomateWoo\Workflow $workflow, string $recipient, string $subject, string $content)
        {
        }
        /**
         * Set the email type.
         *
         * @since 4.4.0
         *
         * @param string $type (html-template, html-raw, plain-text)
         *
         * @return $this
         */
        public function set_type($type)
        {
        }
        /**
         * Get the email type.
         *
         * @since 4.4.0
         *
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * Check the email type.
         *
         * @since 4.4.0
         *
         * @param string $type (html-template, html-raw, plain-text)
         *
         * @return bool
         */
        public function is_type($type)
        {
        }
        /**
         * @param string $recipient
         *
         * @return $this
         */
        function set_recipient($recipient)
        {
        }
        /**
         * @param string $subject
         *
         * @return $this
         */
        function set_subject($subject)
        {
        }
        /**
         * Set the content of the email.
         *
         * This can be raw HTML, plain text or content to be wrapped in a template, depending on the $type.
         *
         * @param string $content
         *
         * @return $this
         */
        function set_content($content)
        {
        }
        /**
         * @param string $heading
         *
         * @return $this
         */
        function set_heading($heading)
        {
        }
        /**
         * @param string $preheader
         *
         * @return $this
         */
        function set_preheader($preheader)
        {
        }
        /**
         * @param string $template
         *
         * @return $this
         */
        function set_template($template)
        {
        }
        /**
         * @param bool $enabled
         *
         * @return $this
         */
        function set_tracking_enabled($enabled)
        {
        }
        /**
         * @param bool $include
         *
         * @return $this
         */
        function set_include_automatewoo_styles($include)
        {
        }
        /**
         * Set the reply to address for the email.
         *
         * @since 4.9.0
         *
         * @param string $reply_to e.g. 'John Smith <email@example.org>'.
         *
         * @return $this
         */
        public function set_reply_to($reply_to)
        {
        }
        /**
         * @return Mailer|Mailer_Raw_HTML|Mailer_Plain_Text
         */
        function get_mailer()
        {
        }
        /**
         * Get the unsubscribe link HTML.
         *
         * @return bool|string
         */
        function get_unsubscribe_link()
        {
        }
        /**
         * Get the unsubscribe link for the recipient.
         *
         * @since 4.4.0
         *
         * @return bool|string
         */
        function get_unsubscribe_url()
        {
        }
        /**
         * Get the unsubscribe text.
         *
         * @since 4.4.0
         *
         * @return string
         */
        function get_unsubscribe_text()
        {
        }
        /**
         * Get the plain text unsubscribe footer.
         *
         * Will return false if workflow is transactional.
         *
         * @since 4.4.0
         *
         * @return bool|string
         */
        function get_plain_text_unsubscribe_footer()
        {
        }
        /**
         * Get the email content with the plain text footer added.
         *
         * @since 4.4.0
         *
         * @return string
         */
        function get_content_with_appended_plain_text_footer()
        {
        }
        /**
         * @param string $url
         * @return string
         */
        function replace_content_urls_callback($url)
        {
        }
        /**
         * @return bool|\WP_Error
         */
        function send()
        {
        }
        /**
         * This method is currently only used when previewing.
         *
         * @return string
         */
        function get_email_body()
        {
        }
    }
    /**
     * @class WooCommerce_Payments_Integration
     * @since 5.5.12
     */
    class WooCommerce_Payments_Integration extends \AutomateWoo\Integration
    {
        /**
         * WooCommerce_Payments_Integration constructor.
         */
        public function __construct()
        {
        }
        /**
         * Removes AutomateWoo actions that are incompatible with WooCommerce Payments.
         *
         * @param  array $actions AutomateWoo actions.
         * @return array          Potentially filtered AutomateWoo actions.
         */
        public function maybe_remove_incompatible_actions($actions)
        {
        }
    }
    /**
     * Generates new coupons based on existing coupons
     *
     * @class Coupon_Generator
     */
    class Coupon_Generator
    {
        /** @var string : Coupon code to be cloned */
        public $template_coupon_code;
        /** @var integer */
        public $template_coupon_id;
        /** @var string */
        public $code;
        /** @var string */
        public $prefix = '';
        /** @var string */
        public $suffix = '';
        /*** @var string : Number of days till coupon expires */
        public $expires;
        /** @var int */
        public $usage_limit;
        /** @var string */
        public $email_restriction;
        /** @var string */
        public $description;
        /**
         * Coupon_Generator constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param string $code
         */
        public function set_template_coupon_code($code)
        {
        }
        /**
         * @return integer
         */
        public function get_template_coupon_id()
        {
        }
        /**
         * @param string $prefix
         */
        public function set_prefix($prefix)
        {
        }
        /**
         * @param string $code
         */
        public function set_code($code)
        {
        }
        /**
         * @param string $email
         */
        public function set_email_restriction($email)
        {
        }
        /**
         * @param integer $days
         */
        public function set_expires($days)
        {
        }
        /**
         * @param string $suffix
         */
        public function set_suffix($suffix)
        {
        }
        /**
         * @param integer $usage_limit
         */
        public function set_usage_limit($usage_limit)
        {
        }
        /**
         * @param string $description
         */
        public function set_description($description)
        {
        }
        /**
         * Generates a unique coupon code
         *
         * @return string
         */
        public function generate_code()
        {
        }
        /**
         * @param string $code
         * @return bool
         */
        public function is_existing_coupon_code($code)
        {
        }
        /**
         * @return \WC_Coupon|bool
         */
        public function generate_coupon()
        {
        }
    }
    /**
     * @class Privacy_Policy_Guide
     * @since 4.0
     */
    class Privacy_Policy_Guide
    {
        /**
         * @return string
         */
        static function get_content()
        {
        }
        protected static function suggest_text_html()
        {
        }
    }
    /**
     * @class Actions
     * @since 2.9
     */
    class Actions extends \AutomateWoo\Registry
    {
        /** @var array */
        static $includes;
        /** @var array  */
        static $loaded = [];
        /**
         * @return array
         */
        static function load_includes()
        {
        }
        /**
         * Get all actions.
         *
         * @return Action[]
         */
        public static function get_all()
        {
        }
        /**
         * Get a single action.
         *
         * @param string $name
         *
         * @return Action|false
         */
        public static function get($name)
        {
        }
        /**
         * Runs after a valid action is loaded.
         *
         * @param string $action_name
         * @param Action $action
         */
        public static function after_loaded($action_name, $action)
        {
        }
        /**
         * Checks that a trigger object is valid.
         *
         * @param mixed $item
         *
         * @since 4.9.0
         *
         * @return bool
         */
        public static function is_item_valid($item)
        {
        }
    }
    /**
     * Class DateTime
     *
     * @since 4.3.0
     */
    class DateTime extends \DateTime
    {
        /**
         * Same as parent but forces UTC timezone if no timezone is supplied instead of using the PHP default.
         *
         * @param string              $time
         * @param DateTimeZone|string $timezone
         *
         * @throws \Exception Emits Exception in case of an error.
         */
        public function __construct($time = 'now', $timezone = null)
        {
        }
        /**
         * Convert DateTime from site timezone to UTC.
         *
         * Note this doesn't actually set the timezone property, it directly modifies the date.
         *
         * @return $this
         */
        public function convert_to_utc_time()
        {
        }
        /**
         * Convert DateTime from UTC to the site timezone.
         *
         * Note this doesn't actually set the timezone property, it directly modifies the date.
         *
         * @return $this
         */
        public function convert_to_site_time()
        {
        }
        /**
         * @since 4.4.0
         *
         * @return string
         */
        public function to_mysql_string()
        {
        }
        /**
         * Set time to the day end in the current timezone.
         *
         * @return $this
         *
         * @since 4.6.0
         */
        public function set_time_to_day_start()
        {
        }
        /**
         * Set time to the day start in the current timezone.
         *
         * @return $this
         *
         * @since 4.6.0
         */
        public function set_time_to_day_end()
        {
        }
        /**
         * Return a formatted localised date. Wrapper for date_i18n function.
         *
         * @since  4.9.8
         * @param  string $format Date format.
         * @return string
         */
        public function format_i18n($format = 'Y-m-d')
        {
        }
        /**
         * Naturally add months without skipping into the next month.
         *
         * @since 5.1.0
         * @param integer $months_to_add
         * @throws \Exception When months isn't a valid number.
         */
        public function add_natural_months($months_to_add)
        {
        }
    }
    /**
     * Manager and registry for async events.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    final class Async_Events extends \AutomateWoo\Registry
    {
        /**
         * Static store of the includes map.
         *
         * @var array
         */
        protected static $includes;
        /**
         * Static store of loaded objects.
         *
         * @var array
         */
        protected static $loaded = [];
        /**
         * Load async event includes.
         *
         * @return array
         */
        public static function load_includes()
        {
        }
        /**
         * Set the event_name prop after it's loaded.
         *
         * @param string               $name
         * @param Abstract_Async_Event $async_event
         */
        public static function after_loaded($name, $async_event)
        {
        }
        /**
         * Get a list of events that are always required.
         *
         * @return array
         */
        private static function get_always_required_events()
        {
        }
        /**
         * Determine which async events need to be loaded and initiated.
         *
         * Combines:
         * - always required events
         * - events required by triggers
         * - event dependencies
         *
         * @return array
         */
        private static function determine_required_events()
        {
        }
        /**
         * Load and init all required async events.
         */
        public static function init_required_events()
        {
        }
        /**
         * Checks that an async event object is valid.
         *
         * @param mixed $item
         *
         * @since 4.9.0
         *
         * @return bool
         */
        public static function is_item_valid($item)
        {
        }
        /**
         * Get the constructor args for an item.
         *
         * @param string $name
         *
         * @return array
         */
        protected static function get_item_constructor_args(string $name) : array
        {
        }
        // Useful to override these methods for code hinting
        // phpcs:disable Generic.CodeAnalysis.UselessOverridingMethod.Found
        /**
         * Get all async events objects.
         *
         * @return Abstract_Async_Event[]
         */
        public static function get_all()
        {
        }
        /**
         * Get a single async event object.
         *
         * @param string $name
         *
         * @return Abstract_Async_Event|false
         */
        public static function get($name)
        {
        }
        // phpcs:enable
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingPersonCount
     *
     * @since 5.4.0
     */
    class BookingPersons extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Category_Permalink
     */
    class Variable_Category_Permalink extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $category \WP_Term
         * @param $parameters array
         * @return string
         */
        function get_value($category, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingResource
     *
     * @since 5.3.0
     */
    class BookingResource extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Class Variable_Abstract_Datetime
     *
     * @package AutomateWoo
     */
    class Variable_Abstract_Datetime extends \AutomateWoo\Variable
    {
        /**
         * Shared description prop for datetime variables.
         *
         * @var string
         */
        public $_desc_format_tip;
        // phpcs:ignore PSR2.Classes.PropertyDeclaration.Underscore
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the PHP date format from the variable's format parameter.
         *
         * @since 4.5
         *
         * @param string $format
         *
         * @return string
         */
        protected function get_date_format_from_format_param($format)
        {
        }
        /**
         * Get options for the date format select parameter.
         *
         * @since 4.5
         *
         * @return array
         */
        protected function get_date_format_options()
        {
        }
        /**
         * Get the date format value for display in the admin area.
         *
         * @param string $format_name
         * @param string $format_value
         *
         * @return string
         */
        protected function get_date_format_option_displayed_value($format_name, $format_value)
        {
        }
        /**
         * Formats a datetime variable.
         *
         * Dates should be passed in the site's timezone.
         * WC_DateTime objects will maintain their specified timezone.
         *
         * @param \WC_DateTime|DateTime|string $input
         * @param array                        $parameters [modify, format]
         * @param bool                         $is_gmt
         *
         * @return string
         */
        public function format_datetime($input, $parameters, $is_gmt = false) : string
        {
        }
        /**
         * Get date format parameter field.
         *
         * @since 5.4.0
         *
         * @return Select
         */
        protected function get_format_parameter_field() : \AutomateWoo\Fields\Select
        {
        }
        /**
         * Get custom date format parameter field.
         *
         * @since 5.4.0
         *
         * @return Text
         */
        protected function get_custom_format_parameter_field() : \AutomateWoo\Fields\Text
        {
        }
        /**
         * Get date modify parameter field.
         *
         * @since 5.4.0
         *
         * @return Text
         */
        protected function get_modify_parameter_field() : \AutomateWoo\Fields\Text
        {
        }
        /**
         * @since 5.4.0
         *
         * @return string
         */
        protected function get_description_custom_date_formatting_tip() : string
        {
        }
    }
    /**
     * @class Variable_Subscription_Trial_End_Date
     */
    class Variable_Subscription_Trial_End_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Order_Date_Completed class.
     *
     * @since 4.8.0
     */
    class Order_Date_Completed extends \AutomateWoo\Variable_Abstract_Datetime
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable's value.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string
         */
        public function get_value($order, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Subscription_Payment_Method
     */
    class Variable_Subscription_Payment_Method extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Subscription payment count variable.
     *
     * @since 4.9.0
     */
    class Subscription_Payment_Count extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get value.
         *
         * @param \WC_Subscription $subscription
         *
         * @return string
         */
        public function get_value($subscription)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_Customer_Details
     */
    class Variable_Order_Customer_Details extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Status
     */
    class Variable_Order_Status extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Guest_Last_Name
     */
    class Variable_Guest_Last_Name extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $guest Guest
         * @param $parameters
         * @return string
         */
        function get_value($guest, $parameters)
        {
        }
    }
    /**
     * Variable_Customer_Address_Line_1 class.
     *
     * @since 4.5.0
     *
     * @class Variable_Customer_Address_Line_1
     */
    class Variable_Customer_Address_Line_1 extends \AutomateWoo\Variable
    {
        /**
         * Load description on admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - get and return the first line of the customer's address.
         *
         * @param Customer $customer
         * @param array    $parameters
         * @param Workflow $workflow
         *
         * @return string
         */
        public function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Order_Meta_Date
     */
    class Variable_Order_Meta_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string|bool
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Meta_Date
     */
    class Variable_Product_Meta_Date extends \AutomateWoo\Variable_Order_Meta_Date
    {
        /**
         * @param WC_Product $product
         * @param array      $parameters
         * @return string|bool
         */
        public function get_value($product, $parameters)
        {
        }
    }
    /**
     * Subscription Early Renewal URL Variable.
     *
     * @since 4.5.0
     *
     * @class Variable_Subscription_Early_Renewal_Url
     */
    class Variable_Subscription_Early_Renewal_Url extends \AutomateWoo\Variable
    {
        /**
         * Load admin description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value method.
         *
         * @param \WC_Subscription $subscription
         * @param array            $parameters
         *
         * @return string
         */
        public function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Status
     */
    class Variable_Subscription_Status extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Next_Payment_Date
     */
    class Variable_Subscription_Next_Payment_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_City
     */
    class Variable_Customer_City extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Customer_Full_Name
     */
    class Variable_Customer_Full_Name extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Order_Reorder_Url
     * @since 2.8.6
     */
    class Variable_Order_Reorder_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_View_Order_Url
     */
    class Variable_Subscription_View_Order_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class AbstractTime
     *
     * @since 5.4.0
     */
    abstract class AbstractTime extends \AutomateWoo\Variable
    {
        /**
         * Formats a time variable using the wc_time_format()
         *
         * @param DateTime $datetime
         *
         * @return string
         */
        protected function format_value_from_utc_tz(\AutomateWoo\DateTime $datetime) : string
        {
        }
        /**
         * Formats a time variable using the wc_time_format()
         *
         * @param DateTime $datetime
         *
         * @return string
         */
        protected function format_value_from_local_tz(\AutomateWoo\DateTime $datetime) : string
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Customer_Tags
     */
    class Variable_Customer_Tags extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Cart_Item_Count
     * @since 4.2
     */
    class Variable_Cart_Item_Count extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param Cart $cart
         * @param array $parameters
         * @return string
         */
        function get_value($cart, $parameters)
        {
        }
    }
    /**
     * @class Variable_Review_Rating
     */
    class Variable_Review_Rating extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $review Review
         * @param $parameters array
         * @return string
         */
        function get_value($review, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Note_Content
     */
    class Variable_Order_Note_Content extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $comment Order_Note
         * @param $parameters array
         * @return string
         */
        function get_value($comment, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_User_ID
     */
    class Variable_Customer_User_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * Variable_Abstract_Product_Display class.
     */
    abstract class Variable_Abstract_Product_Display extends \AutomateWoo\Variable
    {
        /**
         * Declare limit field support.
         *
         * @var boolean
         */
        public $support_limit_field = false;
        /**
         * Declare order table support.
         *
         * @var boolean
         */
        public $supports_order_table = false;
        /**
         * Declare cart table support.
         *
         * @var boolean
         */
        public $supports_cart_table = false;
        /**
         * Temproary template args.
         *
         * @var array
         */
        protected $temp_template_args = [];
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get default product template arguments.
         *
         * @param Workflow $workflow
         * @param array    $parameters
         * @return array
         */
        public function get_default_product_template_args($workflow, $parameters = [])
        {
        }
        /**
         * Get product html to display.
         *
         * @param string $template
         * @param array  $args
         *
         * @return string
         */
        public function get_product_display_html($template, $args = [])
        {
        }
        /**
         * Filter product links.
         *
         * @param string   $link
         * @param \WP_Post $post
         * @return string
         */
        public function filter_product_links($link, $post)
        {
        }
        /**
         * Get default product query args.
         *
         * These args are intentionally ignored for some variables, e.g. order.items, cart.items.
         *
         * - Published products only
         * - Sets visibility to catalog which hides hidden products
         * - Hides out of stock products according to the global setting
         *
         * @since 4.8.1
         *
         * @return array
         */
        protected function get_default_product_query_args()
        {
        }
    }
    /**
     * @class Variable_Cart_Items
     */
    class Variable_Cart_Items extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        public $supports_cart_table = true;
        function load_admin_details()
        {
        }
        /**
         * @param $cart Cart
         * @param $parameters array
         * @param $workflow Workflow
         * @return mixed
         */
        function get_value($cart, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Wishlist_Itemscount
     */
    class Variable_Wishlist_Itemscount extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param Wishlist $wishlist
         * @param $parameters
         * @return string
         */
        function get_value($wishlist, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Item_Meta
     */
    class Variable_Order_Item_Meta extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Order_Item_Product $item
         * @param array                  $parameters
         *
         * @return string
         */
        function get_value($item, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Short_Description
     */
    class Variable_Product_Short_Description extends \AutomateWoo\Variable
    {
        /**
         * Method to set title, group, description and other admin props
         */
        public function load_admin_details()
        {
        }
        /**
         * @param WC_Product $product
         * @param array      $parameters
         * @return string
         */
        public function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Phone
     */
    class Variable_Customer_Phone extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Guest_Email
     */
    class Variable_Guest_Email extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $guest Guest
         * @param $parameters
         * @return string
         */
        function get_value($guest, $parameters)
        {
        }
    }
    /**
     * @class Variable_Refund_Reason
     *
     * @since 5.6.2
     */
    class Variable_Refund_Reason extends \AutomateWoo\Variable
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Order_Refund $refund
         * @param array            $parameters
         *
         * @return string
         */
        public function get_value($refund, $parameters)
        {
        }
    }
    /**
     * @class Variable_Card_Type
     */
    class Variable_Card_Type extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Payment_Token_CC $card
         * @param $parameters array
         * @return string
         */
        function get_value($card, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class AbstractBookingTime
     *
     * @since 5.4.0
     */
    abstract class AbstractBookingTime extends \AutomateWoo\Variables\AbstractTime
    {
        /**
         * Get the target booking datetime value for the variable.
         *
         * @param WC_Booking $booking
         *
         * @return DateTime|null The variable's target datetime value in the site's local timezone.
         */
        protected abstract function get_target_datetime_value(\WC_Booking $booking);
        /**
         * Get the variable value.
         *
         * If booking is "all-day" no time will be returned.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
    /**
     * Class BookingStartTime
     *
     * @since 5.4.0
     */
    class BookingStartTime extends \AutomateWoo\Variables\AbstractBookingTime
    {
        /**
         * Load variable admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the target booking datetime value for the variable.
         *
         * @param WC_Booking $booking
         *
         * @return DateTime|null The variable's target datetime value in the site's local timezone.
         */
        protected function get_target_datetime_value(\WC_Booking $booking)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Variable Abstract Price Class.
     *
     * @since 4.5.0
     *
     * @class Variable_Abstract_Price
     */
    abstract class Variable_Abstract_Price extends \AutomateWoo\Variable
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Maybe Format Price.
         *
         * @param  string $amount
         * @param  array  $parameters
         * @param  string $currency
         *
         * @return string
         */
        protected function format_amount($amount, $parameters, $currency = null)
        {
        }
    }
    /**
     * Variable Product Current Price Class.
     *
     * @class Variable_Product_Current_Price
     */
    class Variable_Product_Current_Price extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Product $product
         * @param array       $parameters
         *
         * @return string
         */
        public function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Comment_Author_IP
     */
    class Variable_Comment_Author_IP extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $comment \WP_Comment
         * @param $parameters array
         * @return string
         */
        function get_value($comment, $parameters)
        {
        }
    }
    /**
     * @class Variable_Review_Content
     */
    class Variable_Review_Content extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $review Review
         * @param $parameters array
         * @return string
         */
        function get_value($review, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Parent_Sku
     * @since 2.9
     */
    class Variable_Product_Parent_Sku extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Shipping_Address
     */
    class Variable_Order_Shipping_Address extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingEndDate
     *
     * @since 5.4.0
     */
    class BookingEndDate extends \AutomateWoo\Variable_Abstract_Datetime
    {
        /**
         * Load variable admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Variable Cart Total Class.
     *
     * @class Variable_Cart_Total
     */
    class Variable_Cart_Total extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method
         *
         * @param Cart  $cart
         * @param array $parameters
         *
         * @return string
         */
        public function get_value($cart, $parameters)
        {
        }
    }
    /**
     * @class Variable_Shop_Admin_Email
     */
    class Variable_Shop_Admin_Email extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $parameters
         * @return string
         */
        function get_value($parameters)
        {
        }
    }
    /**
     * Variable_Abstract_Meta class.
     */
    abstract class Variable_Abstract_Meta extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
    }
    /**
     * @class Variable_Membership_Status
     */
    class Variable_Membership_Status extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
    /**
     * @class Variable_Guest_First_Name
     */
    class Variable_Guest_First_Name extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $guest Guest
         * @param $parameters
         * @return string
         */
        function get_value($guest, $parameters)
        {
        }
    }
    /**
     * Variable_Order_Shipping_Company_Name class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_Company_Name
     */
    class Variable_Order_Shipping_Company_Name extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - returns the shipping company name.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Product_Permalink
     */
    class Variable_Product_Permalink extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * Subscription Admin URL Variable
     *
     * @class Variable_Subscription_Admin_Url
     */
    class Variable_Subscription_Admin_Url extends \AutomateWoo\Variable
    {
        /**
         * Load admin details
         */
        public function load_admin_details()
        {
        }
        /**
         * Get value method.
         *
         * @param \WC_Subscription $subscription
         * @param array            $parameters
         *
         * @return mixed
         */
        public function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Description
     */
    class Variable_Product_Description extends \AutomateWoo\Variable
    {
        /**
         * Method to set title, group, description and other admin props
         */
        public function load_admin_details()
        {
        }
        /**
         * @param WC_Product $product
         * @param array      $parameters
         * @return string
         */
        public function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Payment_Method
     */
    class Variable_Order_Payment_Method extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Last_Name
     */
    class Variable_Customer_Last_Name extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Customer_State
     */
    class Variable_Customer_State extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * Variable_Subscription_Change_Payment_Method_Url class.
     *
     * @since 4.4.3
     */
    class Variable_Subscription_Change_Payment_Method_Url extends \AutomateWoo\Variable
    {
        /**
         * Load admin props.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable's value.
         *
         * @param \WC_Subscription $subscription
         * @param array            $parameters
         *
         * @return string
         */
        public function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Cross_Sells
     */
    class Variable_Order_Cross_Sells extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        public $support_limit_field = true;
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @param $workflow
         * @return string
         */
        function get_value($order, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Order_Tracking_Url
     */
    class Variable_Order_Tracking_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Order_Date
     */
    class Variable_Order_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Comment_Content
     */
    class Variable_Comment_Content extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $comment \WP_Comment
         * @param $parameters array
         * @return string
         */
        function get_value($comment, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Item_Attribute
     */
    class Variable_Order_Item_Attribute extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param array|\WC_Order_Item_Product $order_item
         * @param $parameters
         * @return string
         */
        function get_value($order_item, $parameters)
        {
        }
    }
    /**
     * @class Variable_Membership_Plan_Name
     */
    class Variable_Membership_Plan_Name extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * CommentAuthorName class
     */
    class CommentAuthorName extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param WP_Comment $comment
         * @param array      $parameters
         *
         * @return string
         */
        function get_value($comment, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Variable Subscription Total.
     *
     * @class Variable_Subscription_Total
     */
    class Variable_Subscription_Total extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Subscription $subscription
         * @param array            $parameters
         *
         * @return string
         */
        public function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * Variable Refund Amount Class.
     *
     * @class Variable_Refund_Amount
     *
     * @since 5.6.2
     */
    class Variable_Refund_Amount extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Order_Refund $refund
         * @param array            $parameters
         *
         * @return string
         */
        public function get_value($refund, $parameters)
        {
        }
    }
    /**
     * Variable Order Total Class.
     *
     * @class Variable_Order_Total
     */
    class Variable_Order_Total extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string
         */
        public function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Related_Products
     */
    class Variable_Order_Related_Products extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        /**
         * Declare limit field support.
         *
         * @var boolean
         */
        public $support_limit_field = true;
        /**
         * Method to set title, group, description and other admin props
         */
        public function load_admin_details()
        {
        }
        /**
         * @param WC_Order $order
         * @param array    $parameters
         * @param Workflow $workflow
         * @return mixed
         */
        public function get_value($order, $parameters, $workflow)
        {
        }
    }
    /**
     * Variable Product Regular Price.
     *
     * @class Variable_Product_Regular_Price
     */
    class Variable_Product_Regular_Price extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Product $product
         * @param array       $parameters
         *
         * @return string
         */
        public function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_End_Date
     */
    class Variable_Subscription_End_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Shop_Title
     */
    class Variable_Shop_Title extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $parameters
         * @return string
         */
        function get_value($parameters)
        {
        }
    }
    /**
     * @class Variable_Shop_Current_Datetime
     */
    class Variable_Shop_Current_Datetime extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $parameters
         * @return string
         */
        function get_value($parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Featured_Image
     */
    class Variable_Product_Featured_Image extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Last_Payment_Date
     */
    class Variable_Subscription_Last_Payment_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Billing_Address
     */
    class Variable_Subscription_Billing_Address extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters array
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * Variable Customer Total Spent Variable.
     *
     * @class Variable_Customer_Total_Spent
     */
    class Variable_Customer_Total_Spent extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load Admin Details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value Method.
         *
         * @param \WC_Customer $customer
         * @param array        $parameters
         *
         * @return string
         */
        public function get_value($customer, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Shipping_Method
     */
    class Variable_Order_Shipping_Method extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * Variable_Order_Shipping_City class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_City
     */
    class Variable_Order_Shipping_City extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /** Method: get_value() - returns shipping city.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Product_Sku
     */
    class Variable_Product_Sku extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product|\WC_Product_Variation
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Unsubscribe_URL
     * @since 3.9
     */
    class Variable_Customer_Unsubscribe_URL extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Shop_Tagline
     */
    class Variable_Shop_Tagline extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $parameters
         * @return string
         */
        function get_value($parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Items
     */
    class Variable_Subscription_Items extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        public $supports_order_table = true;
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters array
         * @param $workflow
         * @return string
         */
        function get_value($subscription, $parameters, $workflow)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Order_Date_Paid class.
     *
     * @since 4.8.0
     */
    class Order_Date_Paid extends \AutomateWoo\Variable_Abstract_Datetime
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable's value.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string
         */
        public function get_value($order, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_Tracking_Number
     */
    class Variable_Order_Tracking_Number extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * Variable_Abstract_Shipment_Tracking class.
     *
     * @deprecated Use \AutomateWoo\Shipment_Tracking_Integration::get_shipment_tracking_field instead.
     */
    abstract class Variable_Abstract_Shipment_Tracking extends \AutomateWoo\Variable
    {
        /**
         * Gets the first shipment tracking array
         *
         * @param \WC_Order $order
         * @param string    $field
         * @return false|string
         */
        public function get_shipment_tracking_field($order, $field)
        {
        }
    }
    /**
     * @class Variable_Order_View_Url
     */
    class Variable_Order_View_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Shipping_Address
     */
    class Variable_Subscription_Shipping_Address extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters array
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Meta
     */
    class Variable_Product_Meta extends \AutomateWoo\Variable_Abstract_Meta
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Cart_Link
     */
    class Variable_Cart_Link extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $cart Cart
         * @param $parameters array
         * @return string
         */
        function get_value($cart, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingCost
     *
     * @since 5.3.0
     */
    class BookingCost extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
    /**
     * Class BookingId
     *
     * @since 5.3.0
     */
    class BookingId extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_Billing_Address
     */
    class Variable_Order_Billing_Address extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Meta
     */
    class Variable_Order_Meta extends \AutomateWoo\Variable_Abstract_Meta
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Order_Count
     */
    class Variable_Customer_Order_Count extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * Get the value.
         *
         * @param Customer $customer
         * @param array    $parameters
         *
         * @return int
         */
        public function get_value($customer, $parameters)
        {
        }
    }
    /**
     * Class for the membership.meta variable.
     *
     * @class   Variable_Membership_Meta
     * @package AutomateWoo
     */
    class Variable_Membership_Meta extends \AutomateWoo\Variable_Abstract_Meta
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable's value.
         *
         * @param \WC_Memberships_User_Membership $membership The membership object.
         * @param array                           $parameters The variable's parameters.
         *
         * @return string
         */
        public function get_value($membership, $parameters)
        {
        }
    }
    /**
     * @class Variable_Membership_Renewal_URL
     * @since 4.2
     */
    class Variable_Membership_Renewal_URL extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
    /**
     * Variable_Abstract_Generate_Coupon class.
     */
    abstract class Variable_Abstract_Generate_Coupon extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Generate coupon.
         *
         * @param string   $email
         * @param array    $parameters
         * @param Workflow $workflow
         * @return bool|string
         */
        public function generate_coupon($email, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Customer_Generate_Coupon
     */
    class Variable_Customer_Generate_Coupon extends \AutomateWoo\Variable_Abstract_Generate_Coupon
    {
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Order_Item_Quantity
     */
    class Variable_Order_Item_Quantity extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param array|\WC_Order_Item_Product $item
         * @param $parameters
         * @return string
         */
        function get_value($item, $parameters)
        {
        }
    }
    /**
     * @class Variable_Category_ID
     */
    class Variable_Category_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $category \WP_Term
         * @param $parameters array
         * @return string
         */
        function get_value($category, $parameters)
        {
        }
    }
    /**
     * @class Variable_Shop_Url
     */
    class Variable_Shop_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $parameters
         * @return string
         */
        function get_value($parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingStatus
     *
     * @since 5.3.0
     */
    class BookingStatus extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
    /**
     * Access a subscription product line item's attribute by specifying the attributes slug.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Item_Attribute extends \AutomateWoo\Variable_Order_Item_Attribute
    {
        /**
         * Method to set description and other admin props
         */
        public function load_admin_details()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_Customer_Note
     */
    class Variable_Order_Customer_Note extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Download_File_Name
     *
     * @since 5.6.6
     */
    class Variable_Download_File_Name extends \AutomateWoo\Variable
    {
        /**
         * Set variable description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get file name.
         *
         * @param Download $download
         * @param array    $parameters
         * @return string
         */
        public function get_value($download, $parameters)
        {
        }
    }
    /**
     * @class Variable_Membership_Date_Started
     */
    class Variable_Membership_Date_Started extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
    /**
     * Variable_Order_Shipping_Country class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_Country
     */
    class Variable_Order_Shipping_Country extends \AutomateWoo\Variable
    {
        /**
         * Load description and parameters for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - returns full country name.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string $return
         */
        public function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Items
     */
    class Variable_Order_Items extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        public $supports_order_table = true;
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @param $workflow
         * @return string
         */
        function get_value($order, $parameters, $workflow)
        {
        }
    }
    /**
     * Variable_Order_Shipping_First_Name class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_First_Name
     */
    class Variable_Order_Shipping_First_Name extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - returns the shipping address's first name.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Order_Shipping_Provider
     */
    class Variable_Order_Shipping_Provider extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * Variable_Order_Shipping_Postcode class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_Postcode
     */
    class Variable_Order_Shipping_Postcode extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - get and return the shipping postcode.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Customer_Company
     */
    class Variable_Customer_Company extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Comment_ID
     */
    class Variable_Comment_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $comment \WP_Comment
         * @param $parameters array
         * @return string
         */
        function get_value($comment, $parameters)
        {
        }
    }
    /**
     * @class Variable_Download_URL
     *
     * @since 5.6.6
     */
    class Variable_Download_URL extends \AutomateWoo\Variable
    {
        /**
         * Set variable description.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Download URL.
         *
         * @param Download $download
         * @param array    $parameters
         * @return string
         */
        public function get_value($download, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_ID
     */
    class Variable_Subscription_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_ID
     */
    class Variable_Product_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Country
     */
    class Variable_Customer_Country extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Subscription_Meta
     */
    class Variable_Subscription_Meta extends \AutomateWoo\Variable_Abstract_Meta
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Subscription $subscription
         * @param array            $parameters
         *
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * Variable_Order_Subtotal class.
     *
     * @since 4.6.0
     */
    class Variable_Order_Subtotal extends \AutomateWoo\Variable_Abstract_Price
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the value of this variable.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string
         */
        public function get_value($order, $parameters)
        {
        }
    }
    /**
     * Variable_Order_Shipping_State() class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_State
     */
    class Variable_Order_Shipping_State extends \AutomateWoo\Variable_Customer_State
    {
        /**
         * Load description and parameters for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - returns the state name or abbreviation.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         * @param Workflow  $workflow
         *
         * @return string
         */
        public function get_value($order, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Product_Add_To_Cart_Url
     */
    class Variable_Product_Add_To_Cart_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Meta
     */
    class Variable_Customer_Meta extends \AutomateWoo\Variable_Abstract_Meta
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Customer_First_Name
     */
    class Variable_Customer_First_Name extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Category_Title
     */
    class Variable_Category_Title extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $category \WP_Term
         * @param $parameters array
         * @return string
         */
        function get_value($category, $parameters)
        {
        }
    }
    /**
     * @class Variable_Card_Expiry_Month
     */
    class Variable_Card_Expiry_Month extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Payment_Token_CC $card
         * @param $parameters array
         * @return string
         */
        function get_value($card, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingStartDate
     *
     * @since 5.4.0
     */
    class BookingStartDate extends \AutomateWoo\Variable_Abstract_Datetime
    {
        /**
         * Load variable admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable value.
         *
         * @param WC_Booking $booking
         * @param array      $parameters
         *
         * @return string
         */
        public function get_value($booking, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_Payment_Url
     */
    class Variable_Order_Payment_Url extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Card_Expiry_Year
     */
    class Variable_Card_Expiry_Year extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Payment_Token_CC $card
         * @param $parameters array
         * @return string
         */
        function get_value($card, $parameters)
        {
        }
    }
    /**
     * Order Admin URL variable.
     *
     * @class Variable_Order_Admin_Url
     */
    class Variable_Order_Admin_Url extends \AutomateWoo\Variable
    {
        /**
         * Load admin details
         */
        public function load_admin_details()
        {
        }
        /**
         * Get value method.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return mixed
         */
        public function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Membership_Date_Expires
     */
    class Variable_Membership_Date_Expires extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Access a subscription product line item's meta value by specifying a meta key.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Item_Meta extends \AutomateWoo\Variable_Order_Item_Meta
    {
        /**
         * Method to set description and other admin props
         */
        public function load_admin_details()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_Date_Shipped
     */
    class Variable_Order_Date_Shipped extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * Get variable value.
         *
         * @param \WC_Order $order
         * @param array     $parameters
         *
         * @return string
         */
        public function get_value($order, $parameters)
        {
        }
    }
    /**
     * @class Variable_Guest_Generate_Coupon
     */
    class Variable_Guest_Generate_Coupon extends \AutomateWoo\Variable_Abstract_Generate_Coupon
    {
        /**
         * @param $guest Guest
         * @param $parameters
         * @param $workflow
         * @return string
         */
        function get_value($guest, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Card_Last4
     */
    class Variable_Card_Last4 extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Payment_Token_CC $card
         * @param $parameters array
         * @return string
         */
        function get_value($card, $parameters)
        {
        }
    }
    /**
     * @class Variable_Order_Billing_Phone
     */
    class Variable_Order_Billing_Phone extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param \WC_Order $order
         *
         * @return string
         */
        function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Shop_Products
     */
    class Variable_Shop_Products extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        public $support_limit_field = true;
        function load_admin_details()
        {
        }
        /**
         * Get the value of the variable.
         *
         * @param array    $parameters
         * @param Workflow $workflow
         *
         * @return string
         */
        function get_value($parameters, $workflow)
        {
        }
        /**
         * Get product query args based on the variable params.
         *
         * @param array    $parameters
         * @param Workflow $workflow
         *
         * @since 4.4.0
         *
         * @return array|false
         */
        public function get_product_query_args($parameters, $workflow)
        {
        }
        /**
         * Parse the sort param value for product query.
         *
         * @since 4.4.0
         *
         * @param string $sorting
         *
         * @return array
         */
        public function parse_sort_param($sorting)
        {
        }
        /**
         * Parse the taxonomy params for product query.
         * Slugs should be separated by '+'.
         *
         * @since 4.4.0
         *
         * @param string $param
         *
         * @return array
         */
        public function parse_taxonomy_param($param)
        {
        }
        /**
         * Parse the IDs param for product query.
         * IDs should be separated by '+'.
         *
         * @since 4.4.0
         *
         * @param string $param
         *
         * @return array
         */
        public function parse_ids_param($param)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Customer_Points class.
     *
     * @since 4.6.0
     */
    class Customer_Points extends \AutomateWoo\Variable
    {
        /**
         * Load Admin Details
         */
        public function load_admin_details()
        {
        }
        /**
         * Get Value method.
         *
         * @param Customer $customer
         * @param array    $parameters
         *
         * @return string
         */
        public function get_value($customer, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Order_ID
     */
    class Variable_Order_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * Variable_Customer_Address_Line_2 class.
     *
     * @since 4.5.0
     *
     * @class Variable_Customer_Address_Line_2
     */
    class Variable_Customer_Address_Line_2 extends \AutomateWoo\Variable
    {
        /**
         * Load description on admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - get and return the second line of the customer's address.
         *
         * @param Customer $customer
         * @param array    $parameters
         * @param Workflow $workflow
         *
         * @return string
         */
        public function get_value($customer, $parameters, $workflow)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class CartId.
     *
     * @since 5.2.0
     */
    class CartId extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable's value for a given cart.
         *
         * @param Cart  $cart
         * @param array $parameters
         *
         * @return string
         */
        public function get_value($cart, $parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Variable_Order_Shipping_Address_Line_2 class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_Address_2
     */
    class Variable_Order_Shipping_Address_Line_2 extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - returns the second line of the shipping address.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Wishlist_View_Link
     */
    class Variable_Wishlist_View_Link extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param Wishlist $wishlist
         * @param $parameters
         * @return string
         */
        function get_value($wishlist, $parameters)
        {
        }
    }
    /**
     * @class Variable_Product_Title
     */
    class Variable_Product_Title extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $product \WC_Product
         * @param $parameters
         * @return string
         */
        function get_value($product, $parameters)
        {
        }
    }
    /**
     * @class Variable_Subscription_Start_Date
     */
    class Variable_Subscription_Start_Date extends \AutomateWoo\Variable_Abstract_Datetime
    {
        function load_admin_details()
        {
        }
        /**
         * @param $subscription \WC_Subscription
         * @param $parameters
         * @return string
         */
        function get_value($subscription, $parameters)
        {
        }
    }
    /**
     * Variable_Customer_Username class.
     *
     * @since 4.6.0
     */
    class Variable_Customer_Username extends \AutomateWoo\Variable
    {
        /**
         * Load admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the variable's value.
         *
         * @param Customer $customer
         *
         * @return string
         */
        public function get_value($customer)
        {
        }
    }
    /**
     * @class Variable_Customer_Email
     */
    class Variable_Customer_Email extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param Customer $customer
         * @param $parameters
         * @param Workflow $workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Wishlist_Items
     */
    class Variable_Wishlist_Items extends \AutomateWoo\Variable_Abstract_Product_Display
    {
        function load_admin_details()
        {
        }
        /**
         * @param Wishlist $wishlist
         * @param $parameters
         * @param $workflow
         * @return string
         */
        function get_value($wishlist, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Order_Itemscount
     */
    class Variable_Order_Itemscount extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Class BookingEndTime
     *
     * @since 5.4.0
     */
    class BookingEndTime extends \AutomateWoo\Variables\AbstractBookingTime
    {
        /**
         * Load variable admin details.
         */
        public function load_admin_details()
        {
        }
        /**
         * Get the target booking datetime value for the variable.
         *
         * @param WC_Booking $booking
         *
         * @return DateTime|null The variable's target datetime value in the site's local timezone.
         */
        protected function get_target_datetime_value(\WC_Booking $booking)
        {
        }
    }
}
namespace AutomateWoo {
    /** Variable_Order_Shipping_Last_Name class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_Last_Name
     */
    class Variable_Order_Shipping_Last_Name extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - return the order's last name variable.
         *
         * @param \WC_Order $order
         *
         * @return string
         */
        public function get_value($order)
        {
        }
    }
}
namespace AutomateWoo\Variables {
    /**
     * Access the quantity of a subscription product line item.
     *
     * @since 4.8.0
     * @package AutomateWoo
     */
    class Subscription_Item_Quantity extends \AutomateWoo\Variable_Order_Item_Quantity
    {
        /**
         * Method to set description and other admin props
         */
        public function load_admin_details()
        {
        }
    }
}
namespace AutomateWoo\Variables\Shop {
    /**
     * This class is used to define the { shop.shop_url } variable.
     *
     * @since 5.4.0
     */
    class ShopUrl extends \AutomateWoo\Variable
    {
        /**
         * Prepare details of the variable to display to the merchant.
         */
        public function load_admin_details()
        {
        }
        /**
         * Returns variable value.
         *
         * @param array $parameters List of parameters used to build the variable.
         *
         * @return string Url to the shop section of the site.
         */
        public function get_value($parameters)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variable_Membership_Plan_ID
     */
    class Variable_Membership_Plan_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
    /**
     * @class Variable_Customer_Postcode
     */
    class Variable_Customer_Postcode extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $customer Customer
         * @param $parameters array
         * @param $workflow Workflow
         * @return string
         */
        function get_value($customer, $parameters, $workflow)
        {
        }
    }
    /**
     * @class Variable_Membership_ID
     */
    class Variable_Membership_ID extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $membership \WC_Memberships_User_Membership
         * @param $parameters
         * @return string
         */
        function get_value($membership, $parameters)
        {
        }
    }
    /**
     * Variable_Order_Shipping_Address_Line_1 class.
     *
     * @since 4.4.2
     *
     * @class Variable_Order_Shipping_Address_1
     */
    class Variable_Order_Shipping_Address_Line_1 extends \AutomateWoo\Variable
    {
        /**
         * Load description for variable in admin screen.
         */
        public function load_admin_details()
        {
        }
        /**
         * Method: get_value() - returns the first line of the shipping address.
         *
         * @param \WC_Order $order
         *
         * @return mixed
         */
        public function get_value($order)
        {
        }
    }
    /**
     * @class Variable_Order_Number
     */
    class Variable_Order_Number extends \AutomateWoo\Variable
    {
        function load_admin_details()
        {
        }
        /**
         * @param $order \WC_Order
         * @param $parameters array
         * @return string
         */
        function get_value($order, $parameters)
        {
        }
    }
    /**
     * Class Active_Triggers_Cache
     *
     * @since 4.8.0
     *
     * @package AutomateWoo
     */
    final class Active_Triggers_Cache
    {
        /**
         * Active triggers.
         *
         * @var array
         */
        protected static $active_triggers;
        /**
         * Init Active_Triggers_Cache
         */
        public static function init()
        {
        }
        /**
         * Get an array of trigger names of triggers that are in use on the store.
         *
         * @return array
         */
        public static function get_active_triggers()
        {
        }
        /**
         * Is a trigger actively in use?
         *
         * @param string $trigger_name
         *
         * @return bool
         */
        public static function is_trigger_active($trigger_name)
        {
        }
        /**
         * Query active triggers.
         *
         * @return array
         */
        protected static function query_active_triggers()
        {
        }
        /**
         * Clear active triggers cached values.
         */
        public static function clear_active_triggers_cache()
        {
        }
    }
    /**
     * Carts management class
     * @class Carts
     */
    class Carts
    {
        /** @var bool - when true cart has been change */
        static $is_changed = false;
        /**
         * True if a cart is currently being restored.
         *
         * @var bool
         */
        private static $is_doing_restore = false;
        /**
         * Loaded if abandoned cart is enabled
         */
        static function init()
        {
        }
        static function mark_as_changed()
        {
        }
        static function mark_as_changed_with_cookie()
        {
        }
        /**
         * Important not to run this in the admin area, may not update cart properly
         */
        static function check_for_cart_update_cookie()
        {
        }
        static function trigger_update_on_cart_and_checkout_pages()
        {
        }
        /**
         * @return array
         */
        static function get_statuses()
        {
        }
        /**
         * Logic to determine whether we should save the cart on certain hooks
         */
        static function maybe_store_cart()
        {
        }
        /**
         * Updates the stored cart for a customer.
         * Will also clear a cart if necessary.
         *
         * @param Customer $customer
         */
        static function update_stored_customer_cart($customer)
        {
        }
        /**
         * Stores our cart ID in the WC customer session.
         *
         * Also clears the previous cart when a new cart is created for the same customer.
         * This logic isn't actually relied on but provides an extra way to protect against duplicate carts.
         *
         * @since 4.9.0
         *
         * @param Cart $cart
         */
        public static function update_cart_id_in_wc_session($cart)
        {
        }
        /**
         * woocommerce_cart_emptied fires when an order is placed and the cart is emptied.
         * It does NOT fire when a user empties their cart.
         * It appears to also NOT fire when an a pending or failed order is generated,
         * important that it remains this way for the abandoned_cart_includes_pending_orders option
         */
        static function cart_emptied()
        {
        }
        /**
         * Ensure the stored abandoned cart is removed when an order is created.
         * Clears even if payment has not gone through.
         *
         * @param $order_id
         */
        static function clear_cart_on_order_created($order_id)
        {
        }
        /**
         * Clear cart when transition changes from pending, cancelled or failed
         *
         * @param $order_id
         * @param $old_status
         * @param $new_status
         */
        static function clear_cart_on_order_status_changed($order_id, $old_status, $new_status)
        {
        }
        /**
         * Clears and carts that match the customer from an order
         *
         * @param $order_id
         */
        static function clear_cart_by_order($order_id)
        {
        }
        /**
         * Restores a cart into the current session.
         *
         * @param Cart|bool $cart
         *
         * @return bool True if the cart was restored, false on failure.
         */
        static function restore_cart($cart)
        {
        }
        /**
         * Is a cart restore in progress?
         *
         * @since 4.4.0
         *
         * @return bool
         */
        static function is_doing_restore()
        {
        }
        /**
         * Delete old inactive carts
         */
        static function clean_stored_carts()
        {
        }
        /**
         * When a checkout order is created store the cart ID in order meta.
         *
         * @since 4.9.0
         *
         * @param \WC_Order $order
         */
        public static function store_cart_id_in_order_meta($order)
        {
        }
    }
    /**
     * @class Privacy_Erasers
     * @since 4.0
     */
    class Privacy_Erasers
    {
        static $limit = 10;
        /**
         * Anonymize logs
         *
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_workflow_logs($email, $page)
        {
        }
        /**
         * @param Log $log
         * @param string $email
         */
        public static function anonymize_personal_log_data($log, $email)
        {
        }
        /**
         * Remove all queued events for the customer.
         *
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_workflow_queue($email, $page)
        {
        }
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_cart($email, $page)
        {
        }
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function user_meta($email, $page)
        {
        }
        /**
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function user_tags($email, $page)
        {
        }
        /**
         * Completely erases the guest object matching an email.
         *
         * @param string $email
         * @param int $page
         * @return array
         */
        public static function customer_and_guest_object($email, $page)
        {
        }
    }
}
namespace AutomateWoo\Formatters {
    trait Float_Formatter
    {
        /**
         * Format a value for display in the UI.
         *
         * @since 4.8.0
         *
         * @param string|int $value
         *
         * @return string
         */
        public function format_value($value)
        {
        }
    }
    trait Int_String_Formatter
    {
        /**
         * Format a value for display in the UI.
         *
         * @since 4.8.0
         *
         * @param string|int $value
         *
         * @return string
         */
        public function format_value($value)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Cart
     */
    class Cart extends \AutomateWoo\Model
    {
        const STATUS_ACTIVE = 'active';
        const STATUS_ABANDONED = 'abandoned';
        /** @var string */
        public $table_id = 'carts';
        /** @var string  */
        public $object_type = 'cart';
        /** @var float */
        public $calculated_total = 0;
        /** @var float */
        public $calculated_tax_total = 0;
        /** @var float */
        public $calculated_subtotal = 0;
        /** @var array */
        protected $translated_items_cache;
        /**
         * @param bool|int $id
         */
        function __construct($id = false)
        {
        }
        /**
         * @return string
         */
        function get_status()
        {
        }
        /**
         * @param $status - active|abandoned
         */
        function set_status($status)
        {
        }
        /**
         * Transition status, triggers change hooks
         * @param $new_status - active|abandoned
         */
        function update_status($new_status)
        {
        }
        /**
         * @return int
         */
        function get_user_id()
        {
        }
        /**
         * @param int $user_id
         */
        function set_user_id($user_id)
        {
        }
        /**
         * @return int
         */
        function get_guest_id()
        {
        }
        /**
         * @param int $guest_id
         */
        function set_guest_id($guest_id)
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_last_modified()
        {
        }
        /**
         * @param DateTime|string $date
         */
        function set_date_last_modified($date)
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_created()
        {
        }
        /**
         * @param DateTime $date
         */
        function set_date_created($date)
        {
        }
        /**
         * @return float
         */
        function get_total()
        {
        }
        /**
         * @param $total
         */
        function set_total($total)
        {
        }
        /**
         * @param $val
         */
        function set_shipping_total($val)
        {
        }
        /**
         * @param $val
         */
        function set_shipping_tax_total($val)
        {
        }
        /**
         * @return float
         */
        function get_shipping_total()
        {
        }
        /**
         * @return float
         */
        function get_shipping_tax_total()
        {
        }
        /**
         * @return string
         */
        function get_token()
        {
        }
        /**
         * @param bool|string $token (optional)
         */
        function set_token($token = false)
        {
        }
        /**
         * @return float
         */
        function get_currency()
        {
        }
        /**
         * @param $currency
         */
        function set_currency($currency)
        {
        }
        /**
         * @return string
         */
        function get_shipping_total_html()
        {
        }
        /**
         * @return bool
         */
        function needs_shipping()
        {
        }
        /**
         * @return bool
         */
        function has_coupons()
        {
        }
        /**
         * @return array
         */
        function get_coupons()
        {
        }
        /**
         * @param array $coupon_data
         */
        function set_coupons($coupon_data)
        {
        }
        /**
         * @return array
         */
        function get_fees()
        {
        }
        /**
         * @param array $fees_data
         */
        function set_fees($fees_data)
        {
        }
        /**
         * @return bool
         */
        function has_items()
        {
        }
        /**
         * Get cart items.
         *
         * @return Cart_Item[]
         */
        public function get_items()
        {
        }
        /**
         * Convert raw cart item data into cart item objects.
         *
         * @since 5.3.0
         *
         * @param array $raw_items
         *
         * @return Cart_Item[]
         */
        protected function convert_cart_item_data_to_cart_item_objects(array $raw_items) : array
        {
        }
        /**
         * @return array
         */
        function get_items_raw()
        {
        }
        /**
         * @since 4.2
         * @return int
         */
        function get_item_count()
        {
        }
        /**
         * Get translated cart items in a specified language.
         *
         * @since 4.6.0
         *
         * @param Cart_Item[] $items
         * @param string      $lang
         *
         * @return Cart_Item[]
         */
        protected function translate_items($items, $lang)
        {
        }
        /**
         * @param array $items
         */
        function set_items($items)
        {
        }
        /**
         * @return Guest|false
         */
        function get_guest()
        {
        }
        /**
         * @return Customer|bool
         */
        function get_customer()
        {
        }
        /**
         * @return string
         */
        function get_language()
        {
        }
        /**
         * Updates the stored cart with the current time and cart items
         */
        function sync()
        {
        }
        function calculate_totals()
        {
        }
        /**
         * @param float $price
         * @return string
         */
        function price($price)
        {
        }
        /**
         * Save
         */
        function save()
        {
        }
    }
}
namespace AutomateWoo\Usage_Tracking {
    /**
     * Interface describing an event tracker class.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since 4.9.0
     */
    interface Event_Tracker_Interface
    {
        /**
         * Initialize the tracking class with various hooks.
         */
        public function init();
        /**
         * Set the Tracks object that will be used for tracking.
         *
         * @param Tracks_Interface $tracks
         */
        public function set_tracks(\AutomateWoo\Usage_Tracking\Tracks_Interface $tracks);
    }
    /**
     * Event_Helper Trait.
     *
     * Use to provide Tracks event recording for an object.
     *
     * @since 4.9.0
     */
    trait Event_Helper
    {
        /**
         * The tracks object.
         *
         * @var Tracks_Interface
         */
        protected $tracks = null;
        /**
         * Set the Tracks object that will be used for tracking.
         *
         * @param Tracks_Interface $tracks
         */
        public function set_tracks(\AutomateWoo\Usage_Tracking\Tracks_Interface $tracks)
        {
        }
        /**
         * Record an event using the Tracks instance
         *
         * @param string $event_name
         * @param array  $properties
         */
        private function record_event($event_name, $properties = [])
        {
        }
    }
    /**
     * This class adds actions to track Conversions.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   4.9.0
     */
    class Conversions implements \AutomateWoo\Usage_Tracking\Event_Tracker_Interface
    {
        use \AutomateWoo\Usage_Tracking\Event_Helper;
        /**
         * Initialize the tracking class with various hooks.
         */
        public function init()
        {
        }
        /**
         * Track a conversion event.
         *
         * @param WC_Order $order The order object.
         * @param Log      $log   The log that triggered the conversion.
         */
        public function track_conversion($order, $log)
        {
        }
    }
    /**
     * Tracker class.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   4.9.0
     */
    class Tracker
    {
        /**
         * The WordPress Database instance.
         *
         * @var wpdb
         */
        protected $wpdb;
        /**
         * Tracker constructor.
         *
         * @param wpdb $wpdb The WordPress Database object.
         */
        public function __construct($wpdb)
        {
        }
        /**
         * Hook our tracker data into the WC tracker data.
         */
        public function init()
        {
        }
        /**
         * Add our AutomateWoo data to the WC Tracker.
         *
         * @param array $data The existing array of tracker data.
         *
         * @return array
         */
        private function add_data($data = [])
        {
        }
        /**
         * Get settings data for AutomateWoo.
         *
         * @return array
         */
        private function get_settings()
        {
        }
        /**
         * Get the action names that are actively in use for the store.
         *
         * @return array
         */
        private function get_active_actions()
        {
        }
        /**
         * Get the number of active automatic workflows.
         *
         * @return int
         */
        private function get_active_automatic_workflows()
        {
        }
        /**
         * Get the number of manual workflows.
         *
         * @return int
         */
        private function get_manual_workflows()
        {
        }
        /**
         * Get a workflow query to be used for obtaining a count of workflows.
         *
         * @return Workflow_Query
         */
        private function get_workflow_count_query()
        {
        }
        /**
         * Get the log count data for the Tracker.
         *
         * @return array
         */
        private function get_log_count_data()
        {
        }
        /**
         * Get the array of conversion data for the tracker.
         *
         * @return array
         */
        private function get_conversion_data()
        {
        }
        /**
         * Get active triggers and the count of how many times they are used.
         *
         * @return array
         */
        private function get_active_triggers()
        {
        }
    }
    /**
     * WorkflowTracksData trait.
     *
     * Used to convert workflow data into a single-dimensional array.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   5.0.0
     */
    trait WorkflowTracksData
    {
        /**
         * Get an array of data from the given workflow.
         *
         * @param Workflow $workflow The workflow that is running.
         *
         * @return array
         */
        private function get_workflow_data(\AutomateWoo\Workflow $workflow)
        {
        }
        /**
         * Recursively add items to an array.
         *
         * @param array               $data   The array of data to add to.
         * @param string              $key    The key to use.
         * @param string|array|object $value  The value to add. Can be an array.
         * @param string              $prefix A prefix to use for the data.
         */
        private function recursively_add_items(&$data, $key, $value, $prefix = '')
        {
        }
    }
    /**
     * This class adds actions to track the usage of Workflows.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   4.9.0
     */
    class Workflows implements \AutomateWoo\Usage_Tracking\Event_Tracker_Interface
    {
        use \AutomateWoo\Usage_Tracking\Event_Helper, \AutomateWoo\Usage_Tracking\WorkflowTracksData;
        /**
         * Initialize the tracking class with various hooks.
         */
        public function init()
        {
        }
        /**
         * Record workflow data before a workflow runs.
         *
         * @param Workflow $workflow The workflow that is running.
         */
        public function before_run(\AutomateWoo\Workflow $workflow)
        {
        }
        /**
         * Record workflow data when a workflow is created.
         *
         * @param int $workflow_id The workflow ID.
         */
        public function created($workflow_id)
        {
        }
    }
    /**
     * Static Helper Class for tracks.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   4.9.0
     */
    class Initializer
    {
        /**
         * The tracks object.
         *
         * @var Tracks_Interface
         */
        private static $tracks;
        /**
         * Initialize our tracking classes.
         *
         * There are two kinds of data that we're tracking: events, referred to as "Tracks", and
         * general store data, referred to as the "Tracker". Here we initialize both types of data.
         */
        public static function init()
        {
        }
        /**
         * Initialize the tracks object if needed.
         */
        private static function maybe_initialize_tracks()
        {
        }
        /**
         * Initialize our tracks classes.
         *
         * @throws InvalidClass When a class does not exist, or the proper interface is not implemented.
         */
        private static function initialize_tracks()
        {
        }
        /**
         * Hook our custom tracker data to the regular WC tracker data.
         */
        private static function initialize_tracker()
        {
        }
        /**
         * Validate that a class exists and that it implements the given interface.
         *
         * @param string $class     The class to validate.
         * @param string $interface The interface the class should implement.
         *
         * @throws InvalidClass When the class is invalid.
         */
        private static function validate_class($class, $interface)
        {
        }
    }
    /**
     * Tracks Interface
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   4.9.0
     */
    interface Tracks_Interface
    {
        /**
         * Record an event to track.
         *
         * @param string $event_name The event name to record.
         * @param array  $properties Array of additional properties to included.
         */
        public function record_event($event_name, $properties);
    }
    /**
     * This class adds actions to track when AutomateWoo is first installed.
     *
     * @package AutomateWoo\Usage_Tracking
     * @since   4.9.0
     */
    class Install implements \AutomateWoo\Usage_Tracking\Event_Tracker_Interface
    {
        use \AutomateWoo\Usage_Tracking\Event_Helper;
        /**
         * Initialize the tracking class with various hooks.
         */
        public function init()
        {
        }
        /**
         * Track when AutomateWoo is first installed.
         */
        public function track_install()
        {
        }
    }
    /**
     * Class Tracks
     *
     * @package AutomateWoo\Usage_Tracking
     * @since 4.9.0
     */
    class Tracks implements \AutomateWoo\Usage_Tracking\Tracks_Interface
    {
        const PREFIX = 'aw_';
        /**
         * Record an event to track.
         *
         * @param string $event_name The event name to record.
         * @param array  $properties Array of additional properties to included.
         */
        public function record_event($event_name, $properties = [])
        {
        }
        /**
         * Get the properties to use for an event.
         *
         * Adds default properties to every event, including the ability for Add-ons to add their own
         * default properties.
         *
         * @param array $properties The array of properties for the event.
         *
         * @return array
         */
        protected function get_properties($properties = [])
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Rules
     * @since 2.6
     */
    class Rules extends \AutomateWoo\Registry
    {
        /** @var array */
        static $includes;
        /** @var array  */
        static $loaded = [];
        /**
         * @return array
         */
        static function load_includes()
        {
        }
        /**
         * @return Rule[]
         */
        static function get_all()
        {
        }
        /**
         * @param $rule_name
         * @return Rule|false
         */
        static function get($rule_name)
        {
        }
        /**
         * @param string $rule_name
         * @param Rule   $rule
         */
        static function after_loaded($rule_name, $rule)
        {
        }
        /**
         * Checks that an item is valid.
         *
         * @param mixed $item
         *
         * @since 4.9.0
         *
         * @return bool
         */
        public static function is_item_valid($item)
        {
        }
    }
    /**
     * @class Event_Factory
     * @since 3.4.0
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     */
    class Event_Factory extends \AutomateWoo\Factory
    {
        static $model = 'AutomateWoo\\Event';
        /**
         * @param int $id
         * @return Event|bool
         */
        static function get($id)
        {
        }
    }
    /**
     * Class Cookies
     * @since 4.0
     */
    class Cookies
    {
        /**
         * Sets a cookie and also updates the $_COOKIE array.
         *
         * @param string $name
         * @param string $value
         * @param int    $expire timestamp
         *
         * @return bool
         */
        static function set($name, $value, $expire = 0)
        {
        }
        /**
         * @param $name
         * @return mixed
         */
        static function get($name)
        {
        }
        /**
         * Clear a cookie and also updates the $_COOKIE array.
         * @param $name
         */
        static function clear($name)
        {
        }
    }
    /**
     * Imitates WP_User object but ID is always 0
     * This object should be used as a data-type 'user' and can be queued with an order
     *
     * @class Order_Guest
     * @since 2.1.0
     * @deprecated since 3.0, use Customer instead
     */
    class Order_Guest
    {
        /** @var int */
        public $ID = 0;
        /** @var string */
        public $user_email;
        /** @var string */
        public $first_name;
        /** @var string */
        public $last_name;
        /** @var string */
        public $billing_phone;
        /** @var string */
        public $billing_country;
        /** @var string */
        public $billing_postcode;
        /** @var string */
        public $billing_state;
        /** @var string */
        public $billing_city;
        /** @var string */
        public $shipping_country;
        /** @var string */
        public $shipping_state;
        /** @var string */
        public $shipping_city;
        /** @var string */
        public $shipping_postcode;
        /** @var WC_Order */
        public $order;
        /** @var array  */
        public $roles = ['guest'];
        /**
         * @param WC_Order|bool $order Existing order.
         */
        public function __construct($order = false)
        {
        }
    }
    /**
     * Checkout hooks class.
     *
     * Only loads on the checkout page.
     *
     * @since 4.0
     */
    class Frontend
    {
        /**
         * @return string
         */
        static function get_communication_page_legal_text()
        {
        }
        /**
         * @return Customer|false
         */
        static function get_current_customer()
        {
        }
        /**
         * If $customer is set the customer key will be added to the link.
         *
         * @param Customer|false $customer
         * @param bool|string $intent
         * @return bool|string
         */
        static function get_communication_page_permalink($customer = false, $intent = false)
        {
        }
        /**
         * Only shows when using optin mode
         */
        static function output_signup_optin_checkbox()
        {
        }
        /**
         * Only shows when using optin mode
         */
        static function output_checkout_optin_checkbox()
        {
        }
        /**
         * @param int $order_id
         */
        static function process_checkout_optin($order_id)
        {
        }
        /**
         * @param \WC_Order $order
         * @param \WP_Request $request
         */
        static function process_checkout_block_optin($order, $request)
        {
        }
        /**
         * @param int $user_id
         */
        static function process_account_signup_optin($user_id)
        {
        }
    }
    /**
     * @class Communication_Account_Endpoint
     */
    class Communication_Account_Tab
    {
        /** @var string */
        public static $endpoint;
        static function init()
        {
        }
        /**
         * @return string
         */
        static function get_page_title()
        {
        }
        /**
         * @return string
         */
        static function get_menu_title()
        {
        }
        /**
         * @param array $vars
         * @return array
         */
        static function add_query_vars($vars)
        {
        }
        /**
         * Insert the new endpoint into the My Account menu.
         *
         * @param array $items
         * @return array
         */
        static function new_menu_items($items)
        {
        }
        /**
         * Set endpoint title.
         *
         * @param string $title
         * @return string
         */
        static function endpoint_title($title)
        {
        }
        /**
         * Endpoint HTML content
         */
        static function endpoint_content()
        {
        }
    }
    /**
     * @class Order_Helper
     */
    class Order_Helper
    {
        /**
         * Default constructor.
         */
        public function __construct()
        {
        }
        /**
         * In WC_Abstract_Order::update_status() customer totals refresh after change status hooks have fired.
         * We need access to these for order triggers so manually refresh early.
         * In the future order triggers could fire async which should solve this issue
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         */
        public function maybe_refresh_customer_totals($order_id, $old_status, $new_status)
        {
        }
        /**
         * @param int $order_id
         */
        public function delete_shop_order_transients($order_id)
        {
        }
        /**
         * LEGACY - use Customer object instead of this function
         *
         * @deprecated
         *
         * @param \WC_Order $order
         * @return Order_Guest|\WP_User|false
         */
        public function prepare_user_data_item($order)
        {
        }
    }
    /**
     * @class Phone_Numbers
     * @since 2.8.2
     */
    class Phone_Numbers
    {
        /**
         * Parses a phone number into E.164 format.
         *
         * Number will be converted to an international number based on the $country param unless
         * the number is already in an international format.
         *
         * @param string $original_number
         * @param string $country Defaults to base country if empty
         *
         * @return string
         */
        static function parse($original_number, $country = '')
        {
        }
        /**
         * Check if number already contains an international calling code
         * Number must be have spaces etc removed
         *
         * @param string $number
         * @param string $country
         * @return bool
         */
        static function is_international($number, $country)
        {
        }
        /**
         * @param $country
         * @return string
         */
        static function get_international_calling_code($country)
        {
        }
        /**
         * National Significant Number, i.e. the number of digits after the country code excluding any trunk code or access code.
         * If the country has more than one NSN use the higher e.g. Austria can be 10 or 11
         *
         * @param $country
         * @return int
         */
        static function get_nsn($country)
        {
        }
        /**
         * @deprecated use Clean::comma_delimited_string()
         * @param $list
         * @return array
         */
        static function parse_list($list)
        {
        }
    }
    /**
     * LegacyClassLoader class.
     *
     * This serves to alias legacy classes as needed.
     *
     * @package AutomateWoo
     * @since   5.0.0
     */
    class LegacyClassLoader
    {
        /**
         * Array of legacy classes and their replacements.
         *
         * The key is the old class, and the value is the new class.
         *
         * @var array
         */
        protected $legacy_classes = [
            \AW_Rule_Cart_Count::class => \AutomateWoo\Rules\CartItemCount::class,
            \AW_Rule_Cart_Total::class => \AutomateWoo\Rules\CartTotal::class,
            \AW_Rule_Guest_Email::class => \AutomateWoo\Rules\GuestEmail::class,
            \AW_Rule_Guest_Order_Count::class => \AutomateWoo\Rules\GuestOrderCount::class,
            \AW_Rule_Guest_Run_Count::class => \AutomateWoo\Rules\GuestRunCount::class,
            \AW_Rule_Order_Has_Cross_Sells::class => \AutomateWoo\Rules\OrderHasCrossSells::class,
            \AW_Rule_Order_Is_Customers_First::class => \AutomateWoo\Rules\OrderIsCustomersFirst::class,
            \AW_Rule_Order_Is_POS::class => \AutomateWoo\Rules\OrderIsPos::class,
            \AW_Rule_Order_Run_Count::class => \AutomateWoo\Rules\OrderRunCount::class,
            \AW_Rule_Order_Shipping_Country::class => \AutomateWoo\Rules\OrderShippingCountry::class,
            \AW_Rule_Order_Shipping_Method_String::class => \AutomateWoo\Rules\OrderShippingMethodString::class,
            \AW_Rule_Order_Total::class => \AutomateWoo\Rules\OrderTotal::class,
            \AW_Rule_Subscription_Payment_Count::class => \AutomateWoo\Rules\SubscriptionPaymentCount::class,
            \AW_System_Check_Cron_Running::class => \AutomateWoo\SystemChecks\CronRunning::class,
            \AW_System_Check_Database_Tables_Exist::class => \AutomateWoo\SystemChecks\DatabaseTablesExist::class,
            \AW_Variable_Comment_Author_Name::class => \AutomateWoo\Variables\CommentAuthorName::class,
            \AutomateWoo\Base_System_Check::class => \AutomateWoo\SystemChecks\AbstractSystemCheck::class,
            \AutomateWoo\Database_Table_Carts::class => \AutomateWoo\DatabaseTables\Carts::class,
            \AutomateWoo\Database_Table_Customer_Meta::class => \AutomateWoo\DatabaseTables\CustomerMeta::class,
            \AutomateWoo\Database_Table_Customers::class => \AutomateWoo\DatabaseTables\Customers::class,
            \AutomateWoo\Database_Table_Events::class => \AutomateWoo\DatabaseTables\Events::class,
            \AutomateWoo\Database_Table_Guest_Meta::class => \AutomateWoo\DatabaseTables\GuestMeta::class,
            \AutomateWoo\Database_Table_Guests::class => \AutomateWoo\DatabaseTables\Guests::class,
            \AutomateWoo\Database_Table_Log_Meta::class => \AutomateWoo\DatabaseTables\LogMeta::class,
            \AutomateWoo\Database_Table_Logs::class => \AutomateWoo\DatabaseTables\Logs::class,
            \AutomateWoo\Database_Table_Queue::class => \AutomateWoo\DatabaseTables\Queue::class,
            \AutomateWoo\Database_Table_Queue_Meta::class => \AutomateWoo\DatabaseTables\QueueMeta::class,
            \AutomateWoo\Database_Update::class => \AutomateWoo\DatabaseUpdates\AbstractDatabaseUpdate::class,
            \AutomateWoo\Admin_Notices::class => \AutomateWoo\AdminNotices::class,
            \AutomateWoo\Workflow_Factory::class => \AutomateWoo\Workflows\Factory::class,
            \AutomateWoo\Query_Custom_Table::class => \AutomateWoo\Query_Abstract::class,
            \AutomateWoo\Data_Types::class => \AutomateWoo\DataTypes\DataTypes::class,
            \AutomateWoo\Data_Types\Shop::class => \AutomateWoo\DataTypes\Shop::class,
            \AutomateWoo\Data_Type::class => \AutomateWoo\DataTypes\AbstractDataType::class,
            \AutomateWoo\Data_Type_Card::class => \AutomateWoo\DataTypes\Card::class,
            \AutomateWoo\Data_Type_Cart::class => \AutomateWoo\DataTypes\Cart::class,
            \AutomateWoo\Data_Type_Category::class => \AutomateWoo\DataTypes\ProductCategory::class,
            \AutomateWoo\Data_Type_Comment::class => \AutomateWoo\DataTypes\Comment::class,
            \AutomateWoo\Data_Type_Customer::class => \AutomateWoo\DataTypes\Customer::class,
            \AutomateWoo\Data_Type_Guest::class => \AutomateWoo\DataTypes\Guest::class,
            \AutomateWoo\Data_Type_Membership::class => \AutomateWoo\DataTypes\Membership::class,
            \AutomateWoo\Data_Type_Order::class => \AutomateWoo\DataTypes\Order::class,
            \AutomateWoo\Data_Type_Order_Item::class => \AutomateWoo\DataTypes\OrderItem::class,
            \AutomateWoo\Data_Type_Order_Note::class => \AutomateWoo\DataTypes\OrderNote::class,
            \AutomateWoo\Data_Type_Post::class => \AutomateWoo\DataTypes\Post::class,
            \AutomateWoo\Data_Type_Product::class => \AutomateWoo\DataTypes\Product::class,
            \AutomateWoo\Data_Type_Review::class => \AutomateWoo\DataTypes\Review::class,
            \AutomateWoo\Data_Type_Subscription::class => \AutomateWoo\DataTypes\Subscription::class,
            \AutomateWoo\Data_Types\Subscription_Item::class => \AutomateWoo\DataTypes\SubscriptionItem::class,
            \AutomateWoo\Data_Type_Tag::class => \AutomateWoo\DataTypes\ProductTag::class,
            \AutomateWoo\Data_Type_User::class => \AutomateWoo\DataTypes\User::class,
            \AutomateWoo\Data_Type_Wishlist::class => \AutomateWoo\DataTypes\Wishlist::class,
            \AutomateWoo\Data_Type_Workflow::class => \AutomateWoo\DataTypes\Workflow::class,
            \AutomateWoo\Workflow_Variable_Parser::class => \AutomateWoo\Workflows\VariableParsing\VariableParser::class,
            // Renamed in 5.4.0
            \AutomateWoo\Action_Subscription_Edit_Item_Abstract::class => \AutomateWoo\Actions\Subscriptions\AbstractEditItem::class,
            \AutomateWoo_Subscriptions\Abstract_Action_Subscription_Edit_Shipping::class => \AutomateWoo\Actions\Subscriptions\AbstractEditShipping::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Add_Shipping::class => \AutomateWoo\Actions\Subscriptions\AddShipping::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Recalculate_Taxes::class => \AutomateWoo\Actions\Subscriptions\RecalculateTaxes::class,
            \AutomateWoo_Subscriptions\Action_Regenerate_Download_Permissions::class => \AutomateWoo\Actions\Subscriptions\RegenerateDownloadPermissions::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Remove_Shipping::class => \AutomateWoo\Actions\Subscriptions\RemoveShipping::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Update_Currency::class => \AutomateWoo\Actions\Subscriptions\UpdateCurrency::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Update_Next_Payment_Date::class => \AutomateWoo\Actions\Subscriptions\UpdateNextPaymentDate::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Update_Product::class => \AutomateWoo\Actions\Subscriptions\UpdateProduct::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Update_Schedule::class => \AutomateWoo\Actions\Subscriptions\UpdateSchedule::class,
            \AutomateWoo_Subscriptions\Action_Subscription_Update_Shipping::class => \AutomateWoo\Actions\Subscriptions\UpdateShipping::class,
        ];
        /**
         * Destructor for the Autoloader class.
         *
         * The destructor automatically unregisters the autoload callback function
         * with the SPL autoload system.
         */
        public function __destruct()
        {
        }
        /**
         * Registers the autoload callback with the SPL autoload system.
         */
        public function register()
        {
        }
        /**
         * Unregisters the autoload callback with the SPL autoload system.
         */
        public function unregister()
        {
        }
        /**
         * Autoload legacy AutomateWoo classes.
         *
         * @param string $legacy_class The legacy class name.
         */
        public function autoload($legacy_class)
        {
        }
        /**
         * Get the deprecation warning message when a deprecated class is loaded.
         *
         * Override this method in a child class to change the message.
         *
         * @param string $legacy_class The fully qualified name of the legacy class that was used.
         * @param string $new_class    The fully qualified name of the replacement class.
         *
         * @return string
         */
        protected function get_deprecation_message($legacy_class, $new_class)
        {
        }
        /**
         * Trigger a notice to the user when a legacy class is loaded.
         *
         * @param string $legacy_class The legacy class name.
         * @param string $new_class    The replacement class.
         */
        private function trigger_class_warning($legacy_class, $new_class)
        {
        }
    }
    /**
     * Class Rest_Api
     *
     * @since 4.9.0
     */
    final class Rest_Api
    {
        use \AutomateWoo\Rest_Api\Utilities\Controller_Namespace;
        /**
         * Init AutomateWoo's Rest API.
         */
        public function init()
        {
        }
        /**
         * Register REST API routes.
         */
        public function register_routes()
        {
        }
        /**
         * Get REST API controller objects.
         *
         * @return WP_REST_Controller[]
         * @throws Exception When a class doesn't implement the correct interface.
         */
        private function get_controllers()
        {
        }
        /**
         * Filter the index response for our namespace.
         *
         * @param WP_REST_Response $response The response object for the given request.
         * @param WP_REST_Request  $request  The current REST Request object.
         *
         * @return WP_REST_Response The filtered response object.
         */
        public function filter_namespace_index($response, $request)
        {
        }
    }
    /**
     * Tracks logged out customers via cookies.
     *
     * @class Session_Tracker
     *
     * @since 4.3.0 Class was essentially rewritten.
     */
    class Session_Tracker
    {
        /** @var int (days) */
        private static $tracking_cookie_expiry;
        /** cookie name */
        private static $tracking_key_cookie_name;
        /** @var string - This key WILL BE saved */
        private static $tracking_key_to_set = '';
        /**
         * Init session tracker, add hooks.
         */
        static function init()
        {
        }
        /**
         * Returns true if a session tracking cookie has been set.
         *
         * Note: Includes any changes to the cookie in the current request.
         *
         * @since 4.0
         *
         * @return bool
         */
        static function is_tracking_cookie_set()
        {
        }
        /**
         * Returns true if a session tracking cookie has been set.
         *
         * Note: Includes any changes to the cookie in the current request.
         *
         * @since 4.2
         *
         * @return bool
         */
        static function is_session_started_cookie_set()
        {
        }
        /**
         * Returns the tracking key as currently stored in the cookie.
         *
         * @since 4.3
         *
         * @return string
         */
        static function get_tracking_cookie()
        {
        }
        /**
         * This method doesn't actually set the cookie, rather it initiates the cookie setting.
         * Cookies are set only on 'wp', 'shutdown' or 'automatewoo/ajax/before_send_json'.
         *
         * @since 4.3
         *
         * @param string $tracking_key
         *
         * @return bool
         */
        static function set_tracking_key_to_be_set($tracking_key)
        {
        }
        /**
         * If session cookies aren't permitted session tracking is basically disabled.
         *
         * @since 4.0
         * @return bool
         */
        static function cookies_permitted()
        {
        }
        /**
         * Clear session cookies
         *
         * @since 4.3
         */
        static function clear_tracking_cookies()
        {
        }
        /**
         * New browser session initiated
         */
        static function new_session_initiated()
        {
        }
        /**
         * Sets a new session cookie for the logged in customer.
         * Clears any stored guest cart before their cookie key is updated.
         *
         * @param $logged_in_cookie
         * @param $expire
         * @param $expiration
         * @param int $user_id
         */
        static function update_session_on_user_login($logged_in_cookie, $expire, $expiration, $user_id)
        {
        }
        /**
         * Attempt to set session tracking cookies.
         *
         * Doesn't set cookies in the admin area.
         */
        static function maybe_set_session_cookies()
        {
        }
        /**
         * To avoid duplicate carts this method can be used to clear the cart when switching session customers.
         *
         * $new_customer is the customer that will be set.
         * The current session customer is retrieved from the current cookie value.
         *
         * @param Customer $new_customer
         *
         * @since 4.3.0
         */
        static function maybe_clear_previous_session_customers_cart($new_customer)
        {
        }
        /**
         * @return string|false
         */
        static function get_current_tracking_key()
        {
        }
        /**
         * Returns the current user ID factoring in any session cookies.
         *
         * @return int
         */
        static function get_detected_user_id()
        {
        }
        /**
         * Returns the current guest from tracking cookie.
         *
         * @return Guest|bool
         */
        static function get_current_guest()
        {
        }
        /**
         * Updates the current session based on the customer's email.
         *
         * Create the customer for the email if needed and contains logic to handle when a customers email changes.
         *
         * Cases to handle:
         *
         * - Registered user is logged in or remembered via cookie = bail
         * - Email matches existing customer
         * 		- Cookie customer exists
         *          - Cookie and matched customer are the same = do nothing
         *			- Cookie and matched customer are different = cookie must be changed, clear cart from previous key to avoid duplicates
         * 		- No cookie customer = Set new cookie to matched customer key
         * - Email is new
         * 		- Cookie customer exists
         * 			- Customer data is locked = create new customer, change cookie, clear cart from previous key to avoid duplicates
         * 			- Customer data is not locked = update customer email
         * 		- No cookie customer = Set new cookie to matched customer key
         *
         * @param string $new_email
         * @param string $language
         *
         * @return Customer|false
         */
        static function set_session_by_captured_email($new_email, $language = '')
        {
        }
        /**
         * Store guest info if they place a comment
         * @param $comment_ID
         */
        static function capture_from_comment($comment_ID)
        {
        }
        /**
         * Store guest info when they submit email from Store API.
         *
         * The guest email, first name and last name are captured.
         *
         * @see \Automattic\WooCommerce\Blocks\StoreApi\Routes\CartUpdateCustomer
         *
         * @param \WC_Order $order
         */
        public static function capture_from_store_api($order)
        {
        }
        /**
         * Attempt to set a tracking key for guests when they place an order.
         * Otherwise, if presubmit tracking is disabled, guests won't have session tracking.
         *
         * @since 4.0
         * @param int $order_id
         */
        static function maybe_track_guest_customer_after_order_placed($order_id)
        {
        }
        /**
         * Attempts to set the $customer as the current session customer.
         * Should only be used before headers are sent.
         * Fails silently if session cookies or session tracking is disabled.
         *
         * Allows the session to be set even if the same customer is already set.
         * Doing this will extend the cookie expiry date.
         *
         * @param Customer $customer
         * @param string   $language
         *
         * @since 4.0
         */
        static function set_session_customer($customer, $language = '')
        {
        }
        /**
         * Returns the current session customer and takes into account session tracking cookies.
         *
         * @return Customer|false
         */
        static function get_session_customer()
        {
        }
        /**
         * Returns true if the supplied $customer arg matches the currently tracked session customer.
         *
         * @since 4.3.0
         *
         * @param Customer|int $input_customer
         *
         * @return bool
         */
        static function is_session_customer($input_customer)
        {
        }
    }
    /**
     * @class Hooks
     * @since 2.6.7
     */
    class Hooks
    {
        static function init()
        {
        }
        /**
         * Init shortcodes. Only called on frontend.
         *
         * @since 4.5.2
         */
        public static function init_shortcodes()
        {
        }
        /**
         * @param $addon_id
         */
        static function activate_addon($addon_id)
        {
        }
        /**
         * Action endpoints
         */
        static function check_for_action_endpoint()
        {
        }
        /**
         * Action endpoints
         */
        static function maybe_handle_frontend_form()
        {
        }
        /**
         * Maybe print pre-submit js
         */
        static function maybe_enqueue_presubmit_js()
        {
        }
        /**
         * Load plugin frontend pages
         */
        static function maybe_init_pages()
        {
        }
        static function register_scripts()
        {
        }
    }
    /**
     * Class Permissions.
     *
     * @since 4.9.0
     */
    final class Permissions
    {
        /**
         * Can the current user manage WooCommerce & AutomateWoo.
         *
         * @return bool
         */
        public static function can_manage()
        {
        }
    }
    /**
     * @class Workflow_Location
     * @since 2.8.2
     */
    class Workflow_Location
    {
        public $workflow;
        /** @var string */
        public $country;
        /** @var string */
        public $state;
        /** @var string */
        public $postcode;
        /** @var string */
        public $city;
        /** @var string */
        public $based_on = 'billing';
        /** @var string */
        public $target_object_type;
        /**
         * @param Workflow $workflow
         * @param string $based_on
         */
        function __construct($workflow, $based_on = 'billing')
        {
        }
        /**
         * @return string
         */
        function get_target_object_type()
        {
        }
        /**
         * @return string
         */
        protected function load_target_object_type()
        {
        }
        /**
         * @return \WC_Order|\WC_Subscription|\WP_User|Order_Guest|Guest|false
         */
        function get_target_object()
        {
        }
        /**
         * @return string
         */
        function get_country()
        {
        }
        /**
         * @return string
         */
        function get_state()
        {
        }
        /**
         * @return string
         */
        function get_postcode()
        {
        }
        /**
         * @return string
         */
        function get_city()
        {
        }
        /**
         * @return array
         */
        function get_location_array()
        {
        }
    }
    /**
     * @class Guest_Factory
     * @since 2.9
     */
    class Guest_Factory extends \AutomateWoo\Factory
    {
        static $model = 'AutomateWoo\\Guest';
        /**
         * @param int $guest_id
         * @return Guest|bool
         */
        static function get($guest_id)
        {
        }
        /**
         * @param $email
         * @return Guest|bool
         */
        static function get_by_email($email)
        {
        }
        /**
         * @deprecated
         *
         * @param $key
         *
         * @return Guest|bool
         */
        static function get_by_key($key)
        {
        }
        /**
         * @param Guest $guest
         */
        static function update_cache($guest)
        {
        }
        /**
         * @param Guest $guest
         */
        static function clean_cache($guest)
        {
        }
        /**
         * @param string $email
         * @return Guest
         */
        static function create($email)
        {
        }
    }
    /**
     * Class Events_Runner_Async_Request.
     * HTTP request to run a set of async events.
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     *
     * @since 3.8
     */
    class Events_Runner_Async_Request extends \AutomateWoo\Async_Request_Abstract
    {
        /** @var string */
        protected $action = 'events_starter';
        /** @var int */
        public $max_events_to_process_at_once;
        public function __construct()
        {
        }
        protected function handle()
        {
        }
        /**
         * @param array $event_ids
         */
        public function run_events_now($event_ids)
        {
        }
        /**
         * @param array $event_ids
         */
        public function dispatch_events_background_processor($event_ids)
        {
        }
    }
    /**
     * Cache class.
     *
     * Wrapper class for WP transients and object cache.
     *
     * @since 2.1.0
     */
    class Cache
    {
        /**
         * Is cache enabled?
         *
         * @var bool
         */
        public static $enabled = true;
        /**
         * Get default transient expiration value in hours.
         *
         * @return int
         */
        public static function get_default_transient_expiration()
        {
        }
        /**
         * Set a transient value.
         *
         * @param string   $key
         * @param mixed    $value
         * @param bool|int $expiration In hours. Optional.
         *
         * @return bool
         */
        public static function set_transient($key, $value, $expiration = false)
        {
        }
        /**
         * Get the value of a transient.
         *
         * @param string $key
         *
         * @return bool|mixed
         */
        public static function get_transient($key)
        {
        }
        /**
         * Delete a transient.
         *
         * @param string $key
         */
        public static function delete_transient($key)
        {
        }
        /**
         * Sets a value in cache.
         *
         * Only sets if key is not falsy.
         *
         * @param string $key
         * @param mixed  $value
         * @param string $group
         */
        public static function set($key, $value, $group)
        {
        }
        /**
         * Retrieves the cache contents from the cache by key and group.
         *
         * @param string $key
         * @param string $group
         *
         * @return bool|mixed
         */
        public static function get($key, $group)
        {
        }
        /**
         * Checks if a cache key and group value exists.
         *
         * @param string $key
         * @param string $group
         *
         * @return bool
         */
        public static function exists($key, $group)
        {
        }
        /**
         * Remove the item from the cache.
         *
         * @param string $key
         * @param string $group
         */
        public static function delete($key, $group)
        {
        }
    }
    /**
     * @class Wishlist
     * @since 2.9.9
     */
    class Wishlist
    {
        /** @var $id */
        public $id;
        /** @var $owner_id */
        public $owner_id;
        /** @var $items */
        public $items;
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * @return Customer|bool
         */
        public function get_customer()
        {
        }
        /**
         * @return string
         */
        public function get_integration()
        {
        }
        /**
         * Get wishlist items.
         *
         * @return int[]
         */
        public function get_items()
        {
        }
        /**
         * @return string
         */
        public function get_link()
        {
        }
        /**
         * @return string
         */
        protected function get_date_created_option_name()
        {
        }
        /**
         * @return DateTime|false UTC
         * @throws \Exception Emits exception if the date created value isn't valid.
         */
        public function get_date_created()
        {
        }
        /**
         * @param DateTime $date UTC
         */
        public function set_date_created($date)
        {
        }
    }
    /**
     * @class Log_Query
     */
    class Log_Query extends \AutomateWoo\Query_Data_Layer_Abstract
    {
        /** @var string */
        public $table_id = 'logs';
        /** @var string  */
        public $meta_table_id = 'log-meta';
        /** @var string */
        public $model = 'AutomateWoo\\Log';
        /**
         * @since 3.8
         *
         * @param int|array|Workflow $workflow Workflow object, ID or array of IDs.
         * @param string             $compare  Defaults to '=' or 'IN' if $workflow is array.
         *
         * @return $this
         */
        function where_workflow($workflow, $compare = null)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $date
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_date($date, $compare = false)
        {
        }
        /**
         * @since 4.0
         * @param Customer $customer
         * @param bool $include_guest_matches include matching guest results
         * @param bool $include_advocate_matches
         * @return $this
         */
        function where_customer_or_legacy_user($customer, $include_guest_matches = false, $include_advocate_matches = false)
        {
        }
        /**
         * @since 3.8
         * @param $start_date
         * @param $end_date
         * @return $this
         */
        function where_date_between($start_date, $end_date)
        {
        }
        /**
         * @since 3.8
         * @param string $data_type
         * @return string
         */
        function get_data_layer_meta_key($data_type)
        {
        }
        /**
         * @since 3.8
         * @param string $data_type
         * @param mixed $data_object
         * @return string
         */
        function get_data_layer_meta_value($data_type, $data_object)
        {
        }
        /**
         * @return Log[]
         */
        function get_results()
        {
        }
    }
    /**
     * Process variables into values. Is used on workflows and action options.
     *
     * @class Variable_Processor
     * @since 2.0.2
     */
    class Variables_Processor
    {
        /** @var Workflow */
        public $workflow;
        /**
         * @param $workflow
         */
        function __construct($workflow)
        {
        }
        /**
         * @param $text string
         * @param bool $allow_html
         * @return string
         */
        function process_field($text, $allow_html = false)
        {
        }
        /**
         * Callback function to process a variable string.
         *
         * @param string $string
         *
         * @return string
         */
        function _callback_process_field($string)
        {
        }
        /**
         * Sanitize and parse a variable string into a usable object.
         *
         * @param string $string
         *
         * @return ParsedVariable|ExcludedParsedVariable|null
         */
        public static function parse_variable($string)
        {
        }
        /**
         * Get the value of a variable.
         *
         * @param string $data_type
         * @param string $data_field
         * @param array $parameters
         *
         * @return string
         */
        function get_variable_value($data_type, $data_field, $parameters = [])
        {
        }
        /**
         * Handle legacy variable compatibility.
         *
         * @param string $data_type
         * @param string $data_field
         * @param array $parameters
         */
        private function convert_legacy_variables(&$data_type, &$data_field, &$parameters)
        {
        }
    }
    /**
     * @class Customer
     *
     * This class uses direct DB queries to fetch order data for performance reason.
     * The usage of WC_Order_Query is limited and won't return a set of totals.
     *
     * @since 3.0.0
     */
    class Customer extends \AutomateWoo\Abstract_Model_With_Meta_Table
    {
        /** @var string */
        public $table_id = 'customers';
        /** @var string  */
        public $object_type = 'customer';
        /**
         * @param bool|int $id
         */
        function __construct($id = false)
        {
        }
        /**
         * Returns the ID of the model's meta table.
         *
         * @return string
         */
        public function get_meta_table_id()
        {
        }
        /**
         * @return int
         */
        function get_user_id()
        {
        }
        /**
         * @param $user_id
         */
        function set_user_id($user_id)
        {
        }
        /**
         * @return int
         */
        function get_guest_id()
        {
        }
        /**
         * @param $guest_id
         */
        function set_guest_id($guest_id)
        {
        }
        /**
         * Returns a unique key that can ID the customer. This is added to the customer upon creation.
         *
         * @return string
         */
        function get_key()
        {
        }
        /**
         * @param string $key
         */
        function set_key($key)
        {
        }
        /**
         * Generates a new key for registered users that don't have one.
         *
         * @deprecated tracking keys are replaced with $this->get_key()
         *
         * @since 4.0
         * @return string
         */
        function get_tracking_key()
        {
        }
        /**
         * Get the creation date of the customer's last paid order.
         *
         * @return bool|DateTime
         */
        public function get_date_last_purchased()
        {
        }
        /**
         * @param DateTime|string $date
         */
        function set_date_last_purchased($date)
        {
        }
        /**
         * Get the creation date of the customer's first paid order.
         *
         * @since 4.4
         *
         * @return DateTime|bool
         */
        function get_date_first_purchased()
        {
        }
        /**
         * Takes into account the global optin_mode option.
         *
         * If the customer is unsubd then all workflows will still run but any emails sending to
         * this customer will be rejected and marked in the logs.
         *
         * @return string
         */
        function is_unsubscribed()
        {
        }
        /**
         * @return bool
         */
        function is_opted_in()
        {
        }
        /**
         * @return string
         */
        function is_opted_out()
        {
        }
        /**
         * Mark a customer as subscribed
         */
        function opt_in()
        {
        }
        /**
         * Mark a customer as unsubscribed
         */
        function opt_out()
        {
        }
        /**
         * @param bool $unsubscribed
         */
        function set_is_unsubscribed($unsubscribed)
        {
        }
        /**
         * @return bool
         */
        function get_is_unsubscribed()
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_unsubscribed()
        {
        }
        /**
         * @param DateTime|string $date
         */
        function set_date_unsubscribed($date)
        {
        }
        /**
         * @param bool $subscribed
         */
        function set_is_subscribed($subscribed)
        {
        }
        /**
         * @return bool
         */
        function get_is_subscribed()
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_subscribed()
        {
        }
        /**
         * @param DateTime|string $date
         */
        function set_date_subscribed($date)
        {
        }
        /**
         * @return Guest|false
         */
        function get_guest()
        {
        }
        /**
         * @return \WP_User
         */
        function get_user()
        {
        }
        /**
         * @return Cart
         */
        function get_cart()
        {
        }
        /**
         * Deletes the customer's stored cart.
         *
         * @since 4.3.0
         */
        function delete_cart()
        {
        }
        /**
         * @return bool
         */
        function is_registered()
        {
        }
        /**
         * @return string
         */
        function get_email()
        {
        }
        /**
         * @return string
         */
        function get_first_name()
        {
        }
        /**
         * @return string
         */
        function get_last_name()
        {
        }
        /**
         * @return string
         */
        function get_full_name()
        {
        }
        /**
         * @return string
         */
        function get_billing_country()
        {
        }
        /**
         * @return string
         */
        function get_billing_state()
        {
        }
        /**
         * @return string
         */
        function get_billing_phone()
        {
        }
        /**
         * @return string
         */
        function get_billing_postcode()
        {
        }
        /**
         * @return string
         */
        function get_billing_city()
        {
        }
        /**
         * @return string
         */
        function get_billing_address_1()
        {
        }
        /**
         * @return string
         */
        function get_billing_address_2()
        {
        }
        /**
         * @return string
         */
        function get_billing_company()
        {
        }
        /**
         * @param bool $include_name
         * @return array
         */
        function get_address($include_name = true)
        {
        }
        /**
         * @param bool $include_name
         * @return string
         */
        function get_formatted_billing_address($include_name = true)
        {
        }
        /**
         * Get meta value using legacy meta system.
         *
         * The legacy meta system stored data in the WP user meta table when the customer was registered
         * and in the AW guest meta table when the customer was a guest.
         *
         * It's worth noting that guest meta does not become user meta when a guest creates an account.
         *
         * @param string $key
         * @return mixed
         */
        function get_legacy_meta($key)
        {
        }
        /**
         * Update meta value using legacy meta system.
         *
         * @see \AutomateWoo\Customer::get_legacy_meta()
         *
         * @param string $key
         * @param $value
         * @return mixed
         */
        function update_legacy_meta($key, $value)
        {
        }
        /**
         * Get count of customer's orders.
         *
         * Includes orders that match user ID OR billing email.
         *
         * @return int
         */
        public function get_order_count()
        {
        }
        /**
         * Get total spent by the customer.
         *
         * Includes orders that match user ID OR billing email.
         *
         * @return float
         */
        public function get_total_spent()
        {
        }
        /**
         * Get SQL used for customer order queries.
         *
         * Used to get orders that match user ID OR email.
         *
         * @since 4.6.0
         *
         * @return string
         */
        protected function get_customer_order_sql()
        {
        }
        /**
         * Get SQL query args used for customer order queries.
         *
         * @since 4.6.0
         *
         * @return array
         */
        protected function get_customer_order_sql_args()
        {
        }
        /**
         * Are custom order tables enabled?
         *
         * @return bool
         */
        protected function custom_order_tables_enabled()
        {
        }
        /**
         * @return string
         */
        function get_role()
        {
        }
        /**
         * Get the customer's language if site is multilingual.
         *
         * @return string
         */
        public function get_language()
        {
        }
        /**
         * Gets the user registered date, if the user is registered.
         *
         * @since 4.4
         *
         * @return DateTime|bool
         */
        function get_date_registered()
        {
        }
        /**
         * No need to save after using this method
         * @param $language
         */
        function update_language($language)
        {
        }
        /**
         * Get product and variation ids of all the customers purchased products
         *
         * @return array
         */
        public function get_purchased_products()
        {
        }
        /**
         * @param $prop
         * @return mixed
         */
        function get_linked_prop($prop)
        {
        }
        /**
         * Get reviews for our customer.
         *
         * @since 4.4
         *
         * @param array $args Arguments array.
         *
         * @return array|int
         */
        function get_reviews($args = [])
        {
        }
        /**
         * Get the customer's review count.
         *
         * NOTE: This excludes multiple reviews of the same product.
         *
         * @return int
         */
        function get_review_count()
        {
        }
        /**
         * Calculate the customer's review count excluding multiple reviews on the same product.
         *
         * @since 4.5
         *
         * @return int
         */
        function calculate_unique_product_review_count()
        {
        }
        /**
         * Clear customer review count cache.
         *
         * @since 4.5
         */
        function clear_review_count_cache()
        {
        }
        /**
         * Gets the last review date for the user.
         *
         * @since 4.4
         *
         * @return DateTime|bool
         */
        function get_last_review_date()
        {
        }
        /**
         * Get the date that a workflow last run for the customer.
         *
         * @since 4.4
         *
         * @param int|array|Workflow $workflow Workflow object, ID or array of IDs.
         *
         * @return DateTime|bool
         */
        function get_workflow_last_run_date($workflow)
        {
        }
        /**
         * Get customer's nth last paid order.
         *
         * @param int $n
         *
         * @return \WC_Order|bool
         *
         * @since 4.8.0
         */
        public function get_nth_last_paid_order($n)
        {
        }
    }
}
namespace AutomateWoo\ActionScheduler {
    /**
     * Interface ActionSchedulerInterface
     *
     * Acts as a wrapper for ActionScheduler's public functions.
     *
     * @since 5.1.0
     */
    interface ActionSchedulerInterface
    {
        const STATUS_COMPLETE = 'complete';
        const STATUS_PENDING = 'pending';
        const STATUS_RUNNING = 'in-progress';
        const STATUS_FAILED = 'failed';
        const STATUS_CANCELED = 'canceled';
        /**
         * Schedule an action to run once at some time in the future
         *
         * @param int    $timestamp When the job will run.
         * @param string $hook      The hook to trigger.
         * @param array  $args      Arguments to pass when the hook triggers.
         * @param string $group     The group to assign this job to.
         *
         * @return string The action ID.
         */
        public function schedule_single($timestamp, $hook, $args = [], $group = 'automatewoo');
        /**
         * Schedule an action to run now i.e. in the next available batch.
         *
         * This differs from async actions by having a scheduled time rather than being set for '0000-00-00 00:00:00'.
         * We could use an async action instead but they can't be viewed easily in the admin area
         * because the table is sorted by schedule date.
         *
         * @since 5.2.0
         *
         * @param string $hook  The hook to trigger.
         * @param array  $args  Arguments to pass when the hook triggers.
         * @param string $group The group to assign this job to.
         *
         * @return string The action ID.
         */
        public function schedule_immediate(string $hook, $args = [], $group = 'automatewoo');
        /**
         * Enqueue an action to run one time, as soon as possible
         *
         * @param string $hook  The hook to trigger.
         * @param array  $args  Arguments to pass when the hook triggers.
         * @param string $group The group to assign this job to. Defaults to 'automatewoo'.
         *
         * @return int The action ID.
         */
        public function enqueue_async_action($hook, $args = [], $group = 'automatewoo');
        /**
         * Enqueue an action to run one time, as soon as possible, BUT the action is not created until 'shutdown' or
         * when this request is finished.
         *
         * This is useful to avoid cases where Action Scheduler is already running in the background and runs an action
         * before the current request is finished.
         *
         * @since 5.5.5
         *
         * @param string $hook  The hook to trigger.
         * @param array  $args  Arguments to pass when the hook triggers.
         * @param string $group The group to assign this job to. Defaults to 'automatewoo'.
         */
        public function enqueue_async_action_on_shutdown($hook, $args = [], $group = 'automatewoo');
        /**
         * Check if there is an existing action in the queue with a given hook, args and group combination.
         *
         * An action in the queue could be pending, in-progress or async. If the is pending for a time in
         * future, its scheduled date will be returned as a timestamp. If it is currently being run, or an
         * async action sitting in the queue waiting to be processed, in which case boolean true will be
         * returned. Or there may be no async, in-progress or pending action for this hook, in which case,
         * boolean false will be the return value.
         *
         * @param string $hook
         * @param array  $args
         * @param string $group The group to check for jobs. Defaults to 'automatewoo'.
         *
         * @return int|bool The timestamp for the next occurrence of a pending scheduled action, true for an async or in-progress action or false if there is no matching action.
         */
        public function next_scheduled_action($hook, $args = null, $group = 'automatewoo');
        /**
         * Search for scheduled actions.
         *
         * @param array  $args          See as_get_scheduled_actions() for possible arguments.
         * @param string $return_format OBJECT, ARRAY_A, or ids.
         * @param string $group         The group to search for jobs. Defaults to 'automatewoo'.
         *
         * @return array
         */
        public function search($args = [], $return_format = OBJECT, $group = 'automatewoo');
        /**
         * Cancel the next scheduled instance of an action with a matching hook (and optionally matching args and group).
         *
         * Any recurring actions with a matching hook should also be cancelled, not just the next scheduled action.
         *
         * @param string $hook  The hook that the job will trigger.
         * @param array  $args  Args that would have been passed to the job.
         * @param string $group The group the job is assigned to. Defaults to 'automatewoo'.
         *
         * @return string|null The scheduled action ID if a scheduled action was found, or null if no matching action found.
         */
        public function cancel(string $hook, $args = [], $group = 'automatewoo');
    }
    /**
     * ActionScheduler service class.
     *
     * Acts as a wrapper for ActionScheduler's public functions.
     *
     * @since 5.1.0
     */
    class ActionScheduler implements \AutomateWoo\ActionScheduler\ActionSchedulerInterface
    {
        /**
         * @var AsyncActionRunner
         */
        protected $async_runner;
        /**
         * List of async actions to enqueue on shutdown.
         *
         * @var array[]
         */
        protected $shutdown_async_actions = [];
        /**
         * ActionScheduler constructor.
         *
         * @param AsyncActionRunner $async_runner
         */
        public function __construct(\AutomateWoo\ActionScheduler\AsyncActionRunner $async_runner)
        {
        }
        /**
         * Schedule an action to run once at some time in the future
         *
         * @param int    $timestamp When the job will run.
         * @param string $hook      The hook to trigger.
         * @param array  $args      Arguments to pass when the hook triggers.
         * @param string $group     The group to assign this job to.
         *
         * @return string The action ID.
         */
        public function schedule_single($timestamp, $hook, $args = [], $group = 'automatewoo')
        {
        }
        /**
         * Schedule an action to run now i.e. in the next available batch.
         *
         * This differs from async actions by having a scheduled time rather than being set for '0000-00-00 00:00:00'.
         * We could use an async action instead but they can't be viewed easily in the admin area
         * because the table is sorted by schedule date.
         *
         * @since 5.2.0
         *
         * @param string $hook  The hook to trigger.
         * @param array  $args  Arguments to pass when the hook triggers.
         * @param string $group The group to assign this job to.
         *
         * @return string The action ID.
         */
        public function schedule_immediate(string $hook, $args = [], $group = 'automatewoo')
        {
        }
        /**
         * Enqueue an action to run one time, as soon as possible
         *
         * @param string $hook  The hook to trigger.
         * @param array  $args  Arguments to pass when the hook triggers.
         * @param string $group The group to assign this job to. Defaults to 'automatewoo'.
         *
         * @return int The action ID.
         */
        public function enqueue_async_action($hook, $args = [], $group = 'automatewoo')
        {
        }
        /**
         * Enqueue an action to run one time, as soon as possible, BUT the action is not created until 'shutdown' or
         * when this request is finished.
         *
         * This is useful to avoid cases where Action Scheduler is already running in the background and runs an action
         * before the current request is finished.
         *
         * @since 5.5.5
         *
         * @param string $hook  The hook to trigger.
         * @param array  $args  Arguments to pass when the hook triggers.
         * @param string $group The group to assign this job to. Defaults to 'automatewoo'.
         */
        public function enqueue_async_action_on_shutdown($hook, $args = [], $group = 'automatewoo')
        {
        }
        /**
         * Check if there is an existing action in the queue with a given hook, args and group combination.
         *
         * An action in the queue could be pending, in-progress or async. If the is pending for a time in
         * future, its scheduled date will be returned as a timestamp. If it is currently being run, or an
         * async action sitting in the queue waiting to be processed, in which case boolean true will be
         * returned. Or there may be no async, in-progress or pending action for this hook, in which case,
         * boolean false will be the return value.
         *
         * @param string $hook
         * @param array  $args
         * @param string $group The group to check for jobs. Defaults to 'automatewoo'.
         *
         * @return int|bool The timestamp for the next occurrence of a pending scheduled action, true for an async or in-progress action or false if there is no matching action.
         */
        public function next_scheduled_action($hook, $args = null, $group = 'automatewoo')
        {
        }
        /**
         * Search for scheduled actions.
         *
         * @param array  $args          See as_get_scheduled_actions() for possible arguments.
         * @param string $return_format OBJECT, ARRAY_A, or ids.
         * @param string $group         The group to search for jobs. Defaults to 'automatewoo'.
         *
         * @return array
         */
        public function search($args = [], $return_format = OBJECT, $group = 'automatewoo')
        {
        }
        /**
         * Cancel the next scheduled instance of an action with a matching hook (and optionally matching args and group).
         *
         * Any recurring actions with a matching hook should also be cancelled, not just the next scheduled action.
         *
         * @param string $hook  The hook that the job will trigger.
         * @param array  $args  Args that would have been passed to the job.
         * @param string $group The group the job is assigned to. Defaults to 'automatewoo'.
         *
         * @return string|null The scheduled action ID if a scheduled action was found, or null if no matching action found.
         */
        public function cancel(string $hook, $args = [], $group = 'automatewoo')
        {
        }
        /**
         * Enqueue shutdown actions if there are any.
         *
         * @since 5.5.5
         */
        public function enqueue_shutdown_actions()
        {
        }
    }
    /**
     * Class AsyncActionRunner
     *
     * @since 5.2.0
     */
    class AsyncActionRunner
    {
        /**
         * Whether the shutdown hook has been attached.
         *
         * @var bool
         */
        protected $has_attached_shutdown_hook = false;
        /**
         * @var QueueRunnerAsyncRequest
         */
        protected $async_request;
        /**
         * @var ActionScheduler_Lock
         */
        protected $locker;
        /**
         * AsyncActionRunner constructor.
         *
         * @param QueueRunnerAsyncRequest $async_request
         * @param ActionScheduler_Lock    $locker
         */
        public function __construct(\ActionScheduler_AsyncRequest_QueueRunner $async_request, \ActionScheduler_Lock $locker)
        {
        }
        /**
         * Attach async runner shutdown hook before ActionScheduler shutdown hook.
         *
         * The shutdown hook should only be attached if an async event has been created in the current request.
         * The hook is only attached if it hasn't already been attached.
         *
         * @see ActionScheduler_QueueRunner::hook_dispatch_async_request
         */
        public function attach_shutdown_hook()
        {
        }
        /**
         * Dispatches an async queue runner request if various conditions are met.
         *
         * Note: This is a temporary solution. In the future (probably ActionScheduler 3.2) we should use the filter
         * added in https://github.com/woocommerce/action-scheduler/pull/628.
         */
        public function maybe_dispatch_async_request()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Frontend_Endpoints
     * @since 2.8.6
     */
    class Frontend_Endpoints
    {
        static function handle()
        {
        }
        /**
         * Redirect legacy unsubscribe links to the communication page
         */
        static function catch_legacy_unsubscribe_url()
        {
        }
        static function restore_cart()
        {
        }
        /**
         * @see \WC_Form_Handler::order_again()
         */
        static function reorder()
        {
        }
        /**
         * Redirect to a new URL while preserving the current URL args.
         *
         * Preserves args such as 'utm_source' or 'apply_coupon'.
         *
         * @since 4.8.0
         *
         * @param string $url
         * @param array  $args_to_remove Specify args that should not be preserved.
         */
        public static function redirect_while_preserving_url_args($url, $args_to_remove = [])
        {
        }
    }
    /**
     * @class Customer_Query
     * @since 3.0.0
     */
    class Customer_Query extends \AutomateWoo\Query_Abstract
    {
        /** @var string */
        public $table_id = 'customers';
        protected $model = 'AutomateWoo\\Customer';
        /**
         * @return Customer[]
         */
        function get_results()
        {
        }
    }
    /**
     * @class Tool_Abstract
     * @since 2.4.5
     */
    abstract class Tool_Abstract
    {
        /** @var string - this must directly correspond to the filename */
        public $id;
        /** @var string */
        public $title;
        /** @var string */
        public $description;
        /** @var string */
        public $additional_description;
        /** @var bool */
        public $is_background_processed = false;
        /**
         * @return int
         */
        function get_id()
        {
        }
        /**
         * @param $args
         * @return bool|\WP_Error
         */
        abstract function process($args);
        /**
         * @param $args
         */
        abstract function display_confirmation_screen($args);
        /**
         * @return Fields\Field[]
         */
        function get_form_fields()
        {
        }
        /**
         * @param array $args will be already sanitized
         * @return bool|\WP_Error
         */
        function validate_process($args)
        {
        }
        /**
         * @param array $args
         * @return array
         */
        function sanitize_args($args)
        {
        }
    }
    /**
     * Abstract class for tools that are processed in the background.
     *
     * @since 3.8
     */
    abstract class Tool_Background_Processed_Abstract extends \AutomateWoo\Tool_Abstract
    {
        /** @var bool */
        public $is_background_processed = true;
        function __construct()
        {
        }
        /**
         * Method to handle individual background tasks.
         * $task array will not be sanitized.
         *
         * @param array $task
         * @return void
         */
        public abstract function handle_background_task($task);
        /**
         * Start the ToolRunner background job.
         *
         * @since 5.2.0
         *
         * @param array $tasks
         * @return bool|\WP_Error
         */
        protected function start_background_job(array $tasks)
        {
        }
    }
}
namespace AutomateWoo\Tools {
    /**
     * Tools service class.
     *
     * @since 5.2.0
     */
    class ToolsService
    {
        /**
         * @var Tool_Abstract[] $tools
         */
        protected $tools;
        /**
         * @var OptionsStore
         */
        protected $options_store;
        /**
         * @param OptionsStore $options_store
         */
        public function __construct(\AutomateWoo\OptionsStore $options_store)
        {
        }
        /**
         * Get all tools.
         *
         * @return Tool_Abstract[]
         */
        public function get_tools()
        {
        }
        /**
         * Get a single tool.
         *
         * @param string $id
         *
         * @return Tool_Abstract|false
         */
        public function get_tool(string $id)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Tool_Optout_Importer
     * @since 3.9
     */
    class Tool_Optout_Importer extends \AutomateWoo\Tool_Background_Processed_Abstract
    {
        public $id = 'optout_importer';
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_form_fields()
        {
        }
        /**
         * Parse emails but don't actually check if they are valid
         *
         * @param $emails
         * @return array
         */
        function parse_emails($emails)
        {
        }
        /**
         * @param array $args sanitized
         * @return bool|\WP_Error
         */
        function validate_process($args)
        {
        }
        /**
         * @param $args
         * @return bool|\WP_Error
         */
        function process($args)
        {
        }
        /**
         * @param $args
         */
        function display_confirmation_screen($args)
        {
        }
        function display_data_preview($items)
        {
        }
        /**
         * @param array $args
         * @return array
         */
        function sanitize_args($args)
        {
        }
        /**
         * @param array $task
         */
        function handle_background_task($task)
        {
        }
    }
    /**
     * @class Tool_Optin_Importer
     * @since 3.9
     */
    class Tool_Optin_Importer extends \AutomateWoo\Tool_Optout_Importer
    {
        public $id = 'optin_importer';
        function __construct()
        {
        }
        /**
         * @param $args
         */
        function display_confirmation_screen($args)
        {
        }
        /**
         * @param array $task
         */
        function handle_background_task($task)
        {
        }
    }
    /**
     * @class Tool_Reset_Workflow_Records
     */
    class Tool_Reset_Workflow_Records extends \AutomateWoo\Tool_Abstract
    {
        public $id = 'reset_workflow_records';
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         *
         */
        function get_form_fields()
        {
        }
        /**
         * @param array $args sanitized
         * @return bool|\WP_Error
         */
        function validate_process($args)
        {
        }
        /**
         * Do validation in the validate_process() method not here
         *
         * @param $args
         */
        function display_confirmation_screen($args)
        {
        }
        /**
         * @param $args
         * @return bool|\WP_Error
         */
        function process($args)
        {
        }
    }
    /**
     * @class Guest_Eraser
     * @since 4.0
     */
    class Guest_Eraser extends \AutomateWoo\Tool_Background_Processed_Abstract
    {
        public $id = 'guest_eraser';
        function __construct()
        {
        }
        /**
         * @return array
         */
        function get_form_fields()
        {
        }
        /**
         * @param array $args
         * @return bool|\WP_Error
         */
        function process($args)
        {
        }
        /**
         * Do validation in the validate_process() method not here
         *
         * @param $args
         */
        function display_confirmation_screen($args)
        {
        }
        /**
         * @param array $task
         */
        function handle_background_task($task)
        {
        }
    }
    /**
     * @class Customer_Factory
     * @since 3.0.0
     */
    class Customer_Factory extends \AutomateWoo\Factory
    {
        static $model = 'AutomateWoo\\Customer';
        /**
         * @param int $customer_id
         * @return Customer|bool
         */
        static function get($customer_id)
        {
        }
        /**
         * @param int $user_id
         * @param bool $create - create the customer record if it doesn't exist
         * @return Customer|bool
         */
        static function get_by_user_id($user_id, $create = true)
        {
        }
        /**
         * @param int $guest_id
         * @param bool $create - create the customer record if it doesn't exist
         * @return Customer|bool
         */
        static function get_by_guest_id($guest_id, $create = true)
        {
        }
        /**
         * @param string $email
         * @param bool $create - create the customer record if it doesn't exist
         * @return Customer|bool
         */
        static function get_by_email($email, $create = true)
        {
        }
        /**
         * @param int $key
         * @return Customer|bool
         */
        static function get_by_key($key)
        {
        }
        /**
         * @param \WP_User|Order_Guest $user
         * @param bool $create
         * @return Customer|bool
         */
        static function get_by_user_data_item($user, $create = true)
        {
        }
        /**
         * @param \WC_Order $order
         * @param bool $create
         * @return Customer|bool
         */
        static function get_by_order($order, $create = true)
        {
        }
        /**
         * @param Review $review
         * @param bool $create
         * @return Customer|bool
         */
        static function get_by_review($review, $create = true)
        {
        }
        /**
         * @param int $user_id
         * @return Customer|bool
         */
        static function create_from_user($user_id)
        {
        }
        /**
         * @param int $guest_id
         * @return Customer|bool
         */
        static function create_from_guest($guest_id)
        {
        }
        /**
         * @return string
         */
        static function generate_unique_customer_key()
        {
        }
        /**
         * @param Customer $customer
         */
        static function update_cache($customer)
        {
        }
        /**
         * @param Customer $customer
         */
        static function clean_cache($customer)
        {
        }
    }
}
namespace AutomateWoo\Carts {
    /**
     * Class CartRestorer
     *
     * Restores a saved cart to the current session.
     *
     * @since 5.4.0
     */
    class CartRestorer
    {
        /**
         * @var Cart
         */
        protected $stored_cart;
        /**
         * @var WC_Cart
         */
        protected $current_cart;
        /**
         * @var WC_Session
         */
        protected $current_session;
        /**
         * The key of the cart item that is currently being restored.
         *
         * @var string
         */
        protected $current_cart_item_key;
        /**
         * CartRestorer constructor.
         *
         * @param Cart       $stored_cart The stored cart to be restored.
         * @param WC_Cart    $current_cart
         * @param WC_Session $current_session
         */
        public function __construct(\AutomateWoo\Cart $stored_cart, \WC_Cart $current_cart, \WC_Session $current_session)
        {
        }
        /**
         * Restore the stored cart items and coupons to the current session cart.
         *
         * @return bool True if the cart was restored, false on failure.
         */
        public function restore() : bool
        {
        }
        /**
         * Restore cart items.
         */
        protected function restore_items()
        {
        }
        /**
         * Restore stored cart coupons to current cart.
         */
        protected function restore_coupons()
        {
        }
        /**
         * Filter the cart item key to preserve the key of the item that was just restored.
         *
         * @param string $cart_id
         *
         * @return string
         */
        public function filter_cart_key_to_force_new_key_to_match_stored_key(string $cart_id) : string
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Variables
     * @since 2.4.6
     */
    class Variables
    {
        use \AutomateWoo\Registry\ItemConstructorArgsTrait;
        /** @var array */
        private static $loaded_variables = [];
        /** @var array */
        private static $variables_list;
        /** @var array */
        private static $included_variables = ['customer' => ['email' => \AutomateWoo\Variable_Customer_Email::class, 'first_name' => \AutomateWoo\Variable_Customer_First_Name::class, 'last_name' => \AutomateWoo\Variable_Customer_Last_Name::class, 'full_name' => \AutomateWoo\Variable_Customer_Full_Name::class, 'order_count' => \AutomateWoo\Variable_Customer_Order_Count::class, 'total_spent' => \AutomateWoo\Variable_Customer_Total_Spent::class, 'address_line_1' => \AutomateWoo\Variable_Customer_Address_Line_1::class, 'address_line_2' => \AutomateWoo\Variable_Customer_Address_Line_2::class, 'country' => \AutomateWoo\Variable_Customer_Country::class, 'state' => \AutomateWoo\Variable_Customer_State::class, 'city' => \AutomateWoo\Variable_Customer_City::class, 'postcode' => \AutomateWoo\Variable_Customer_Postcode::class, 'phone' => \AutomateWoo\Variable_Customer_Phone::class, 'company' => \AutomateWoo\Variable_Customer_Company::class, 'generate_coupon' => \AutomateWoo\Variable_Customer_Generate_Coupon::class, 'meta' => \AutomateWoo\Variable_Customer_Meta::class, 'user_id' => \AutomateWoo\Variable_Customer_User_ID::class, 'username' => \AutomateWoo\Variable_Customer_Username::class, 'tags' => \AutomateWoo\Variable_Customer_Tags::class, 'unsubscribe_url' => \AutomateWoo\Variable_Customer_Unsubscribe_URL::class], 'user' => [], 'order' => ['id' => \AutomateWoo\Variable_Order_ID::class, 'number' => \AutomateWoo\Variable_Order_Number::class, 'status' => \AutomateWoo\Variable_Order_Status::class, 'date' => \AutomateWoo\Variable_Order_Date::class, 'date_paid' => \AutomateWoo\Variables\Order_Date_Paid::class, 'date_completed' => \AutomateWoo\Variables\Order_Date_Completed::class, 'subtotal' => \AutomateWoo\Variable_Order_Subtotal::class, 'total' => \AutomateWoo\Variable_Order_Total::class, 'itemscount' => \AutomateWoo\Variable_Order_Itemscount::class, 'items' => \AutomateWoo\Variable_Order_Items::class, 'cross_sells' => \AutomateWoo\Variable_Order_Cross_Sells::class, 'related_products' => \AutomateWoo\Variable_Order_Related_Products::class, 'billing_phone' => \AutomateWoo\Variable_Order_Billing_Phone::class, 'billing_address' => \AutomateWoo\Variable_Order_Billing_Address::class, 'shipping_address' => \AutomateWoo\Variable_Order_Shipping_Address::class, 'view_url' => \AutomateWoo\Variable_Order_View_Url::class, 'payment_url' => \AutomateWoo\Variable_Order_Payment_Url::class, 'reorder_url' => \AutomateWoo\Variable_Order_Reorder_Url::class, 'shipping_method' => \AutomateWoo\Variable_Order_Shipping_Method::class, 'payment_method' => \AutomateWoo\Variable_Order_Payment_Method::class, 'customer_note' => \AutomateWoo\Variable_Order_Customer_Note::class, 'customer_details' => \AutomateWoo\Variable_Order_Customer_Details::class, 'shipping_first_name' => \AutomateWoo\Variable_Order_Shipping_First_Name::class, 'shipping_last_name' => \AutomateWoo\Variable_Order_Shipping_Last_Name::class, 'shipping_address_line_1' => \AutomateWoo\Variable_Order_Shipping_Address_Line_1::class, 'shipping_address_line_2' => \AutomateWoo\Variable_Order_Shipping_Address_Line_2::class, 'shipping_city' => \AutomateWoo\Variable_Order_Shipping_City::class, 'shipping_country' => \AutomateWoo\Variable_Order_Shipping_Country::class, 'shipping_state' => \AutomateWoo\Variable_Order_Shipping_State::class, 'shipping_postcode' => \AutomateWoo\Variable_Order_Shipping_Postcode::class, 'shipping_company_name' => \AutomateWoo\Variable_Order_Shipping_Company_Name::class, 'meta' => \AutomateWoo\Variable_Order_Meta::class, 'meta_date' => \AutomateWoo\Variable_Order_Meta_Date::class, 'admin_url' => \AutomateWoo\Variable_Order_Admin_Url::class], 'refund' => ['amount' => \AutomateWoo\Variable_Refund_Amount::class, 'reason' => \AutomateWoo\Variable_Refund_Reason::class], 'order_item' => ['attribute' => \AutomateWoo\Variable_Order_Item_Attribute::class, 'meta' => \AutomateWoo\Variable_Order_Item_Meta::class, 'quantity' => \AutomateWoo\Variable_Order_Item_Quantity::class], 'order_note' => ['content' => \AutomateWoo\Variable_Order_Note_Content::class], 'guest' => ['email' => \AutomateWoo\Variable_Guest_Email::class, 'generate_coupon' => \AutomateWoo\Variable_Guest_Generate_Coupon::class, 'first_name' => \AutomateWoo\Variable_Guest_First_Name::class, 'last_name' => \AutomateWoo\Variable_Guest_Last_Name::class], 'review' => ['content' => \AutomateWoo\Variable_Review_Content::class, 'rating' => \AutomateWoo\Variable_Review_Rating::class], 'comment' => ['id' => \AutomateWoo\Variable_Comment_ID::class, 'author_name' => \AutomateWoo\Variables\CommentAuthorName::class, 'author_ip' => \AutomateWoo\Variable_Comment_Author_IP::class, 'content' => \AutomateWoo\Variable_Comment_Content::class], 'booking' => ['id' => \AutomateWoo\Variables\BookingId::class, 'cost' => \AutomateWoo\Variables\BookingCost::class, 'resource' => \AutomateWoo\Variables\BookingResource::class, 'status' => \AutomateWoo\Variables\BookingStatus::class, 'persons' => \AutomateWoo\Variables\BookingPersons::class, 'start_date' => \AutomateWoo\Variables\BookingStartDate::class, 'start_time' => \AutomateWoo\Variables\BookingStartTime::class, 'end_date' => \AutomateWoo\Variables\BookingEndDate::class, 'end_time' => \AutomateWoo\Variables\BookingEndTime::class], 'product' => ['id' => \AutomateWoo\Variable_Product_ID::class, 'title' => \AutomateWoo\Variable_Product_Title::class, 'current_price' => \AutomateWoo\Variable_Product_Current_Price::class, 'regular_price' => \AutomateWoo\Variable_Product_Regular_Price::class, 'featured_image' => \AutomateWoo\Variable_Product_Featured_Image::class, 'permalink' => \AutomateWoo\Variable_Product_Permalink::class, 'add_to_cart_url' => \AutomateWoo\Variable_Product_Add_To_Cart_Url::class, 'sku' => \AutomateWoo\Variable_Product_Sku::class, 'parent_sku' => \AutomateWoo\Variable_Product_Parent_Sku::class, 'short_description' => \AutomateWoo\Variable_Product_Short_Description::class, 'description' => \AutomateWoo\Variable_Product_Description::class, 'meta' => \AutomateWoo\Variable_Product_Meta::class, 'meta_date' => \AutomateWoo\Variable_Product_Meta_Date::class], 'category' => ['id' => \AutomateWoo\Variable_Category_ID::class, 'title' => \AutomateWoo\Variable_Category_Title::class, 'permalink' => \AutomateWoo\Variable_Category_Permalink::class], 'wishlist' => ['items' => \AutomateWoo\Variable_Wishlist_Items::class, 'view_link' => \AutomateWoo\Variable_Wishlist_View_Link::class, 'itemscount' => \AutomateWoo\Variable_Wishlist_Itemscount::class], 'cart' => ['id' => \AutomateWoo\Variables\CartId::class, 'link' => \AutomateWoo\Variable_Cart_Link::class, 'items' => \AutomateWoo\Variable_Cart_Items::class, 'item_count' => \AutomateWoo\Variable_Cart_Item_Count::class, 'total' => \AutomateWoo\Variable_Cart_Total::class], 'subscription' => ['id' => \AutomateWoo\Variable_Subscription_ID::class, 'status' => \AutomateWoo\Variable_Subscription_Status::class, 'payment_method' => \AutomateWoo\Variable_Subscription_Payment_Method::class, 'payment_count' => \AutomateWoo\Variables\Subscription_Payment_Count::class, 'total' => \AutomateWoo\Variable_Subscription_Total::class, 'view_order_url' => \AutomateWoo\Variable_Subscription_View_Order_Url::class, 'start_date' => \AutomateWoo\Variable_Subscription_Start_Date::class, 'next_payment_date' => \AutomateWoo\Variable_Subscription_Next_Payment_Date::class, 'trial_end_date' => \AutomateWoo\Variable_Subscription_Trial_End_Date::class, 'end_date' => \AutomateWoo\Variable_Subscription_End_Date::class, 'last_payment_date' => \AutomateWoo\Variable_Subscription_Last_Payment_Date::class, 'items' => \AutomateWoo\Variable_Subscription_Items::class, 'billing_address' => \AutomateWoo\Variable_Subscription_Billing_Address::class, 'shipping_address' => \AutomateWoo\Variable_Subscription_Shipping_Address::class, 'meta' => \AutomateWoo\Variable_Subscription_Meta::class, 'admin_url' => \AutomateWoo\Variable_Subscription_Admin_Url::class], 'subscription_item' => ['attribute' => \AutomateWoo\Variables\Subscription_Item_Attribute::class, 'meta' => \AutomateWoo\Variables\Subscription_Item_Meta::class, 'quantity' => \AutomateWoo\Variables\Subscription_Item_Quantity::class], 'membership' => ['id' => \AutomateWoo\Variable_Membership_ID::class, 'plan_id' => \AutomateWoo\Variable_Membership_Plan_ID::class, 'plan_name' => \AutomateWoo\Variable_Membership_Plan_Name::class, 'status' => \AutomateWoo\Variable_Membership_Status::class, 'date_started' => \AutomateWoo\Variable_Membership_Date_Started::class, 'date_expires' => \AutomateWoo\Variable_Membership_Date_Expires::class, 'renewal_url' => \AutomateWoo\Variable_Membership_Renewal_URL::class, 'meta' => \AutomateWoo\Variable_Membership_Meta::class], 'card' => ['type' => \AutomateWoo\Variable_Card_Type::class, 'expiry_month' => \AutomateWoo\Variable_Card_Expiry_Month::class, 'expiry_year' => \AutomateWoo\Variable_Card_Expiry_Year::class, 'last_four' => \AutomateWoo\Variable_Card_Last4::class], 'shop' => ['title' => \AutomateWoo\Variable_Shop_Title::class, 'tagline' => \AutomateWoo\Variable_Shop_Tagline::class, 'url' => \AutomateWoo\Variable_Shop_Url::class, 'admin_email' => \AutomateWoo\Variable_Shop_Admin_Email::class, 'current_datetime' => \AutomateWoo\Variable_Shop_Current_Datetime::class, 'products' => \AutomateWoo\Variable_Shop_Products::class, 'shop_url' => \AutomateWoo\Variables\Shop\ShopUrl::class], 'download' => ['file_name' => \AutomateWoo\Variable_Download_File_Name::class, 'url' => \AutomateWoo\Variable_Download_URL::class]];
        /**
         * @return array
         */
        static function get_list()
        {
        }
        /**
         * Gets the classname for a variable but could also return a file.
         *
         * Files were used in the past. Started using class names in 5.0.0.
         *
         * @param string $data_type
         * @param string $data_field
         * @return false|string
         */
        protected static function get_variable_classname_or_file($data_type, $data_field)
        {
        }
        /**
         * @param $variable_name string
         * @return Variable|false
         */
        static function get_variable($variable_name)
        {
        }
    }
    /**
     * @class Review
     * @since 3.0.0
     */
    class Review
    {
        /** @var int */
        private $comment_id = 0;
        /** @var int  */
        private $user_id = 0;
        /** @var string */
        private $email;
        /** @var int  */
        private $product_id = 0;
        /** @var \WP_Comment */
        private $comment;
        /** @var string */
        private $comment_status;
        /** @var bool */
        public $exists = false;
        /**
         * @param \WP_Comment|int $comment
         */
        public function __construct($comment)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_product_id()
        {
        }
        /**
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * @return int
         */
        public function get_email()
        {
        }
        /**
         * @return string
         */
        public function get_content()
        {
        }
        /**
         * @return int
         */
        function get_rating()
        {
        }
        /**
         * Get the customer who made the review.
         *
         * @since 4.5
         *
         * @return Customer|bool
         */
        public function get_customer()
        {
        }
        /**
         * @return string
         */
        public function get_comment_status()
        {
        }
        /**
         * @return boolean
         */
        public function is_approved()
        {
        }
    }
    /**
     * Addon class.
     *
     * This class must remain named as 'includes/abstracts/addon.php' because it's what AW add-ons expect.
     */
    abstract class Addon
    {
        /** @var Addon - must declare in child */
        protected static $_instance;
        /** @var string */
        public $id;
        /** @var string */
        public $name;
        /** @var string */
        public $version;
        /** @var string */
        public $plugin_basename;
        /** @var string */
        public $plugin_path;
        /** @var string */
        public $file;
        /** @var string */
        public $min_php_version;
        /** @var string */
        public $min_automatewoo_version;
        /** @var string */
        public $min_woocommerce_version;
        /** @var array */
        public $db_updates = [];
        /**
         * Method to init the add on
         */
        abstract function init();
        /**
         * Required method to return options class
         * @return Options_API
         */
        abstract function options();
        /**
         * Optional installer method
         */
        function install()
        {
        }
        /**
         * Constructor for add-on
         * @param Plugin_Data|object $plugin_data
         */
        function __construct($plugin_data)
        {
        }
        /**
         * @param string $end
         * @return string
         */
        function url($end = '')
        {
        }
        /**
         * @param string $end
         * @return string
         */
        function path($end = '')
        {
        }
        /**
         * Check the version stored in the database and determine if an upgrade needs to occur
         */
        function check_version()
        {
        }
        /**
         * @return bool
         */
        function is_database_upgrade_available()
        {
        }
        /**
         * Handle updates
         */
        function do_database_update()
        {
        }
        /**
         * Update version to current
         */
        function update_database_version()
        {
        }
        /**
         * Renders prompt notice for user to update
         */
        function data_upgrade_prompt()
        {
        }
        /**
         * Registers the add-on.
         *
         * @since 4.6.0
         */
        public function register()
        {
        }
        /**
         * Runs when the add-on plugin is activated.
         */
        function activate()
        {
        }
        /**
         * @return string
         */
        function get_getting_started_url()
        {
        }
        /**
         * @param Plugin_Data|mixed $data
         * @return Addon|mixed
         */
        static function instance($data)
        {
        }
    }
    /**
     * @class Plugin_Data
     */
    class Plugin_Data
    {
        public $id;
        public $name;
        public $version;
        public $file;
        public $min_php_version;
        public $min_automatewoo_version;
        public $min_woocommerce_version;
    }
    /**
     * Class Subscription_Workflow_Helper
     *
     * @since 4.5
     *
     * @package AutomateWoo
     */
    class Subscription_Workflow_Helper
    {
        /**
         * Get the subscription group name.
         *
         * @return string
         */
        public static function get_group_name()
        {
        }
        /**
         * Get the subscription products field.
         *
         * @return Fields\Product
         */
        public static function get_products_field()
        {
        }
        /**
         * Get the 'active subscriptions only' field.
         *
         * @return Fields\Checkbox
         */
        public static function get_active_subscriptions_only_field()
        {
        }
        /**
         * Validate the subscription products field for a workflow.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public static function validate_products_field($workflow)
        {
        }
        /**
         * Validate the 'active subscriptions only' field.
         *
         * @param Workflow $workflow
         *
         * @return bool
         */
        public static function validate_active_subscriptions_only_field($workflow)
        {
        }
        /**
         * Trigger for subscription.
         *
         * @param Trigger              $trigger
         * @param int|\WC_Subscription $subscription
         */
        public static function trigger_for_subscription($trigger, $subscription)
        {
        }
        /**
         * Trigger for each line item in a subscription.
         *
         * @param Trigger              $trigger
         * @param int|\WC_Subscription $subscription
         */
        public static function trigger_for_each_subscription_line_item($trigger, $subscription)
        {
        }
        /**
         * Trigger for an order only if it's a subscription order.
         *
         * @since 4.8.0
         *
         * @param Trigger       $trigger
         * @param \WC_Order|int $order
         */
        public static function trigger_for_subscription_order($trigger, $order)
        {
        }
        /**
         * Get subscription statuses.
         *
         * Excludes the 'wc-switched' status.
         *
         * @since 4.5.0
         *
         * @return array
         */
        public static function get_subscription_statuses()
        {
        }
        /**
         * Get the order's first related subscription.
         *
         * Orders can technically have multiple subscriptions this method returns only the one.
         *
         * @param \WC_Order    $order
         * @param string|array $order_type
         *
         * @return \WC_Subscription|false
         *
         * @since 4.8.0
         */
        protected static function get_subscription_for_order($order, $order_type = 'any')
        {
        }
        /**
         * Get description for all subscription order triggers.
         *
         * @return string
         *
         * @since 4.8.0
         */
        public static function get_subscription_order_trigger_description()
        {
        }
        /**
         * Get list of subscription order types.
         *
         * @return array
         *
         * @since 4.8.0
         */
        public static function get_subscription_order_types()
        {
        }
        /**
         * Get subscription order types field.
         *
         * @return Fields\Select
         *
         * @since 4.8.0
         */
        public static function get_subscription_order_types_field()
        {
        }
        /**
         * Validate the subscription order types field for a workflow.
         *
         * @param Workflow $workflow
         *
         * @return bool
         *
         * @since 4.8.0
         */
        public static function validate_subscription_order_types_field($workflow)
        {
        }
    }
    /**
     * System check management class
     *
     * @class System_Checks
     */
    class System_Checks
    {
        /** @var array */
        static $system_checks;
        /**
         * @return AbstractSystemCheck[]
         */
        static function get_all()
        {
        }
        /**
         * Maybe background check for high priority issues
         */
        static function maybe_schedule_check()
        {
        }
        static function run_system_check()
        {
        }
        static function maybe_display_notices()
        {
        }
    }
    /**
     * @class Queued_Event
     *
     * @property array $data_items (legacy)
     */
    class Queued_Event extends \AutomateWoo\Abstract_Model_With_Meta_Table
    {
        /** @var string */
        public $table_id = 'queue';
        /** @var string  */
        public $object_type = 'queue';
        /** @var bool|array */
        private $uncompressed_data_layer;
        // error messages
        const F_WORKFLOW_INACTIVE = 100;
        const F_MISSING_DATA = 101;
        const F_FATAL_ERROR = 102;
        /**
         * Returns the ID of the model's meta table.
         *
         * @return string
         */
        public function get_meta_table_id()
        {
        }
        /**
         * @param bool|int $id
         */
        function __construct($id = false)
        {
        }
        /**
         * Set workflow ID prop.
         *
         * @param int $id
         *
         * @return $this
         */
        public function set_workflow_id($id)
        {
        }
        /**
         * @return int
         */
        function get_workflow_id()
        {
        }
        /**
         * Set failed prop.
         *
         * @param bool $failed
         *
         * @return $this
         */
        function set_failed($failed = true)
        {
        }
        /**
         * @return bool
         */
        function is_failed()
        {
        }
        /**
         * @param int $failure_code
         *
         * @return $this
         */
        function set_failure_code($failure_code)
        {
        }
        /**
         * @return int
         */
        function get_failure_code()
        {
        }
        /**
         * @param DateTime $date
         *
         * @return $this
         */
        function set_date_created($date)
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_created()
        {
        }
        /**
         * @param DateTime $date
         *
         * @return $this
         */
        function set_date_due($date)
        {
        }
        /**
         * @return bool|DateTime
         */
        function get_date_due()
        {
        }
        /**
         * @param Data_Layer $data_layer
         */
        function store_data_layer($data_layer)
        {
        }
        /**
         * @param $data_type_id
         * @param $data_item
         */
        private function store_data_item($data_type_id, $data_item)
        {
        }
        /**
         * @return Data_Layer
         */
        function get_data_layer()
        {
        }
        /**
         * Fetches the data layer from queue meta, but does not decompress
         * Uses the the supplied_data_items field on the workflows trigger
         *
         * @return array|false
         */
        function get_compressed_data_layer()
        {
        }
        /**
         * @param $data_type_id
         * @param array $supplied_data_items
         * @return string|false
         */
        private function get_compressed_data_item($data_type_id, $supplied_data_items)
        {
        }
        /**
         * Returns the workflow without a data layer
         * @return Workflow|false
         */
        function get_workflow()
        {
        }
        /**
         * @return bool
         */
        function run()
        {
        }
        /**
         * Returns false if no failure occurred
         * @param Workflow $workflow
         * @return bool|int
         */
        function do_failure_check($workflow)
        {
        }
        /**
         * Validate the workflow before running it from the queue.
         * This validation is different from the initial trigger validation.
         *
         * @param $workflow Workflow
         * @return bool
         */
        function validate_workflow($workflow)
        {
        }
        function clear_cached_data()
        {
        }
        function save()
        {
        }
        function delete()
        {
        }
        /**
         * @param int $code
         */
        function mark_as_failed($code)
        {
        }
        /**
         * @return string
         */
        function get_failure_message()
        {
        }
        /**
         * Just for unit tests
         */
        function clear_in_memory_data_layer()
        {
        }
        /**
         * @deprecated use set_date_due()
         * @param $date DateTime
         */
        function set_date($date)
        {
        }
    }
    /**
     * Logs management class.
     *
     * @since 3.8
     */
    class Logs
    {
        /**
         * Returns the meta key that a data item is mapped to in log meta.
         *
         * @param $data_type_id string
         * @return bool|string
         */
        static function get_data_layer_storage_key($data_type_id)
        {
        }
        /**
         * @param $data_type_id
         * @param $data_item : must be validated
         * @return mixed
         */
        static function get_data_layer_storage_value($data_type_id, $data_item)
        {
        }
    }
    /**
     * Class Frontend_Form_Handler
     * @since 3.9
     */
    class Frontend_Form_Handler
    {
        /** @var string */
        public static $current_action = '';
        private static $actions = ['automatewoo_save_communication_preferences', 'automatewoo_save_communication_signup'];
        /**
         * Handle frontend form post
         */
        static function handle()
        {
        }
        static function save_communication_preferences()
        {
        }
        static function save_communication_signup()
        {
        }
        /**
         * @param Customer $customer
         */
        protected static function update_customer_preferences($customer)
        {
        }
    }
}
namespace AutomateWoo\RuleQuickFilters {
    /**
     * Class QueryLoader.
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters
     */
    final class QueryLoader
    {
        /**
         * Load a quick filter query instance.
         *
         * @param array  $rule_data Rule data from a workflow.
         * @param string $data_type The data type to query for.
         *
         * @return QueryInterface
         *
         * @throws Exception When quick filter can't be loaded.
         */
        public static function load($rule_data, $data_type)
        {
        }
    }
}
namespace AutomateWoo\RuleQuickFilters\Clauses {
    /**
     * Class ClauseInterface
     *
     * @since 5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    interface ClauseInterface
    {
        /**
         * Get the clause property.
         *
         * @return string
         */
        public function get_property();
        /**
         * Get the clause operator.
         *
         * @return string
         */
        public function get_operator();
        /**
         * Get the clause value.
         *
         * @return mixed
         */
        public function get_value();
    }
    /**
     * Class Clause
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    abstract class AbstractClause implements \AutomateWoo\RuleQuickFilters\Clauses\ClauseInterface
    {
        /**
         * The clause property.
         *
         * @var string
         */
        protected $property;
        /**
         * The clause operator.
         *
         * @var string
         */
        protected $operator;
        /**
         * The clause value.
         *
         * @var mixed
         */
        protected $value;
        /**
         * Validates the clause value.
         *
         * @param mixed $value
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        protected abstract function validate_value($value);
        /**
         * Clause constructor.
         *
         * @param string $property The property to filter against.
         * @param string $operator Should be a valid database WHERE operator.
         * @param mixed  $value    The quick filter clause value.
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        public function __construct($property, $operator, $value)
        {
        }
        /**
         * Get the clause property.
         *
         * @return string
         */
        public function get_property()
        {
        }
        /**
         * Get the clause operator.
         *
         * @return string
         */
        public function get_operator()
        {
        }
        /**
         * Get the clause value.
         *
         * @return mixed
         */
        public function get_value()
        {
        }
    }
    /**
     * Class SetClause
     *
     * Use to check whether a field is set or not set.
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    class SetClause extends \AutomateWoo\RuleQuickFilters\Clauses\AbstractClause
    {
        /**
         * SetClause constructor.
         *
         * @param string $property The property to filter against.
         * @param string $operator 'SET' or 'NOT SET'
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        public function __construct($property, $operator)
        {
        }
        /**
         * Validates the clause value.
         *
         * @param null $value
         */
        protected function validate_value($value)
        {
        }
    }
    /**
     * Class NumericClause
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    class NumericClause extends \AutomateWoo\RuleQuickFilters\Clauses\AbstractClause
    {
        /**
         * NumericClause constructor.
         *
         * @param string    $property The property to filter against.
         * @param string    $operator Should be a valid database WHERE operator.
         * @param float|int $value    The quick filter clause value.
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        public function __construct($property, $operator, $value)
        {
        }
        /**
         * Validates the clause value.
         *
         * @param float|int $value
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        protected function validate_value($value)
        {
        }
    }
    /**
     * Class NoOpClause
     *
     * Designates a clause that can't be quick filtered.
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    class NoOpClause implements \AutomateWoo\RuleQuickFilters\Clauses\ClauseInterface
    {
        /**
         * Get the clause property.
         *
         * @return null
         */
        public function get_property()
        {
        }
        /**
         * Get the clause operator.
         *
         * @return null
         */
        public function get_operator()
        {
        }
        /**
         * Get the clause value.
         *
         * @return null
         */
        public function get_value()
        {
        }
    }
    /**
     * Class StringClause
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    class StringClause extends \AutomateWoo\RuleQuickFilters\Clauses\AbstractClause
    {
        /**
         * StringClause constructor.
         *
         * @param string $property The property to filter against.
         * @param string $operator Should be a valid database WHERE operator.
         * @param string $value    The quick filter clause value.
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        public function __construct($property, $operator, $value)
        {
        }
        /**
         * Validates the clause value.
         *
         * @param string $value
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        protected function validate_value($value)
        {
        }
    }
    /**
     * Class ArrayClause
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    class ArrayClause extends \AutomateWoo\RuleQuickFilters\Clauses\AbstractClause
    {
        /**
         * ArrayClause constructor.
         *
         * @param string $property The property to filter against.
         * @param string $operator Should be a valid database WHERE operator.
         * @param array  $value    The quick filter clause value.
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        public function __construct($property, $operator, $value)
        {
        }
        /**
         * Validates the clause value.
         *
         * @param mixed $value
         *
         * @throws InvalidArgumentException When the value is invalid.
         */
        protected function validate_value($value)
        {
        }
    }
    /**
     * Class DateTimeClause
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Clauses
     */
    class DateTimeClause extends \AutomateWoo\RuleQuickFilters\Clauses\AbstractClause
    {
        /**
         * The clause value.
         *
         * @var DateTime[]|DateTime
         */
        protected $value;
        /**
         * DateTimeClause constructor.
         *
         * @param string              $property The property to filter against.
         * @param string              $operator Should be a valid database WHERE operator.
         * @param DateTime|DateTime[] $value    The quick filter clause value.
         *
         * @throws InvalidArgumentException When a date value is invalid.
         */
        public function __construct($property, $operator, $value)
        {
        }
        /**
         * Validate the date value.
         *
         * @param DateTime|DateTime[] $value
         *
         * @throws InvalidArgumentException If $value is invalid.
         */
        protected function validate_value($value)
        {
        }
        /**
         * Get the clause value in a timestamp format.
         *
         * @return int|array
         */
        public function get_value_as_timestamp()
        {
        }
        /**
         * Get the clause value in a MySQL string format.
         *
         * @return string|array
         */
        public function get_value_as_mysql_string()
        {
        }
    }
}
namespace AutomateWoo\RuleQuickFilters\Queries {
    /**
     * Quick Filter Query Interface
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    interface QueryInterface
    {
        /**
         * Get data type used for quick filtering.
         *
         * This is the manual workflow's primary data type.
         *
         * @return string
         */
        public function get_data_type();
        /**
         * Get filter result object from ID.
         *
         * @param int $id
         *
         * @return object
         */
        public function get_result_object($id);
        /**
         * Get quick filter results by rule group number.
         *
         * We only retrieve one group at a time. Rule groups are numbered from 1.
         *
         * If the workflow has no rules this method can still be used with rule group set to 1.
         * In this case it will return all results matching the data type.
         *
         * @param int    $rule_group
         * @param int    $number
         * @param int    $offset
         * @param string $return Possible values objects, ids
         *
         * @return array
         * @throws Exception When there is an error getting results.
         */
        public function get_results_by_rule_group($rule_group, $number = 10, $offset = 0, $return = 'objects');
        /**
         * Get quick filter results count by rule group number.
         *
         * @param int $rule_group
         *
         * @return int
         * @throws Exception When there is an error counting results.
         */
        public function get_results_count_by_rule_group($rule_group);
        /**
         * Get a count of all 'possible' results for every rule group.
         *
         * We can't get the exact value without comparing the results and removing duplicates, hence the word 'possible'.
         *
         * @return int
         * @throws Exception When there is an error counting results.
         */
        public function get_total_results_count();
        /**
         * Get an array containing 'possible' results by rule group.
         *
         * We can't get the exact value without comparing the results and removing duplicates, hence the word 'possible'.
         *
         * @return array
         * @throws Exception When there is an error counting results.
         */
        public function get_results_counts_for_each_rule_group();
    }
    /**
     * Class AbstractQuery.
     *
     * Quick filter results are a roughly filtered list of items that match a given workflow's rules.
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    abstract class AbstractQuery implements \AutomateWoo\RuleQuickFilters\Queries\QueryInterface
    {
        /**
         * Datastore type to query from.
         *
         * @var DatastoreTypeInterface
         *
         * @since 5.5.23
         */
        protected $datastore;
        /**
         * Quick filter clauses.
         *
         * Clauses are nested by rule group.
         *
         * @var array
         */
        protected $clauses;
        /**
         * Get the datastore type to use for queries.
         *
         * @return DatastoreTypeInterface
         *
         * @since 5.5.23
         */
        protected abstract function get_datastore_type();
        /**
         * AbstractQuery constructor.
         *
         * @param array $clauses An array containing arrays of clauses.
         *                       See \AutomateWoo\RuleQuickFilters\ClauseGenerator::generate().
         */
        public function __construct($clauses)
        {
        }
        /**
         * Get the number of rule groups for the rule data.
         *
         * @return int
         */
        protected function get_rule_group_count()
        {
        }
        /**
         * Get quick filter results by rule group number.
         *
         * We only retrieve one group at a time. Rule groups are numbered from 1.
         *
         * If the workflow has no rules this method can still be used with rule group set to 1.
         * In this case it will return all results matching the data type.
         *
         * @param int    $rule_group
         * @param int    $number
         * @param int    $offset
         * @param string $return Possible values objects, ids
         *
         * @return array
         * @throws Exception When there is an error getting results.
         */
        public function get_results_by_rule_group($rule_group, $number = 10, $offset = 0, $return = 'objects')
        {
        }
        /**
         * Get quick filter results count by rule group number.
         *
         * @param int $rule_group
         *
         * @return int
         * @throws Exception When there is an error counting results.
         */
        public function get_results_count_by_rule_group($rule_group)
        {
        }
        /**
         * Get a count of all 'possible' results for every rule group.
         *
         * We can't get the exact value without comparing the results and removing duplicates, hence the word 'possible'.
         *
         * @return int
         * @throws Exception When there is an error counting results.
         */
        public function get_total_results_count()
        {
        }
        /**
         * Get an array containing 'possible' results by rule group.
         *
         * We can't get the exact value without comparing the results and removing duplicates, hence the word 'possible'.
         *
         * @return array
         * @throws Exception When there is an error getting results.
         */
        public function get_results_counts_for_each_rule_group()
        {
        }
        /**
         * Get the clauses for a rule group.
         *
         * Returns false if rule group is invalid.
         * Returns empty array if there are no filters for the rule group.
         *
         * IMPORTANT - If a rule group has no filters it may still have rules
         * which means all possible results must be returned.
         *
         * @param int $rule_group_number
         *
         * @return array
         * @throws Exception When the rule group number is invalid.
         */
        protected function get_clauses_by_rule_group($rule_group_number)
        {
        }
    }
    /**
     * Class OrderQuery.
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    class OrderQuery extends \AutomateWoo\RuleQuickFilters\Queries\AbstractQuery
    {
        /**
         * Get data type for quick filtering.
         *
         * @return string
         */
        public function get_data_type()
        {
        }
        /**
         * Get filter result object from ID.
         *
         * @param int $id
         *
         * @return WC_Order|false
         */
        public function get_result_object($id)
        {
        }
        /**
         * Get the datastore type to use for queries.
         *
         * @return DatastoreTypeInterface
         *
         * @since 5.5.23
         */
        protected function get_datastore_type()
        {
        }
    }
    /**
     * Quick Filter Datastore Type Interface
     *
     * @since   5.5.23
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    interface DatastoreTypeInterface
    {
        /**
         * Get quick filter results by clauses.
         *
         * @param ClauseInterface[] $clauses A group of clauses.
         * @param int               $number  The number of results to get.
         * @param int               $offset  The query offset.
         *
         * @return array of IDs
         * @throws Exception When there is an error getting results.
         */
        public function get_results_by_clauses($clauses, $number, $offset = 0);
        /**
         * Get quick filter results count by clauses.
         *
         * @param ClauseInterface[] $clauses A group of clauses.
         *
         * @return int
         * @throws Exception When there is an error counting results.
         */
        public function get_results_count_by_clauses($clauses);
    }
    /**
     * Class AbstractPostDatastoreType for custom post types.
     *
     * @since   5.5.23
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    abstract class AbstractPostDatastoreType implements \AutomateWoo\RuleQuickFilters\Queries\DatastoreTypeInterface
    {
        /**
         * Contains custom where clauses to be added to the WP_Query.
         *
         * @var array
         */
        protected $wp_query_custom_where_clauses = [];
        /**
         * Get the WP post type for the data type.
         *
         * @return string
         */
        protected abstract function get_post_type();
        /**
         * Get quick filter results count by clauses.
         *
         * @param ClauseInterface[] $clauses A group of clauses.
         *
         * @return int
         * @throws UnexpectedValueException When there is an error counting results.
         */
        public function get_results_count_by_clauses($clauses)
        {
        }
        /**
         * Get quick filter results by clauses.
         *
         * @param ClauseInterface[] $clauses A group of clauses.
         * @param int               $number  The number of results to get.
         * @param int               $offset  The query offset.
         *
         * @return array of IDs
         * @throws UnexpectedValueException When there is an error getting results.
         */
        public function get_results_by_clauses($clauses, $number, $offset = 0)
        {
        }
        /**
         * Do WP_Query.
         *
         * @param array $query_args
         *
         * @return WP_Query
         */
        protected function do_wp_query($query_args)
        {
        }
        /**
         * Filters WP_Query posts_where adding extra where clauses.
         *
         * @param string $where
         *
         * @return string
         */
        public function filter_posts_where($where)
        {
        }
        /**
         * Get the default args to use with WP_Query.
         *
         * @param int $number
         * @param int $offset
         *
         * @return array
         */
        protected function get_default_wp_query_args($number, $offset = 0)
        {
        }
        /**
         * Map quick filter clauses to WP_Query args.
         *
         * @param ClauseInterface[] $clauses
         * @param int               $number
         * @param int               $offset
         *
         * @return array
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clauses_to_wp_query_args($clauses, $number, $offset = 0)
        {
        }
        /**
         * Map a quick filter clause to WP_Query arg.
         *
         * @param ClauseInterface $clause
         * @param array           $query_args Array of WP_Query args.
         *
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clause_to_wp_query_arg($clause, &$query_args)
        {
        }
        /**
         * Add basic post meta query arg.
         *
         * Can be used for string or array queries.
         *
         * @param array           $args
         * @param string          $meta_key
         * @param ClauseInterface $clause
         */
        protected function add_basic_post_meta_query_arg(&$args, $meta_key, $clause)
        {
        }
        /**
         * Add post meta query arg for datetime field.
         *
         * @param array                    $args
         * @param string                   $meta_key
         * @param DateTimeClause|SetClause $clause
         * @param bool                     $use_timestamps Set true if meta field is store as a timestamp.
         *                                                 False if field is stored as a mysql string.
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_datetime_post_meta_query_arg(&$args, $meta_key, $clause, $use_timestamps = false)
        {
        }
        /**
         * Add the NOT EXISTS condition to SET/NOT SET meta queries in order to include cases
         * where the meta record doesn't exist at all
         *
         * @param string       $meta_key           the meta key for the condition
         * @param string       $operator           SET or NOT SET
         * @param string|array $empty_values values to consider 'empty', for example [ '', 0 ]
         *
         * @return array
         */
        protected function get_setclause_post_meta_query_arg($meta_key, $operator, $empty_values = '')
        {
        }
        /**
         * Add WP query arg for post_date field.
         *
         * Dates will be converted to site time since the post_date column is also in site time.
         *
         * @param array          $args
         * @param DateTimeClause $clause
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_post_date_query_arg(&$args, $clause)
        {
        }
        /**
         * Add WP query condition for the string post data fields.
         *
         * @param string       $column the name of the field in `wp_post` to search
         * @param StringClause $clause
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_post_column_string_query_arg($column, \AutomateWoo\RuleQuickFilters\Clauses\StringClause $clause)
        {
        }
        /**
         * Add integer post meta query arg.
         *
         * @param array           $query_args
         * @param string          $meta_key
         * @param ClauseInterface $clause
         */
        protected function add_integer_post_meta_query_arg(&$query_args, $meta_key, $clause)
        {
        }
        /**
         * Add decimal post meta query arg.
         *
         * @param array           $query_args
         * @param string          $meta_key
         * @param ClauseInterface $clause
         */
        protected function add_decimal_post_meta_query_arg(&$query_args, $meta_key, $clause)
        {
        }
        /**
         * Add a post status query arg.
         *
         * @param array           $query_args
         * @param ClauseInterface $clause
         * @param array           $valid_statuses Array of all valid statuses for the post type.
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_post_status_query_arg(&$query_args, $clause, $valid_statuses)
        {
        }
    }
    /**
     * Class OrderPostDatastoreType.
     *
     * @since   5.5.23
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    class OrderPostDatastoreType extends \AutomateWoo\RuleQuickFilters\Queries\AbstractPostDatastoreType
    {
        /**
         * Get the WP post type for the data type.
         *
         * @return string
         */
        protected function get_post_type()
        {
        }
        /**
         * Map a quick filter clause to WP_Query arg.
         *
         * @param ClauseInterface $clause
         * @param array           $query_args Array of WP_Query args.
         *
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clause_to_wp_query_arg($clause, &$query_args)
        {
        }
        /**
         * Get the default args to use with WP_Query.
         *
         * @param int $number
         * @param int $offset
         *
         * @return array
         */
        protected function get_default_wp_query_args($number, $offset = 0)
        {
        }
    }
    /**
     * Class SubscriptionQuery.
     *
     * @since   5.0.0
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    class SubscriptionQuery extends \AutomateWoo\RuleQuickFilters\Queries\AbstractQuery
    {
        /**
         * Get data type for quick filtering.
         *
         * @return string
         */
        public function get_data_type()
        {
        }
        /**
         * Get filter result object from ID.
         *
         * @param int $id
         *
         * @return WC_Subscription|false
         */
        public function get_result_object($id)
        {
        }
        /**
         * Get the datastore type to use for queries.
         *
         * @return DatastoreTypeInterface
         *
         * @since 5.5.23
         */
        protected function get_datastore_type()
        {
        }
    }
    /**
     * Class OrderHighPerformanceDatastoreType.
     *
     * @since   5.5.23
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    class OrderHighPerformanceDatastoreType implements \AutomateWoo\RuleQuickFilters\Queries\DatastoreTypeInterface
    {
        /**
         * Query arguments
         *
         * @var array
         */
        protected $query_args = [];
        protected const STRING_COMPARISONS = ['CONTAINS', 'NOT_CONTAINS', 'STARTS_WITH', 'ENDS_WITH', 'REGEX', '=', '!='];
        /**
         * Get quick filter results count by clauses.
         *
         * @param ClauseInterface[] $clauses A group of clauses.
         *
         * @return int
         * @throws UnexpectedValueException When there is an error counting results.
         */
        public function get_results_count_by_clauses($clauses)
        {
        }
        /**
         * Get quick filter results by clauses.
         *
         * @param ClauseInterface[] $clauses A group of clauses.
         * @param int               $number  The number of results to get.
         * @param int               $offset  The query offset.
         *
         * @return array of IDs
         * @throws UnexpectedValueException When there is an error getting results.
         */
        public function get_results_by_clauses($clauses, $number, $offset = 0)
        {
        }
        /**
         * Map quick filter clauses to WP_Query args.
         *
         * @param ClauseInterface[] $clauses
         * @param int               $number
         * @param int               $offset
         *
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clauses_to_query_args($clauses, $number, $offset = 0)
        {
        }
        /**
         * Map a quick filter clause to query arg.
         *
         * @param ClauseInterface $clause
         *
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clause_to_query_arg($clause)
        {
        }
        /**
         * Get the default args to use for the query.
         *
         * @param int $number
         * @param int $offset
         *
         * @return array
         */
        protected function get_default_query_args($number, $offset = 0)
        {
        }
        /**
         * Do WC_Order_Query.
         *
         * @return mixed
         */
        protected function do_query()
        {
        }
        /**
         * Add field query arg.
         *
         * Can be used for string or array queries.
         *
         * @param string          $field
         * @param ClauseInterface $clause
         */
        protected function add_field_query_arg($field, $clause)
        {
        }
        /**
         * Add string field query arg.
         *
         * @param string       $field
         * @param StringClause $clause
         *
         * @throws UnexpectedValueException When not using a string comparison.
         */
        protected function add_string_field_query_arg($field, \AutomateWoo\RuleQuickFilters\Clauses\StringClause $clause)
        {
        }
        /**
         * Add decimal field query arg.
         *
         * @param string          $field
         * @param ClauseInterface $clause
         */
        protected function add_decimal_field_query_arg($field, $clause)
        {
        }
        /**
         * Add integer field query arg.
         *
         * @param string          $field
         * @param ClauseInterface $clause
         */
        protected function add_integer_field_query_arg($field, $clause)
        {
        }
        /**
         * Add status query arg.
         *
         * @param ClauseInterface $clause
         * @param array           $valid_statuses Array of all valid statuses.
         *
         * @throws UnexpectedValueException When not using a string comparison.
         */
        protected function add_status_query_arg($clause, $valid_statuses)
        {
        }
        /**
         * Add basic meta query arg.
         *
         * Can be used for string or array queries.
         *
         * @param string          $meta_key
         * @param ClauseInterface $clause
         */
        protected function add_meta_query_arg($meta_key, $clause)
        {
        }
        /**
         * Add the NOT EXISTS condition to SET/NOT SET meta queries in order to include cases
         * where the meta record doesn't exist at all
         *
         * @param string       $meta_key           the meta key for the condition
         * @param string       $operator           SET or NOT SET
         * @param string|array $empty_values values to consider 'empty', for example [ '', 0 ]
         *
         * @return array
         */
        protected function get_setclause_meta_query_arg($meta_key, $operator, $empty_values = '')
        {
        }
        /**
         * Add query arg for date field.
         *
         * Dates will be converted to site time since the date column is also in site time.
         *
         * @param string         $field
         * @param DateTimeClause $clause
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_date_query_arg($field, $clause)
        {
        }
        /**
         * Add set/not set query arg for date field.
         *
         * @param string    $field
         * @param SetClause $clause
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_set_date_query_arg($field, $clause)
        {
        }
        /**
         * Add decimal meta query arg.
         *
         * @param string          $meta_key
         * @param ClauseInterface $clause
         */
        protected function add_decimal_meta_query_arg($meta_key, $clause)
        {
        }
    }
    /**
     * Class SubscriptionHighPerformanceDatastoreType.
     *
     * @since   5.6.4
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    class SubscriptionHighPerformanceDatastoreType extends \AutomateWoo\RuleQuickFilters\Queries\OrderHighPerformanceDatastoreType
    {
        /**
         * Map a quick filter clause to query arg.
         *
         * @param ClauseInterface $clause
         *
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clause_to_query_arg($clause)
        {
        }
        /**
         * Get the default args to use for the query.
         *
         * @param int $number
         * @param int $offset
         *
         * @return array
         */
        protected function get_default_query_args($number, $offset = 0)
        {
        }
        /**
         * Add meta query arg for date field.
         *
         * Dates will be converted to site time since the date column is also in site time.
         *
         * @param string                   $meta_key
         * @param DateTimeClause|SetClause $clause
         * @param bool                     $use_timestamps Set true if meta field is store as a timestamp.
         *                                                 False if field is stored as a mysql string.
         *
         * @throws UnexpectedValueException When there is an error adding the query arg.
         */
        protected function add_date_meta_query_arg($meta_key, $clause, $use_timestamps = false)
        {
        }
    }
    /**
     * Class SubscriptionPostDatastoreType.
     *
     * @since   5.5.23
     * @package AutomateWoo\RuleQuickFilters\Queries
     */
    class SubscriptionPostDatastoreType extends \AutomateWoo\RuleQuickFilters\Queries\OrderPostDatastoreType
    {
        /**
         * Get the WP post type for the data type.
         *
         * @return string
         */
        protected function get_post_type()
        {
        }
        /**
         * Map a quick filter clause to WP_Query arg.
         *
         * @param ClauseInterface $clause
         * @param array           $query_args Array of WP_Query args.
         *
         * @throws UnexpectedValueException When there is an error mapping a query arg.
         */
        protected function map_clause_to_wp_query_arg($clause, &$query_args)
        {
        }
        /**
         * Get the default args to use with WP_Query.
         *
         * @param int $number
         * @param int $offset
         *
         * @return array
         */
        protected function get_default_wp_query_args($number, $offset = 0)
        {
        }
    }
}
namespace AutomateWoo\RuleQuickFilters {
    /**
     * Class ClauseGenerator
     *
     * Generates quick filter clauses based on rule data.
     *
     * @package AutomateWoo\RuleQuickFilters
     */
    class ClauseGenerator
    {
        /**
         * The primary data type to use.
         *
         * @var string
         */
        protected $primary_data_type;
        /**
         * The generated clauses.
         *
         * @var array
         */
        protected $clauses = [];
        /**
         * Generate quick filter clauses based on the given rule data.
         *
         * Clauses will be nested by rule group.
         *
         * @param array  $workflow_rules_data Rules data from a workflow.
         * @param string $data_type           The primary data type to use.
         *
         * @throws \Exception When there is a problem generating clauses.
         * @return array
         */
        public function generate($workflow_rules_data, $data_type)
        {
        }
        /**
         * Get the clause for a single rule.
         *
         * @param array $rule_data    The data for a single rule.
         * @param array $clause_group The clauses for the rule group that this rule belongs to.
         *
         * @throws \Exception When there is a problem generating clauses.
         */
        protected function get_rule_clause($rule_data, &$clause_group)
        {
        }
        /**
         * Add clauses to a clause group.
         *
         * @param ClauseInterface|ClauseInterface[] $clauses A single clause or an array of clauses.
         * @param array                             $group   The clause group
         *
         * @throws InvalidClass If any clause is not valid.
         */
        protected function add_clauses_to_group($clauses, &$group)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Event
     * @since 3.4.0
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     */
    class Event extends \AutomateWoo\Model
    {
        /** @var string */
        public $table_id = 'events';
        /** @var string  */
        public $object_type = 'event';
        /**
         * @param bool|int $id
         */
        function __construct($id = false)
        {
        }
        /**
         * @param string $hook
         */
        function set_hook($hook)
        {
        }
        /**
         * @return string
         */
        function get_hook()
        {
        }
        /**
         * Possible statuses are 'pending', 'started'
         *
         * @param string $status
         */
        function set_status($status)
        {
        }
        /**
         * @return string
         */
        function get_status()
        {
        }
        /**
         * @param $status
         * @return bool
         */
        function has_status($status)
        {
        }
        /**
         * @param array $args
         */
        function set_args($args)
        {
        }
        /**
         * @return array
         */
        function get_args()
        {
        }
        /**
         * @since 4.3.0
         *
         * @return string
         */
        function get_args_hash()
        {
        }
        /**
         * @param DateTime $date
         */
        function set_date_scheduled($date)
        {
        }
        /**
         * @return DateTime|bool
         */
        function get_date_scheduled()
        {
        }
        /**
         * @param DateTime $date
         */
        function set_date_created($date)
        {
        }
        /**
         * @return DateTime|bool
         */
        function get_date_created()
        {
        }
        /**
         * Runs the event
         * @param bool $force
         */
        function run($force = false)
        {
        }
        /**
         * Save
         */
        function save()
        {
        }
    }
    /**
     * @class Integration_Twilio
     * @since 3.9
     */
    class Integration_Twilio extends \AutomateWoo\Integration
    {
        /** @var string */
        public $integration_id = 'twilio';
        /** @var string */
        private $from_number;
        /** @var string */
        private $account_sid;
        /** @var string */
        private $auth_token;
        /** @var string  */
        private $api_root;
        function __construct($from_number, $account_sid, $auth_token)
        {
        }
        /**
         * @return string
         */
        function get_from_number()
        {
        }
        /**
         * @param string $to
         * @param string $body
         * @param bool|string $from
         * @return Remote_Request
         */
        function send_sms($to, $body, $from = false)
        {
        }
        /**
         * Pulls the error message from the Twilio API response or from the wp_error object.
         *
         * @param Remote_Request $request
         * @return string
         */
        function get_request_error_message($request)
        {
        }
        /**
         * @param $method
         * @param $endpoint
         * @param $args
         *
         * @return Remote_Request
         */
        function request($method, $endpoint, $args = [])
        {
        }
    }
    /**
     * @class Integration_ActiveCampaign
     * @since 2.6.1
     */
    class Integration_ActiveCampaign extends \AutomateWoo\Integration
    {
        /** @var string */
        public $integration_id = 'activecampaign';
        /** @var string */
        private $api_key;
        /** @var string */
        private $api_url;
        /** @var \ActiveCampaign */
        private $sdk;
        /** @var int */
        public $request_count = 1;
        /**
         * Enable API debugging.
         *
         * @var bool
         */
        protected $debug = false;
        /**
         * Constructor.
         *
         * @param string $api_url
         * @param string $api_key
         * @param bool   $debug
         */
        function __construct($api_url, $api_key, $debug)
        {
        }
        /**
         * @return array
         */
        function get_lists()
        {
        }
        /**
         * Check is the contact exists in ActiveCampaign.
         *
         * Result from API is cached for 5 minutes.
         *
         * @param string $email
         *
         * @return bool
         */
        public function is_contact($email)
        {
        }
        /**
         * @param $email
         */
        function clear_contact_transients($email)
        {
        }
        /**
         * @return array
         */
        function get_contact_custom_fields()
        {
        }
        /**
         * @param $path
         * @param $data
         * @return \ActiveCampaign|false
         *
         * @throws \Exception
         */
        function request($path, $data = [])
        {
        }
        /**
         * @return \ActiveCampaign
         */
        protected function get_sdk()
        {
        }
        function clear_cache_data()
        {
        }
    }
    /**
     * @class Integration_Mad_Mimi
     * @since 2.7
     */
    class Integration_Mad_Mimi extends \AutomateWoo\Integration
    {
        /** @var string */
        public $integration_id = 'mad-mimi';
        /** @var string */
        private $username;
        /** @var string */
        private $api_key;
        /** @var string  */
        private $api_root = 'https://api.madmimi.com';
        /**
         * @param $username
         * @param $api_key
         */
        function __construct($username, $api_key)
        {
        }
        /**
         * Automatically logs errors
         *
         * @param $method
         * @param $endpoint
         * @param $args
         *
         * @return Remote_Request
         */
        function request($method, $endpoint, $args = [])
        {
        }
        function build_csv($arr)
        {
        }
    }
    /**
     * @class Integration_Bitly
     * @since 3.9
     */
    class Integration_Bitly extends \AutomateWoo\Integration
    {
        /** @var string */
        public $integration_id = 'bitly';
        /** @var string */
        private $api_key;
        /** @var string */
        private $api_base_url = 'https://api-ssl.bitly.com/v4';
        /**
         * @param string $api_key
         */
        public function __construct($api_key)
        {
        }
        /**
         * @param string $long_url
         * @param bool   $ignore_cache
         *
         * @return string|false
         */
        public function shorten_url($long_url, $ignore_cache = false)
        {
        }
        /**
         * @param string $text
         * @return string
         */
        public function shorten_urls_in_text($text)
        {
        }
        /**
         * @param string $method
         * @param string $endpoint
         * @param array  $args
         *
         * @return Remote_Request|false
         */
        public function request($method, $endpoint, $args = [])
        {
        }
    }
    /**
     * Integration class for Mailchimp.
     *
     * @class Integration_Mailchimp
     */
    class Integration_Mailchimp extends \AutomateWoo\Integration
    {
        /**
         * ID of this integration.
         *
         * @var string
         */
        public $integration_id = 'mailchimp';
        /**
         * The Mailchimp API key.
         *
         * @var string
         */
        private $api_key;
        /**
         * The root API URL for Mailchimp.
         *
         * @var string
         */
        private $api_root = 'https://<dc>.api.mailchimp.com/3.0';
        /**
         * Constructor.
         *
         * @param string $api_key The Mailchimp API key.
         */
        public function __construct($api_key)
        {
        }
        /**
         * Make a request to the API.
         *
         * @param string $method   The request method.
         * @param string $endpoint The request endpoint.
         * @param array  $args     Additional request arguments.
         *
         * @return Remote_Request
         */
        public function request($method, $endpoint, $args = [])
        {
        }
        /**
         * Get Mailchimp lists.
         *
         * @return array
         */
        public function get_lists()
        {
        }
        /**
         * Get the fields for a particular list.
         *
         * @param string $list_id The list ID.
         *
         * @return array
         */
        public function get_list_fields($list_id)
        {
        }
        /**
         * Get interest categories for a particular list.
         *
         * @param string $list_id The list ID.
         * @return array
         */
        public function get_list_interest_categories($list_id)
        {
        }
        /**
         * Get interests for a particular category from the API.
         *
         * Protected method due to not being cached, use $this->get_list_interest_categories()
         *
         * @param string $list_id     The list ID.
         * @param string $category_id The category ID.
         *
         * @return array
         */
        protected function get_interest_categories_interests($list_id, $category_id)
        {
        }
        /**
         * Determine whether a contact is part of the given list.
         *
         * This does not reveal whether they are a subscriber. For that, see the is_subscribed_to_list() method.
         *
         * @param string $email   The email address.
         * @param string $list_id The list ID.
         *
         * @return bool
         */
        public function is_contact($email, $list_id)
        {
        }
        /**
         * Determine whether a contact is subscribed to the given list.
         *
         * This method should be used for determining if a customer is subscribed to marketing emails. For transactional
         * emails,
         *
         * @param string $email   The email address.
         * @param string $list_id The Mailchimp list ID.
         *
         * @return bool
         */
        public function is_subscribed_to_list($email, $list_id)
        {
        }
        /**
         * Update interest groups for a contact.
         *
         * $interests should be an array with the interest ID as the key and
         * true or false as the value, depending on whether adding or removing the group
         *
         * @param string $email     The contact's email address.
         * @param string $list_id   The list ID.
         * @param array  $interests Array of interests.
         *
         * @return Remote_Request
         */
        public function update_contact_interest_groups($email, $list_id, $interests)
        {
        }
        /**
         * Clear the cache for lists.
         */
        public function clear_cache_data()
        {
        }
        /**
         * Get the subscriber information for a particular list.
         *
         * @param string $email   The email address to check.
         * @param string $list_id The list ID.
         *
         * @return string
         */
        private function get_subscriber_status_for_list($email, $list_id)
        {
        }
        /**
         * Get the tags for a particular member.
         *
         * @since 4.8.0
         *
         * @param string $email   The member's email address.
         * @param string $list_id The list ID.
         *
         * @return array
         */
        public function get_member_tags($email, $list_id)
        {
        }
        /**
         * Update the tags for a particular member.
         *
         * The array of $tags should have the tag name as an index, and either true or false
         * as a value. Tags with "true" as a value will be added to the member, and tags
         * with "false" as a value will be removed from the member.
         *
         * Example: Add tag "top buyer" and remove "no sales":
         *
         * [
         *     'top buyer' => true,
         *     'no sales'  => false,
         * ]
         *
         * @since 4.8.0
         *
         * @param string $email   The member's email address.
         * @param string $list_id The list ID.
         * @param array  $tags    Array of tags to update.
         *
         * @return Remote_Request The request
         */
        public function update_member_tags($email, $list_id, $tags)
        {
        }
    }
    /**
     * @class Integration_Campaign_Monitor
     * @since 3.0
     */
    class Integration_Campaign_Monitor extends \AutomateWoo\Integration
    {
        /** @var string */
        public $integration_id = 'campaign-monitor';
        /** @var string */
        private $api_key;
        /** @var string */
        private $client_id;
        /** @var string  */
        private $api_root = 'https://api.createsend.com/api/v3.1';
        /**
         * @param string $api_key
         * @param string|false $client_id client ID is not required to support legacy action
         */
        function __construct($api_key, $client_id = false)
        {
        }
        /**
         * Automatically logs errors
         *
         * @param $method
         * @param $endpoint
         * @param $args
         *
         * @return Remote_Request
         */
        function request($method, $endpoint, $args = [])
        {
        }
        /**
         * @return array
         */
        function get_lists()
        {
        }
        /**
         * Clear cached data
         */
        function clear_cache_data()
        {
        }
    }
}
namespace AutomateWoo\Frontend_Endpoints {
    /**
     * Class Login_Redirect
     *
     * Contains login redirect functionality.
     * Some URLs require the user to be logged in before loading them such as the subscription early renewal URL.
     * This class provides a way to get the user to login before redirecting them to the final URL.
     *
     * @since 4.9.1
     */
    class Login_Redirect
    {
        /**
         * Init.
         */
        public function init()
        {
        }
        /**
         * Handle the login redirect endpoint.
         *
         * Should be called only in \AutomateWoo\Frontend_Endpoints::handle.
         */
        public function handle_endpoint()
        {
        }
        /**
         * Get a URL that will prompt the user to login before redirecting them to the supplied URL.
         *
         * @param string $redirect_url The URL the user will be sent to after login.
         *
         * @return string
         */
        public function get_login_redirect_url($redirect_url)
        {
        }
        /**
         * Add a notice informing the user they must login.
         */
        public function maybe_add_redirect_notice()
        {
        }
        /**
         * Adds the login redirect URL to the login form as a hidden input.
         */
        public function maybe_add_redirect_input()
        {
        }
        /**
         * Filter the woocommerce_login_redirect value and add our own redirect if it exists.
         *
         * @param string $original_redirect
         *
         * @return string
         */
        public function filter_login_form_redirect($original_redirect)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Cart_Item
     * @since 3.2.6
     */
    class Cart_Item
    {
        /** @var string */
        protected $key;
        /** @var array */
        protected $data;
        /** @var WC_Product */
        protected $product;
        /**
         * @param string $key
         * @param array $data
         */
        public function __construct(string $key, array $data)
        {
        }
        /**
         * Prepare cart item object and data.
         *
         * Duplicates some of the WC Cart Item functionality that is coupled to the session logic in WooCommerce core to
         * maximise compatibility with other extensions.
         *
         * @since 5.3.0
         *
         * @see   \WC_Cart_Session::get_cart_from_session
         */
        protected function prepare_cart_item_data()
        {
        }
        /**
         * Get the product object for the cart item.
         *
         * @return WC_Product
         */
        public function get_product()
        {
        }
        /**
         * @return string
         */
        public function get_name() : string
        {
        }
        /**
         * @return int
         */
        function get_key()
        {
        }
        /**
         * @return array
         */
        function get_data()
        {
        }
        /**
         * @return array
         */
        function get_variation_data()
        {
        }
        /**
         * @return int
         */
        function get_product_id()
        {
        }
        /**
         * @param $id
         */
        function set_product_id($id)
        {
        }
        /**
         * @return int
         */
        function get_variation_id()
        {
        }
        /**
         * @param $id
         */
        function set_variation_id($id)
        {
        }
        /**
         * @return float
         */
        function get_line_subtotal()
        {
        }
        /**
         * @return float
         */
        function get_line_subtotal_tax()
        {
        }
        /**
         * Get item quantity.
         *
         * @return int|float
         */
        function get_quantity()
        {
        }
        /**
         * Gets and formats a list of cart item data + variations for display on the frontend.
         *
         * @param bool $flat (default: false)
         * @return string
         */
        public function get_item_data_html($flat = false)
        {
        }
    }
    /**
     * @class Log
     */
    class Log extends \AutomateWoo\Abstract_Model_With_Meta_Table
    {
        /** @var string */
        public $table_id = 'logs';
        /** @var string  */
        public $object_type = 'log';
        /** @var Data_Layer */
        private $data_layer;
        /**
         * Returns the ID of the model's meta table.
         *
         * @return string
         */
        public function get_meta_table_id()
        {
        }
        /**
         * @param bool|int $id
         */
        function __construct($id = false)
        {
        }
        /**
         * @param int $workflow_id
         */
        function set_workflow_id($workflow_id)
        {
        }
        /**
         * @return int
         */
        function get_workflow_id()
        {
        }
        /**
         * @param DateTime $date
         */
        function set_date($date)
        {
        }
        /**
         * @return DateTime|bool
         */
        function get_date()
        {
        }
        /**
         * @param bool $has_errors
         */
        function set_has_errors($has_errors)
        {
        }
        /**
         * @return bool
         */
        function has_errors()
        {
        }
        /**
         * @param bool $has_blocked_emails
         */
        function set_has_blocked_emails($has_blocked_emails)
        {
        }
        /**
         * @return bool
         */
        function has_blocked_emails()
        {
        }
        /**
         * @param bool $enabled
         */
        function set_tracking_enabled($enabled)
        {
        }
        /**
         * @return bool
         */
        function is_tracking_enabled()
        {
        }
        /**
         * @param bool $enabled
         */
        function set_conversion_tracking_enabled($enabled)
        {
        }
        /**
         * @return bool
         */
        function is_conversion_tracking_enabled()
        {
        }
        /**
         * @return bool
         */
        function is_anonymized()
        {
        }
        /**
         * Records that a trackable message from a workflow was clicked.
         *
         * @param string $url
         */
        public function record_click($url)
        {
        }
        /**
         * Records that a trackable message from a workflow was opened.
         *
         * Only records an open once i.e. unique opens.
         */
        public function record_open()
        {
        }
        /**
         * @return bool
         */
        function has_open_recorded()
        {
        }
        /**
         * @return bool
         */
        function has_click_recorded()
        {
        }
        /**
         * @return DateTime|false
         */
        function get_date_opened()
        {
        }
        /**
         * @return DateTime|false
         */
        function get_date_clicked()
        {
        }
        /**
         * Add a note.
         *
         * @param string $note
         */
        function add_note($note)
        {
        }
        /**
         * Get the log notes.
         *
         * @since 4.4.0
         *
         * @return array
         */
        function get_notes()
        {
        }
        /**
         * Update the log notes.
         *
         * @since 4.4.0
         *
         * @param array $notes
         */
        function update_notes($notes)
        {
        }
        /**
         * Returns the workflow without a data layer
         * @return Workflow
         */
        function get_workflow()
        {
        }
        /**
         * @param string $output - array|object this for backwards compatibility
         * @return Data_Layer|array
         */
        function get_data_layer($output = 'array')
        {
        }
        /**
         * Fetches the data layer from log meta, but does not decompress
         * Uses the the supplied_data_items field on the workflows trigger
         *
         * @return array|false
         */
        private function get_compressed_data_layer()
        {
        }
        /**
         * @param $data_type_id
         * @param array $supplied_data_items
         * @return string|false
         */
        private function get_compressed_data_item($data_type_id, $supplied_data_items)
        {
        }
        /**
         * @param array $compressed_data_layer
         * @return Data_Layer
         */
        private function decompress_data_layer($compressed_data_layer)
        {
        }
        /**
         * Stores a data layer in log meta
         * @param Data_Layer $data_layer
         */
        function store_data_layer($data_layer)
        {
        }
        /**
         * @param $data_type_id
         * @param $data_item
         */
        private function store_data_item($data_type_id, $data_item)
        {
        }
        /**
         * Delete the log and clear related conversion order meta
         */
        function delete()
        {
        }
        /**
         *
         */
        function save()
        {
        }
        function clear_cached_data()
        {
        }
        /**
         * Reruns the workflow skipping validation
         * @return Log|bool - the newly created log
         */
        function rerun()
        {
        }
    }
    /**
     * @class Logic_Helper
     */
    class Logic_Helper
    {
        /**
         * Check if two products are the same, complexity aries when considering variations
         *
         * @param \WC_Product $actual_product
         * @param \WC_Product $expected_product
         * @return bool
         */
        static function match_products($actual_product, $expected_product)
        {
        }
    }
    /**
     * Class Logger
     * @since 4.3.0
     */
    class Logger
    {
        /** @var \WC_Logger */
        protected static $wc_logger;
        /** @var string */
        protected static $handle_prefix = 'automatewoo-';
        /**
         * @return \WC_Logger
         */
        protected static function get_wc_logger()
        {
        }
        /**
         * Add a log entry.
         *
         * @param string $level emergency|alert|critical|error|warning|notice|info|debug
         * @param string $handle
         * @param string $message
         */
        protected static function log($level, $handle, $message)
        {
        }
        /**
         * Adds an emergency level message.
         *
         * System is unusable.
         *
         * @param string $handle
         * @param string $message
         */
        public static function emergency($handle, $message)
        {
        }
        /**
         * Adds an alert level message.
         *
         * Action must be taken immediately.
         * Example: Entire website down, database unavailable, etc.
         *
         * @param string $handle
         * @param string $message
         */
        public static function alert($handle, $message)
        {
        }
        /**
         * Adds a critical level message.
         *
         * Critical conditions.
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $handle
         * @param string $message
         */
        public static function critical($handle, $message)
        {
        }
        /**
         * Adds an error level message.
         *
         * Runtime errors that do not require immediate action but should typically be logged
         * and monitored.
         *
         * @param string $handle
         * @param string $message
         */
        public static function error($handle, $message)
        {
        }
        /**
         * Adds a warning level message.
         *
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things that are not
         * necessarily wrong.
         *
         * @param string $handle
         * @param string $message
         */
        public static function warning($handle, $message)
        {
        }
        /**
         * Adds a notice level message.
         *
         * Normal but significant events.
         *
         * @param string $handle
         * @param string $message
         */
        public static function notice($handle, $message)
        {
        }
        /**
         * Adds a info level message.
         *
         * Interesting events.
         * Example: User logs in, SQL logs.
         *
         * @param string $handle
         * @param string $message
         */
        public static function info($handle, $message)
        {
        }
        /**
         * Adds a debug level message.
         *
         * Detailed debug information.
         *
         * @param string $handle
         * @param string $message
         */
        public static function debug($handle, $message)
        {
        }
    }
    /**
     * @class User_Tags
     * @since 2.9.10
     */
    class User_Tags
    {
        private static $taxonomies = [];
        function __construct()
        {
        }
        /**
         * @param string $taxonomy
         * @param string $object
         * @param array $args
         */
        function registered_taxonomy($taxonomy, $object, $args)
        {
        }
        /**
         * Create the user tags taxonomy
         */
        function register_taxonomy()
        {
        }
        /**
         * Admin init
         */
        function admin_init()
        {
        }
        /**
         * We need to manually update the number of users for a taxonomy term
         *
         * @see    _update_post_term_count()
         * @param array $terms - List of Term taxonomy IDs
         * @param Object $taxonomy - Current taxonomy object of terms
         */
        function update_count($terms, $taxonomy)
        {
        }
        /**
         * Add each of the taxonomies to the users menu
         */
        function admin_menu()
        {
        }
        /**
         * Fix a bug with highlighting the parent menu item
         * By default, when on the edit taxonomy page for a user taxonomy, the Posts tab is highlighted
         * This will correct that bug
         */
        function parent_menu($parent = '')
        {
        }
        /**
         * Correct the column names for user taxonomies
         * Need to replace "Posts" with "Users"
         *
         * @param array $columns
         * @return array
         */
        function set_user_column($columns)
        {
        }
        /**
         * Set values for custom columns in user taxonomies
         */
        function set_user_column_values($display, $column, $term_id)
        {
        }
        /**
         * Add the taxonomies to the user view/edit screen
         *
         * @param \WP_User $user
         */
        function user_profile($user)
        {
        }
        /**
         * Save the custom user taxonomies when saving a users profile
         *
         * @param Integer $user_id - The ID of the user to update
         */
        function save_profile($user_id)
        {
        }
        /**
         * @param $columns
         * @return array
         */
        function inject_column_header($columns)
        {
        }
        /**
         * @param $content
         * @param $column
         * @param $user_id
         *
         * @return string
         */
        function inject_column_row($content, $column, $user_id)
        {
        }
        /**
         * Filter the products in admin based on options
         *
         * @param mixed $query
         */
        function filter_admin_query($query)
        {
        }
        /**
         * @param array $views
         * @return array
         */
        function filter_user_views($views)
        {
        }
        /**
         * @param $which
         */
        function inject_bulk_actions($which)
        {
        }
        /**
         * Print out option html elements for role selectors.
         *
         * @param string $selected Slug for the role that should be already selected.
         */
        static function wp_dropdown_user_tags($selected = '')
        {
        }
        function catch_bulk_edit_action()
        {
        }
    }
    /**
     * @class Cart_Query
     * @since 2.0
     */
    class Cart_Query extends \AutomateWoo\Query_Abstract
    {
        /** @var string */
        public $table_id = 'carts';
        protected $model = 'AutomateWoo\\Cart';
        /**
         * @since 3.8
         * @param string|array $status active, abandoned
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_status($status, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $date
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_date_created($date, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $start_date
         * @param string|DateTime $end_date
         * @return $this
         */
        function where_date_created_between($start_date, $end_date)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $date
         * @param $compare bool|string - defaults to '=' or 'IN' if array
         * @return $this
         */
        function where_date_modified($date, $compare = false)
        {
        }
        /**
         * @since 3.8
         * @param string|DateTime $start_date
         * @param string|DateTime $end_date
         * @return $this
         */
        function where_date_modified_between($start_date, $end_date)
        {
        }
        /**
         * Filter results by user or guest ID.
         *
         * @since 5.2.0
         * @param Customer $customer
         * @return $this
         */
        public function where_customer(\AutomateWoo\Customer $customer)
        {
        }
        /**
         * @return Cart[]
         */
        function get_results()
        {
        }
    }
    /**
     * Customer (including guests) management class
     *
     * @class Customers
     * @since 3.0.0
     */
    class Customers
    {
        static function init()
        {
        }
        /**
         * @param Model|Guest $object
         */
        static function delete_customer_on_guest_delete($object)
        {
        }
        /**
         * @param int $user_id
         */
        static function delete_customer_on_user_delete($user_id)
        {
        }
        /**
         * Returns true if a guest was converted.
         *
         * @param int $user_id
         * @return bool
         */
        static function maybe_update_guest_customer_when_user_registers($user_id)
        {
        }
        /**
         * Convert guest customer to registered user customer.
         *
         * @param Guest $guest
         * @param \WP_User $user
         */
        static function convert_guest_to_registered_customer($guest, $user)
        {
        }
        /**
         * Clears persistent review count cache.
         *
         * @since 4.5
         *
         * @param int $comment_id
         */
        static function clean_review_count_cache_on_clean_comment_cache($comment_id)
        {
        }
    }
    /**
     * Registry class for background processes
     *
     * @deprecated in 5.2.0 use ActionScheduler jobs instead.
     * @see Jobs\AbstractActionSchedulerJob;
     */
    class Background_Processes extends \AutomateWoo\Registry
    {
        /**
         * Static cache of includes.
         *
         * @var array
         */
        public static $includes;
        /**
         * Static cache of loaded objects.
         *
         * @var array
         */
        public static $loaded = [];
        /**
         * Load includes.
         *
         * @return array
         */
        public static function load_includes()
        {
        }
        /**
         * Get all background processes.
         *
         * @return Background_Processes\Base[]
         */
        public static function get_all()
        {
        }
        /**
         * Get a background.
         *
         * @param string $name
         *
         * @return Background_Processes\Base|false
         */
        public static function get($name)
        {
        }
    }
    /**
     * Functions for email click tracking and unsubscribes
     *
     * @class Emails
     */
    class Emails
    {
        /**
         * Support for custom from name and from email per template by using an array
         *
         * custom_template => [
         * 	template_name
         * 	from_name
         * 	from_email
         * ]
         *
         * @var array
         */
        static $templates = ['default' => 'WooCommerce Default', 'plain' => 'None'];
        /**
         * Get the from name for outgoing emails.
         *
         * @param string|bool $template_id
         * @return string
         */
        static function get_from_name($template_id = false)
        {
        }
        /**
         * Get the from address for outgoing emails.
         * @param string|bool $template_id
         * @return string
         */
        static function get_from_address($template_id = false)
        {
        }
        /**
         * @param $template_id
         * @return bool|string|array
         */
        static function get_template($template_id)
        {
        }
        /**
         * @param bool $names_only : whether to include extra template data or just id => name
         * @return array
         */
        static function get_email_templates($names_only = true)
        {
        }
        /**
         * Parse email recipients and special args in the string
         *
         * Arg format is like so: email@example.org --notracking --other-param
         *
         * @param string $recipient_string
         * @return array
         */
        static function parse_recipients_string($recipient_string)
        {
        }
        /**
         * @param $input
         * @param bool $remove_invalid
         * @return array
         */
        static function parse_multi_email_field($input, $remove_invalid = true)
        {
        }
    }
    /**
     * @class Admin_Workflow_List
     * @since 2.6.1
     */
    class Admin_Workflow_List
    {
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * @param $columns
         * @return array
         */
        function columns($columns)
        {
        }
        /**
         * @param $column
         * @param $post_id
         */
        function column_data($column, $post_id)
        {
        }
        /**
         * Tweak workflow statuses
         */
        function statuses()
        {
        }
        /**
         * @param $actions
         * @return mixed
         */
        function bulk_actions($actions)
        {
        }
        /**
         * @param $actions
         * @return mixed
         */
        function row_actions($actions)
        {
        }
        /**
         * @param Workflow $workflow
         * @return string
         */
        function get_timing_text($workflow)
        {
        }
        /**
         * Is manual view?
         *
         * @since 5.0.0
         *
         * @return bool
         */
        public function is_manual_view()
        {
        }
        /**
         * Filter workflow list main request query vars.
         *
         * @param array $query_vars
         *
         * @return array
         */
        public function filter_request_query_vars($query_vars)
        {
        }
        /**
         * Filter views on the workflow list table.
         *
         * @since 5.0.0
         *
         * @param array $views
         *
         * @return array
         */
        public function filter_views($views)
        {
        }
    }
}
namespace AutomateWoo\Admin {
    /**
     * Admin controller registry class
     */
    class Controllers extends \AutomateWoo\Registry
    {
        /** @var array */
        static $includes;
        /** @var array */
        static $loaded = [];
        /**
         * @return array
         */
        static function load_includes()
        {
        }
        /**
         * @return Controllers\Base[]
         */
        static function get_all()
        {
        }
        /**
         * @param $name
         * @return Controllers\Base|false
         */
        static function get($name)
        {
        }
        /**
         * Optional method to implement
         * @param string $name
         * @param Controllers\Base $controller
         */
        static function after_loaded($name, $controller)
        {
        }
    }
}
namespace {
    /**
     * @class AW_Report_Abstract_Graph
     */
    class AW_Report_Abstract_Graph extends \WC_Admin_Report
    {
        public $chart_colours = [];
        /**
         * Output the report
         */
        function output_report()
        {
        }
        /**
         * Output an export link
         */
        function get_export_button()
        {
        }
        /**
         * @return array
         */
        function get_filtered_workflows()
        {
        }
        /**
         * Workflows selection widget
         */
        function output_workflows_widget()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Report_Email_Tracking
     */
    class Report_Email_Tracking extends \AW_Report_Abstract_Graph
    {
        /** @var array  */
        public $chart_colours = ['runs' => '#b1d4ea', 'opens' => '#3498db', 'unique_clicks' => '#5cc488', 'clicks' => '#f1c40f', 'unsubscribes' => '#e74c3c'];
        public $workflow_ids = [];
        public $workflow_ids_titles = [];
        public $logs;
        public $logs_count = 0;
        public $unique_clicks = [];
        public $unique_clicks_count = 0;
        public $clicks = [];
        public $clicks_count = 0;
        public $opens = [];
        public $opens_count = 0;
        /** @var Customer[]  */
        public $unsubscribes = [];
        public $unsubscribes_count = 0;
        function __construct()
        {
        }
        function load_chart_data()
        {
        }
        /**
         * Get the legend for the main chart sidebar
         * @return array
         */
        function get_chart_legend()
        {
        }
        /**
         * [get_chart_widgets description]
         *
         * @return array
         */
        function get_chart_widgets()
        {
        }
        /**
         * Show current filters
         */
        function current_filters()
        {
        }
        /**
         * Get the main chart
         *
         * @return string
         */
        function get_main_chart()
        {
        }
    }
    /**
     * @class Admin_List_Table
     * @since 3.0
     */
    abstract class Admin_List_Table extends \WP_List_Table
    {
        /** @var string - name of the table, used for classes */
        public $name;
        /** @var string  */
        public $nonce_action = 'automatewoo-report-action';
        /** @var bool */
        public $enable_search = false;
        /** @var string  */
        public $search_input_id = 'automatewoo_search_table';
        /** @var string */
        public $search_button_text;
        /** @var string */
        protected $default_param_orderby = '';
        /** @var string */
        protected $default_param_order = 'DESC';
        /** @var int */
        public $max_items = 0;
        /**
         * @param array|string $args
         */
        function __construct($args)
        {
        }
        /**
         * Output the report
         */
        function output_report()
        {
        }
        /**
         * @deprecated use Format::email()
         * @param $email
         * @return string
         */
        function format_email($email)
        {
        }
        /**
         * @param \WP_User $user
         * @return string
         */
        function format_user($user)
        {
        }
        /**
         * @param $email
         * @return string
         */
        function format_guest($email)
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @param $date
         * @param bool $is_gmt
         * @return string
         */
        function format_date($date, $is_gmt = true)
        {
        }
        /**
         * @param $workflow Workflow|false
         * @return string
         */
        function format_workflow_title($workflow)
        {
        }
        /**
         * @return string
         */
        function format_blank()
        {
        }
        protected function extra_tablenav($which)
        {
        }
        function output_form_open()
        {
        }
        function output_form_close()
        {
        }
        /**
         * Display the table plus the form elements
         */
        function display()
        {
        }
        function output_search()
        {
        }
        /**
         * Output the table only
         */
        function output_table()
        {
        }
        function output_workflow_filter()
        {
        }
        function output_customer_filter()
        {
        }
        /**
         * Override nonce used in this table, to use nonces declared in controllers
         *
         * @param string $which
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * @return string
         */
        protected function get_param_search()
        {
        }
        /**
         * @return string
         */
        protected function get_param_orderby()
        {
        }
        /**
         * @return string
         */
        protected function get_param_order()
        {
        }
        /**
         * Generate the HTML for a view link.
         *
         * @since 4.6
         *
         * @param string $id
         * @param string $title
         * @param bool   $is_default Is this the default view option?
         * @param int    $count      The view item count (optional).
         * @param string $query_arg  Defaults to 'view'.
         *
         * @return string
         */
        protected function generate_view_link_html($id, $title, $count = null, $is_default = false, $query_arg = 'view')
        {
        }
        /**
         * Get the current view.
         *
         * @since 4.6
         *
         * @param string $default_view
         * @param string $query_arg
         *
         * @return string
         */
        public function get_current_view($default_view = '', $query_arg = 'view')
        {
        }
    }
    /**
     * @class Report_Conversions_List
     */
    class Report_Conversions_List extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'conversions';
        function __construct()
        {
        }
        function no_items()
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
        /**
         * @param \WC_Order $order
         * @return string
         */
        function column_cb($order)
        {
        }
        /**
         * @param \WC_Order $order
         * @return string
         */
        function column_interacted($order)
        {
        }
        /**
         * @param $order \WC_Order
         * @return string
         */
        function column_workflow($order)
        {
        }
        /**
         * @param \WC_Order $order
         * @param mixed $column_name
         * @return mixed
         */
        function column_default($order, $column_name)
        {
        }
        /**
         * get_columns function.
         */
        function get_columns()
        {
        }
        /**
         * prepare_items function.
         */
        function prepare_items()
        {
        }
        /**
         * Get Products matching stock criteria
         */
        function get_items($current_page, $per_page)
        {
        }
    }
    /**
     * @class Report_Events
     *
     * @deprecated in 5.2.0 use AW()->action_scheduler() instead.
     */
    class Report_Events extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'events';
        protected $default_param_orderby = 'date_scheduled';
        protected $default_param_order = 'ASC';
        function __construct()
        {
        }
        /**
         * @param $event Event
         * @return string
         */
        function column_cb($event)
        {
        }
        /**
         * @param Event $event
         * @param mixed $column_name
         * @return string
         */
        function column_default($event, $column_name)
        {
        }
        function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        function prepare_items()
        {
        }
        /**
         * @param $current_page
         * @param $per_page
         */
        function get_items($current_page, $per_page)
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
    }
    /**
     * @class Report_Logs
     */
    class Report_Logs extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'logs';
        function __construct()
        {
        }
        function filters()
        {
        }
        function no_items()
        {
        }
        /**
         * @param $log Log
         * @return string
         */
        function column_cb($log)
        {
        }
        /**
         * @param Log $log
         * @param mixed $column_name
         * @return string
         */
        function column_default($log, $column_name)
        {
        }
        /**
         * get_columns function.
         */
        function get_columns()
        {
        }
        function prepare_items()
        {
        }
        /**
         * @param $current_page
         * @param $per_page
         */
        function get_items($current_page, $per_page)
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
    }
    /**
     * @class Report_Runs_By_Date
     *
     * @deprecated since x.x.x Migrated to Analytics.
     * @see AutomateWoo\Admin\Analytics
     * @see AutomateWoo\Admin\Analytics\Rest_API\Workflow_Runs
     */
    class Report_Runs_By_Date extends \AW_Report_Abstract_Graph
    {
        /** @var array  */
        public $chart_colours = ['runs' => '#3498db'];
        public $workflow_ids = [];
        public $workflow_ids_titles = [];
        public $logs;
        public $logs_count = 0;
        function __construct()
        {
        }
        function load_chart_data()
        {
        }
        /**
         * Get the legend for the main chart sidebar
         * @return array
         */
        function get_chart_legend()
        {
        }
        /**
         * [get_chart_widgets description]
         *
         * @return array
         */
        function get_chart_widgets()
        {
        }
        /**
         * Show current filters
         */
        function current_filters()
        {
        }
        /**
         * Get the main chart```
         *
         * @return string
         */
        function get_main_chart()
        {
        }
    }
    /**
     * @class Report_Guests
     */
    class Report_Guests extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'guests';
        public $enable_search = true;
        protected $default_param_orderby = 'last_active';
        function __construct()
        {
        }
        function no_items()
        {
        }
        /**
         * get_columns function.
         */
        function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        function prepare_items()
        {
        }
        function get_items($current_page, $per_page)
        {
        }
        /**
         * @param $guest Guest
         * @return string
         */
        function column_cb($guest)
        {
        }
        /**
         * @param Guest $guest
         * @return string
         */
        function column_id($guest)
        {
        }
        /**
         * @param Guest $guest
         * @return string
         */
        function column_email($guest)
        {
        }
        /**
         * @param Guest $guest
         * @return false|string
         */
        function column_created($guest)
        {
        }
        /**
         * @param Guest $guest
         * @return string
         */
        function column_last_active($guest)
        {
        }
        /**
         * @param Guest $guest
         * @return string
         */
        function column_language($guest)
        {
        }
        /**
         * @param Guest $guest
         * @return string
         */
        function column_actions($guest)
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
    }
    /**
     * @class Report_Carts
     */
    class Report_Carts extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'carts';
        protected $default_param_orderby = 'last_modified';
        function __construct()
        {
        }
        /**
         * Display filters.
         *
         * @since 5.2.0
         */
        public function filters()
        {
        }
        function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @param Cart $cart
         * @param mixed $column_name
         * @return string
         */
        function column_default($cart, $column_name)
        {
        }
        /**
         * @param $cart Cart
         * @return string
         */
        function column_cb($cart)
        {
        }
        /**
         * @param $cart Cart
         * @return string
         */
        function column_status($cart)
        {
        }
        /**
         * prepare_items function.
         */
        function prepare_items()
        {
        }
        /**
         * Get Products matching stock criteria
         */
        function get_items($current_page, $per_page)
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
    }
    /**
     * @class Report_Conversions
     */
    class Report_Conversions extends \AW_Report_Abstract_Graph
    {
        /** @var array  */
        public $chart_colours = ['conversion_value' => '#3498db', 'conversion_number' => '#DBE1E3'];
        public $workflow_ids = [];
        public $workflow_ids_titles = [];
        public $conversion_orders = [];
        public $conversion_total_value = 0;
        public $conversion_total_orders = 0;
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         *
         */
        function load_chart_data()
        {
        }
        /**
         * Get the legend for the main chart sidebar
         * @return array
         */
        function get_chart_legend()
        {
        }
        /**
         * [get_chart_widgets description]
         *
         * @return array
         */
        function get_chart_widgets()
        {
        }
        /**
         * Show current filters
         */
        function current_filters()
        {
        }
        /**
         * Get the main chart
         *
         * @return string
         */
        function get_main_chart()
        {
        }
    }
    /**
     * @class Report_Queue
     */
    class Report_Queue extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'queue';
        function __construct()
        {
        }
        function filters()
        {
        }
        /**
         * @param $queued_event Queued_Event
         * @return string
         */
        function column_cb($queued_event)
        {
        }
        /**
         * @param $event Queued_Event
         * @param mixed $column_name
         * @return string
         */
        function column_default($event, $column_name)
        {
        }
        /**
         * @param Queued_Event $queued_event
         *
         * @return string
         */
        public function column_customer($queued_event)
        {
        }
        /**
         * get_columns function.
         */
        function get_columns()
        {
        }
        /**
         * prepare_items function.
         */
        function prepare_items()
        {
        }
        /**
         * Get Products matching stock criteria
         */
        function get_items($current_page, $per_page)
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
    }
    /**
     * @class Report_Optins
     */
    class Report_Optins extends \AutomateWoo\Admin_List_Table
    {
        public $name = 'opt-ins';
        public $enable_search = true;
        function __construct()
        {
        }
        /**
         * @param Customer $customer
         * @return string
         */
        function column_cb($customer)
        {
        }
        /**
         * @param Customer $customer
         * @param mixed $column_name
         * @return string
         */
        function column_default($customer, $column_name)
        {
        }
        function get_columns()
        {
        }
        /**
         * Retrieve the bulk actions
         */
        function get_bulk_actions()
        {
        }
        function prepare_items()
        {
        }
        /**
         * @param $current_page
         * @param $per_page
         */
        function get_items($current_page, $per_page)
        {
        }
    }
}
namespace {
    /**
     * AW_Admin_Reports_Tab_Abstract class.
     *
     * @package     AutomateWoo/Admin
     */
    abstract class AW_Admin_Reports_Tab_Abstract
    {
        /**
         * Report tab ID.
         *
         * @var string
         */
        public $id;
        /**
         * Report tab name.
         *
         * @var string
         */
        public $name;
        /**
         * Reports Controller object.
         *
         * @var AutomateWoo\Admin\Controllers\Reports
         */
        public $controller;
        /**
         * Get report object.
         *
         * @return object
         */
        public abstract function get_report_class();
        /**
         * Get report tab ID.
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Get report tab url.
         *
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * Output before report content.
         *
         * @return string|false
         */
        public function output_before_report()
        {
        }
        /**
         * Report action handler.
         *
         * @param string $action
         */
        public function handle_actions($action)
        {
        }
        /**
         * Output report content.
         */
        public function output()
        {
        }
    }
    /**
     * AW_Reports_Tab_Email_Tracking class.
     */
    class AW_Reports_Tab_Email_Tracking extends \AW_Admin_Reports_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get report object.
         *
         * @return object
         */
        public function get_report_class()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Reports_Tab_Conversions_List class.
     */
    class Reports_Tab_Conversions_List extends \AW_Admin_Reports_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get report object.
         *
         * @return object
         */
        public function get_report_class()
        {
        }
        /**
         * Report action handler.
         *
         * @param string $action
         */
        public function handle_actions($action)
        {
        }
    }
}
namespace {
    /**
     * AW_Reports_Tab_Runs_By_Date class.
     */
    class AW_Reports_Tab_Runs_By_Date extends \AW_Admin_Reports_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get report object.
         *
         * @return object
         */
        public function get_report_class()
        {
        }
    }
    /**
     * AW_Reports_Tab_Conversions class.
     */
    class AW_Reports_Tab_Conversions extends \AW_Admin_Reports_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get report object.
         *
         * @return object
         */
        public function get_report_class()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Admin_Settings_Tab_Abstract class.
     */
    abstract class Admin_Settings_Tab_Abstract
    {
        /**
         * Settings tab id.
         *
         * @var string
         */
        public $id;
        /**
         * Settings tab name.
         *
         * @var string
         */
        public $name;
        /**
         * Settngs tab messages.
         *
         * @var array
         */
        protected $messages = [];
        /**
         * Settings tab errors.
         *
         * @var array
         */
        protected $errors = [];
        /**
         * Settings tab settings.
         *
         * @var array
         */
        protected $settings = [];
        /**
         * Property for determining whether to display the settings tab title.
         *
         * @var boolean
         */
        public $show_tab_title = true;
        /**
         * Settings tab prefix.
         *
         * @var string
         */
        public $prefix = 'automatewoo_';
        /**
         * Get tab id.
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Get tab url.
         *
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * Optional method
         */
        public function load_settings()
        {
        }
        /**
         * Get tab settings.
         *
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * Output settings tab.
         */
        public function output()
        {
        }
        /**
         * Output settings form.
         */
        public function output_settings_form()
        {
        }
        /**
         * Output settings fields.
         */
        public function output_settings_fields()
        {
        }
        /**
         * Output setting form field..
         *
         * $field options:
         *
         * id
         * type
         * class
         * css
         * default
         * placeholder
         * required
         * wrapper_attributes
         * custom_attributes
         *
         * @param array $field
         */
        public function output_settings_field($field)
        {
        }
        /**
         * Output the start of a field.
         *
         * @param  array $field
         */
        private function output_field_start($field)
        {
        }
        /**
         * Output the end of a field.
         */
        private function output_field_end()
        {
        }
        /**
         * Output tooltip.
         *
         * @param array $field
         */
        private function output_tooltip($field)
        {
        }
        /**
         * Output field description.
         *
         * @param array $field
         */
        private function output_description($field)
        {
        }
        /**
         * Converts array of attributes to HTML string.
         *
         * @param array  $field_data
         * @param string $attributes_key
         * @return string
         */
        private function output_attributes_array($field_data, $attributes_key)
        {
        }
        /**
         * Get an option.
         *
         * @param array $field
         * @return string|string[]
         */
        public function get_option($field)
        {
        }
        /**
         * Save settings.
         */
        public function save()
        {
        }
        /**
         * Save all fields.
         *
         * @param array $settings
         * @return bool
         */
        public function save_fields($settings)
        {
        }
        /**
         * Save a field.
         *
         * @param array $setting
         */
        public function save_field($setting)
        {
        }
        /**
         * Add a message.
         *
         * @param string $strong
         * @param string $more
         */
        public function add_message($strong, $more = '')
        {
        }
        /**
         * Add an error.
         *
         * @param string $error
         */
        public function add_error($error)
        {
        }
        /**
         * Output messages + errors.
         */
        public function output_messages()
        {
        }
        /**
         * Start a settings section. Adds a title to the settings property.
         *
         * @param string $id
         * @param string $title
         * @param string $description
         */
        public function section_start($id, $title = '', $description = '')
        {
        }
        /**
         * End a settings section. Adds a "section end" to the settings property.
         *
         * @param string $id
         */
        public function section_end($id)
        {
        }
        /**
         * Add a setting to the settings property.
         *
         * @param string $id
         * @param array  $args
         */
        public function add_setting($id, $args)
        {
        }
        /**
         * Get default option value.
         *
         * @param string $id
         * @return mixed
         */
        protected function get_default($id)
        {
        }
    }
    /**
     * Settings_Tab_Mailchimp class.
     */
    class Settings_Tab_Mailchimp extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get tab settings.
         *
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * Save settings.
         */
        public function save()
        {
        }
        /**
         * Validate the Mailchimp API key.
         */
        public function validate_key()
        {
        }
    }
    /**
     * Settings_Tab_General class.
     */
    class Settings_Tab_General extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load tab settings.
         */
        public function load_settings()
        {
        }
    }
    /**
     * Settings_Tab_Active_Campaign class.
     */
    class Settings_Tab_Active_Campaign extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get tab settings.
         *
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * Save settings.
         */
        public function save()
        {
        }
    }
    /**
     * Settings_Tab_Bitly class.
     */
    class Settings_Tab_Bitly extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load tab settings.
         */
        public function load_settings()
        {
        }
    }
    /**
     * Settings_Tab_Carts class.
     */
    class Settings_Tab_Carts extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load tab settings.
         */
        public function load_settings()
        {
        }
    }
    /**
     * Settings_Tab_Status class.
     */
    class Settings_Tab_Status extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Output settings tab.
         */
        public function output()
        {
        }
        /**
         * Get tab settings.
         *
         * @return array
         */
        public function get_settings()
        {
        }
    }
    /**
     * Settings_Tab_Twilio class.
     */
    class Settings_Tab_Twilio extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get tab settings.
         *
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * Output settings tab.
         */
        public function output()
        {
        }
    }
    /**
     * Settings_Tab_Campaign_Monitor class.
     */
    class Settings_Tab_Campaign_Monitor extends \AutomateWoo\Admin_Settings_Tab_Abstract
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get tab settings.
         *
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * Save settings.
         */
        public function save()
        {
        }
    }
}
namespace {
    /**
     * @class AW_Admin_Coupons_List
     */
    class AW_Admin_Coupons_List
    {
        function __construct()
        {
        }
        function filter_views($views)
        {
        }
        /**
         * @param $counts
         * @param $type
         * @return mixed
         */
        function filter_counts($counts, $type)
        {
        }
        /**
         * @return int
         */
        function get_count()
        {
        }
        /**
         * @param $query WP_Query
         */
        function modify_results($query)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Admin_Data_Layer_Formatter
     */
    class Admin_Data_Layer_Formatter
    {
        /**
         * @param Data_Layer $data_layer
         * @return array
         */
        public static function format($data_layer)
        {
        }
    }
    /**
     * @class Admin_Ajax
     */
    class Admin_Ajax
    {
        /**
         * Hook in methods
         */
        static function init()
        {
        }
        /**
         *
         */
        static function fill_trigger_fields()
        {
        }
        /**
         * Retrieve action fields and echo JSON.
         */
        public static function fill_action_fields()
        {
        }
        /**
         * Search for workflows and echo JSON.
         */
        public static function json_search_workflows()
        {
        }
        /**
         * Search customers, includes guests customers
         */
        static function json_search_customers()
        {
        }
        /**
         * Search for products and variations, but not variable products.
         */
        static function json_search_products_and_variations_not_variable()
        {
        }
        /**
         * Search for products excluding variable and variation products.
         */
        static function json_search_products_not_variations_not_variable()
        {
        }
        /**
         * Search for products and echo json
         */
        public static function json_search_attribute_terms()
        {
        }
        /**
         * Search for products and echo json
         */
        public static function json_search_taxonomy_terms()
        {
        }
        /**
         * Search for coupons and echo JSON.
         */
        public static function json_search_coupons()
        {
        }
        static function email_preview_iframe()
        {
        }
        /**
         * Sends a test to supplied emails
         */
        static function send_test_email()
        {
        }
        static function test_sms()
        {
        }
        static function database_update()
        {
        }
        static function database_update_items_to_process_count()
        {
        }
        /**
         * To preview an action save temporarily in the options table.
         */
        static function save_preview_data()
        {
        }
        /**
         *
         */
        static function dismiss_system_error_notice()
        {
        }
        static function get_rule_select_choices()
        {
        }
        /**
         * Display content for log details modal
         */
        static function modal_log_info()
        {
        }
        static function modal_queue_info()
        {
        }
        static function modal_variable_info()
        {
        }
        static function modal_cart_info()
        {
        }
        static function toggle_workflow_status()
        {
        }
        static function update_dynamic_action_select()
        {
        }
        /**
         * Respond dynamic field options for a given trigger field.
         *
         * @since x.x.x
         */
        static function update_dynamic_trigger_options_select()
        {
        }
    }
}
namespace AutomateWoo\Admin {
    /**
     * Class to enable the WooCommerce Admin (bar, breadcrumbs, notifications, etc.).
     *
     * @since   5.0.0
     * @package AutomateWoo\Admin
     */
    class WCAdminConnectPages
    {
        /**
         * The first breadcrumb item.
         *
         * @var string
         */
        const BREADCRUMB_ROOT = 'automatewoo-dashboard';
        /**
         * Display the page in WooCommerce Admin nav menu, and show WooCommerce Admin bar, breadcrumbs, etc. on the page
         */
        const PAGE_DISPLAY_FULL = 'full';
        /**
         * Hide the page in WC admin nav menu but still show WooCommerce Admin bar, breadcrumbs, etc. on the page
         */
        const PAGE_DISPLAY_HIDDEN = 'hidden';
        /**
         * Hide the page in WC admin nav menu and do not display WooCommerce Admin bar, breadcrumbs, etc. on the page
         */
        const PAGE_DISPLAY_STANDALONE = 'standalone';
        /**
         * Initialize the class and add hook callbacks.
         */
        public function init()
        {
        }
        /**
         * Connects basic Automatewoo admin pages to WooCommerce Admin.
         */
        public function register_automatewoo_admin_pages()
        {
        }
        /**
         * Tabbed pages can be handled by WooCommerce Admin if registered with WC first.
         * AW Settings and Reports pages can use the tab values directly.
         * https://github.com/woocommerce/woocommerce-admin/blob/v1.2.3/docs/page-controller.md#determining-screen-id
         */
        public function register_automatewoo_tabbed_pages()
        {
        }
        /**
         * Enable "Tools" WC Admin breadcrumbs on the fly.
         * All the tools share a screen_id and don't use the "tab" query parameter.
         */
        public function register_automatewoo_tools_pages()
        {
        }
    }
    /**
     * Class JSON_Search
     *
     * @since 4.5.2
     * @package AutomateWoo
     */
    final class JSON_Search
    {
        /**
         * Search for products and send JSON.
         *
         * It's more performant to define our own method for this special case, rather than using WC
         * core's WC_AJAX::json_search_products() and attaching a callback to the results of it, which
         * are passed through the 'woocommerce_json_search_found_products' filter. Because then we'd
         * need to first remove variable products from that set, then run another query to find enough
         * non-variable products to fill out the returned set up to the 'woocommerce_json_search_limit'
         * value. Otherwise, it's possible we could return a set much smaller than that limit, or even
         * an empty set when there are valid, matching products, but the first 30 matching products
         * were all variable and removed.
         *
         * @see WC_AJAX::json_search_products()
         *
         * @param string $term               The search term.
         * @param bool   $include_variations Include product variations in search?
         * @param bool   $include_variables  Include variable products in search?
         */
        public static function products($term, $include_variations, $include_variables)
        {
        }
        /**
         * Search for workflows and send JSON.
         *
         * @param string $term
         */
        public static function workflows($term)
        {
        }
        /**
         * Search customers, includes guests customers. Sends JSON.
         *
         * @param string $term
         */
        public static function customers($term)
        {
        }
        /**
         * Search for workflows and send JSON.
         *
         * @param string $term
         * @param bool   $exclude_personalized
         */
        public static function coupons($term, $exclude_personalized)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * Dashboard_Widget class.
     *
     * @since 2.8
     */
    abstract class Dashboard_Widget
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id;
        /**
         * Widget's title.
         *
         * @var string optional
         */
        public $title = '';
        /**
         * Set date range for widget.
         *
         * @var DateTime
         */
        public $date_from;
        /**
         * Set date range for widget.
         *
         * @var DateTime
         */
        public $date_to;
        /**
         * Show/hide widget.
         *
         * @var bool
         */
        public $display = true;
        /**
         * Current instance of dashboard controller.
         *
         * @var Admin\Controllers\Dashboard
         */
        public $controller;
        /**
         * Get widget's ID.
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Set GMT date range.
         *
         * @param DateTime $from
         * @param DateTime $to
         */
        public function set_date_range($from, $to)
        {
        }
        /**
         * Display the widget.
         */
        public function output()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
        /**
         * Output before the widget content.
         */
        protected function output_before()
        {
        }
        /**
         * Output after the widget content.
         */
        protected function output_after()
        {
        }
    }
    /**
     * Dashboard_Widget_Chart class.
     */
    abstract class Dashboard_Widget_Chart extends \AutomateWoo\Dashboard_Widget
    {
        /**
         * Define whether a chart widget represents monetary data or some other type of metric.
         *
         * @var bool
         */
        public $is_currency = false;
        /**
         * The widget's data.
         *
         * @var array
         */
        private $data;
        /**
         * Load the chart's data.
         *
         * @return array
         */
        protected abstract function load_data();
        /**
         * Get the chart's data. Cached.
         *
         * @return array
         */
        protected function get_data()
        {
        }
        /**
         * Get chart parameters.
         *
         * @return array
         */
        protected function get_params()
        {
        }
        /**
         * Render chart JS.
         */
        protected function render_js()
        {
        }
        /**
         * Dates should be supplied in the site's timezone.
         *
         * @param array  $data     array of your data
         * @param string $date_key key for the 'date' field. e.g. 'post_date'
         * @param string $data_key key for the data you are charting
         * @param int    $interval
         * @param string $group_by
         *
         * @return array
         */
        protected function prepare_chart_data($data, $date_key, $data_key, $interval, $group_by)
        {
        }
        /**
         * Get the current date range interval.
         *
         * @return int
         */
        protected function get_interval()
        {
        }
        /**
         * Get the URL for the full report.
         *
         * @param string $page_id
         *
         * @return string
         */
        protected function get_report_url($page_id)
        {
        }
        /**
         * Output arrow link to the full report.
         *
         * @since 4.9.0
         *
         * @param string $report_page_id
         */
        protected function output_report_arrow_link($report_page_id)
        {
        }
    }
    /**
     * Dashboard_Widget_Chart_Workflows_Run class.
     */
    class Dashboard_Widget_Chart_Workflows_Run extends \AutomateWoo\Dashboard_Widget_Chart
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'chart-workflows-run';
        /**
         * Load the chart's data.
         *
         * @return array
         */
        protected function load_data()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * Dashboard_Widget_Chart_Email class.
     */
    class Dashboard_Widget_Chart_Email extends \AutomateWoo\Dashboard_Widget_Chart
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'chart-email';
        /**
         * Email count.
         *
         * @var int
         */
        public $email_count = 0;
        /**
         * Open count.
         *
         * @var int
         */
        public $open_count = 0;
        /**
         * Click count.
         *
         * @var int
         */
        public $click_count = 0;
        /**
         * Load the chart's data.
         *
         * @return array
         */
        protected function load_data()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * Dashboard_Widget_Workflows class.
     */
    class Dashboard_Widget_Workflows extends \AutomateWoo\Dashboard_Widget
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'workflows';
        /**
         * Get array of featured workflows.
         *
         * @return array
         */
        protected function get_featured()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * Dashboard_Widget_Logs class.
     */
    class Dashboard_Widget_Logs extends \AutomateWoo\Dashboard_Widget
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'logs';
        /**
         * Get logs for widget.
         *
         * @return Log[]
         */
        protected function get_logs()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * Dashboard_Widget_Chart_Conversions class.
     */
    class Dashboard_Widget_Chart_Conversions extends \AutomateWoo\Dashboard_Widget_Chart
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'chart-conversions';
        /**
         * Define whether a chart widget represents monetary data or some other type of metric.
         *
         * @var bool
         */
        public $is_currency = true;
        /**
         * Number of conversions
         *
         * @var int
         */
        public $conversion_count = 0;
        /**
         * Total monetary value of conversions
         *
         * @var int
         */
        public $conversion_total = 0;
        /**
         * Load the chart's data.
         *
         * @return array
         */
        protected function load_data()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * Dashboard_Widget_Key_Figures class.
     */
    class Dashboard_Widget_Key_Figures extends \AutomateWoo\Dashboard_Widget
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'key-figures';
        /**
         * Get array of key figures.
         *
         * @return array
         */
        protected function get_figures()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * Dashboard_Widget_Queue class.
     */
    class Dashboard_Widget_Queue extends \AutomateWoo\Dashboard_Widget
    {
        /**
         * Widget's ID
         *
         * @var string
         */
        public $id = 'queue';
        /**
         * Get events for widget.
         *
         * @return Queued_Event[]
         */
        protected function get_events()
        {
        }
        /**
         * Output the widget content.
         */
        protected function output_content()
        {
        }
    }
    /**
     * @class Admin_Workflow_Edit
     * @since 2.6.1
     */
    class Admin_Workflow_Edit
    {
        /** @var Workflow */
        public $workflow;
        static $screen = 'aw_workflow';
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * Setup workflow object
         */
        function setup_workflow()
        {
        }
        /**
         * Enqueue scripts
         * Do this on the admin_head action so we have access to the post object
         */
        function enqueue_scripts()
        {
        }
        /**
         * @return array
         */
        function get_js_data()
        {
        }
        /**
         * @param Trigger $trigger
         * @return array|false
         */
        static function get_trigger_data($trigger)
        {
        }
        /**
         * @return array
         */
        static function get_rules_data()
        {
        }
        /**
         * Workflow meta boxes
         */
        function register_meta_boxes()
        {
        }
        /**
         * Triggers meta box
         */
        function meta_box_triggers()
        {
        }
        /**
         * Rules meta box
         */
        function meta_box_rules()
        {
        }
        /**
         * Actions meta box
         */
        function meta_box_actions()
        {
        }
        /**
         * Variables meta box
         */
        function meta_box_variables()
        {
        }
        /**
         * Timing meta box
         */
        function meta_box_timing()
        {
        }
        /**
         * Options meta box
         */
        function meta_box_options()
        {
        }
        /**
         * Replace standard post submit box
         */
        function meta_box_save()
        {
        }
        /**
         *
         */
        function workflow_js_templates()
        {
        }
        /**
         * @param $post_id
         */
        function save($post_id)
        {
        }
        /**
         * Redirect to manual runner if relevant button was clicked.
         *
         * @since 5.0.0
         *
         * @param $post_id
         */
        public function maybe_redirect_to_manual_runner($post_id)
        {
        }
        /**
         * @param string $option
         * @param array $posted
         * @param string $default
         *
         * @return string
         */
        function extract_string_option_value($option, $posted, $default = '')
        {
        }
        /**
         * @param string $option
         * @param array $posted
         * @param array $default
         *
         * @return array
         */
        function extract_array_option_value($option, $posted, $default = [])
        {
        }
        /**
         * Set post status before post is saved.
         *
         * @param array $data
         * @return array
         */
        public function insert_post_data($data)
        {
        }
    }
}
namespace AutomateWoo\Admin\Controllers {
    /**
     * Base admin controller class
     * @since 3.2.4
     */
    abstract class Base
    {
        /** @var string */
        public $name;
        /** @var array */
        private $messages = [];
        /** @var array  */
        private $errors = [];
        /** @var string */
        protected $default_route = 'list';
        /** @var string */
        protected $heading;
        /** @var array */
        protected $heading_links = [];
        /**
         * Handle controller requests
         * @return void
         */
        abstract function handle();
        /**
         * @return string
         */
        function get_heading()
        {
        }
        /**
         * @return array
         */
        function get_heading_links()
        {
        }
        function output_messages()
        {
        }
        /**
         * @param $notice_data
         * @param $type
         * @return string
         */
        function format_notice($notice_data, $type)
        {
        }
        /**
         * @return string
         */
        function get_messages()
        {
        }
        /**
         * @return string
         */
        function get_current_action()
        {
        }
        /**
         * @return string
         */
        function get_nonce_action()
        {
        }
        /**
         * Verify nonce
         * @param bool|string $nonce_action - optional custom nonce
         */
        function verify_nonce_action($nonce_action = false)
        {
        }
        /**
         * @param string $main_text
         * @param string $extra_text
         * @param string $extra_classes
         */
        function add_message($main_text, $extra_text = '', $extra_classes = '')
        {
        }
        /**
         * @param string $main_text
         * @param string $extra_text
         * @param string $extra_classes
         */
        function add_error($main_text, $extra_text = '', $extra_classes = '')
        {
        }
        /**
         * @return string
         */
        function get_responses_option_name()
        {
        }
        function store_responses()
        {
        }
        function load_stored_responses()
        {
        }
        function clear_stored_responses()
        {
        }
        /**
         * @param string $action
         * @param array $query_args
         */
        function redirect_after_action($action = '', $query_args = [])
        {
        }
        /**
         * Outputs an controller view.
         * Adds relevant variables to scope.
         *
         * IMPORTANT not to name $import_variables something as $args
         * can cause errors if there is a conflicting key name in the array
         *
         * @param $view
         * @param array $imported_variables
         * @param bool|string $path
         */
        function output_view($view, $imported_variables = [], $path = false)
        {
        }
    }
    /**
     * @class Events
     */
    class Events extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        private function output_list_table()
        {
        }
    }
    /**
     * @class Dashboard
     */
    class Dashboard extends \AutomateWoo\Admin\Controllers\Base
    {
        /** @var array */
        private $widgets;
        /** @var array */
        private $logs;
        /** @var array */
        private $carts;
        /** @var array */
        private $guests;
        /** @var array */
        private $optins_count;
        /** @var array */
        private $conversions;
        /** @var int */
        private $guests_count;
        /** @var int */
        private $active_carts_count;
        /** @var int */
        private $queued_count;
        function handle()
        {
        }
        /**
         * @return Dashboard_Widget[]
         */
        function get_widgets()
        {
        }
        /**
         * @return string
         */
        function get_date_arg()
        {
        }
        function maybe_set_date_cookie()
        {
        }
        /**
         * @return array
         */
        function get_date_range()
        {
        }
        /**
         * @return AutomateWoo\Log[]
         */
        function get_logs()
        {
        }
        /**
         * @return int
         */
        function get_active_carts_count()
        {
        }
        /**
         * @return AutomateWoo\Guest[]
         */
        function get_guests()
        {
        }
        /**
         * @return int
         */
        function get_guests_count()
        {
        }
        /**
         * @return int
         */
        function get_queued_count()
        {
        }
        /**
         * Get customers who have opted IN or OUT
         * (whichever is the opposite of the default configured setting).
         *
         * @return int
         */
        public function get_optins_count()
        {
        }
        /**
         * @return \WC_Order[]
         */
        function get_conversions()
        {
        }
    }
    /**
     * @class Tools_Controller
     */
    class Tools_Controller extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        private function output_view_listing()
        {
        }
        /**
         * @param $tool_id
         */
        private function output_view_form($tool_id)
        {
        }
        /**
         * @param $tool_id
         */
        private function output_view_confirm($tool_id)
        {
        }
        /**
         * Return true if init was successful
         *
         * @param $tool_id string
         * @return bool
         */
        private function validate_process($tool_id)
        {
        }
        /**
         * @param $tool_id
         */
        private function confirm_process($tool_id)
        {
        }
        /**
         * @param string|bool $route
         * @param Tool_Abstract|bool $tool
         * @return string
         */
        function get_route_url($route = false, $tool = false)
        {
        }
    }
    /**
     * @class Logs
     */
    class Logs extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        private function output_list_table()
        {
        }
        private function action_rerun()
        {
        }
        /**
         * @param $action
         */
        private function action_bulk_edit($action)
        {
        }
    }
    /**
     * @class Settings
     */
    class Settings extends \AutomateWoo\Admin\Controllers\Base
    {
        /** @var array */
        public $settings = [];
        function handle()
        {
        }
        function save()
        {
        }
        /**
         * @return \AutomateWoo\Admin_Settings_Tab_Abstract|false
         */
        function get_current_tab()
        {
        }
        /**
         * @return array
         */
        function get_settings_tabs()
        {
        }
    }
    /**
     * @class Guests
     */
    class Guests extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        function output_view_single()
        {
        }
        function output_no_guest()
        {
        }
        protected function output_list_table()
        {
        }
        /**
         * @param $action
         */
        protected function action_bulk_edit($action)
        {
        }
        /**
         * Delete guest action
         */
        protected function action_delete()
        {
        }
        /**
         * @return Guest|false
         */
        function get_current_guest()
        {
        }
    }
    /**
     * @class Carts
     */
    class Carts extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        private function output_list_table()
        {
        }
        /**
         * @param $action
         */
        private function action_bulk_edit($action)
        {
        }
    }
    /**
     * @class Preview
     */
    class Preview extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        function output_loader()
        {
        }
        function output_preview_ui()
        {
        }
    }
    /**
     * @class Queue
     */
    class Queue extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        private function output_list_table()
        {
        }
        /**
         * Run a single queued event
         */
        private function action_run_now()
        {
        }
        /**
         * @param $action
         */
        private function action_bulk_edit($action)
        {
        }
    }
    /**
     * @class Unsubscribes
     */
    class Optins extends \AutomateWoo\Admin\Controllers\Base
    {
        function handle()
        {
        }
        private function output_list_table()
        {
        }
        /**
         * @param $action
         */
        private function action_bulk_edit($action)
        {
        }
    }
    /**
     * @class Reports
     */
    class Reports extends \AutomateWoo\Admin\Controllers\Base
    {
        /** @var array */
        private $reports = [];
        function handle()
        {
        }
        function output_list_table()
        {
        }
        function handle_actions()
        {
        }
        /**
         * @return \AW_Admin_Reports_Tab_Abstract|false
         */
        function get_current_tab()
        {
        }
        /**
         * @return array
         */
        function get_reports_tabs()
        {
        }
    }
}
namespace AutomateWoo\Admin\Analytics {
    /**
     * AutomateWoo Analytics.
     * Formerly AutomateWoo > Reports.
     *
     * @since    x.x.x
     */
    class Rest_API
    {
        /**
         * Init.
         */
        public static function init()
        {
        }
        /**
         * Setup Analytics.
         * Register controllers and data stores.
         */
        public static function setup()
        {
        }
        /**
         * Whether or not the Rest APIs for Analytic reports are enabled.
         *
         * @return bool
         */
        public static function is_enabled()
        {
        }
        /**
         * Adds Analytics REST contollers.
         * To be used with `woocommerce_admin_rest_controllers` filter.
         *
         * @param  array $controllers
         * @return array Extended with AW Analytics controllers.
         */
        public static function add_rest_api_controllers($controllers)
        {
        }
        /**
         * Register Analytics data stores.
         * To be used with `woocommerce_data_stores` filter.
         *
         * @param  array $stores
         * @return array Extended with AW Analytics stores.
         */
        public static function register_data_stores($stores)
        {
        }
    }
}
namespace AutomateWoo\Admin\Analytics\Rest_API\Upstream {
    /**
     * This is a generic class, to cover bits shared by all reports.
     * Discovered in https://github.com/woocommerce/automatewoo/pull/1226#pullrequestreview-1210449142
     * We may consider moving it eventually to `WC_REST_Reports_Controller`,
     * so the other extensions and WC itself could make use of it, and get DRYier.
     * https://github.com/woocommerce/automatewoo/issues/1238
     *
     * @extends WC_REST_Reports_Controller
     */
    class Generic_Stats_Controller extends \WC_REST_Reports_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc-analytics';
        /**
         * Forwards a Query constructor,
         * to be able to customize Query class for a specific report.
         *
         * @param array $query_args Set of args to be forwarded to the constructor.
         * @return Query
         */
        protected function construct_query($query_args)
        {
        }
        /**
         * Maps query arguments from the REST request.
         *
         * `WP_REST_Request` does not expose a method to return all params covering defaults,
         * as it does for `$request['param']` accessor.
         * Therefore, we re-implement defaults resolution.
         *
         * @param WP_REST_Request $request Full request object.
         * @return array Simplified array of params.
         */
        protected function prepare_reports_query($request)
        {
        }
        /**
         * Get all reports.
         *
         * @param WP_REST_Request $request Request data.
         * @return WP_REST_Response|WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * Prepare a report object for serialization.
         *
         * @param stdClass        $report  Report data.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response
         */
        public function prepare_item_for_response($report, $request)
        {
        }
        /**
         * Get the Report's item properties schema.
         * Will be used by `get_item_schema` as `totals` and `subtotals`.
         *
         * To be extended by specific report properites.
         *
         * @return array
         */
        public function get_item_properties_schema()
        {
        }
        /**
         * Get the Report's schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Get the query params for collections.
         *
         * You may consider extending it with `segmentby`, with:
         * ```
         * $params = parent::get_collection_params();
         * $params['segmentby'] = array(
         *     'description'       => __( 'Segment the response by additional constraint.', 'my-extension' ),
         *     'type'              => 'string',
         *     'enum'              => array(
         *         'property_name',
         *     ),
         *     'validate_callback' => 'rest_validate_request_arg',
         * );
         * ```
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
}
namespace AutomateWoo\Admin\Analytics\Rest_API {
    /**
     * This is a bit more AW specific class, to cover bits shared by all reports.
     * This class separates AutomateWoo specific, workflow-related code
     * from the `Generic_Stats_Controller`, to make the latter one ready to be upstreamed.
     *
     * @extends Generic_Stats_Controller
     */
    class Stats_Controller extends \AutomateWoo\Admin\Analytics\Rest_API\Upstream\Generic_Stats_Controller
    {
        /**
         * Get the query params for collections.
         * Extend params with `workflows` to be able to specify the ids to filter,
         * and with `segmentby` to allow segmenting by `workflow_id`.
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
}
namespace AutomateWoo\Admin\Analytics\Rest_API\Workflow_Runs {
    /**
     * REST API AW workflow runs reports stats data store
     *
     * @version x.x.x
     */
    class Data_Store extends \Automattic\WooCommerce\Admin\API\Reports\DataStore
    {
        /**
         * Table used to get the data.
         *
         * @var string
         */
        protected static $table_name = 'automatewoo_logs';
        /**
         * Cache identifier.
         *
         * @var string
         */
        protected $cache_key = 'workflow_runs_stats';
        /**
         * Mapping columns to data type to return correct response types.
         *
         * @var array
         */
        protected $column_types = array('date_start' => 'strval', 'date_end' => 'strval', 'runs' => 'intval');
        /**
         * Data store context used to pass to filters.
         *
         * @var string
         */
        protected $context = 'workflow_runs_stats';
        /**
         * Column name to store date, instead of default `date_created`.
         *
         * @var string
         */
        protected $date_column_name = 'date';
        /**
         * Assign report columns.
         */
        protected function assign_report_columns()
        {
        }
        /**
         * Updates the database query with parameters used for workflow runs report: workflow_id.
         *
         * @param  array $query_args
         * @return void
         */
        protected function update_sql_query_params($query_args)
        {
        }
        /**
         * Returns the report data based on parameters supplied by the user.
         *
         * @param array $query_args  Query parameters.
         * @return stdClass|WP_Error Data object `{ totals: *, intervals: array, total: int, pages: int, page_no: int }`, or error.
         */
        public function get_data($query_args)
        {
        }
        /**
         * Normalizes order_by clause to match to SQL query.
         *
         * @param  string $order_by Order by option requested by user.
         * @return string
         */
        protected function normalize_order_by($order_by)
        {
        }
        /**
         * Initialize query objects.
         */
        protected function initialize_queries()
        {
        }
    }
    /**
     * REST API Reports workflows stats controller class.
     *
     * @extends Analytics_Stats_Controller
     */
    class Stats_Controller extends \AutomateWoo\Admin\Analytics\Rest_API\Stats_Controller
    {
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'reports/workflow-runs/stats';
        /**
         * Forwards a Workflow Runs Query constructor.
         *
         * @param array $query_args Set of args to be forwarded to the constructor.
         * @return Workflow_Runs_Query
         */
        protected function construct_query($query_args)
        {
        }
        /**
         * Prepare a report object for serialization.
         * Wraps `Generic_Stats_Controller#prepare_item_for_response` with the report-specific filter.
         *
         * @param stdClass        $report  Report data.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response
         */
        public function prepare_item_for_response($report, $request)
        {
        }
        /**
         * Get the Report's item properties schema.
         * Will be used by `get_item_schema` as `totals` and `subtotals`.
         *
         * To be extended by specific report properites.
         *
         * @return array
         */
        public function get_item_properties_schema()
        {
        }
        /**
         * Get the Workflow Runs Report's schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Get the query params for collections.
         * Extend `orderby` enum to allow ordering by `date` and `runs`.
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * Workflow runs specific Woo Report Query.
     *
     * @see Automattic\WooCommerce\Admin\API\Reports\Query
     */
    class Query extends \Automattic\WooCommerce\Admin\API\Reports\Query
    {
        /**
         * Valid fields for Products report.
         *
         * @return array
         */
        protected function get_default_query_vars()
        {
        }
        /**
         * Get workflows data based on the current query vars.
         *
         * @return array
         */
        public function get_data()
        {
        }
    }
}
namespace AutomateWoo\Admin {
    /**
     * Class AssetData.
     *
     * Note: this data is only loaded for pages powered by WC-Admin.
     *
     * @since   5.0.0
     * @package AutomateWoo\Admin
     */
    class AssetData
    {
        /**
         * @var AssetDataRegistry
         */
        protected $registry;
        /**
         * AssetData constructor.
         *
         * @param AssetDataRegistry $registry
         */
        public function __construct(\Automattic\WooCommerce\Blocks\Assets\AssetDataRegistry $registry)
        {
        }
        /**
         * Add data to WC asset data registry.
         *
         * @throws InvalidArgumentException Only throws when site is in debug mode.
         */
        public function add_data()
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @class Admin
     */
    class Admin
    {
        static function init()
        {
        }
        static function includes()
        {
        }
        static function screen_options()
        {
        }
        /**
         * Handle saving screen option.
         *
         * @param bool   $keep
         * @param string $option
         * @param int    $value
         *
         * @return bool|int
         */
        public static function handle_save_screen_option($keep, $option, $value)
        {
        }
        public static function admin_menu()
        {
        }
        /**
         * Highlight the correct top level admin menu item
         */
        static function menu_highlight()
        {
        }
        static function register_scripts()
        {
        }
        static function register_styles()
        {
        }
        /**
         * Enqueue scripts based on screen id
         */
        static function enqueue_scripts_and_styles()
        {
        }
        /**
         * Should the react UI load?
         *
         * If the current page is an AW php page or a WC Admin JS-powered page, then yes.
         *
         * @since 5.1.2
         *
         * @return bool
         */
        protected static function should_react_ui_be_loaded()
        {
        }
        /**
         * Load react powered admin JS.
         *
         * @since 5.0.0
         */
        public static function load_react_ui_scripts()
        {
        }
        static function screen_ids()
        {
        }
        /**
         * Add AW screens to the woocommerce screen IDs list.
         * Important for admin script loading.
         *
         * @since 4.4.2
         *
         * @param array $screen_ids
         *
         * @return array
         */
        static function filter_woocommerce_screen_ids($screen_ids)
        {
        }
        /**
         * Hide the WC footer message on AW screens.
         *
         * @since 4.4.2
         *
         * @param bool $display
         *
         * @return bool
         */
        static function filter_woocommerce_display_footer_text($display)
        {
        }
        /**
         * Remove the WC help tab on AW screens
         *
         * @since 4.4.2
         */
        static function remove_woocommerce_help_tab()
        {
        }
        /**
         * Dynamic replace top level menu
         */
        static function replace_top_level_menu()
        {
        }
        /**
         * @param string $page
         * @param bool|int $id
         * @return false|string
         */
        static function page_url($page, $id = false)
        {
        }
        static function page_data_upgrade()
        {
        }
        /**
         * @param $view
         * @param array $imported_variables
         * @param mixed $path
         */
        static function get_view($view, $imported_variables = [], $path = false)
        {
        }
        static function load_controller()
        {
        }
        /**
         * @return string|bool
         */
        static function get_screen_id()
        {
        }
        /**
         * Save settings on wp_loaded
         */
        static function save_settings()
        {
        }
        /**
         * @param $page
         * @return bool
         */
        static function is_page($page)
        {
        }
        /**
         * Display an admin notice.
         *
         * @param string $type         (warning,error,success)
         * @param string $strong       highlighted notice content (text or html)
         * @param string $more         notice content (text or html)
         * @param string $class        extra classes to add to the notice (eg., is-dismissible)
         * @param string $button_text  text to display on the primary button (not displayed if empty)
         * @param string $button_link  link for the button (not displayed if empty)
         * @param string $button_class extra classes to add to the button
         */
        public static function notice($type, $strong, $more = '', $class = '', $button_text = '', $button_link = '', $button_class = '')
        {
        }
        /**
         * @param $ids
         * @return array
         */
        static function inject_woocommerce_reports_screen_ids($ids)
        {
        }
        /**
         * @param $stylesheets
         * @return array
         */
        static function add_editor_styles($stylesheets)
        {
        }
        /**
         * @param $id
         * @param $title
         * @param callable $callback
         * @param null $screen
         * @param string $context
         * @param string $priority
         * @param null $callback_args
         */
        static function add_meta_box($id, $title, $callback, $screen = null, $context = 'advanced', $priority = 'default', $callback_args = null)
        {
        }
        /**
         * @param $classes
         *
         * @return array
         */
        static function inject_postbox_class($classes)
        {
        }
        /**
         * @param $vars array
         */
        static function get_hidden_form_inputs_from_query($vars)
        {
        }
        /**
         * Display a help tip.
         *
         * @param string $tip        The tip to display. Not expected to be escaped.
         * @param bool   $pull_right Whether the tip should include the automatewoo-help-tip--right class
         * @param bool   $allow_html Deprecated parameter, no longer used.
         */
        static function help_tip($tip, $pull_right = true, $allow_html = false)
        {
        }
        /**
         * @param string $type
         * @param string $dashicon
         * @param bool $tip
         * @return string
         */
        static function badge($type, $dashicon, $tip = false)
        {
        }
        /**
         * @param $url
         * @param bool $pull_right
         * @return string
         */
        static function help_link($url, $pull_right = true)
        {
        }
        /**
         * @param string $page
         * @param string|bool $utm_source
         * @param string|bool $utm_campaign
         * @return string
         */
        static function get_docs_link($page = '', $utm_source = false, $utm_campaign = false)
        {
        }
        /**
         * @param string $page
         * @param string|bool $utm_source
         * @param string|bool $utm_campaign
         * @return string
         */
        static function get_website_link($page = '', $utm_source = false, $utm_campaign = false)
        {
        }
        /**
         * Get WooCommerce.com marketplace product link.
         *
         * @since 3.7.0
         *
         * @param string $product
         *
         * @return string
         */
        public static function get_marketplace_product_link($product = 'automatewoo')
        {
        }
        /**
         * Output loader
         */
        static function cache_preview_loader()
        {
        }
        /**
         * @param string $slug
         * @param string $page_title
         * @param string $page_content
         * @param string $option
         * @return int|bool Page ID
         */
        static function create_page($slug, $page_title, $page_content, $option)
        {
        }
        /**
         * Return the current WP screen ID.
         *
         * @since 4.4.2
         *
         * @return bool|string
         */
        static function get_current_screen_id()
        {
        }
        /**
         * Is the current WP screen an AutomateWoo screen?
         *
         * @since 4.7.0
         * @return bool
         */
        static function is_automatewoo_screen()
        {
        }
        /**
         * Unhook all admin notices.
         *
         * @since 4.4.0
         */
        static function remove_admin_notices()
        {
        }
        /**
         * Get marketplace subscriptions tab URL.
         *
         * @since 4.7.0
         *
         * @return string
         */
        public static function get_marketplace_subscriptions_tab_url()
        {
        }
    }
}
namespace AutomateWoo\Admin {
    /**
     * AutomateWoo Analytics.
     * Formerly AutomateWoo > Reports.
     *
     * @since    x.x.x
     */
    class Analytics
    {
        /**
         * Init.
         */
        public static function init()
        {
        }
        /**
         * Setup Analytics.
         * Add report items and register scripts.
         */
        public static function setup()
        {
        }
        /**
         * Add "Bundles" as a Analytics submenu item.
         *
         * @param  array $report_pages  Report page menu items.
         * @return array
         */
        public static function add_report_menu_item($report_pages)
        {
        }
        /**
         * Register analytics JS.
         */
        public static function register_script()
        {
        }
        /**
         * Whether or not the new Analytics reports are enabled.
         *
         * @return bool
         */
        public static function is_enabled()
        {
        }
    }
}
namespace AutomateWoo {
    class User_Tags_Export
    {
        /**
         * @var \stdClass|\WP_Term
         */
        public $tag;
        /**
         * @param $tag_id
         */
        function set_user_tag($tag_id)
        {
        }
        /**
         * @param int $limit
         * @param int $offset
         * @return array
         */
        function get_users($limit, $offset = 0)
        {
        }
        /**
         * Process content of CSV file
         *
         * @since 0.1
         **/
        function generate_csv()
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit8ccd598046d398ab3745c1132057d38b
    {
        private static $loader;
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit8ccd598046d398ab3745c1132057d38b
    {
        public static $prefixLengthsPsr4 = array('A' => array('AutomateWoo\\Admin\\' => 18, 'AutomateWoo\\' => 12));
        public static $prefixDirsPsr4 = array('AutomateWoo\\Admin\\' => array(0 => __DIR__ . '/../..' . '/admin'), 'AutomateWoo\\' => array(0 => __DIR__ . '/../..' . '/includes'));
        public static $classMap = array('AW_Admin_Coupons_List' => __DIR__ . '/../..' . '/admin/coupons-list.php', 'AW_Admin_Reports_Tab_Abstract' => __DIR__ . '/../..' . '/admin/reports-tabs/abstract.php', 'AW_Mailer_API' => __DIR__ . '/../..' . '/includes/mailer-api.php', 'AW_Report_Abstract_Graph' => __DIR__ . '/../..' . '/admin/reports/abstract-graph.php', 'AW_Reports_Tab_Conversions' => __DIR__ . '/../..' . '/admin/reports-tabs/conversions.php', 'AW_Reports_Tab_Email_Tracking' => __DIR__ . '/../..' . '/admin/reports-tabs/email-tracking.php', 'AW_Reports_Tab_Runs_By_Date' => __DIR__ . '/../..' . '/admin/reports-tabs/runs-by-date.php', 'AutomateWoo' => __DIR__ . '/../..' . '/includes/AutomateWoo.php', 'AutomateWoo\\AbstractOptionsStore' => __DIR__ . '/../..' . '/includes/AbstractOptionsStore.php', 'AutomateWoo\\Abstract_Model_With_Meta_Table' => __DIR__ . '/../..' . '/includes/Abstract_Model_With_Meta_Table.php', 'AutomateWoo\\Action' => __DIR__ . '/../..' . '/includes/Action.php', 'AutomateWoo\\ActionScheduler\\ActionScheduler' => __DIR__ . '/../..' . '/includes/ActionScheduler/ActionScheduler.php', 'AutomateWoo\\ActionScheduler\\ActionSchedulerInterface' => __DIR__ . '/../..' . '/includes/ActionScheduler/ActionSchedulerInterface.php', 'AutomateWoo\\ActionScheduler\\AsyncActionRunner' => __DIR__ . '/../..' . '/includes/ActionScheduler/AsyncActionRunner.php', 'AutomateWoo\\Action_Active_Campaign_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Active_Campaign_Abstract.php', 'AutomateWoo\\Action_Active_Campaign_Add_Tag' => __DIR__ . '/../..' . '/includes/Actions/Active_Campaign_Add_Tag.php', 'AutomateWoo\\Action_Active_Campaign_Create_Contact' => __DIR__ . '/../..' . '/includes/Actions/Active_Campaign_Create_Contact.php', 'AutomateWoo\\Action_Active_Campaign_Remove_Tag' => __DIR__ . '/../..' . '/includes/Actions/Active_Campaign_Remove_Tag.php', 'AutomateWoo\\Action_Active_Campaign_Update_Contact_Field' => __DIR__ . '/../..' . '/includes/Actions/Active_Campaign_Update_Contact_Field.php', 'AutomateWoo\\Action_Add_To_Mad_Mimi_List' => __DIR__ . '/../..' . '/includes/Actions/Add_To_Mad_Mimi_List.php', 'AutomateWoo\\Action_Campaign_Monitor_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Campaign_Monitor_Abstract.php', 'AutomateWoo\\Action_Campaign_Monitor_Add_Subscriber' => __DIR__ . '/../..' . '/includes/Actions/Campaign_Monitor_Add_Subscriber.php', 'AutomateWoo\\Action_Campaign_Monitor_Remove_Subscriber' => __DIR__ . '/../..' . '/includes/Actions/Campaign_Monitor_Remove_Subscriber.php', 'AutomateWoo\\Action_Change_Post_Status' => __DIR__ . '/../..' . '/includes/Actions/Change_Post_Status.php', 'AutomateWoo\\Action_Change_Workflow_Status' => __DIR__ . '/../..' . '/includes/Actions/Change_Workflow_Status.php', 'AutomateWoo\\Action_Clear_Queued_Events' => __DIR__ . '/../..' . '/includes/Actions/Clear_Queued_Events.php', 'AutomateWoo\\Action_Custom_Function' => __DIR__ . '/../..' . '/includes/Actions/Custom_Function.php', 'AutomateWoo\\Action_Customer_Add_Tags' => __DIR__ . '/../..' . '/includes/Actions/Customer_Add_Tags.php', 'AutomateWoo\\Action_Customer_Change_Role' => __DIR__ . '/../..' . '/includes/Actions/Customer_Change_Role.php', 'AutomateWoo\\Action_Customer_Remove_Tags' => __DIR__ . '/../..' . '/includes/Actions/Customer_Remove_Tags.php', 'AutomateWoo\\Action_Customer_Update_Meta' => __DIR__ . '/../..' . '/includes/Actions/Customer_Update_Meta.php', 'AutomateWoo\\Action_Mailchimp_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Abstract.php', 'AutomateWoo\\Action_Mailchimp_Add_To_Group' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Add_To_Group.php', 'AutomateWoo\\Action_Mailchimp_Remove_From_Group' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Remove_From_Group.php', 'AutomateWoo\\Action_Mailchimp_Subscribe' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Subscribe.php', 'AutomateWoo\\Action_Mailchimp_Unsubscribe' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Unsubscribe.php', 'AutomateWoo\\Action_Mailchimp_Update_Contact_Field' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Update_Contact_Field.php', 'AutomateWoo\\Action_Memberships_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Memberships_Abstract.php', 'AutomateWoo\\Action_Memberships_Change_Plan' => __DIR__ . '/../..' . '/includes/Actions/Memberships_Change_Plan.php', 'AutomateWoo\\Action_Memberships_Delete_User_Membership' => __DIR__ . '/../..' . '/includes/Actions/Memberships_Delete_User_Membership.php', 'AutomateWoo\\Action_Order_Add_Note' => __DIR__ . '/../..' . '/includes/Actions/Order_Add_Note.php', 'AutomateWoo\\Action_Order_Change_Status' => __DIR__ . '/../..' . '/includes/Actions/Order_Change_Status.php', 'AutomateWoo\\Action_Order_Item_Update_Meta' => __DIR__ . '/../..' . '/includes/Actions/Order_Item_Update_Meta.php', 'AutomateWoo\\Action_Order_Resend_Email' => __DIR__ . '/../..' . '/includes/Actions/Order_Resend_Email.php', 'AutomateWoo\\Action_Order_Trigger_Action' => __DIR__ . '/../..' . '/includes/Actions/Order_Trigger_Action.php', 'AutomateWoo\\Action_Order_Update_Customer_Shipping_Note' => __DIR__ . '/../..' . '/includes/Actions/Order_Update_Customer_Shipping_Note.php', 'AutomateWoo\\Action_Order_Update_Meta' => __DIR__ . '/../..' . '/includes/Actions/Order_Update_Meta.php', 'AutomateWoo\\Action_Points_Rewards_Add_Points' => __DIR__ . '/../..' . '/includes/Actions/Points_Rewards_Add_Points.php', 'AutomateWoo\\Action_Points_Rewards_Edit_Points_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Points_Rewards_Edit_Points_Abstract.php', 'AutomateWoo\\Action_Points_Rewards_Remove_Points' => __DIR__ . '/../..' . '/includes/Actions/Points_Rewards_Remove_Points.php', 'AutomateWoo\\Action_Send_Email' => __DIR__ . '/../..' . '/includes/Actions/Send_Email.php', 'AutomateWoo\\Action_Send_Email_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Send_Email_Abstract.php', 'AutomateWoo\\Action_Send_Email_Plain_Text' => __DIR__ . '/../..' . '/includes/Actions/Send_Email_Plain_Text.php', 'AutomateWoo\\Action_Send_Email_Raw' => __DIR__ . '/../..' . '/includes/Actions/Send_Email_Raw.php', 'AutomateWoo\\Action_Send_SMS_Twilio' => __DIR__ . '/../..' . '/includes/Actions/Send_SMS_Twilio.php', 'AutomateWoo\\Action_Subscription_Add_Coupon' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Add_Coupon.php', 'AutomateWoo\\Action_Subscription_Add_Note' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Add_Note.php', 'AutomateWoo\\Action_Subscription_Add_Product' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Add_Product.php', 'AutomateWoo\\Action_Subscription_Change_Status' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Change_Status.php', 'AutomateWoo\\Action_Subscription_Edit_Coupon_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Edit_Coupon_Abstract.php', 'AutomateWoo\\Action_Subscription_Edit_Product_Abstract' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Edit_Product_Abstract.php', 'AutomateWoo\\Action_Subscription_Remove_Coupon' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Remove_Coupon.php', 'AutomateWoo\\Action_Subscription_Remove_Product' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Remove_Product.php', 'AutomateWoo\\Action_Subscription_Send_Invoice' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Send_Invoice.php', 'AutomateWoo\\Action_Subscription_Update_Meta' => __DIR__ . '/../..' . '/includes/Actions/Subscription_Update_Meta.php', 'AutomateWoo\\Action_Update_Product_Meta' => __DIR__ . '/../..' . '/includes/Actions/Update_Product_Meta.php', 'AutomateWoo\\Actions' => __DIR__ . '/../..' . '/includes/Actions.php', 'AutomateWoo\\Actions\\ActionInterface' => __DIR__ . '/../..' . '/includes/Actions/ActionInterface.php', 'AutomateWoo\\Actions\\Mailchimp_Update_Tags' => __DIR__ . '/../..' . '/includes/Actions/Mailchimp_Update_Tags.php', 'AutomateWoo\\Actions\\PreviewableInterface' => __DIR__ . '/../..' . '/includes/Actions/PreviewableInterface.php', 'AutomateWoo\\Actions\\Subscriptions\\AbstractEditDateItem' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/AbstractEditDateItem.php', 'AutomateWoo\\Actions\\Subscriptions\\AbstractEditItem' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/AbstractEditItem.php', 'AutomateWoo\\Actions\\Subscriptions\\AbstractEditShipping' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/AbstractEditShipping.php', 'AutomateWoo\\Actions\\Subscriptions\\AddShipping' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/AddShipping.php', 'AutomateWoo\\Actions\\Subscriptions\\RecalculateTaxes' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/RecalculateTaxes.php', 'AutomateWoo\\Actions\\Subscriptions\\RegenerateDownloadPermissions' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/RegenerateDownloadPermissions.php', 'AutomateWoo\\Actions\\Subscriptions\\RemoveShipping' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/RemoveShipping.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateCurrency' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateCurrency.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateEndDate' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateEndDate.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateNextPaymentDate' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateNextPaymentDate.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateProduct' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateProduct.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateSchedule' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateSchedule.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateShipping' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateShipping.php', 'AutomateWoo\\Actions\\Subscriptions\\UpdateTrialEndDate' => __DIR__ . '/../..' . '/includes/Actions/Subscriptions/UpdateTrialEndDate.php', 'AutomateWoo\\Actions\\TestableInterface' => __DIR__ . '/../..' . '/includes/Actions/TestableInterface.php', 'AutomateWoo\\Active_Triggers_Cache' => __DIR__ . '/../..' . '/includes/Active_Triggers_Cache.php', 'AutomateWoo\\ActivityPanelInbox\\SubscriptionsAddonDeactivatedNote' => __DIR__ . '/../..' . '/includes/ActivityPanelInbox/SubscriptionsAddonDeactivatedNote.php', 'AutomateWoo\\ActivityPanelInbox\\UpdateNote' => __DIR__ . '/../..' . '/includes/ActivityPanelInbox/UpdateNote.php', 'AutomateWoo\\ActivityPanelInbox\\WelcomeNote' => __DIR__ . '/../..' . '/includes/ActivityPanelInbox/WelcomeNote.php', 'AutomateWoo\\Addon' => __DIR__ . '/../..' . '/includes/abstracts/addon.php', 'AutomateWoo\\Addons' => __DIR__ . '/../..' . '/includes/Addons.php', 'AutomateWoo\\Admin' => __DIR__ . '/../..' . '/admin/admin.php', 'AutomateWoo\\AdminNotices' => __DIR__ . '/../..' . '/includes/AdminNotices.php', 'AutomateWoo\\AdminNotices\\AbstractAdminNotice' => __DIR__ . '/../..' . '/includes/AdminNotices/AbstractAdminNotice.php', 'AutomateWoo\\AdminNotices\\AddonWelcome' => __DIR__ . '/../..' . '/includes/AdminNotices/AddonWelcome.php', 'AutomateWoo\\AdminNotices\\AdminNoticeInterface' => __DIR__ . '/../..' . '/includes/AdminNotices/AdminNoticeInterface.php', 'AutomateWoo\\AdminNotices\\NewWorkflowHelperManager' => __DIR__ . '/../..' . '/includes/AdminNotices/NewWorkflowHelperManager.php', 'AutomateWoo\\AdminNotices\\UpdateNoticeManager' => __DIR__ . '/../..' . '/includes/AdminNotices/UpdateNoticeManager.php', 'AutomateWoo\\AdminNotices\\WcAdminDisabled' => __DIR__ . '/../..' . '/includes/AdminNotices/WcAdminDisabled.php', 'AutomateWoo\\AdminNotices\\WelcomeNoticeManager' => __DIR__ . '/../..' . '/includes/AdminNotices/WelcomeNoticeManager.php', 'AutomateWoo\\Admin\\Analytics' => __DIR__ . '/../..' . '/admin/Analytics.php', 'AutomateWoo\\Admin\\Analytics\\Rest_API' => __DIR__ . '/../..' . '/admin/Analytics/Rest_API.php', 'AutomateWoo\\Admin\\Analytics\\Rest_API\\Stats_Controller' => __DIR__ . '/../..' . '/admin/Analytics/Rest_API/Stats_Controller.php', 'AutomateWoo\\Admin\\Analytics\\Rest_API\\Upstream\\Generic_Stats_Controller' => __DIR__ . '/../..' . '/admin/Analytics/Rest_API/Upstream/Generic_Stats_Controller.php', 'AutomateWoo\\Admin\\Analytics\\Rest_API\\Workflow_Runs\\Data_Store' => __DIR__ . '/../..' . '/admin/Analytics/Rest_API/Workflow_Runs/Stats_Store.php', 'AutomateWoo\\Admin\\Analytics\\Rest_API\\Workflow_Runs\\Query' => __DIR__ . '/../..' . '/admin/Analytics/Rest_API/Workflow_Runs/Stats_Query.php', 'AutomateWoo\\Admin\\Analytics\\Rest_API\\Workflow_Runs\\Stats_Controller' => __DIR__ . '/../..' . '/admin/Analytics/Rest_API/Workflow_Runs/Stats_Controller.php', 'AutomateWoo\\Admin\\AssetData' => __DIR__ . '/../..' . '/admin/AssetData.php', 'AutomateWoo\\Admin\\Controllers' => __DIR__ . '/../..' . '/admin/controllers.php', 'AutomateWoo\\Admin\\Controllers\\Base' => __DIR__ . '/../..' . '/admin/controllers/base.php', 'AutomateWoo\\Admin\\Controllers\\Carts' => __DIR__ . '/../..' . '/admin/controllers/carts.php', 'AutomateWoo\\Admin\\Controllers\\Dashboard' => __DIR__ . '/../..' . '/admin/controllers/dashboard.php', 'AutomateWoo\\Admin\\Controllers\\Events' => __DIR__ . '/../..' . '/admin/controllers/events.php', 'AutomateWoo\\Admin\\Controllers\\Guests' => __DIR__ . '/../..' . '/admin/controllers/guests.php', 'AutomateWoo\\Admin\\Controllers\\Logs' => __DIR__ . '/../..' . '/admin/controllers/logs.php', 'AutomateWoo\\Admin\\Controllers\\Optins' => __DIR__ . '/../..' . '/admin/controllers/opt-ins.php', 'AutomateWoo\\Admin\\Controllers\\Preview' => __DIR__ . '/../..' . '/admin/controllers/preview.php', 'AutomateWoo\\Admin\\Controllers\\Queue' => __DIR__ . '/../..' . '/admin/controllers/queue.php', 'AutomateWoo\\Admin\\Controllers\\Reports' => __DIR__ . '/../..' . '/admin/controllers/reports.php', 'AutomateWoo\\Admin\\Controllers\\Settings' => __DIR__ . '/../..' . '/admin/controllers/settings.php', 'AutomateWoo\\Admin\\Controllers\\Tools_Controller' => __DIR__ . '/../..' . '/admin/controllers/tools.php', 'AutomateWoo\\Admin\\JSON_Search' => __DIR__ . '/../..' . '/admin/json-search.php', 'AutomateWoo\\Admin\\WCAdminConnectPages' => __DIR__ . '/../..' . '/admin/WCAdminConnectPages.php', 'AutomateWoo\\Admin_Ajax' => __DIR__ . '/../..' . '/admin/ajax.php', 'AutomateWoo\\Admin_Data_Layer_Formatter' => __DIR__ . '/../..' . '/admin/data-layer-formatter.php', 'AutomateWoo\\Admin_List_Table' => __DIR__ . '/../..' . '/admin/list-table.php', 'AutomateWoo\\Admin_Settings_Tab_Abstract' => __DIR__ . '/../..' . '/admin/settings-tabs/abstract.php', 'AutomateWoo\\Admin_Workflow_Edit' => __DIR__ . '/../..' . '/admin/workflow-edit.php', 'AutomateWoo\\Admin_Workflow_List' => __DIR__ . '/../..' . '/admin/workflow-list.php', 'AutomateWoo\\Ajax' => __DIR__ . '/../..' . '/includes/Ajax.php', 'AutomateWoo\\Async_Events' => __DIR__ . '/../..' . '/includes/Async_Events.php', 'AutomateWoo\\Async_Events\\Abstract_Async_Event' => __DIR__ . '/../..' . '/includes/Async_Events/Abstract_Async_Event.php', 'AutomateWoo\\Async_Events\\BookingCreated' => __DIR__ . '/../..' . '/includes/Async_Events/BookingCreated.php', 'AutomateWoo\\Async_Events\\BookingStatusChanged' => __DIR__ . '/../..' . '/includes/Async_Events/BookingStatusChanged.php', 'AutomateWoo\\Async_Events\\MC4WP_Form_Success' => __DIR__ . '/../..' . '/includes/Async_Events/MC4WP_Form_Success.php', 'AutomateWoo\\Async_Events\\MembershipCreated' => __DIR__ . '/../..' . '/includes/Async_Events/MembershipCreated.php', 'AutomateWoo\\Async_Events\\Membership_Status_Changed' => __DIR__ . '/../..' . '/includes/Async_Events/Membership_Status_Changed.php', 'AutomateWoo\\Async_Events\\Order_Created' => __DIR__ . '/../..' . '/includes/Async_Events/Order_Created.php', 'AutomateWoo\\Async_Events\\Order_Paid' => __DIR__ . '/../..' . '/includes/Async_Events/Order_Paid.php', 'AutomateWoo\\Async_Events\\Order_Pending' => __DIR__ . '/../..' . '/includes/Async_Events/Order_Pending.php', 'AutomateWoo\\Async_Events\\Order_Status_Changed' => __DIR__ . '/../..' . '/includes/Async_Events/Order_Status_Changed.php', 'AutomateWoo\\Async_Events\\Review_Approved' => __DIR__ . '/../..' . '/includes/Async_Events/Review_Approved.php', 'AutomateWoo\\Async_Events\\Subscription_Created' => __DIR__ . '/../..' . '/includes/Async_Events/Subscription_Created.php', 'AutomateWoo\\Async_Events\\Subscription_Renewal_Payment_Complete' => __DIR__ . '/../..' . '/includes/Async_Events/Subscription_Renewal_Payment_Complete.php', 'AutomateWoo\\Async_Events\\Subscription_Renewal_Payment_Failed' => __DIR__ . '/../..' . '/includes/Async_Events/Subscription_Renewal_Payment_Failed.php', 'AutomateWoo\\Async_Events\\Subscription_Status_Changed' => __DIR__ . '/../..' . '/includes/Async_Events/Subscription_Status_Changed.php', 'AutomateWoo\\Async_Events\\UniqueEventsForRequestHelper' => __DIR__ . '/../..' . '/includes/Async_Events/UniqueEventsForRequestHelper.php', 'AutomateWoo\\Async_Events\\User_Registered' => __DIR__ . '/../..' . '/includes/Async_Events/User_Registered.php', 'AutomateWoo\\Async_Request_Abstract' => __DIR__ . '/../..' . '/includes/Async_Request_Abstract.php', 'AutomateWoo\\Background_Processes' => __DIR__ . '/../..' . '/includes/Background_Processes.php', 'AutomateWoo\\Background_Processes\\Base' => __DIR__ . '/../..' . '/includes/Background_Processes/Base.php', 'AutomateWoo\\Background_Processes\\Event_Runner' => __DIR__ . '/../..' . '/includes/Background_Processes/Event_Runner.php', 'AutomateWoo\\Background_Processes\\Tools' => __DIR__ . '/../..' . '/includes/Background_Processes/Tools.php', 'AutomateWoo\\Background_Processes\\Wishlist_Item_On_Sale' => __DIR__ . '/../..' . '/includes/Background_Processes/Wishlist_Item_On_Sale.php', 'AutomateWoo\\Background_Processes\\Workflows' => __DIR__ . '/../..' . '/includes/Background_Processes/Workflows.php', 'AutomateWoo\\Blocks\\Marketing_Optin_Block' => __DIR__ . '/../..' . '/includes/Blocks/Marketing_Optin_Block.php', 'AutomateWoo\\Cache' => __DIR__ . '/../..' . '/includes/Cache.php', 'AutomateWoo\\Cart' => __DIR__ . '/../..' . '/includes/Cart.php', 'AutomateWoo\\Cart_Factory' => __DIR__ . '/../..' . '/includes/Cart_Factory.php', 'AutomateWoo\\Cart_Item' => __DIR__ . '/../..' . '/includes/Cart_Item.php', 'AutomateWoo\\Cart_Query' => __DIR__ . '/../..' . '/includes/Cart_Query.php', 'AutomateWoo\\Carts' => __DIR__ . '/../..' . '/includes/Carts.php', 'AutomateWoo\\Carts\\CartRestorer' => __DIR__ . '/../..' . '/includes/Carts/CartRestorer.php', 'AutomateWoo\\Clean' => __DIR__ . '/../..' . '/includes/Clean.php', 'AutomateWoo\\Communication_Account_Tab' => __DIR__ . '/../..' . '/includes/Communication_Account_Tab.php', 'AutomateWoo\\Communication_Page' => __DIR__ . '/../..' . '/includes/Communication_Page.php', 'AutomateWoo\\Constants' => __DIR__ . '/../..' . '/includes/Constants.php', 'AutomateWoo\\Conversions' => __DIR__ . '/../..' . '/includes/Conversions.php', 'AutomateWoo\\Cookies' => __DIR__ . '/../..' . '/includes/Cookies.php', 'AutomateWoo\\Coupon_Generator' => __DIR__ . '/../..' . '/includes/Coupon_Generator.php', 'AutomateWoo\\Cron' => __DIR__ . '/../..' . '/includes/Cron.php', 'AutomateWoo\\Customer' => __DIR__ . '/../..' . '/includes/Customer.php', 'AutomateWoo\\Customer_Factory' => __DIR__ . '/../..' . '/includes/Customer_Factory.php', 'AutomateWoo\\Customer_Query' => __DIR__ . '/../..' . '/includes/Customer_Query.php', 'AutomateWoo\\Customers' => __DIR__ . '/../..' . '/includes/Customers.php', 'AutomateWoo\\Dashboard_Widget' => __DIR__ . '/../..' . '/admin/dashboard-widgets/abstract.php', 'AutomateWoo\\Dashboard_Widget_Chart' => __DIR__ . '/../..' . '/admin/dashboard-widgets/chart-abstract.php', 'AutomateWoo\\Dashboard_Widget_Chart_Conversions' => __DIR__ . '/../..' . '/admin/dashboard-widgets/chart-conversions.php', 'AutomateWoo\\Dashboard_Widget_Chart_Email' => __DIR__ . '/../..' . '/admin/dashboard-widgets/chart-email.php', 'AutomateWoo\\Dashboard_Widget_Chart_Workflows_Run' => __DIR__ . '/../..' . '/admin/dashboard-widgets/chart-workflows-run.php', 'AutomateWoo\\Dashboard_Widget_Key_Figures' => __DIR__ . '/../..' . '/admin/dashboard-widgets/key-figures.php', 'AutomateWoo\\Dashboard_Widget_Logs' => __DIR__ . '/../..' . '/admin/dashboard-widgets/logs.php', 'AutomateWoo\\Dashboard_Widget_Queue' => __DIR__ . '/../..' . '/admin/dashboard-widgets/queue.php', 'AutomateWoo\\Dashboard_Widget_Workflows' => __DIR__ . '/../..' . '/admin/dashboard-widgets/workflows.php', 'AutomateWoo\\DataTypes\\AbstractDataType' => __DIR__ . '/../..' . '/includes/DataTypes/AbstractDataType.php', 'AutomateWoo\\DataTypes\\Booking' => __DIR__ . '/../..' . '/includes/DataTypes/Booking.php', 'AutomateWoo\\DataTypes\\Card' => __DIR__ . '/../..' . '/includes/DataTypes/Card.php', 'AutomateWoo\\DataTypes\\Cart' => __DIR__ . '/../..' . '/includes/DataTypes/Cart.php', 'AutomateWoo\\DataTypes\\Comment' => __DIR__ . '/../..' . '/includes/DataTypes/Comment.php', 'AutomateWoo\\DataTypes\\Customer' => __DIR__ . '/../..' . '/includes/DataTypes/Customer.php', 'AutomateWoo\\DataTypes\\DataTypes' => __DIR__ . '/../..' . '/includes/DataTypes/DataTypes.php', 'AutomateWoo\\DataTypes\\Download' => __DIR__ . '/../..' . '/includes/DataTypes/Download.php', 'AutomateWoo\\DataTypes\\Guest' => __DIR__ . '/../..' . '/includes/DataTypes/Guest.php', 'AutomateWoo\\DataTypes\\Membership' => __DIR__ . '/../..' . '/includes/DataTypes/Membership.php', 'AutomateWoo\\DataTypes\\Order' => __DIR__ . '/../..' . '/includes/DataTypes/Order.php', 'AutomateWoo\\DataTypes\\OrderItem' => __DIR__ . '/../..' . '/includes/DataTypes/OrderItem.php', 'AutomateWoo\\DataTypes\\OrderNote' => __DIR__ . '/../..' . '/includes/DataTypes/OrderNote.php', 'AutomateWoo\\DataTypes\\Post' => __DIR__ . '/../..' . '/includes/DataTypes/Post.php', 'AutomateWoo\\DataTypes\\Product' => __DIR__ . '/../..' . '/includes/DataTypes/Product.php', 'AutomateWoo\\DataTypes\\ProductCategory' => __DIR__ . '/../..' . '/includes/DataTypes/ProductCategory.php', 'AutomateWoo\\DataTypes\\ProductTag' => __DIR__ . '/../..' . '/includes/DataTypes/ProductTag.php', 'AutomateWoo\\DataTypes\\Refund' => __DIR__ . '/../..' . '/includes/DataTypes/Refund.php', 'AutomateWoo\\DataTypes\\Review' => __DIR__ . '/../..' . '/includes/DataTypes/Review.php', 'AutomateWoo\\DataTypes\\Shop' => __DIR__ . '/../..' . '/includes/DataTypes/Shop.php', 'AutomateWoo\\DataTypes\\Subscription' => __DIR__ . '/../..' . '/includes/DataTypes/Subscription.php', 'AutomateWoo\\DataTypes\\SubscriptionItem' => __DIR__ . '/../..' . '/includes/DataTypes/SubscriptionItem.php', 'AutomateWoo\\DataTypes\\User' => __DIR__ . '/../..' . '/includes/DataTypes/User.php', 'AutomateWoo\\DataTypes\\Wishlist' => __DIR__ . '/../..' . '/includes/DataTypes/Wishlist.php', 'AutomateWoo\\DataTypes\\Workflow' => __DIR__ . '/../..' . '/includes/DataTypes/Workflow.php', 'AutomateWoo\\Data_Layer' => __DIR__ . '/../..' . '/includes/Data_Layer.php', 'AutomateWoo\\DatabaseTables\\Carts' => __DIR__ . '/../..' . '/includes/DatabaseTables/Carts.php', 'AutomateWoo\\DatabaseTables\\CustomerMeta' => __DIR__ . '/../..' . '/includes/DatabaseTables/CustomerMeta.php', 'AutomateWoo\\DatabaseTables\\Customers' => __DIR__ . '/../..' . '/includes/DatabaseTables/Customers.php', 'AutomateWoo\\DatabaseTables\\Events' => __DIR__ . '/../..' . '/includes/DatabaseTables/Events.php', 'AutomateWoo\\DatabaseTables\\GuestMeta' => __DIR__ . '/../..' . '/includes/DatabaseTables/GuestMeta.php', 'AutomateWoo\\DatabaseTables\\Guests' => __DIR__ . '/../..' . '/includes/DatabaseTables/Guests.php', 'AutomateWoo\\DatabaseTables\\LogMeta' => __DIR__ . '/../..' . '/includes/DatabaseTables/LogMeta.php', 'AutomateWoo\\DatabaseTables\\Logs' => __DIR__ . '/../..' . '/includes/DatabaseTables/Logs.php', 'AutomateWoo\\DatabaseTables\\Queue' => __DIR__ . '/../..' . '/includes/DatabaseTables/Queue.php', 'AutomateWoo\\DatabaseTables\\QueueMeta' => __DIR__ . '/../..' . '/includes/DatabaseTables/QueueMeta.php', 'AutomateWoo\\DatabaseUpdates\\AbstractDatabaseUpdate' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/AbstractDatabaseUpdate.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_2_9_7' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/2.9.7.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_3_0_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/3.0.0.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_3_5_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/3.5.0.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_3_6_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/3.6.0.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_4_0_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/4.0.0.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_5_0_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/5.0.0.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_5_1_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/5.1.0.php', 'AutomateWoo\\DatabaseUpdates\\Database_Update_5_3_0' => __DIR__ . '/../..' . '/includes/DatabaseUpdates/5.3.0.php', 'AutomateWoo\\Database_Table' => __DIR__ . '/../..' . '/includes/Database_Table.php', 'AutomateWoo\\Database_Tables' => __DIR__ . '/../..' . '/includes/Database_Tables.php', 'AutomateWoo\\DateTime' => __DIR__ . '/../..' . '/includes/DateTime.php', 'AutomateWoo\\Download' => __DIR__ . '/../..' . '/includes/Download.php', 'AutomateWoo\\Emails' => __DIR__ . '/../..' . '/includes/Emails.php', 'AutomateWoo\\Entity\\Action' => __DIR__ . '/../..' . '/includes/Entity/Action.php', 'AutomateWoo\\Entity\\NamedEntityWithOptions' => __DIR__ . '/../..' . '/includes/Entity/NamedEntityWithOptions.php', 'AutomateWoo\\Entity\\Rule' => __DIR__ . '/../..' . '/includes/Entity/Rule.php', 'AutomateWoo\\Entity\\RuleGroup' => __DIR__ . '/../..' . '/includes/Entity/RuleGroup.php', 'AutomateWoo\\Entity\\ToArray' => __DIR__ . '/../..' . '/includes/Entity/ToArray.php', 'AutomateWoo\\Entity\\Trigger' => __DIR__ . '/../..' . '/includes/Entity/Trigger.php', 'AutomateWoo\\Entity\\Workflow' => __DIR__ . '/../..' . '/includes/Entity/Workflow.php', 'AutomateWoo\\Entity\\WorkflowTiming' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTiming.php', 'AutomateWoo\\Entity\\WorkflowTimingBase' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTimingBase.php', 'AutomateWoo\\Entity\\WorkflowTimingDelayed' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTimingDelayed.php', 'AutomateWoo\\Entity\\WorkflowTimingFixed' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTimingFixed.php', 'AutomateWoo\\Entity\\WorkflowTimingImmediate' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTimingImmediate.php', 'AutomateWoo\\Entity\\WorkflowTimingScheduled' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTimingScheduled.php', 'AutomateWoo\\Entity\\WorkflowTimingVariable' => __DIR__ . '/../..' . '/includes/Entity/WorkflowTimingVariable.php', 'AutomateWoo\\Error' => __DIR__ . '/../..' . '/includes/Error.php', 'AutomateWoo\\Event' => __DIR__ . '/../..' . '/includes/Event.php', 'AutomateWoo\\Event_Factory' => __DIR__ . '/../..' . '/includes/Event_Factory.php', 'AutomateWoo\\Event_Helpers\\Products_On_Sale' => __DIR__ . '/../..' . '/includes/Event_Helpers/Products_On_Sale.php', 'AutomateWoo\\Event_Helpers\\Review_Posted' => __DIR__ . '/../..' . '/includes/Event_Helpers/Review_Posted.php', 'AutomateWoo\\Event_Helpers\\Subscription_Status_Changed' => __DIR__ . '/../..' . '/includes/Event_Helpers/Subscription_Status_Changed.php', 'AutomateWoo\\Event_Helpers\\User_Registration' => __DIR__ . '/../..' . '/includes/Event_Helpers/User_Registration.php', 'AutomateWoo\\Event_Query' => __DIR__ . '/../..' . '/includes/Event_Query.php', 'AutomateWoo\\Events' => __DIR__ . '/../..' . '/includes/Events.php', 'AutomateWoo\\Events_Runner_Async_Request' => __DIR__ . '/../..' . '/includes/Events_Runner_Async_Request.php', 'AutomateWoo\\Exception' => __DIR__ . '/../..' . '/includes/Exception.php', 'AutomateWoo\\Exceptions\\Exception' => __DIR__ . '/../..' . '/includes/Exceptions/Exception.php', 'AutomateWoo\\Exceptions\\InvalidArgument' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidArgument.php', 'AutomateWoo\\Exceptions\\InvalidClass' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidClass.php', 'AutomateWoo\\Exceptions\\InvalidIntegration' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidIntegration.php', 'AutomateWoo\\Exceptions\\InvalidPath' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidPath.php', 'AutomateWoo\\Exceptions\\InvalidPreviewData' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidPreviewData.php', 'AutomateWoo\\Exceptions\\InvalidStatus' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidStatus.php', 'AutomateWoo\\Exceptions\\InvalidValue' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidValue.php', 'AutomateWoo\\Exceptions\\InvalidWorkflow' => __DIR__ . '/../..' . '/includes/Exceptions/InvalidWorkflow.php', 'AutomateWoo\\Exceptions\\UserFacingException' => __DIR__ . '/../..' . '/includes/Exceptions/UserFacingException.php', 'AutomateWoo\\Factories' => __DIR__ . '/../..' . '/includes/Factories.php', 'AutomateWoo\\Factory' => __DIR__ . '/../..' . '/includes/Factory.php', 'AutomateWoo\\Fields\\Attribute' => __DIR__ . '/../..' . '/includes/Fields/Attribute.php', 'AutomateWoo\\Fields\\Attribute_Term' => __DIR__ . '/../..' . '/includes/Fields/Attribute_Term.php', 'AutomateWoo\\Fields\\Before_After_Day' => __DIR__ . '/../..' . '/includes/Fields/Before_After_Day.php', 'AutomateWoo\\Fields\\BookingStatus' => __DIR__ . '/../..' . '/includes/Fields/BookingStatus.php', 'AutomateWoo\\Fields\\Category' => __DIR__ . '/../..' . '/includes/Fields/Category.php', 'AutomateWoo\\Fields\\Checkbox' => __DIR__ . '/../..' . '/includes/Fields/Checkbox.php', 'AutomateWoo\\Fields\\Countries' => __DIR__ . '/../..' . '/includes/Fields/Countries.php', 'AutomateWoo\\Fields\\Coupon' => __DIR__ . '/../..' . '/includes/Fields/Coupon.php', 'AutomateWoo\\Fields\\Date' => __DIR__ . '/../..' . '/includes/Fields/Date.php', 'AutomateWoo\\Fields\\EmailAddressWithName' => __DIR__ . '/../..' . '/includes/Fields/EmailAddressWithName.php', 'AutomateWoo\\Fields\\Email_Content' => __DIR__ . '/../..' . '/includes/Fields/Email_Content.php', 'AutomateWoo\\Fields\\Field' => __DIR__ . '/../..' . '/includes/Fields/Field.php', 'AutomateWoo\\Fields\\HTML_Textarea' => __DIR__ . '/../..' . '/includes/Fields/HTML_Textarea.php', 'AutomateWoo\\Fields\\Number' => __DIR__ . '/../..' . '/includes/Fields/Number.php', 'AutomateWoo\\Fields\\Order_Note_Type' => __DIR__ . '/../..' . '/includes/Fields/Order_Note_Type.php', 'AutomateWoo\\Fields\\Order_Status' => __DIR__ . '/../..' . '/includes/Fields/Order_Status.php', 'AutomateWoo\\Fields\\Payment_Gateway' => __DIR__ . '/../..' . '/includes/Fields/Payment_Gateway.php', 'AutomateWoo\\Fields\\Positive_Number' => __DIR__ . '/../..' . '/includes/Fields/Positive_Number.php', 'AutomateWoo\\Fields\\Price' => __DIR__ . '/../..' . '/includes/Fields/Price.php', 'AutomateWoo\\Fields\\Product' => __DIR__ . '/../..' . '/includes/Fields/Product.php', 'AutomateWoo\\Fields\\Searchable_Select_Abstract' => __DIR__ . '/../..' . '/includes/Fields/Searchable_Select_Abstract.php', 'AutomateWoo\\Fields\\Select' => __DIR__ . '/../..' . '/includes/Fields/Select.php', 'AutomateWoo\\Fields\\Subscription_Products' => __DIR__ . '/../..' . '/includes/Fields/Subscription_Products.php', 'AutomateWoo\\Fields\\Subscription_Status' => __DIR__ . '/../..' . '/includes/Fields/Subscription_Status.php', 'AutomateWoo\\Fields\\Tag' => __DIR__ . '/../..' . '/includes/Fields/Tag.php', 'AutomateWoo\\Fields\\Taxonomy' => __DIR__ . '/../..' . '/includes/Fields/Taxonomy.php', 'AutomateWoo\\Fields\\Taxonomy_Term' => __DIR__ . '/../..' . '/includes/Fields/Taxonomy_Term.php', 'AutomateWoo\\Fields\\Text' => __DIR__ . '/../..' . '/includes/Fields/Text.php', 'AutomateWoo\\Fields\\Text_Area' => __DIR__ . '/../..' . '/includes/Fields/Text_Area.php', 'AutomateWoo\\Fields\\Time' => __DIR__ . '/../..' . '/includes/Fields/Time.php', 'AutomateWoo\\Fields\\User_Role' => __DIR__ . '/../..' . '/includes/Fields/User_Role.php', 'AutomateWoo\\Fields\\User_Tags' => __DIR__ . '/../..' . '/includes/Fields/User_Tags.php', 'AutomateWoo\\Fields\\Workflow' => __DIR__ . '/../..' . '/includes/Fields/Workflow.php', 'AutomateWoo\\Fields_Helper' => __DIR__ . '/../..' . '/includes/Fields_Helper.php', 'AutomateWoo\\Format' => __DIR__ . '/../..' . '/includes/Format.php', 'AutomateWoo\\Formatters\\Boolean_Formatter' => __DIR__ . '/../..' . '/includes/Formatters/Boolean_Formatter.php', 'AutomateWoo\\Formatters\\Float_Formatter' => __DIR__ . '/../..' . '/includes/Formatters/Float_Formatter.php', 'AutomateWoo\\Formatters\\Formattable' => __DIR__ . '/../..' . '/includes/Formatters/Formattable.php', 'AutomateWoo\\Formatters\\Int_String_Formatter' => __DIR__ . '/../..' . '/includes/Formatters/Int_String_Formatter.php', 'AutomateWoo\\Frontend' => __DIR__ . '/../..' . '/includes/Frontend.php', 'AutomateWoo\\Frontend_Endpoints' => __DIR__ . '/../..' . '/includes/Frontend_Endpoints.php', 'AutomateWoo\\Frontend_Endpoints\\Login_Redirect' => __DIR__ . '/../..' . '/includes/Frontend_Endpoints/Login_Redirect.php', 'AutomateWoo\\Frontend_Form_Handler' => __DIR__ . '/../..' . '/includes/Frontend_Form_Handler.php', 'AutomateWoo\\Guest' => __DIR__ . '/../..' . '/includes/Guest.php', 'AutomateWoo\\Guest_Eraser' => __DIR__ . '/../..' . '/includes/Tools/Guest_Eraser.php', 'AutomateWoo\\Guest_Factory' => __DIR__ . '/../..' . '/includes/Guest_Factory.php', 'AutomateWoo\\Guest_Query' => __DIR__ . '/../..' . '/includes/Guest_Query.php', 'AutomateWoo\\Hooks' => __DIR__ . '/../..' . '/includes/Hooks.php', 'AutomateWoo\\Installer' => __DIR__ . '/../..' . '/includes/Installer.php', 'AutomateWoo\\Integration' => __DIR__ . '/../..' . '/includes/Integration.php', 'AutomateWoo\\Integration_ActiveCampaign' => __DIR__ . '/../..' . '/includes/Integrations/ActiveCampaign.php', 'AutomateWoo\\Integration_Bitly' => __DIR__ . '/../..' . '/includes/Integrations/Bitly.php', 'AutomateWoo\\Integration_Campaign_Monitor' => __DIR__ . '/../..' . '/includes/Integrations/Campaign_Monitor.php', 'AutomateWoo\\Integration_Mad_Mimi' => __DIR__ . '/../..' . '/includes/Integrations/Mad_Mimi.php', 'AutomateWoo\\Integration_Mailchimp' => __DIR__ . '/../..' . '/includes/Integrations/Mailchimp.php', 'AutomateWoo\\Integration_Twilio' => __DIR__ . '/../..' . '/includes/Integrations/Twilio.php', 'AutomateWoo\\Integrations' => __DIR__ . '/../..' . '/includes/Integrations.php', 'AutomateWoo\\Jobs\\AbandonedCarts' => __DIR__ . '/../..' . '/includes/Jobs/AbandonedCarts.php', 'AutomateWoo\\Jobs\\AbstractActionSchedulerJob' => __DIR__ . '/../..' . '/includes/Jobs/AbstractActionSchedulerJob.php', 'AutomateWoo\\Jobs\\AbstractBatchedActionSchedulerJob' => __DIR__ . '/../..' . '/includes/Jobs/AbstractBatchedActionSchedulerJob.php', 'AutomateWoo\\Jobs\\AbstractOneTimeActionSchedulerJob' => __DIR__ . '/../..' . '/includes/Jobs/AbstractOneTimeActionSchedulerJob.php', 'AutomateWoo\\Jobs\\ActionSchedulerJobInterface' => __DIR__ . '/../..' . '/includes/Jobs/ActionSchedulerJobInterface.php', 'AutomateWoo\\Jobs\\ActionSchedulerJobMonitor' => __DIR__ . '/../..' . '/includes/Jobs/ActionSchedulerJobMonitor.php', 'AutomateWoo\\Jobs\\BatchedActionSchedulerJobInterface' => __DIR__ . '/../..' . '/includes/Jobs/BatchedActionSchedulerJobInterface.php', 'AutomateWoo\\Jobs\\BatchedWorkflows' => __DIR__ . '/../..' . '/includes/Jobs/BatchedWorkflows.php', 'AutomateWoo\\Jobs\\DeleteExpiredCoupons' => __DIR__ . '/../..' . '/includes/Jobs/DeleteExpiredCoupons.php', 'AutomateWoo\\Jobs\\DeleteFailedQueuedWorkflows' => __DIR__ . '/../..' . '/includes/Jobs/DeleteFailedQueuedWorkflows.php', 'AutomateWoo\\Jobs\\JobException' => __DIR__ . '/../..' . '/includes/Jobs/JobException.php', 'AutomateWoo\\Jobs\\JobInterface' => __DIR__ . '/../..' . '/includes/Jobs/JobInterface.php', 'AutomateWoo\\Jobs\\JobRegistry' => __DIR__ . '/../..' . '/includes/Jobs/JobRegistry.php', 'AutomateWoo\\Jobs\\JobRegistryInterface' => __DIR__ . '/../..' . '/includes/Jobs/JobRegistryInterface.php', 'AutomateWoo\\Jobs\\JobService' => __DIR__ . '/../..' . '/includes/Jobs/JobService.php', 'AutomateWoo\\Jobs\\OneTimeActionSchedulerJobInterface' => __DIR__ . '/../..' . '/includes/Jobs/OneTimeActionSchedulerJobInterface.php', 'AutomateWoo\\Jobs\\RunQueuedWorkflows' => __DIR__ . '/../..' . '/includes/Jobs/RunQueuedWorkflows.php', 'AutomateWoo\\Jobs\\SetupGuestCustomers' => __DIR__ . '/../..' . '/includes/Jobs/SetupGuestCustomers.php', 'AutomateWoo\\Jobs\\SetupRegisteredCustomers' => __DIR__ . '/../..' . '/includes/Jobs/SetupRegisteredCustomers.php', 'AutomateWoo\\Jobs\\StartOnHookInterface' => __DIR__ . '/../..' . '/includes/Jobs/StartOnHookInterface.php', 'AutomateWoo\\Jobs\\ToolTaskRunner' => __DIR__ . '/../..' . '/includes/Jobs/ToolTaskRunner.php', 'AutomateWoo\\Jobs\\Traits\\ItemDeletionDate' => __DIR__ . '/../..' . '/includes/Jobs/Traits/ItemDeletionDate.php', 'AutomateWoo\\Jobs\\Traits\\ValidateItemAsIntegerId' => __DIR__ . '/../..' . '/includes/Jobs/Traits/ValidateItemAsIntegerId.php', 'AutomateWoo\\Jobs\\WishlistItemOnSale' => __DIR__ . '/../..' . '/includes/Jobs/WishlistItemOnSale.php', 'AutomateWoo\\Language' => __DIR__ . '/../..' . '/includes/Language.php', 'AutomateWoo\\LegacyAddonHandler' => __DIR__ . '/../..' . '/includes/LegacyAddonHandler.php', 'AutomateWoo\\LegacyClassLoader' => __DIR__ . '/../..' . '/includes/LegacyClassLoader.php', 'AutomateWoo\\Log' => __DIR__ . '/../..' . '/includes/Log.php', 'AutomateWoo\\Log_Factory' => __DIR__ . '/../..' . '/includes/Log_Factory.php', 'AutomateWoo\\Log_Query' => __DIR__ . '/../..' . '/includes/Log_Query.php', 'AutomateWoo\\Logger' => __DIR__ . '/../..' . '/includes/Logger.php', 'AutomateWoo\\Logic_Helper' => __DIR__ . '/../..' . '/includes/Logic_Helper.php', 'AutomateWoo\\Logs' => __DIR__ . '/../..' . '/includes/Logs.php', 'AutomateWoo\\Mailer' => __DIR__ . '/../..' . '/includes/Mailer.php', 'AutomateWoo\\Mailer_Abstract' => __DIR__ . '/../..' . '/includes/Mailer_Abstract.php', 'AutomateWoo\\Mailer_Plain_Text' => __DIR__ . '/../..' . '/includes/Mailer_Plain_Text.php', 'AutomateWoo\\Mailer_Raw_HTML' => __DIR__ . '/../..' . '/includes/Mailer_Raw_HTML.php', 'AutomateWoo\\Memberships_Helper' => __DIR__ . '/../..' . '/includes/Memberships_Helper.php', 'AutomateWoo\\Model' => __DIR__ . '/../..' . '/includes/Model.php', 'AutomateWoo\\Options' => __DIR__ . '/../..' . '/includes/Options.php', 'AutomateWoo\\OptionsStore' => __DIR__ . '/../..' . '/includes/OptionsStore.php', 'AutomateWoo\\Options_API' => __DIR__ . '/../..' . '/includes/Options_API.php', 'AutomateWoo\\Options_Abstract' => __DIR__ . '/../..' . '/includes/Options_Abstract.php', 'AutomateWoo\\Order_Guest' => __DIR__ . '/../..' . '/includes/Order_Guest.php', 'AutomateWoo\\Order_Helper' => __DIR__ . '/../..' . '/includes/Order_Helper.php', 'AutomateWoo\\Order_Note' => __DIR__ . '/../..' . '/includes/Order_Note.php', 'AutomateWoo\\Orders\\Observers\\CustomerLastPurchasedDateUpdater' => __DIR__ . '/../..' . '/includes/Orders/Observers/CustomerLastPurchasedDateUpdater.php', 'AutomateWoo\\Orders\\Observers\\GuestMostRecentOrderUpdater' => __DIR__ . '/../..' . '/includes/Orders/Observers/GuestMostRecentOrderUpdater.php', 'AutomateWoo\\Orders\\Observers\\Traits\\HandleOrderDeleted' => __DIR__ . '/../..' . '/includes/Orders/Observers/Traits/HandleOrderDeleted.php', 'AutomateWoo\\Orders\\Observers\\Traits\\HandleOrderStatusChanged' => __DIR__ . '/../..' . '/includes/Orders/Observers/Traits/HandleOrderStatusChanged.php', 'AutomateWoo\\Orders\\StatusTransition' => __DIR__ . '/../..' . '/includes/Orders/StatusTransition.php', 'AutomateWoo\\Permissions' => __DIR__ . '/../..' . '/includes/Permissions.php', 'AutomateWoo\\Phone_Numbers' => __DIR__ . '/../..' . '/includes/Phone_Numbers.php', 'AutomateWoo\\Plugin_Data' => __DIR__ . '/../..' . '/includes/abstracts/addon.php', 'AutomateWoo\\Points_Rewards_Integration' => __DIR__ . '/../..' . '/includes/Points_Rewards_Integration.php', 'AutomateWoo\\Post_Types' => __DIR__ . '/../..' . '/includes/Post_Types.php', 'AutomateWoo\\PreSubmit' => __DIR__ . '/../..' . '/includes/PreSubmit.php', 'AutomateWoo\\Preview_Data' => __DIR__ . '/../..' . '/includes/Preview_Data.php', 'AutomateWoo\\Privacy' => __DIR__ . '/../..' . '/includes/Privacy.php', 'AutomateWoo\\Privacy_Abstract' => __DIR__ . '/../..' . '/includes/Privacy_Abstract.php', 'AutomateWoo\\Privacy_Erasers' => __DIR__ . '/../..' . '/includes/Privacy_Erasers.php', 'AutomateWoo\\Privacy_Exporters' => __DIR__ . '/../..' . '/includes/Privacy_Exporters.php', 'AutomateWoo\\Privacy_Policy_Guide' => __DIR__ . '/../..' . '/includes/Privacy_Policy_Guide.php', 'AutomateWoo\\Proxies\\Bookings' => __DIR__ . '/../..' . '/includes/Proxies/Bookings.php', 'AutomateWoo\\Proxies\\BookingsInterface' => __DIR__ . '/../..' . '/includes/Proxies/BookingsInterface.php', 'AutomateWoo\\Query_Abstract' => __DIR__ . '/../..' . '/includes/Query_Abstract.php', 'AutomateWoo\\Query_Data_Layer_Abstract' => __DIR__ . '/../..' . '/includes/Query_Data_Layer_Abstract.php', 'AutomateWoo\\Queue_Manager' => __DIR__ . '/../..' . '/includes/Queue_Manager.php', 'AutomateWoo\\Queue_Query' => __DIR__ . '/../..' . '/includes/Queue_Query.php', 'AutomateWoo\\Queued_Event' => __DIR__ . '/../..' . '/includes/Queued_Event.php', 'AutomateWoo\\Queued_Event_Factory' => __DIR__ . '/../..' . '/includes/Queued_Event_Factory.php', 'AutomateWoo\\Registry' => __DIR__ . '/../..' . '/includes/Registry.php', 'AutomateWoo\\Registry\\ItemConstructorArgsTrait' => __DIR__ . '/../..' . '/includes/Registry/ItemConstructorArgsTrait.php', 'AutomateWoo\\Remote_Request' => __DIR__ . '/../..' . '/includes/Remote_Request.php', 'AutomateWoo\\Replace_Helper' => __DIR__ . '/../..' . '/includes/Replace_Helper.php', 'AutomateWoo\\Report_Carts' => __DIR__ . '/../..' . '/admin/reports/carts.php', 'AutomateWoo\\Report_Conversions' => __DIR__ . '/../..' . '/admin/reports/conversions.php', 'AutomateWoo\\Report_Conversions_List' => __DIR__ . '/../..' . '/admin/reports/conversions-list.php', 'AutomateWoo\\Report_Email_Tracking' => __DIR__ . '/../..' . '/admin/reports/email-tracking.php', 'AutomateWoo\\Report_Events' => __DIR__ . '/../..' . '/admin/reports/events.php', 'AutomateWoo\\Report_Guests' => __DIR__ . '/../..' . '/admin/reports/guests.php', 'AutomateWoo\\Report_Logs' => __DIR__ . '/../..' . '/admin/reports/logs.php', 'AutomateWoo\\Report_Optins' => __DIR__ . '/../..' . '/admin/reports/opt-ins.php', 'AutomateWoo\\Report_Queue' => __DIR__ . '/../..' . '/admin/reports/queue.php', 'AutomateWoo\\Report_Runs_By_Date' => __DIR__ . '/../..' . '/admin/reports/runs-by-date.php', 'AutomateWoo\\Reports_Tab_Conversions_List' => __DIR__ . '/../..' . '/admin/reports-tabs/conversions-list.php', 'AutomateWoo\\Rest_Api' => __DIR__ . '/../..' . '/includes/Rest_Api.php', 'AutomateWoo\\Rest_Api\\Controllers\\AbstractController' => __DIR__ . '/../..' . '/includes/Rest_Api/Controllers/AbstractController.php', 'AutomateWoo\\Rest_Api\\Controllers\\ManualWorkflowRunner' => __DIR__ . '/../..' . '/includes/Rest_Api/Controllers/ManualWorkflowRunner.php', 'AutomateWoo\\Rest_Api\\Controllers\\WorkflowPresets' => __DIR__ . '/../..' . '/includes/Rest_Api/Controllers/WorkflowPresets.php', 'AutomateWoo\\Rest_Api\\Controllers\\Workflows' => __DIR__ . '/../..' . '/includes/Rest_Api/Controllers/Workflows.php', 'AutomateWoo\\Rest_Api\\Schema\\Context' => __DIR__ . '/../..' . '/includes/Rest_Api/Schema/Context.php', 'AutomateWoo\\Rest_Api\\Schema\\WorkflowSchema' => __DIR__ . '/../..' . '/includes/Rest_Api/Schema/WorkflowSchema.php', 'AutomateWoo\\Rest_Api\\Utilities\\Controller_Namespace' => __DIR__ . '/../..' . '/includes/Rest_Api/Utilities/Controller_Namespace.php', 'AutomateWoo\\Rest_Api\\Utilities\\GetWorkflow' => __DIR__ . '/../..' . '/includes/Rest_Api/Utilities/GetWorkflow.php', 'AutomateWoo\\Rest_Api\\Utilities\\Pagination' => __DIR__ . '/../..' . '/includes/Rest_Api/Utilities/Pagination.php', 'AutomateWoo\\Rest_Api\\Utilities\\RestException' => __DIR__ . '/../..' . '/includes/Rest_Api/Utilities/RestException.php', 'AutomateWoo\\Review' => __DIR__ . '/../..' . '/includes/Review.php', 'AutomateWoo\\Review_Factory' => __DIR__ . '/../..' . '/includes/Review_Factory.php', 'AutomateWoo\\RuleQuickFilters\\ClauseGenerator' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/ClauseGenerator.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\AbstractClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/AbstractClause.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\ArrayClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/ArrayClause.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\ClauseInterface' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/ClauseInterface.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\DateTimeClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/DateTimeClause.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\NoOpClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/NoOpClause.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\NumericClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/NumericClause.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\SetClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/SetClause.php', 'AutomateWoo\\RuleQuickFilters\\Clauses\\StringClause' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Clauses/StringClause.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\AbstractPostDatastoreType' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/AbstractPostDatastoreType.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\AbstractQuery' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/AbstractQuery.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\DatastoreTypeInterface' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/DatastoreTypeInterface.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\OrderHighPerformanceDatastoreType' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/OrderHighPerformanceDatastoreType.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\OrderPostDatastoreType' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/OrderPostDatastoreType.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\OrderQuery' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/OrderQuery.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\QueryInterface' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/QueryInterface.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\SubscriptionHighPerformanceDatastoreType' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/SubscriptionHighPerformanceDatastoreType.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\SubscriptionPostDatastoreType' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/SubscriptionPostDatastoreType.php', 'AutomateWoo\\RuleQuickFilters\\Queries\\SubscriptionQuery' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/Queries/SubscriptionQuery.php', 'AutomateWoo\\RuleQuickFilters\\QueryLoader' => __DIR__ . '/../..' . '/includes/RuleQuickFilters/QueryLoader.php', 'AutomateWoo\\Rule_Order_Item_Categories' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Categories.php', 'AutomateWoo\\Rule_Order_Item_Tags' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Tags.php', 'AutomateWoo\\Rule_Order_Payment_Gateway' => __DIR__ . '/../..' . '/includes/Rules/Order_Payment_Gateway.php', 'AutomateWoo\\Rules' => __DIR__ . '/../..' . '/includes/Rules.php', 'AutomateWoo\\Rules\\Abstract_Bool' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Bool.php', 'AutomateWoo\\Rules\\Abstract_Date' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Date.php', 'AutomateWoo\\Rules\\Abstract_Meta' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Meta.php', 'AutomateWoo\\Rules\\Abstract_Number' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Number.php', 'AutomateWoo\\Rules\\Abstract_Object' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Object.php', 'AutomateWoo\\Rules\\Abstract_Select' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Select.php', 'AutomateWoo\\Rules\\Abstract_Select_Single' => __DIR__ . '/../..' . '/includes/Rules/Abstract_Select_Single.php', 'AutomateWoo\\Rules\\Abstract_String' => __DIR__ . '/../..' . '/includes/Rules/Abstract_String.php', 'AutomateWoo\\Rules\\CartItemCount' => __DIR__ . '/../..' . '/includes/Rules/CartItemCount.php', 'AutomateWoo\\Rules\\CartTotal' => __DIR__ . '/../..' . '/includes/Rules/CartTotal.php', 'AutomateWoo\\Rules\\Cart_Coupons' => __DIR__ . '/../..' . '/includes/Rules/Cart_Coupons.php', 'AutomateWoo\\Rules\\Cart_Created_Date' => __DIR__ . '/../..' . '/includes/Rules/Cart_Created_Date.php', 'AutomateWoo\\Rules\\Cart_Item_Categories' => __DIR__ . '/../..' . '/includes/Rules/Cart_Item_Categories.php', 'AutomateWoo\\Rules\\Cart_Item_Tags' => __DIR__ . '/../..' . '/includes/Rules/Cart_Item_Tags.php', 'AutomateWoo\\Rules\\Cart_Items' => __DIR__ . '/../..' . '/includes/Rules/Cart_Items.php', 'AutomateWoo\\Rules\\Customer_2nd_Last_Order_Date' => __DIR__ . '/../..' . '/includes/Rules/Customer_2nd_Last_Order_Date.php', 'AutomateWoo\\Rules\\Customer_Account_Created_Date' => __DIR__ . '/../..' . '/includes/Rules/Customer_Account_Created_Date.php', 'AutomateWoo\\Rules\\Customer_Active_Membership_Plans' => __DIR__ . '/../..' . '/includes/Rules/Customer_Active_Membership_Plans.php', 'AutomateWoo\\Rules\\Customer_City' => __DIR__ . '/../..' . '/includes/Rules/Customer_City.php', 'AutomateWoo\\Rules\\Customer_Company' => __DIR__ . '/../..' . '/includes/Rules/Customer_Company.php', 'AutomateWoo\\Rules\\Customer_Country' => __DIR__ . '/../..' . '/includes/Rules/Customer_Country.php', 'AutomateWoo\\Rules\\Customer_Email' => __DIR__ . '/../..' . '/includes/Rules/Customer_Email.php', 'AutomateWoo\\Rules\\Customer_First_Order_Date' => __DIR__ . '/../..' . '/includes/Rules/Customer_First_Order_Date.php', 'AutomateWoo\\Rules\\Customer_Has_Active_Subscription' => __DIR__ . '/../..' . '/includes/Rules/Customer_Has_Active_Subscription.php', 'AutomateWoo\\Rules\\Customer_Is_Guest' => __DIR__ . '/../..' . '/includes/Rules/Customer_Is_Guest.php', 'AutomateWoo\\Rules\\Customer_Is_Mailchimp_Subscriber' => __DIR__ . '/../..' . '/includes/Rules/Customer_Is_Mailchimp_Subscriber.php', 'AutomateWoo\\Rules\\Customer_Last_Order_Date' => __DIR__ . '/../..' . '/includes/Rules/Customer_Last_Order_Date.php', 'AutomateWoo\\Rules\\Customer_Last_Review_Date' => __DIR__ . '/../..' . '/includes/Rules/Customer_Last_Review_Date.php', 'AutomateWoo\\Rules\\Customer_Meta' => __DIR__ . '/../..' . '/includes/Rules/Customer_Meta.php', 'AutomateWoo\\Rules\\Customer_Order_Count' => __DIR__ . '/../..' . '/includes/Rules/Customer_Order_Count.php', 'AutomateWoo\\Rules\\Customer_Order_Statuses' => __DIR__ . '/../..' . '/includes/Rules/Customer_Order_Statuses.php', 'AutomateWoo\\Rules\\Customer_Phone' => __DIR__ . '/../..' . '/includes/Rules/Customer_Phone.php', 'AutomateWoo\\Rules\\Customer_Postcode' => __DIR__ . '/../..' . '/includes/Rules/Customer_Postcode.php', 'AutomateWoo\\Rules\\Customer_Purchased_Categories' => __DIR__ . '/../..' . '/includes/Rules/Customer_Purchased_Categories.php', 'AutomateWoo\\Rules\\Customer_Purchased_Products' => __DIR__ . '/../..' . '/includes/Rules/Customer_Purchased_Products.php', 'AutomateWoo\\Rules\\Customer_Review_Count' => __DIR__ . '/../..' . '/includes/Rules/Customer_Review_Count.php', 'AutomateWoo\\Rules\\Customer_Role' => __DIR__ . '/../..' . '/includes/Rules/Customer_Role.php', 'AutomateWoo\\Rules\\Customer_Run_Count' => __DIR__ . '/../..' . '/includes/Rules/Customer_Run_Count.php', 'AutomateWoo\\Rules\\Customer_State' => __DIR__ . '/../..' . '/includes/Rules/Customer_State.php', 'AutomateWoo\\Rules\\Customer_State_Text_Match' => __DIR__ . '/../..' . '/includes/Rules/Customer_State_Text_Match.php', 'AutomateWoo\\Rules\\Customer_Tags' => __DIR__ . '/../..' . '/includes/Rules/Customer_Tags.php', 'AutomateWoo\\Rules\\Customer_Total_Spent' => __DIR__ . '/../..' . '/includes/Rules/Customer_Total_Spent.php', 'AutomateWoo\\Rules\\GuestEmail' => __DIR__ . '/../..' . '/includes/Rules/GuestEmail.php', 'AutomateWoo\\Rules\\GuestOrderCount' => __DIR__ . '/../..' . '/includes/Rules/GuestOrderCount.php', 'AutomateWoo\\Rules\\GuestRunCount' => __DIR__ . '/../..' . '/includes/Rules/GuestRunCount.php', 'AutomateWoo\\Rules\\Interfaces\\NonPrimaryDataTypeQuickFilterable' => __DIR__ . '/../..' . '/includes/Rules/Interfaces/NonPrimaryDataTypeQuickFilterable.php', 'AutomateWoo\\Rules\\Interfaces\\QuickFilterable' => __DIR__ . '/../..' . '/includes/Rules/Interfaces/QuickFilterable.php', 'AutomateWoo\\Rules\\OrderHasCrossSells' => __DIR__ . '/../..' . '/includes/Rules/OrderHasCrossSells.php', 'AutomateWoo\\Rules\\OrderIsCustomersFirst' => __DIR__ . '/../..' . '/includes/Rules/OrderIsCustomersFirst.php', 'AutomateWoo\\Rules\\OrderIsPos' => __DIR__ . '/../..' . '/includes/Rules/OrderIsPos.php', 'AutomateWoo\\Rules\\OrderRunCount' => __DIR__ . '/../..' . '/includes/Rules/OrderRunCount.php', 'AutomateWoo\\Rules\\OrderShippingCountry' => __DIR__ . '/../..' . '/includes/Rules/OrderShippingCountry.php', 'AutomateWoo\\Rules\\OrderShippingMethodString' => __DIR__ . '/../..' . '/includes/Rules/OrderShippingMethodString.php', 'AutomateWoo\\Rules\\OrderTotal' => __DIR__ . '/../..' . '/includes/Rules/OrderTotal.php', 'AutomateWoo\\Rules\\Order_Billing_Country' => __DIR__ . '/../..' . '/includes/Rules/Order_Billing_Country.php', 'AutomateWoo\\Rules\\Order_Coupon_Count' => __DIR__ . '/../..' . '/includes/Rules/Order_Coupon_Count.php', 'AutomateWoo\\Rules\\Order_Coupons' => __DIR__ . '/../..' . '/includes/Rules/Order_Coupons.php', 'AutomateWoo\\Rules\\Order_Coupons_Text_Match' => __DIR__ . '/../..' . '/includes/Rules/Order_Coupons_Text_Match.php', 'AutomateWoo\\Rules\\Order_Created_Date' => __DIR__ . '/../..' . '/includes/Rules/Order_Created_Date.php', 'AutomateWoo\\Rules\\Order_Created_Via' => __DIR__ . '/../..' . '/includes/Rules/Order_Created_Via.php', 'AutomateWoo\\Rules\\Order_Customer_Provided_Note' => __DIR__ . '/../..' . '/includes/Rules/Order_Customer_Provided_Note.php', 'AutomateWoo\\Rules\\Order_Is_Guest_Order' => __DIR__ . '/../..' . '/includes/Rules/Order_Is_Guest_Order.php', 'AutomateWoo\\Rules\\Order_Is_Subscription_Parent' => __DIR__ . '/../..' . '/includes/Rules/Order_Is_Subscription_Parent.php', 'AutomateWoo\\Rules\\Order_Is_Subscription_Renewal' => __DIR__ . '/../..' . '/includes/Rules/Order_Is_Subscription_Renewal.php', 'AutomateWoo\\Rules\\Order_Item_Count' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Count.php', 'AutomateWoo\\Rules\\Order_Item_Meta' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Meta.php', 'AutomateWoo\\Rules\\Order_Item_Product' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Product.php', 'AutomateWoo\\Rules\\Order_Item_Quantity' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Quantity.php', 'AutomateWoo\\Rules\\Order_Item_Subtotal' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Subtotal.php', 'AutomateWoo\\Rules\\Order_Item_Tax_Total' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Tax_Total.php', 'AutomateWoo\\Rules\\Order_Item_Total' => __DIR__ . '/../..' . '/includes/Rules/Order_Item_Total.php', 'AutomateWoo\\Rules\\Order_Items' => __DIR__ . '/../..' . '/includes/Rules/Order_Items.php', 'AutomateWoo\\Rules\\Order_Items_Text_Match' => __DIR__ . '/../..' . '/includes/Rules/Order_Items_Text_Match.php', 'AutomateWoo\\Rules\\Order_Line_Count' => __DIR__ . '/../..' . '/includes/Rules/Order_Line_Count.php', 'AutomateWoo\\Rules\\Order_Meta' => __DIR__ . '/../..' . '/includes/Rules/Order_Meta.php', 'AutomateWoo\\Rules\\Order_Paid_Date' => __DIR__ . '/../..' . '/includes/Rules/Order_Paid_Date.php', 'AutomateWoo\\Rules\\Order_Shipping_Method' => __DIR__ . '/../..' . '/includes/Rules/Order_Shipping_Method.php', 'AutomateWoo\\Rules\\Order_Status' => __DIR__ . '/../..' . '/includes/Rules/Order_Status.php', 'AutomateWoo\\Rules\\Order_Subscription_Failed_Automatic_Payment_Retry_Count' => __DIR__ . '/../..' . '/includes/Rules/Order_Subscription_Failed_Automatic_Payment_Retry_Count.php', 'AutomateWoo\\Rules\\Order_Subscription_Order_Type' => __DIR__ . '/../..' . '/includes/Rules/Order_Subscription_Order_Type.php', 'AutomateWoo\\Rules\\Points_Rewards_Customer_Points' => __DIR__ . '/../..' . '/includes/Rules/Points_Rewards_Customer_Points.php', 'AutomateWoo\\Rules\\Preloaded_Select_Rule_Abstract' => __DIR__ . '/../..' . '/includes/Rules/Preloaded_Select_Rule_Abstract.php', 'AutomateWoo\\Rules\\Product' => __DIR__ . '/../..' . '/includes/Rules/Product.php', 'AutomateWoo\\Rules\\Product_Categories' => __DIR__ . '/../..' . '/includes/Rules/Product_Categories.php', 'AutomateWoo\\Rules\\Product_Select_Rule_Abstract' => __DIR__ . '/../..' . '/includes/Rules/Product_Select_Rule_Abstract.php', 'AutomateWoo\\Rules\\Review_Rating' => __DIR__ . '/../..' . '/includes/Rules/Review_Rating.php', 'AutomateWoo\\Rules\\Rule' => __DIR__ . '/../..' . '/includes/Rules/Rule.php', 'AutomateWoo\\Rules\\Searchable_Select_Rule_Abstract' => __DIR__ . '/../..' . '/includes/Rules/Searchable_Select_Rule_Abstract.php', 'AutomateWoo\\Rules\\Select_Rule_Abstract' => __DIR__ . '/../..' . '/includes/Rules/Select_Rule_Abstract.php', 'AutomateWoo\\Rules\\ShopCurrentDateTime' => __DIR__ . '/../..' . '/includes/Rules/ShopCurrentDateTime.php', 'AutomateWoo\\Rules\\SubscriptionPaymentCount' => __DIR__ . '/../..' . '/includes/Rules/SubscriptionPaymentCount.php', 'AutomateWoo\\Rules\\Subscription_Can_Renew_Early' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Can_Renew_Early.php', 'AutomateWoo\\Rules\\Subscription_Coupon_Count' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Coupon_Count.php', 'AutomateWoo\\Rules\\Subscription_Coupons' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Coupons.php', 'AutomateWoo\\Rules\\Subscription_Coupons_Text_Match' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Coupons_Text_Match.php', 'AutomateWoo\\Rules\\Subscription_Created_Date' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Created_Date.php', 'AutomateWoo\\Rules\\Subscription_End_Date' => __DIR__ . '/../..' . '/includes/Rules/Subscription_End_Date.php', 'AutomateWoo\\Rules\\Subscription_Has_Payment_Method' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Has_Payment_Method.php', 'AutomateWoo\\Rules\\Subscription_Item_Categories' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Item_Categories.php', 'AutomateWoo\\Rules\\Subscription_Items' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Items.php', 'AutomateWoo\\Rules\\Subscription_Last_Payment_Date' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Last_Payment_Date.php', 'AutomateWoo\\Rules\\Subscription_Meta' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Meta.php', 'AutomateWoo\\Rules\\Subscription_Next_Payment_Date' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Next_Payment_Date.php', 'AutomateWoo\\Rules\\Subscription_Payment_Method' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Payment_Method.php', 'AutomateWoo\\Rules\\Subscription_Requires_Manual_Renewal' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Requires_Manual_Renewal.php', 'AutomateWoo\\Rules\\Subscription_Run_Count' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Run_Count.php', 'AutomateWoo\\Rules\\Subscription_Status' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Status.php', 'AutomateWoo\\Rules\\Subscription_Trial_End_Date' => __DIR__ . '/../..' . '/includes/Rules/Subscription_Trial_End_Date.php', 'AutomateWoo\\Rules\\Utilities\\ArrayQuickFilter' => __DIR__ . '/../..' . '/includes/Rules/Utilities/ArrayQuickFilter.php', 'AutomateWoo\\Rules\\Utilities\\DataTypeConditions' => __DIR__ . '/../..' . '/includes/Rules/Utilities/DataTypeConditions.php', 'AutomateWoo\\Rules\\Utilities\\DateQuickFilter' => __DIR__ . '/../..' . '/includes/Rules/Utilities/DateQuickFilter.php', 'AutomateWoo\\Rules\\Utilities\\NumericQuickFilter' => __DIR__ . '/../..' . '/includes/Rules/Utilities/NumericQuickFilter.php', 'AutomateWoo\\Rules\\Utilities\\StringQuickFilter' => __DIR__ . '/../..' . '/includes/Rules/Utilities/StringQuickFilter.php', 'AutomateWoo\\Rules\\Workflow_Last_Customer_Run_Date' => __DIR__ . '/../..' . '/includes/Rules/Workflow_Last_Customer_Run_Date.php', 'AutomateWoo\\Session_Tracker' => __DIR__ . '/../..' . '/includes/Session_Tracker.php', 'AutomateWoo\\Settings_Tab_Active_Campaign' => __DIR__ . '/../..' . '/admin/settings-tabs/active-campaign.php', 'AutomateWoo\\Settings_Tab_Bitly' => __DIR__ . '/../..' . '/admin/settings-tabs/bitly.php', 'AutomateWoo\\Settings_Tab_Campaign_Monitor' => __DIR__ . '/../..' . '/admin/settings-tabs/campaign-monitor.php', 'AutomateWoo\\Settings_Tab_Carts' => __DIR__ . '/../..' . '/admin/settings-tabs/carts.php', 'AutomateWoo\\Settings_Tab_General' => __DIR__ . '/../..' . '/admin/settings-tabs/general.php', 'AutomateWoo\\Settings_Tab_Mailchimp' => __DIR__ . '/../..' . '/admin/settings-tabs/mailchimp.php', 'AutomateWoo\\Settings_Tab_Status' => __DIR__ . '/../..' . '/admin/settings-tabs/status.php', 'AutomateWoo\\Settings_Tab_Twilio' => __DIR__ . '/../..' . '/admin/settings-tabs/twilio.php', 'AutomateWoo\\Shipment_Tracking_Integration' => __DIR__ . '/../..' . '/includes/Shipment_Tracking_Integration.php', 'AutomateWoo\\ShopDataItem' => __DIR__ . '/../..' . '/includes/ShopDataItem.php', 'AutomateWoo\\Subscription_Workflow_Helper' => __DIR__ . '/../..' . '/includes/Subscription_Workflow_Helper.php', 'AutomateWoo\\SystemChecks\\AbstractSystemCheck' => __DIR__ . '/../..' . '/includes/SystemChecks/AbstractSystemCheck.php', 'AutomateWoo\\SystemChecks\\CronRunning' => __DIR__ . '/../..' . '/includes/SystemChecks/CronRunning.php', 'AutomateWoo\\SystemChecks\\DatabaseTablesExist' => __DIR__ . '/../..' . '/includes/SystemChecks/DatabaseTablesExist.php', 'AutomateWoo\\System_Checks' => __DIR__ . '/../..' . '/includes/System_Checks.php', 'AutomateWoo\\Temporary_Data' => __DIR__ . '/../..' . '/includes/Temporary_Data.php', 'AutomateWoo\\Time_Helper' => __DIR__ . '/../..' . '/includes/Time_Helper.php', 'AutomateWoo\\Tool_Abstract' => __DIR__ . '/../..' . '/includes/Tools/Abstract.php', 'AutomateWoo\\Tool_Background_Processed_Abstract' => __DIR__ . '/../..' . '/includes/Tools/Background_Processed_Abstract.php', 'AutomateWoo\\Tool_Optin_Importer' => __DIR__ . '/../..' . '/includes/Tools/Optin_Importer.php', 'AutomateWoo\\Tool_Optout_Importer' => __DIR__ . '/../..' . '/includes/Tools/Optout_Importer.php', 'AutomateWoo\\Tool_Reset_Workflow_Records' => __DIR__ . '/../..' . '/includes/Tools/Reset_Workflow_Records.php', 'AutomateWoo\\Tools\\ToolsService' => __DIR__ . '/../..' . '/includes/Tools/ToolsService.php', 'AutomateWoo\\Tracking' => __DIR__ . '/../..' . '/includes/Tracking.php', 'AutomateWoo\\Traits\\ArrayValidator' => __DIR__ . '/../..' . '/includes/Traits/ArrayValidator.php', 'AutomateWoo\\Traits\\IntegerValidator' => __DIR__ . '/../..' . '/includes/Traits/IntegerValidator.php', 'AutomateWoo\\Traits\\IntegrationValidator' => __DIR__ . '/../..' . '/includes/Traits/IntegrationValidator.php', 'AutomateWoo\\Traits\\NamedEntity' => __DIR__ . '/../..' . '/includes/Traits/NamedEntity.php', 'AutomateWoo\\Traits\\OptionsEntity' => __DIR__ . '/../..' . '/includes/Traits/OptionsEntity.php', 'AutomateWoo\\Traits\\StringValidator' => __DIR__ . '/../..' . '/includes/Traits/StringValidator.php', 'AutomateWoo\\Traits\\TagField' => __DIR__ . '/../..' . '/includes/Traits/TagField.php', 'AutomateWoo\\Trigger' => __DIR__ . '/../..' . '/includes/Trigger.php', 'AutomateWoo\\Trigger_Abandoned_Cart_Customer' => __DIR__ . '/../..' . '/includes/Triggers/Abandoned_Cart_Customer.php', 'AutomateWoo\\Trigger_Abandoned_Cart_Guest' => __DIR__ . '/../..' . '/includes/Triggers/Abandoned_Cart_Guest.php', 'AutomateWoo\\Trigger_Abandoned_Cart_User' => __DIR__ . '/../..' . '/includes/Triggers/Abandoned_Cart_User.php', 'AutomateWoo\\Trigger_Abstract_Abandoned_Cart' => __DIR__ . '/../..' . '/includes/Triggers/Abstract_Abandoned_Cart.php', 'AutomateWoo\\Trigger_Abstract_Downloadable_Content' => __DIR__ . '/../..' . '/includes/Triggers/Abstract_Downloadable_Content.php', 'AutomateWoo\\Trigger_Abstract_Memberships' => __DIR__ . '/../..' . '/includes/Triggers/Abstract_Memberships.php', 'AutomateWoo\\Trigger_Abstract_Order_Base' => __DIR__ . '/../..' . '/includes/Triggers/Abstract_Order_Base.php', 'AutomateWoo\\Trigger_Abstract_Order_Status_Base' => __DIR__ . '/../..' . '/includes/Triggers/Abstract_Order_Status_Base.php', 'AutomateWoo\\Trigger_Abstract_Subscriptions' => __DIR__ . '/../..' . '/includes/Triggers/Abstract_Subscriptions.php', 'AutomateWoo\\Trigger_Background_Processed_Abstract' => __DIR__ . '/../..' . '/includes/Triggers/Background_Processed_Abstract.php', 'AutomateWoo\\Trigger_Customer_Before_Saved_Card_Expiry' => __DIR__ . '/../..' . '/includes/Triggers/Customer_Before_Saved_Card_Expiry.php', 'AutomateWoo\\Trigger_Customer_New_Account' => __DIR__ . '/../..' . '/includes/Triggers/Customer_New_Account.php', 'AutomateWoo\\Trigger_Customer_Opted_In' => __DIR__ . '/../..' . '/includes/Triggers/Customer_Opted_In.php', 'AutomateWoo\\Trigger_Customer_Opted_Out' => __DIR__ . '/../..' . '/includes/Triggers/Customer_Opted_Out.php', 'AutomateWoo\\Trigger_Customer_Order_Count_Reaches' => __DIR__ . '/../..' . '/includes/Triggers/Customer_Order_Count_Reaches.php', 'AutomateWoo\\Trigger_Customer_Total_Spend_Reaches' => __DIR__ . '/../..' . '/includes/Triggers/Customer_Total_Spend_Reaches.php', 'AutomateWoo\\Trigger_Customer_Win_Back' => __DIR__ . '/../..' . '/includes/Triggers/Customer_Win_Back.php', 'AutomateWoo\\Trigger_Downloadable_Product_Purchased' => __DIR__ . '/../..' . '/includes/Triggers/Downloadable_Product_Purchased.php', 'AutomateWoo\\Trigger_File_Downloaded' => __DIR__ . '/../..' . '/includes/Triggers/File_Downloaded.php', 'AutomateWoo\\Trigger_File_Not_Yet_Downloaded' => __DIR__ . '/../..' . '/includes/Triggers/File_Not_Yet_Downloaded.php', 'AutomateWoo\\Trigger_Guest_Created' => __DIR__ . '/../..' . '/includes/Triggers/Guest_Created.php', 'AutomateWoo\\Trigger_MC4WP_Form_Submission' => __DIR__ . '/../..' . '/includes/Triggers/MC4WP_Form_Submission.php', 'AutomateWoo\\Trigger_Membership_Created' => __DIR__ . '/../..' . '/includes/Triggers/Membership_Created.php', 'AutomateWoo\\Trigger_Membership_Status_Changed' => __DIR__ . '/../..' . '/includes/Triggers/Membership_Status_Changed.php', 'AutomateWoo\\Trigger_Order_Cancelled' => __DIR__ . '/../..' . '/includes/Triggers/Order_Cancelled.php', 'AutomateWoo\\Trigger_Order_Completed' => __DIR__ . '/../..' . '/includes/Triggers/Order_Completed.php', 'AutomateWoo\\Trigger_Order_Created' => __DIR__ . '/../..' . '/includes/Triggers/Order_Created.php', 'AutomateWoo\\Trigger_Order_Created_Each_Line_Item' => __DIR__ . '/../..' . '/includes/Triggers/Order_Created_Each_Line_Item.php', 'AutomateWoo\\Trigger_Order_Note_Added' => __DIR__ . '/../..' . '/includes/Triggers/Order_Note_Added.php', 'AutomateWoo\\Trigger_Order_On_Hold' => __DIR__ . '/../..' . '/includes/Triggers/Order_On_Hold.php', 'AutomateWoo\\Trigger_Order_Paid' => __DIR__ . '/../..' . '/includes/Triggers/Order_Paid.php', 'AutomateWoo\\Trigger_Order_Paid_Each_Line_Item' => __DIR__ . '/../..' . '/includes/Triggers/Order_Paid_Each_Line_Item.php', 'AutomateWoo\\Trigger_Order_Pending' => __DIR__ . '/../..' . '/includes/Triggers/Order_Pending.php', 'AutomateWoo\\Trigger_Order_Processing' => __DIR__ . '/../..' . '/includes/Triggers/Order_Processing.php', 'AutomateWoo\\Trigger_Order_Refunded' => __DIR__ . '/../..' . '/includes/Triggers/Order_Refunded.php', 'AutomateWoo\\Trigger_Order_Refunded_Manual' => __DIR__ . '/../..' . '/includes/Triggers/Order_Refunded_Manual.php', 'AutomateWoo\\Trigger_Order_Status_Changes' => __DIR__ . '/../..' . '/includes/Triggers/Order_Status_Changes.php', 'AutomateWoo\\Trigger_Order_Status_Changes_Each_Line_Item' => __DIR__ . '/../..' . '/includes/Triggers/Order_Status_Changes_Each_Line_Item.php', 'AutomateWoo\\Trigger_Review_Posted' => __DIR__ . '/../..' . '/includes/Triggers/Review_Posted.php', 'AutomateWoo\\Trigger_Subscription_Before_End' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Before_End.php', 'AutomateWoo\\Trigger_Subscription_Before_Renewal' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Before_Renewal.php', 'AutomateWoo\\Trigger_Subscription_Created' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Created.php', 'AutomateWoo\\Trigger_Subscription_Note_Added' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Note_Added.php', 'AutomateWoo\\Trigger_Subscription_Payment_Complete' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Payment_Complete.php', 'AutomateWoo\\Trigger_Subscription_Payment_Failed' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Payment_Failed.php', 'AutomateWoo\\Trigger_Subscription_Status_Changed' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Status_Changed.php', 'AutomateWoo\\Trigger_Subscription_Status_Changed_Each_Line_Item' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Status_Changed_Each_Line_Item.php', 'AutomateWoo\\Trigger_Subscription_Trial_End' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Trial_End.php', 'AutomateWoo\\Trigger_User_Purchases_From_Taxonomy_Term' => __DIR__ . '/../..' . '/includes/Triggers/User_Purchases_From_Taxonomy_Term.php', 'AutomateWoo\\Trigger_User_Purchases_Product_Variation_With_Attribute' => __DIR__ . '/../..' . '/includes/Triggers/User_Purchases_Product_Variation_With_Attribute.php', 'AutomateWoo\\Trigger_Wishlist_Item_Added' => __DIR__ . '/../..' . '/includes/Triggers/Wishlist_Item_Added.php', 'AutomateWoo\\Trigger_Wishlist_Item_Goes_On_Sale' => __DIR__ . '/../..' . '/includes/Triggers/Wishlist_Item_Goes_On_Sale.php', 'AutomateWoo\\Trigger_Wishlist_Reminder' => __DIR__ . '/../..' . '/includes/Triggers/Wishlist_Reminder.php', 'AutomateWoo\\Trigger_Workflow_Times_Run_Reaches' => __DIR__ . '/../..' . '/includes/Triggers/Workflow_Times_Run_Reaches.php', 'AutomateWoo\\Triggers' => __DIR__ . '/../..' . '/includes/Triggers.php', 'AutomateWoo\\Triggers\\AbstractBatchedDailyTrigger' => __DIR__ . '/../..' . '/includes/Triggers/AbstractBatchedDailyTrigger.php', 'AutomateWoo\\Triggers\\AbstractManual' => __DIR__ . '/../..' . '/includes/Triggers/AbstractManual.php', 'AutomateWoo\\Triggers\\BatchedWorkflowInterface' => __DIR__ . '/../..' . '/includes/Triggers/BatchedWorkflowInterface.php', 'AutomateWoo\\Triggers\\BookingCreated' => __DIR__ . '/../..' . '/includes/Triggers/BookingCreated.php', 'AutomateWoo\\Triggers\\BookingStatusChanged' => __DIR__ . '/../..' . '/includes/Triggers/BookingStatusChanged.php', 'AutomateWoo\\Triggers\\ManualInterface' => __DIR__ . '/../..' . '/includes/Triggers/ManualInterface.php', 'AutomateWoo\\Triggers\\OrderManual' => __DIR__ . '/../..' . '/includes/Triggers/OrderManual.php', 'AutomateWoo\\Triggers\\OrderNoteAddedEachLineItem' => __DIR__ . '/../..' . '/includes/Triggers/OrderNoteAddedEachLineItem.php', 'AutomateWoo\\Triggers\\SubscriptionManual' => __DIR__ . '/../..' . '/includes/Triggers/SubscriptionManual.php', 'AutomateWoo\\Triggers\\Subscription_Created_Each_Line_Item' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Created_Each_Line_Item.php', 'AutomateWoo\\Triggers\\Subscription_Order_Created' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Order_Created.php', 'AutomateWoo\\Triggers\\Subscription_Order_Paid' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Order_Paid.php', 'AutomateWoo\\Triggers\\Subscription_Order_Status_Changes' => __DIR__ . '/../..' . '/includes/Triggers/Subscription_Order_Status_Changes.php', 'AutomateWoo\\Triggers\\Utilities\\BookingDataLayer' => __DIR__ . '/../..' . '/includes/Triggers/Utilities/BookingDataLayer.php', 'AutomateWoo\\Triggers\\Utilities\\BookingsGroup' => __DIR__ . '/../..' . '/includes/Triggers/Utilities/BookingsGroup.php', 'AutomateWoo\\Triggers\\Utilities\\CustomTimeOfDay' => __DIR__ . '/../..' . '/includes/Triggers/Utilities/CustomTimeOfDay.php', 'AutomateWoo\\Triggers\\Utilities\\HandleOrderNoteAdded' => __DIR__ . '/../..' . '/includes/Triggers/Utilities/HandleOrderNoteAdded.php', 'AutomateWoo\\Triggers\\Utilities\\OrderGroup' => __DIR__ . '/../..' . '/includes/Triggers/Utilities/OrderGroup.php', 'AutomateWoo\\Triggers\\Utilities\\SubscriptionGroup' => __DIR__ . '/../..' . '/includes/Triggers/Utilities/SubscriptionGroup.php', 'AutomateWoo\\Usage_Tracking\\Conversions' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Conversions.php', 'AutomateWoo\\Usage_Tracking\\Event_Helper' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Event_Helper.php', 'AutomateWoo\\Usage_Tracking\\Event_Tracker_Interface' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Event_Tracker_Interface.php', 'AutomateWoo\\Usage_Tracking\\Initializer' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Initializer.php', 'AutomateWoo\\Usage_Tracking\\Install' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Install.php', 'AutomateWoo\\Usage_Tracking\\Tracker' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Tracker.php', 'AutomateWoo\\Usage_Tracking\\Tracks' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Tracks.php', 'AutomateWoo\\Usage_Tracking\\Tracks_Interface' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Tracks_Interface.php', 'AutomateWoo\\Usage_Tracking\\WorkflowTracksData' => __DIR__ . '/../..' . '/includes/Usage_Tracking/WorkflowTracksData.php', 'AutomateWoo\\Usage_Tracking\\Workflows' => __DIR__ . '/../..' . '/includes/Usage_Tracking/Workflows.php', 'AutomateWoo\\User_Tags' => __DIR__ . '/../..' . '/includes/User_Tags.php', 'AutomateWoo\\User_Tags_Export' => __DIR__ . '/../..' . '/admin/user-tags-export.php', 'AutomateWoo\\Variable' => __DIR__ . '/../..' . '/includes/Variable.php', 'AutomateWoo\\Variable_Abstract_Datetime' => __DIR__ . '/../..' . '/includes/Variables/Abstract_Datetime.php', 'AutomateWoo\\Variable_Abstract_Generate_Coupon' => __DIR__ . '/../..' . '/includes/Variables/Abstract_Generate_Coupon.php', 'AutomateWoo\\Variable_Abstract_Meta' => __DIR__ . '/../..' . '/includes/Variables/Abstract_Meta.php', 'AutomateWoo\\Variable_Abstract_Price' => __DIR__ . '/../..' . '/includes/Variables/Abstract_Price.php', 'AutomateWoo\\Variable_Abstract_Product_Display' => __DIR__ . '/../..' . '/includes/Variables/Abstract_Product_Display.php', 'AutomateWoo\\Variable_Abstract_Shipment_Tracking' => __DIR__ . '/../..' . '/includes/Variables/Abstract_Shipment_Tracking.php', 'AutomateWoo\\Variable_Card_Expiry_Month' => __DIR__ . '/../..' . '/includes/Variables/Card_Expiry_Month.php', 'AutomateWoo\\Variable_Card_Expiry_Year' => __DIR__ . '/../..' . '/includes/Variables/Card_Expiry_Year.php', 'AutomateWoo\\Variable_Card_Last4' => __DIR__ . '/../..' . '/includes/Variables/Card_Last4.php', 'AutomateWoo\\Variable_Card_Type' => __DIR__ . '/../..' . '/includes/Variables/Card_Type.php', 'AutomateWoo\\Variable_Cart_Item_Count' => __DIR__ . '/../..' . '/includes/Variables/Cart_Item_Count.php', 'AutomateWoo\\Variable_Cart_Items' => __DIR__ . '/../..' . '/includes/Variables/Cart_Items.php', 'AutomateWoo\\Variable_Cart_Link' => __DIR__ . '/../..' . '/includes/Variables/Cart_Link.php', 'AutomateWoo\\Variable_Cart_Total' => __DIR__ . '/../..' . '/includes/Variables/Cart_Total.php', 'AutomateWoo\\Variable_Category_ID' => __DIR__ . '/../..' . '/includes/Variables/Category_ID.php', 'AutomateWoo\\Variable_Category_Permalink' => __DIR__ . '/../..' . '/includes/Variables/Category_Permalink.php', 'AutomateWoo\\Variable_Category_Title' => __DIR__ . '/../..' . '/includes/Variables/Category_Title.php', 'AutomateWoo\\Variable_Comment_Author_IP' => __DIR__ . '/../..' . '/includes/Variables/Comment_Author_IP.php', 'AutomateWoo\\Variable_Comment_Content' => __DIR__ . '/../..' . '/includes/Variables/Comment_Content.php', 'AutomateWoo\\Variable_Comment_ID' => __DIR__ . '/../..' . '/includes/Variables/Comment_ID.php', 'AutomateWoo\\Variable_Customer_Address_Line_1' => __DIR__ . '/../..' . '/includes/Variables/Customer_Address_Line_1.php', 'AutomateWoo\\Variable_Customer_Address_Line_2' => __DIR__ . '/../..' . '/includes/Variables/Customer_Address_Line_2.php', 'AutomateWoo\\Variable_Customer_City' => __DIR__ . '/../..' . '/includes/Variables/Customer_City.php', 'AutomateWoo\\Variable_Customer_Company' => __DIR__ . '/../..' . '/includes/Variables/Customer_Company.php', 'AutomateWoo\\Variable_Customer_Country' => __DIR__ . '/../..' . '/includes/Variables/Customer_Country.php', 'AutomateWoo\\Variable_Customer_Email' => __DIR__ . '/../..' . '/includes/Variables/Customer_Email.php', 'AutomateWoo\\Variable_Customer_First_Name' => __DIR__ . '/../..' . '/includes/Variables/Customer_First_Name.php', 'AutomateWoo\\Variable_Customer_Full_Name' => __DIR__ . '/../..' . '/includes/Variables/Customer_Full_Name.php', 'AutomateWoo\\Variable_Customer_Generate_Coupon' => __DIR__ . '/../..' . '/includes/Variables/Customer_Generate_Coupon.php', 'AutomateWoo\\Variable_Customer_Last_Name' => __DIR__ . '/../..' . '/includes/Variables/Customer_Last_Name.php', 'AutomateWoo\\Variable_Customer_Meta' => __DIR__ . '/../..' . '/includes/Variables/Customer_Meta.php', 'AutomateWoo\\Variable_Customer_Order_Count' => __DIR__ . '/../..' . '/includes/Variables/Customer_Order_Count.php', 'AutomateWoo\\Variable_Customer_Phone' => __DIR__ . '/../..' . '/includes/Variables/Customer_Phone.php', 'AutomateWoo\\Variable_Customer_Postcode' => __DIR__ . '/../..' . '/includes/Variables/Customer_Postcode.php', 'AutomateWoo\\Variable_Customer_State' => __DIR__ . '/../..' . '/includes/Variables/Customer_State.php', 'AutomateWoo\\Variable_Customer_Tags' => __DIR__ . '/../..' . '/includes/Variables/Customer_Tags.php', 'AutomateWoo\\Variable_Customer_Total_Spent' => __DIR__ . '/../..' . '/includes/Variables/Customer_Total_Spent.php', 'AutomateWoo\\Variable_Customer_Unsubscribe_URL' => __DIR__ . '/../..' . '/includes/Variables/Customer_Unsubscribe_URL.php', 'AutomateWoo\\Variable_Customer_User_ID' => __DIR__ . '/../..' . '/includes/Variables/Customer_User_ID.php', 'AutomateWoo\\Variable_Customer_Username' => __DIR__ . '/../..' . '/includes/Variables/Customer_Username.php', 'AutomateWoo\\Variable_Download_File_Name' => __DIR__ . '/../..' . '/includes/Variables/Download_File_Name.php', 'AutomateWoo\\Variable_Download_URL' => __DIR__ . '/../..' . '/includes/Variables/Download_URL.php', 'AutomateWoo\\Variable_Guest_Email' => __DIR__ . '/../..' . '/includes/Variables/Guest_Email.php', 'AutomateWoo\\Variable_Guest_First_Name' => __DIR__ . '/../..' . '/includes/Variables/Guest_First_Name.php', 'AutomateWoo\\Variable_Guest_Generate_Coupon' => __DIR__ . '/../..' . '/includes/Variables/Guest_Generate_Coupon.php', 'AutomateWoo\\Variable_Guest_Last_Name' => __DIR__ . '/../..' . '/includes/Variables/Guest_Last_Name.php', 'AutomateWoo\\Variable_Membership_Date_Expires' => __DIR__ . '/../..' . '/includes/Variables/Membership_Date_Expires.php', 'AutomateWoo\\Variable_Membership_Date_Started' => __DIR__ . '/../..' . '/includes/Variables/Membership_Date_Started.php', 'AutomateWoo\\Variable_Membership_ID' => __DIR__ . '/../..' . '/includes/Variables/Membership_ID.php', 'AutomateWoo\\Variable_Membership_Meta' => __DIR__ . '/../..' . '/includes/Variables/Membership_Meta.php', 'AutomateWoo\\Variable_Membership_Plan_ID' => __DIR__ . '/../..' . '/includes/Variables/Membership_Plan_ID.php', 'AutomateWoo\\Variable_Membership_Plan_Name' => __DIR__ . '/../..' . '/includes/Variables/Membership_Plan_Name.php', 'AutomateWoo\\Variable_Membership_Renewal_URL' => __DIR__ . '/../..' . '/includes/Variables/Membership_Renewal_URL.php', 'AutomateWoo\\Variable_Membership_Status' => __DIR__ . '/../..' . '/includes/Variables/Membership_Status.php', 'AutomateWoo\\Variable_Order_Admin_Url' => __DIR__ . '/../..' . '/includes/Variables/Order_Admin_Url.php', 'AutomateWoo\\Variable_Order_Billing_Address' => __DIR__ . '/../..' . '/includes/Variables/Order_Billing_Address.php', 'AutomateWoo\\Variable_Order_Billing_Phone' => __DIR__ . '/../..' . '/includes/Variables/Order_Billing_Phone.php', 'AutomateWoo\\Variable_Order_Cross_Sells' => __DIR__ . '/../..' . '/includes/Variables/Order_Cross_Sells.php', 'AutomateWoo\\Variable_Order_Customer_Details' => __DIR__ . '/../..' . '/includes/Variables/Order_Customer_Details.php', 'AutomateWoo\\Variable_Order_Customer_Note' => __DIR__ . '/../..' . '/includes/Variables/Order_Customer_Note.php', 'AutomateWoo\\Variable_Order_Date' => __DIR__ . '/../..' . '/includes/Variables/Order_Date.php', 'AutomateWoo\\Variable_Order_Date_Shipped' => __DIR__ . '/../..' . '/includes/Variables/Order_Date_Shipped.php', 'AutomateWoo\\Variable_Order_ID' => __DIR__ . '/../..' . '/includes/Variables/Order_ID.php', 'AutomateWoo\\Variable_Order_Item_Attribute' => __DIR__ . '/../..' . '/includes/Variables/Order_Item_Attribute.php', 'AutomateWoo\\Variable_Order_Item_Meta' => __DIR__ . '/../..' . '/includes/Variables/Order_Item_Meta.php', 'AutomateWoo\\Variable_Order_Item_Quantity' => __DIR__ . '/../..' . '/includes/Variables/Order_Item_Quantity.php', 'AutomateWoo\\Variable_Order_Items' => __DIR__ . '/../..' . '/includes/Variables/Order_Items.php', 'AutomateWoo\\Variable_Order_Itemscount' => __DIR__ . '/../..' . '/includes/Variables/Order_Itemscount.php', 'AutomateWoo\\Variable_Order_Meta' => __DIR__ . '/../..' . '/includes/Variables/Order_Meta.php', 'AutomateWoo\\Variable_Order_Meta_Date' => __DIR__ . '/../..' . '/includes/Variables/Order_Meta_Date.php', 'AutomateWoo\\Variable_Order_Note_Content' => __DIR__ . '/../..' . '/includes/Variables/Order_Note_Content.php', 'AutomateWoo\\Variable_Order_Number' => __DIR__ . '/../..' . '/includes/Variables/Order_Number.php', 'AutomateWoo\\Variable_Order_Payment_Method' => __DIR__ . '/../..' . '/includes/Variables/Order_Payment_Method.php', 'AutomateWoo\\Variable_Order_Payment_Url' => __DIR__ . '/../..' . '/includes/Variables/Order_Payment_Url.php', 'AutomateWoo\\Variable_Order_Related_Products' => __DIR__ . '/../..' . '/includes/Variables/Order_Related_Products.php', 'AutomateWoo\\Variable_Order_Reorder_Url' => __DIR__ . '/../..' . '/includes/Variables/Order_Reorder_Url.php', 'AutomateWoo\\Variable_Order_Shipping_Address' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Address.php', 'AutomateWoo\\Variable_Order_Shipping_Address_Line_1' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Address_Line_1.php', 'AutomateWoo\\Variable_Order_Shipping_Address_Line_2' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Address_Line_2.php', 'AutomateWoo\\Variable_Order_Shipping_City' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_City.php', 'AutomateWoo\\Variable_Order_Shipping_Company_Name' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Company_Name.php', 'AutomateWoo\\Variable_Order_Shipping_Country' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Country.php', 'AutomateWoo\\Variable_Order_Shipping_First_Name' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_First_Name.php', 'AutomateWoo\\Variable_Order_Shipping_Last_Name' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Last_Name.php', 'AutomateWoo\\Variable_Order_Shipping_Method' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Method.php', 'AutomateWoo\\Variable_Order_Shipping_Postcode' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Postcode.php', 'AutomateWoo\\Variable_Order_Shipping_Provider' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_Provider.php', 'AutomateWoo\\Variable_Order_Shipping_State' => __DIR__ . '/../..' . '/includes/Variables/Order_Shipping_State.php', 'AutomateWoo\\Variable_Order_Status' => __DIR__ . '/../..' . '/includes/Variables/Order_Status.php', 'AutomateWoo\\Variable_Order_Subtotal' => __DIR__ . '/../..' . '/includes/Variables/Order_Subtotal.php', 'AutomateWoo\\Variable_Order_Total' => __DIR__ . '/../..' . '/includes/Variables/Order_Total.php', 'AutomateWoo\\Variable_Order_Tracking_Number' => __DIR__ . '/../..' . '/includes/Variables/Order_Tracking_Number.php', 'AutomateWoo\\Variable_Order_Tracking_Url' => __DIR__ . '/../..' . '/includes/Variables/Order_Tracking_Url.php', 'AutomateWoo\\Variable_Order_View_Url' => __DIR__ . '/../..' . '/includes/Variables/Order_View_Url.php', 'AutomateWoo\\Variable_Product_Add_To_Cart_Url' => __DIR__ . '/../..' . '/includes/Variables/Product_Add_To_Cart_Url.php', 'AutomateWoo\\Variable_Product_Current_Price' => __DIR__ . '/../..' . '/includes/Variables/Product_Current_Price.php', 'AutomateWoo\\Variable_Product_Description' => __DIR__ . '/../..' . '/includes/Variables/Product_Description.php', 'AutomateWoo\\Variable_Product_Featured_Image' => __DIR__ . '/../..' . '/includes/Variables/Product_Featured_Image.php', 'AutomateWoo\\Variable_Product_ID' => __DIR__ . '/../..' . '/includes/Variables/Product_ID.php', 'AutomateWoo\\Variable_Product_Meta' => __DIR__ . '/../..' . '/includes/Variables/Product_Meta.php', 'AutomateWoo\\Variable_Product_Meta_Date' => __DIR__ . '/../..' . '/includes/Variables/Product_Meta_Date.php', 'AutomateWoo\\Variable_Product_Parent_Sku' => __DIR__ . '/../..' . '/includes/Variables/Product_Parent_Sku.php', 'AutomateWoo\\Variable_Product_Permalink' => __DIR__ . '/../..' . '/includes/Variables/Product_Permalink.php', 'AutomateWoo\\Variable_Product_Regular_Price' => __DIR__ . '/../..' . '/includes/Variables/Product_Regular_Price.php', 'AutomateWoo\\Variable_Product_Short_Description' => __DIR__ . '/../..' . '/includes/Variables/Product_Short_Description.php', 'AutomateWoo\\Variable_Product_Sku' => __DIR__ . '/../..' . '/includes/Variables/Product_Sku.php', 'AutomateWoo\\Variable_Product_Title' => __DIR__ . '/../..' . '/includes/Variables/Product_Title.php', 'AutomateWoo\\Variable_Refund_Amount' => __DIR__ . '/../..' . '/includes/Variables/Refund_Amount.php', 'AutomateWoo\\Variable_Refund_Reason' => __DIR__ . '/../..' . '/includes/Variables/Refund_Reason.php', 'AutomateWoo\\Variable_Review_Content' => __DIR__ . '/../..' . '/includes/Variables/Review_Content.php', 'AutomateWoo\\Variable_Review_Rating' => __DIR__ . '/../..' . '/includes/Variables/Review_Rating.php', 'AutomateWoo\\Variable_Shop_Admin_Email' => __DIR__ . '/../..' . '/includes/Variables/Shop_Admin_Email.php', 'AutomateWoo\\Variable_Shop_Current_Datetime' => __DIR__ . '/../..' . '/includes/Variables/Shop_Current_Datetime.php', 'AutomateWoo\\Variable_Shop_Products' => __DIR__ . '/../..' . '/includes/Variables/Shop_Products.php', 'AutomateWoo\\Variable_Shop_Tagline' => __DIR__ . '/../..' . '/includes/Variables/Shop_Tagline.php', 'AutomateWoo\\Variable_Shop_Title' => __DIR__ . '/../..' . '/includes/Variables/Shop_Title.php', 'AutomateWoo\\Variable_Shop_Url' => __DIR__ . '/../..' . '/includes/Variables/Shop_Url.php', 'AutomateWoo\\Variable_Subscription_Admin_Url' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Admin_Url.php', 'AutomateWoo\\Variable_Subscription_Billing_Address' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Billing_Address.php', 'AutomateWoo\\Variable_Subscription_Change_Payment_Method_Url' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Change_Payment_Method_Url.php', 'AutomateWoo\\Variable_Subscription_Early_Renewal_Url' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Early_Renewal_Url.php', 'AutomateWoo\\Variable_Subscription_End_Date' => __DIR__ . '/../..' . '/includes/Variables/Subscription_End_Date.php', 'AutomateWoo\\Variable_Subscription_ID' => __DIR__ . '/../..' . '/includes/Variables/Subscription_ID.php', 'AutomateWoo\\Variable_Subscription_Items' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Items.php', 'AutomateWoo\\Variable_Subscription_Last_Payment_Date' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Last_Payment_Date.php', 'AutomateWoo\\Variable_Subscription_Meta' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Meta.php', 'AutomateWoo\\Variable_Subscription_Next_Payment_Date' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Next_Payment_Date.php', 'AutomateWoo\\Variable_Subscription_Payment_Method' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Payment_Method.php', 'AutomateWoo\\Variable_Subscription_Shipping_Address' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Shipping_Address.php', 'AutomateWoo\\Variable_Subscription_Start_Date' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Start_Date.php', 'AutomateWoo\\Variable_Subscription_Status' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Status.php', 'AutomateWoo\\Variable_Subscription_Total' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Total.php', 'AutomateWoo\\Variable_Subscription_Trial_End_Date' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Trial_End_Date.php', 'AutomateWoo\\Variable_Subscription_View_Order_Url' => __DIR__ . '/../..' . '/includes/Variables/Subscription_View_Order_Url.php', 'AutomateWoo\\Variable_Wishlist_Items' => __DIR__ . '/../..' . '/includes/Variables/Wishlist_Items.php', 'AutomateWoo\\Variable_Wishlist_Itemscount' => __DIR__ . '/../..' . '/includes/Variables/Wishlist_Itemscount.php', 'AutomateWoo\\Variable_Wishlist_View_Link' => __DIR__ . '/../..' . '/includes/Variables/Wishlist_View_Link.php', 'AutomateWoo\\Variables' => __DIR__ . '/../..' . '/includes/Variables.php', 'AutomateWoo\\Variables\\AbstractBookingTime' => __DIR__ . '/../..' . '/includes/Variables/AbstractBookingTime.php', 'AutomateWoo\\Variables\\AbstractTime' => __DIR__ . '/../..' . '/includes/Variables/AbstractTime.php', 'AutomateWoo\\Variables\\BookingCost' => __DIR__ . '/../..' . '/includes/Variables/BookingCost.php', 'AutomateWoo\\Variables\\BookingEndDate' => __DIR__ . '/../..' . '/includes/Variables/BookingEndDate.php', 'AutomateWoo\\Variables\\BookingEndTime' => __DIR__ . '/../..' . '/includes/Variables/BookingEndTime.php', 'AutomateWoo\\Variables\\BookingId' => __DIR__ . '/../..' . '/includes/Variables/BookingId.php', 'AutomateWoo\\Variables\\BookingPersons' => __DIR__ . '/../..' . '/includes/Variables/BookingPersons.php', 'AutomateWoo\\Variables\\BookingResource' => __DIR__ . '/../..' . '/includes/Variables/BookingResource.php', 'AutomateWoo\\Variables\\BookingStartDate' => __DIR__ . '/../..' . '/includes/Variables/BookingStartDate.php', 'AutomateWoo\\Variables\\BookingStartTime' => __DIR__ . '/../..' . '/includes/Variables/BookingStartTime.php', 'AutomateWoo\\Variables\\BookingStatus' => __DIR__ . '/../..' . '/includes/Variables/BookingStatus.php', 'AutomateWoo\\Variables\\CartId' => __DIR__ . '/../..' . '/includes/Variables/CartId.php', 'AutomateWoo\\Variables\\CommentAuthorName' => __DIR__ . '/../..' . '/includes/Variables/CommentAuthorName.php', 'AutomateWoo\\Variables\\Customer_Points' => __DIR__ . '/../..' . '/includes/Variables/Customer_Points.php', 'AutomateWoo\\Variables\\Order_Date_Completed' => __DIR__ . '/../..' . '/includes/Variables/Order_Date_Completed.php', 'AutomateWoo\\Variables\\Order_Date_Paid' => __DIR__ . '/../..' . '/includes/Variables/Order_Date_Paid.php', 'AutomateWoo\\Variables\\Shop\\ShopUrl' => __DIR__ . '/../..' . '/includes/Variables/Shop/ShopUrl.php', 'AutomateWoo\\Variables\\Subscription_Item_Attribute' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Item_Attribute.php', 'AutomateWoo\\Variables\\Subscription_Item_Meta' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Item_Meta.php', 'AutomateWoo\\Variables\\Subscription_Item_Quantity' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Item_Quantity.php', 'AutomateWoo\\Variables\\Subscription_Payment_Count' => __DIR__ . '/../..' . '/includes/Variables/Subscription_Payment_Count.php', 'AutomateWoo\\Variables_Processor' => __DIR__ . '/../..' . '/includes/Variables_Processor.php', 'AutomateWoo\\WC_Emails' => __DIR__ . '/../..' . '/includes/WC_Emails.php', 'AutomateWoo\\Wishlist' => __DIR__ . '/../..' . '/includes/Wishlist.php', 'AutomateWoo\\Wishlists' => __DIR__ . '/../..' . '/includes/Wishlists.php', 'AutomateWoo\\WooCommerce_Blocks_Integration' => __DIR__ . '/../..' . '/includes/WooCommerce_Blocks_Integration.php', 'AutomateWoo\\WooCommerce_Payments_Integration' => __DIR__ . '/../..' . '/includes/WooCommerce_Payments_Integration.php', 'AutomateWoo\\Workflow' => __DIR__ . '/../..' . '/includes/Workflow.php', 'AutomateWoo\\Workflow_Background_Process_Helper' => __DIR__ . '/../..' . '/includes/Workflow_Background_Process_Helper.php', 'AutomateWoo\\Workflow_Email' => __DIR__ . '/../..' . '/includes/Workflow_Email.php', 'AutomateWoo\\Workflow_Fatal_Error_Monitor' => __DIR__ . '/../..' . '/includes/Workflow_Fatal_Error_Monitor.php', 'AutomateWoo\\Workflow_Location' => __DIR__ . '/../..' . '/includes/Workflow_Location.php', 'AutomateWoo\\Workflow_Query' => __DIR__ . '/../..' . '/includes/Workflow_Query.php', 'AutomateWoo\\Workflows' => __DIR__ . '/../..' . '/includes/Workflows.php', 'AutomateWoo\\Workflows\\Factory' => __DIR__ . '/../..' . '/includes/Workflows/Factory.php', 'AutomateWoo\\Workflows\\Presets\\ArrayPreset' => __DIR__ . '/../..' . '/includes/Workflows/Presets/ArrayPreset.php', 'AutomateWoo\\Workflows\\Presets\\Parser\\ParserException' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Parser/ParserException.php', 'AutomateWoo\\Workflows\\Presets\\Parser\\PresetParser' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Parser/PresetParser.php', 'AutomateWoo\\Workflows\\Presets\\Parser\\PresetParserInterface' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Parser/PresetParserInterface.php', 'AutomateWoo\\Workflows\\Presets\\PresetInterface' => __DIR__ . '/../..' . '/includes/Workflows/Presets/PresetInterface.php', 'AutomateWoo\\Workflows\\Presets\\PresetService' => __DIR__ . '/../..' . '/includes/Workflows/Presets/PresetService.php', 'AutomateWoo\\Workflows\\Presets\\Storage\\FileStorage' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Storage/FileStorage.php', 'AutomateWoo\\Workflows\\Presets\\Storage\\PHPFileStorage' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Storage/PHPFileStorage.php', 'AutomateWoo\\Workflows\\Presets\\Storage\\PresetStorageInterface' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Storage/PresetStorageInterface.php', 'AutomateWoo\\Workflows\\Presets\\Storage\\StorageException' => __DIR__ . '/../..' . '/includes/Workflows/Presets/Storage/StorageException.php', 'AutomateWoo\\Workflows\\Status' => __DIR__ . '/../..' . '/includes/Workflows/Status.php', 'AutomateWoo\\Workflows\\TimingDescriptionGenerator' => __DIR__ . '/../..' . '/includes/Workflows/TimingDescriptionGenerator.php', 'AutomateWoo\\Workflows\\VariableParsing\\ExcludedParsedVariable' => __DIR__ . '/../..' . '/includes/Workflows/VariableParsing/ExcludedParsedVariable.php', 'AutomateWoo\\Workflows\\VariableParsing\\ParsedVariable' => __DIR__ . '/../..' . '/includes/Workflows/VariableParsing/ParsedVariable.php', 'AutomateWoo\\Workflows\\VariableParsing\\VariableParser' => __DIR__ . '/../..' . '/includes/Workflows/VariableParsing/VariableParser.php', 'AutomateWoo_Legacy' => __DIR__ . '/../..' . '/includes/AutomateWoo_Legacy.php', 'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace AutomateWoo {
    /**
     * @var Workflow $workflow
     */
    $option_base = 'aw_workflow_data[workflow_options]';
}
namespace AutomateWoo {
    /**
     * @var Log $log
     */
    $notes = $log->get_notes();
}
namespace AutomateWoo {
    /**
     * @var Queued_Event $event
     */
    $data_layer = $event->get_data_layer();
}
namespace AutomateWoo {
    /**
     * @var Workflow $workflow
     * @var Trigger  $current_trigger
     */
    // Group triggers
    $trigger_list = [];
}
namespace AutomateWoo {
    /**
     * @var $iframe_url string
     * @var $type string
     * @var $email_subject string
     * @var $template string
     * @var $args array
     */
    $test_emails = get_user_meta(get_current_user_id(), 'automatewoo_email_preview_test_emails', true);
}
namespace {
    \define('AUTOMATEWOO_SLUG', 'automatewoo');
    \define('AUTOMATEWOO_VERSION', '5.6.7');
    // WRCS: DEFINED_VERSION.
    \define('AUTOMATEWOO_FILE', __FILE__);
    \define('AUTOMATEWOO_PATH', \dirname(__FILE__));
    \define('AUTOMATEWOO_MIN_PHP_VER', '7.2.0');
    \define('AUTOMATEWOO_MIN_WP_VER', '5.9');
    // IMPORTANT: If AUTOMATEWOO_MIN_WC_VER is updated, AW Refer a friend (PHP Unit Tests) should be updated accordingly
    // See https://github.com/woocommerce/automatewoo-referrals/blob/684a6d7f1e33359553b3b681b32cb4bad8d53089/.github/workflows/php-unit-tests.yml#L34-L40
    \define('AUTOMATEWOO_MIN_WC_VER', '6.7.0');
    \define("ACTIVECAMPAIGN_URL", "");
    \define("ACTIVECAMPAIGN_API_KEY", "");
    // phpcs:disable WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
    /**
     * For backwards compatible.
     *
     * @deprecated
     *
     * @return AutomateWoo
     */
    function AutomateWoo()
    {
    }
    /**
     * Access the plugin singleton with this.
     *
     * @return AutomateWoo
     */
    function AW()
    {
    }
    // phpcs:ignoreFile
    /**
     * Update to 2.6 - Workflow Rules
     */
    $workflows_query = new \AutomateWoo\Workflow_Query();
    function _aw_convert_tag_slugs_to_ids($tag_slugs)
    {
    }
    /**
     * Wrapper for wc_get_products()
     *
     * - Adds order by by popularity option
     * - Makes 'status' default to 'publish'
     *
     * @since 4.4.0
     *
     * @param array $args
     *
     * @return array|stdClass|WC_Product[]
     */
    function aw_get_products($args)
    {
    }
    /**
     * Filters the WC get products query args.
     *
     * Adds orderby popularity option.
     *
     * @since 4.4.0
     *
     * @param array $query      Args for WP_Query.
     * @param array $query_vars Query vars from WC_Product_Query.
     *
     * @return array
     */
    function aw_filter_get_products_query_args($query, $query_vars)
    {
    }
    /**
     * Function that returns an array containing the IDs of the recent products.
     *
     * @since 2.1.0
     *
     * @param int $limit
     * @return array
     */
    function aw_get_recent_product_ids($limit = -1)
    {
    }
    /**
     * Function that returns an array containing the IDs of the recent products.
     *
     * @since 3.2.5
     *
     * @param int $limit
     * @return array
     */
    function aw_get_top_selling_product_ids($limit = -1)
    {
    }
    /**
     * Remove unreviewable products from an array of product objects.
     *
     * @param \WC_Product[] $products
     *
     * @return \WC_Product[]
     *
     * @since 4.6.0
     */
    function aw_get_reviewable_products($products)
    {
    }
    /**
     * Simplified function for third-parties.
     *
     * @since 4.2
     *
     * @param string|int $email_or_user_id
     * @return bool
     */
    function aw_is_customer_opted_in($email_or_user_id)
    {
    }
    /**
     * @return int
     */
    function aw_get_user_count()
    {
    }
    /**
     * Use if accuracy is not important, count is cached for a week
     * @return int
     */
    function aw_get_user_count_rough()
    {
    }
    /**
     * @since 4.3
     *
     * @return AutomateWoo\Customer|bool
     */
    function aw_get_logged_in_customer()
    {
    }
    /**
     * Gets the user's first order.
     *
     * @param string|int   $email_or_user_id User email or id.
     * @param string|array $status           Order status we want to query.
     *                                       Defaults to paid statuses.
     *
     * @since 4.4
     *
     * @return bool|WC_Order
     */
    function aw_get_customer_first_order($email_or_user_id, $status = '')
    {
    }
    /**
     * Gets a variable from the $_GET array but checks if it's set first.
     *
     * @since 4.4.0
     *
     * @param string $param
     *
     * @return mixed
     */
    function aw_get_url_var($param)
    {
    }
    /**
     * Gets a variable from the $_POST array but checks if it's set first.
     *
     * @since 4.4.0
     *
     * @param string $param
     *
     * @return mixed
     */
    function aw_get_post_var($param)
    {
    }
    /**
     * Gets a variable from the $_REQUEST array but checks if it's set first.
     *
     * @param $param
     * @return mixed
     */
    function aw_request($param)
    {
    }
    /**
     * Clean variables using sanitize_text_field. Arrays are cleaned recursively.
     * Non-scalar values are ignored.
     * @deprecated
     * @param string|array $var
     * @return string|array
     */
    function aw_clean($var)
    {
    }
    /**
     * @deprecated
     * @param $email
     * @return string
     */
    function aw_clean_email($email)
    {
    }
    /**
     * @param $type string
     * @param $item
     *
     * @return mixed item of false
     */
    function aw_validate_data_item($type, $item)
    {
    }
    /**
     * This is much like wc_get_template() but won't fail if the default template file is missing
     *
     * @param string $template_name
     * @param array $imported_variables (default: array())
     * @param string $template_path (default: '')
     * @param string $default_path (default: '')
     */
    function aw_get_template($template_name, $imported_variables = [], $template_path = '', $default_path = '')
    {
    }
    /**
     * @deprecated
     * @param int $timestamp
     * @param bool|int $max_diff
     * @param bool $convert_from_gmt
     * @return string
     */
    function aw_display_date($timestamp, $max_diff = \false, $convert_from_gmt = \true)
    {
    }
    /**
     * @deprecated
     * @param int $timestamp
     * @param bool|int $max_diff
     * @param bool $convert_from_gmt If its gmt convert it to site time
     * @return string|false
     */
    function aw_display_time($timestamp, $max_diff = \false, $convert_from_gmt = \true)
    {
    }
    /**
     * @param $length int
     * @param bool $case_sensitive When false only lowercase letters will be included
     * @param bool $more_numbers
     * @return string
     */
    function aw_generate_key($length = 25, $case_sensitive = \true, $more_numbers = \false)
    {
    }
    /**
     * Generates a random key string for unique coupons.
     *
     * Doesn't use ambiguous characters like: 0 o i l 1.
     * Doesn't run any queries to check if the coupon is actually unique.
     *
     * @since 4.3.0
     *
     * @param int $length
     * @return string
     */
    function aw_generate_coupon_key($length = 10)
    {
    }
    /**
     * @param $price
     * @return float
     */
    function aw_price_to_float($price)
    {
    }
    /**
     * Get status to use when counting customer orders.
     *
     * This function will never return an empty array.
     *
     * @param bool $include_prefix
     *
     * @return array
     *
     * @since 2.7.1
     */
    function aw_get_counted_order_statuses($include_prefix = \true)
    {
    }
    /**
     * @since 3.5.1
     * @param string $status
     * @return string
     */
    function aw_add_order_status_prefix($status)
    {
    }
    /**
     * @param $order WC_Order
     * @return array
     */
    function aw_get_order_cross_sells($order)
    {
    }
    /**
     * @param $array
     * @param $value
     * @return void
     */
    function aw_array_remove_value(&$array, $value)
    {
    }
    /**
     * Removes an item by key from array and returns its value.
     *
     * @param $array
     * @param $key
     * @return mixed
     */
    function aw_array_extract(&$array, $key)
    {
    }
    /**
     * Move an array item by key to the end of the array.
     *
     * @param array $array
     * @param string $key
     *
     * @return array
     */
    function aw_array_move_to_end($array, $key)
    {
    }
    /**
     * str_replace but limited to one replacement
     * @param string$subject
     * @param string$find
     * @param string $replace
     * @return string
     */
    function aw_str_replace_first_match($subject, $find, $replace = '')
    {
    }
    /**
     * @deprecated
     * @param string $subject
     * @param string $find
     * @param string $replace
     * @return string
     */
    function aw_str_replace_start($subject, $find, $replace = '')
    {
    }
    /**
     * Determine if a string starts with another string.
     *
     * @since 4.6.0
     *
     * @param string $haystack
     * @param string $needle
     *
     * @return bool
     */
    function aw_str_starts_with($haystack, $needle)
    {
    }
    /**
     * Determine if a string ends with another string.
     *
     * @since 4.6.0
     *
     * @param string $haystack
     * @param string $needle
     *
     * @return bool
     */
    function aw_str_ends_with($haystack, $needle)
    {
    }
    /**
     * Define cache blocking constants if not already defined
     * @since 3.6.0
     */
    function aw_set_nocache_constants()
    {
    }
    /**
     * Wrapper for nocache_headers which also disables page caching but allows object caching.
     *
     * @since 4.4.0
     */
    function aw_no_page_cache()
    {
    }
    /**
     * Get sanitized URL query args.
     *
     * @since 3.6.0
     * @param array $excluded Option to exclude some params
     * @return array
     */
    function aw_get_query_args($excluded = [])
    {
    }
    /**
     * @since 3.6.1
     * @param string $country_code
     * @return string|bool
     */
    function aw_get_country_name($country_code)
    {
    }
    /**
     * @since 3.6.1
     * @param string $country_code
     * @param string $state_code
     * @return string|bool
     */
    function aw_get_state_name($country_code, $state_code)
    {
    }
    /**
     * @since 3.8
     * @param mixed $val
     * @return int
     */
    function aw_bool_int($val)
    {
    }
    /**
     * @since 4.0
     * @param string $email
     * @return string
     */
    function aw_anonymize_email($email)
    {
    }
    /**
     * @since 4.0
     * @param string $part
     * @return string
     */
    function _aw_anonymize_email_part($part)
    {
    }
    /**
     * @since 4.0
     * @param $email
     * @return bool
     */
    function aw_is_email_anonymized($email)
    {
    }
    /**
     * @since 4.1
     * @param $thing
     * @return bool
     */
    function aw_is_error($thing)
    {
    }
    /**
     * Version can have a max of 3 parts, e.g. 4.1.0.1, isn't supported.
     * Max value of a single part is 999.
     *
     * @since 4.2
     * @param string $version
     * @return int
     */
    function aw_version_str_to_int($version)
    {
    }
    /**
     * @since 4.2
     * @param int $version
     * @return string
     */
    function aw_version_int_to_str($version)
    {
    }
    /**
     * Converts a 3-part version to a user-friendly 2-part format if possible.
     *
     * (For example, 5.1.0 => 5.1, but 5.1.1 => 5.1.1, and 5.0 => 5.0).
     *
     * @since 4.9.5
     * @param $version
     * return $string
     */
    function aw_prettify_version($version)
    {
    }
    /**
     * Converts a date object to a mysql formatted string.
     *
     * WC_Datetime objects are converted to UTC timezone.
     *
     * @since 4.4.0
     *
     * @param WC_DateTime|DateTime|AutomateWoo\DateTime $date
     *
     * @return string|false
     */
    function aw_date_to_mysql_string($date)
    {
    }
    /**
     * Convert a date object to an instance of AutomateWoo\DateTime.
     *
     * WC_Datetime objects are converted to UTC timezone.
     *
     * @since 4.4.0
     *
     * @param WC_DateTime|DateTime|AutomateWoo\DateTime|string $input
     *
     * @return AutomateWoo\DateTime|false
     */
    function aw_normalize_date($input)
    {
    }
    /**
     * Convert a date string to a WC_DateTime.
     *
     * Based on wc_string_to_datetime(), introduced in WooCommerce 3.1.0.
     *
     * @since  4.4.0
     * @param  string $time_string Time string.
     * @return WC_DateTime
     */
    function aw_string_to_wc_datetime($time_string)
    {
    }
    /**
     * Get an array of post statuses that a post can have while being a draft.
     *
     * Note that 'draft' is deliberately not included based on how WC uses this status.
     *
     * @since 4.4.0
     *
     * @return array
     */
    function aw_get_draft_post_statuses()
    {
    }
    /**
     * Get an array of draft order statuses (with or without prefix).
     *
     * @since 5.5.23
     *
     * @return array
     */
    function aw_get_draft_order_statuses()
    {
    }
    /**
     * Escape JSON for use on HTML or attribute text nodes.
     *
     * Copy of wc_esc_json() for compatibility.
     *
     * @since 4.8.0
     * @param string $json JSON to escape.
     * @param bool   $html True if escaping for HTML text node, false for attributes. Determines how quotes are handled.
     * @return string Escaped JSON.
     */
    function aw_esc_json($json, $html = \false)
    {
    }
    /**
     * Trigger a deprecated class error.
     *
     * This function should be called in the class file before the class is declared.
     *
     * @since 5.2.0
     *
     * @param string $class_name  The name of the deprecated class.
     * @param string $version     The version the class was deprecated.
     * @param string $replacement The replacement class name.
     */
    function aw_deprecated_class(string $class_name, string $version, $replacement = \null)
    {
    }
    /**
     * @var AW_Admin_Reports_Tab_Abstract             $current_tab
     * @var AutomateWoo\Admin\Controllers\Reports     $controller
     * @var AutomateWoo\Admin_Settings_Tab_Abstract[] $tabs
     */
    $html = $current_tab->output_before_report();
}